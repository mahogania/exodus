<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Syncfusion.Blazor.Gantt</name>
    </assembly>
    <members>
        <member name="T:Syncfusion.Blazor.Gantt.ViewType">
            <summary>
            Specifies view mode for the Gantt Chart, that determines whether tasks are displayed based on projects or resources.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.ViewType.ProjectView">
            <summary>
             Defines project view type.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.ViewType.ResourceView">
            <summary>
            Defines the view type of gantt chart as resource view where the tasks are displayed based on resources.
            </summary> 
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.TimelineViewMode">
            <summary>
            Defines the schedule header mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.TimelineViewMode.None">
            <summary>
            Defines the default mode header.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.TimelineViewMode.Year">
            <summary>
            Defines the year mode header.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.TimelineViewMode.Month">
            <summary>
            Defines the month mode header.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.TimelineViewMode.Week">
            <summary>
            Defines the week mode header.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.TimelineViewMode.Day">
            <summary>
            Defines the day mode header.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.TimelineViewMode.Hour">
            <summary>
            Defines the hour mode header.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.TimelineViewMode.Minutes">
            <summary>
            Defines the minutes mode header.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.ScheduleMode">
            <summary>
            Defines schedule mode of Gantt.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.ScheduleMode.Auto">
            <summary>
            Tasks are displayed in auto scheduled mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.ScheduleMode.Manual">
            <summary>
            Tasks are displayed in manual scheduled mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.ScheduleMode.Custom">
            <summary>
            Both Auto and Manual tasks are render by mapped from data source.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.SplitterView">
            <summary>
            Defines initial view of Gantt.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.SplitterView.Default">
            <summary>
            Shows both grid and chart side of Gantt.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.SplitterView.Grid">
            <summary>
            Shows grid side alone in Gantt.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.SplitterView.Chart">
            <summary>
            Shows chart side alone in Gantt.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.WorkUnit">
            <summary>
            Defines work unit for whole project.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.WorkUnit.Hour">
            <summary>
            Defines unit value of duration as hour.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.WorkUnit.Minute">
            <summary>
            Defines unit value of duration as minute.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.WorkUnit.Day">
            <summary>
            Defines unit value of duration as day.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.DurationUnit">
            <summary>
            Defines duration unit for whole project.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.DurationUnit.Day">
            <summary>
            Defines unit value of duration as day.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.DurationUnit.Minute">
            <summary>
            Defines unit value of duration as minute.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.DurationUnit.Hour">
            <summary>
            Defines unit value of duration as hour.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GridLine">
            <summary>
            To define grid lines in Gantt.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.GridLine.Horizontal">
            <summary>
            Define horizontal lines
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.GridLine.Vertical">
            <summary>
            Define vertical lines
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.GridLine.Both">
            <summary>
            Define both horizontal and vertical lines
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.GridLine.None">
            <summary>
            Define no lines
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.FilterHierarchyMode">
            <summary>
            Defines hierarchy mode on filter action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.FilterHierarchyMode.Parent">
            <summary>
             Filtered records are displayed with its parent records.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.FilterHierarchyMode.Child">
            <summary>
             Filtered records are displayed with its child record.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.FilterHierarchyMode.Both">
            <summary>
             Filtered records are displayed with its both parent and child record.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.FilterHierarchyMode.None">
            <summary>
             Only the filtered records are displayed.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.TooltipTarget">
            <summary>
            Defines tooltip target value.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.TooltipTarget.Timeline">
            <summary>
             Timeline target.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.TooltipTarget.Notes">
            <summary>
             Notes target.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.TooltipTarget.Taskbar">
            <summary>
             Taskbar target.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.TooltipTarget.MileStone">
            <summary>
             MileStone target.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.TooltipTarget.Baseline">
            <summary>
             Baseline target.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.TooltipTarget.ManualTaskbar">
            <summary>
             ManualTaskbar target.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.TooltipTarget.ManualParentTaskbar">
            <summary>
             ManualParentTaskbar target.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.TooltipTarget.PredecessorLine">
            <summary>
            PredecessorLine target.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.TooltipTarget.EventMarker">
            <summary>
             EventMarker target.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.TooltipTarget.Indicator">
            <summary>
            DataMarker target.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.EditMode">
            <summary>
            Defines modes of editing.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.EditMode.Auto">
            <summary>
            Defines Cell editing in TreeGrid and dialog in chart side.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.EditMode.Dialog">
            <summary>
            Defines EditMode as Dialog.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.RowPosition">
            <summary>
            Defines row position for newly added record.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.RowPosition.Top">
            <summary>
            Defines new row position as top of all rows.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.RowPosition.Bottom">
            <summary>
            Defines new row position as bottom of all rows.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.RowPosition.Above">
            <summary>
            Defines new row position as above the selected row.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.RowPosition.Below">
            <summary>
            Defines new row position as below the selected row.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.RowPosition.Child">
            <summary>
            Defines new row position as child to the selected row.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.PredecessorType">
            <summary>
            Defines dependency types.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.PredecessorType.FSType1">
            <summary>
            FSType1.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.PredecessorType.FSType2">
            <summary>
            FSType2.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.PredecessorType.FSType3">
            <summary>
            FSType3.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.PredecessorType.FSType4">
            <summary>
            FSType4.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.PredecessorType.SSType1">
            <summary>
            SSType1.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.PredecessorType.SSType2">
            <summary>
            SSType2.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.PredecessorType.SSType3">
            <summary>
            SSType3.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.PredecessorType.SSType4">
            <summary>
            SSType4.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.PredecessorType.FFType1">
            <summary>
            FFType1.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.PredecessorType.FFType2">
            <summary>
            FFType2.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.PredecessorType.FFType3">
            <summary>
            FFType3.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.PredecessorType.FFType4">
            <summary>
            FFType4.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.PredecessorType.SFType1">
            <summary>
            SFType1.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.PredecessorType.SFType2">
            <summary>
            SFType2.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.PredecessorType.SFType3">
            <summary>
            SFType3.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.PredecessorType.SFType4">
            <summary>
            SFType4.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttDialogFieldType">
            <summary>
            Defines Dialog Field Type of Gantt.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.GanttDialogFieldType.General">
            <summary>
            Tasks are displayed in auto scheduled mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.GanttDialogFieldType.Resources">
            <summary>
            Tasks are displayed in manual scheduled mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.GanttDialogFieldType.Dependency">
            <summary>
            Both Auto and Manual tasks are render by mapped from data source.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.GanttDialogFieldType.Notes">
            <summary>
            Both Auto and Manual tasks are render by mapped from data source.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttTimeSpan">
            <summary>
            Defines TimeSpan Action Type of Gantt.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.GanttTimeSpan.Previoustimespan">
            <summary>
            To update timeline at start point with one unit.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.GanttTimeSpan.Nexttimespan">
            <summary>
            To update timeline at end point with one unit.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.GanttTimeSpan.Both">
            <summary>
            To update timeline at both start and end point while edit the start date and end date
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.GanttTimeSpan.None">
            <summary>
            In editing action, timeline will not update if start date and end date are with in the previous dates Range.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.Action">
            <summary>
            Defines Actions of the Gantt.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Action.Refresh">
            <summary>
            Specifies grid refresh.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Action.Sorting">
            <summary>
            Specifies sorting action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Action.Selection">
            <summary>
            Specifies selection action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Action.Filtering">
            <summary>
            Specifies filtering action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Action.ClearFiltering">
            <summary>
            Specifies clear filtering action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Action.Searching">
            <summary>
            Specifies searching action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Action.RowDragAndDrop">
            <summary>
            Specifies row drag and drop action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Action.Reorder">
            <summary>
            Specifies reorder action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Action.VirtualScroll">
            <summary>
            Specifies virtual scrolling.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Action.BeginEdit">
            <summary>
            Specifies edit begin action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Action.Save">
            <summary>
            Specifies save action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Action.Delete">
            <summary>
            Specifies delete action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Action.Cancel">
            <summary>
            Specifies cancel action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Action.Add">
            <summary>
            Specifies add action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Action.FilterBeforeOpen">
            <summary>
            Specifies filter pop opening.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Action.FilterChoiceRequest">
            <summary>
            Specifies filter choice request action is initiated in checkbox and excel filter.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Action.FilterAfterOpen">
            <summary>
            Specifies filter pop is opened.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Action.FilterSearchBegin">
            <summary>
            Specifies search action in checkbox and excel filter search textbox.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Action.ColumnState">
            <summary>
            Specifies column visibility changed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Action.ExpandAllComplete">
            <summary>
            Specifies expand all action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Action.CollapseAllComplete">
            <summary>
            Specifies collapse all action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Action.BeforeOpenColumnChooser">
            <summary>
            Specifies column chooser is opening.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Action.BeforeZoomIn">
            <summary>
            Specifies BeforeZoomIn action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Action.BeforeZoomOut">
            <summary>
            Specifies BeforeZoomOut action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Action.BeforeZoomToFit">
            <summary>
            Specifies BeforeZoomToFit action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Action.AfterZoomIn">
            <summary>
            Specifies AfterZoomIn action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Action.AfterZoomOut">
            <summary>
            Specifies BeforeZoomOut action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Action.AfterZoomToFit">
            <summary>
            Specifies BeforeZoomToFit action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Action.ValidateLinkedTask">
            <summary>
            Specifies ValidateLinkedTask action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Action.BeforeSave">
            <summary>
            Specifies BeforeSave action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Action.BeforeOpenEditDialog">
            <summary>
            Specifies BeforeOpenEditDialog action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Action.BeforeOpenAddDialog">
            <summary>
            Specifies BeforeOpenAddDialog action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Action.OpenEditDialog">
            <summary>
            Specifies OpenEditDialog action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Action.OpenAddDialog">
            <summary>
            Specifies OpenAddDialog action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Action.BeforeAdd">
            <summary>
            Specifies BeforeAdd action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Action.DialogEditing">
            <summary>
            Specifies DialogEditing action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Action.ActionComplete">
            <summary>
            Specifies ActionComplete action.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.TaskType">
            <summary>
            Defines TaskType of the Gantt.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.TaskType.None">
            <summary>
            Fields are None.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.TaskType.FixedDuration">
            <summary>
            Duration task field will remain constant while updating resource unit or work field
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.TaskType.FixedWork">
            <summary>
            Work field will remain constant while updating resource unit or duration fields.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.TaskType.FixedUnit">
            <summary>
            Resource units will remain constant while updating duration or work field.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.DependencyType">
            <summary>
            Defines predecessors type.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.DependencyType.FS">
            <summary>
             Finish to Start type.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.DependencyType.SS">
            <summary>
             Start to Start type.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.DependencyType.FF">
            <summary>
             Finish to Finish type.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.DependencyType.SF">
            <summary>
             Start to Finish type.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.ZoomAction">
            <summary> 
            Specifies the actions of zoom. 
            </summary> 
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.ZoomAction.ZoomIn">
            <summary> 
            Zoom-in action on the Gantt Chart timeline. 
            </summary> 
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.ZoomAction.ZoomOut">
            <summary> 
            Zoom-out action on the Gantt Chart timeline. 
            </summary> 
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.ZoomAction.ZoomToFit">
            <summary> 
            Shows all taskbars within the current view port of timeline. 
            </summary> 
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttIndicator">
            <summary>
            Class that defines indicator details.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttIndicator.Date">
            <summary>
            Defines the date of indicator.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttIndicator.IconClass">
            <summary>
            Defines the icon class of indicator.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttIndicator.Name">
            <summary>
            Defines the name of indicator.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttIndicator.Tooltip">
            <summary>
            Defines the tooltip of indicator.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttTaskModel">
            <summary>
            Class that defines the taskdata details.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskModel.AutoDuration">
            <summary>
            Defines the auto scheduled task's duration.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskModel.AutoEndDate">
            <summary>
            Defines the auto scheduled task's end date.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskModel.AutoLeft">
            <summary>
            Defines the auto scheduled task's left.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskModel.AutoStartDate">
            <summary>
            Defines the auto scheduled task's start date.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskModel.AutoWidth">
            <summary>
            Defines the auto scheduled task's width.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskModel.BaselineEndDate">
            <summary>
            Defines the baseline enddate of task.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskModel.BaselineLeft">
            <summary>
            Defines the baselineleft of task.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskModel.BaselineStartDate">
            <summary>
            Defines the baseline startdate of task.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskModel.BaselineWidth">
            <summary>
            Defines the baseline width of task.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskModel.CssClass">
            <summary>
            Defines the css class of task.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskModel.Duration">
            <summary>
            Defines the duration of task.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskModel.DurationUnit">
            <summary>
            Defines the duration unit of task.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskModel.DurationString">
            <summary>
            Defines the duration unit string of task.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskModel.EndDate">
            <summary>
            Defines the end date of task.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskModel.Indicators">
            <summary>
            Defines the indicators of task.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskModel.IsAutoSchedule">
            <summary>
            Defines the task is auto schedule-able or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskModel.IsMilestone">
            <summary>
            Defines the task is milestone or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskModel.Left">
            <summary>
            Defines the left of task.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskModel.Notes">
            <summary>
            Defines the notes of task.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskModel.IsExpanded">
            <summary>
            Defines the IsExpanded of task.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskModel.IsSelected">
            <summary>
            Defines the selected state of task.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskModel.ParentId">
            <summary>
            Defines the parent id of task.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskModel.PredecessorsName">
            <summary>
            Defines the predecessors name of task.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskModel.Predecessor">
            <summary>
            Defines the predecessor of task.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskModel.Progress">
            <summary>
            Defines the progress of task.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskModel.ProgressWidth">
            <summary>
            Defines the progress width of task.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskModel.ResourceInfo">
            <summary>
            Defines the resource info of task.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskModel.ResourceNames">
            <summary>
            Defines the resource names of task.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskModel.Row">
            <summary>
            Defines chart row.
            </summary>
            <value>Gantt chart row container.</value>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskModel.RowUniqueID">
            <summary>
            It have taskId for ProjectView and uniqueID for resourceView.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskModel.StartDate">
            <summary>
            Defines the start date of task.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskModel.TaskId">
            <summary>
            Defines the id of task.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskModel.TaskName">
            <summary>
            Defines the name of task.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskModel.TotalDuration">
            <summary>
            Defines the total duration of task.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskModel.TotalProgress">
            <summary>
            Defines the total progress of task.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskModel.UniqueID">
            <summary>
            Defines the unique id of task.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskModel.Width">
            <summary>
            Defines the width of task.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskModel.Work">
            <summary>
            Defines the work of the task.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskModel.TaskType">
            <summary>
            Defines the type of task.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskModel.WorkUnit">
            <summary>
            Defines the work unit of task.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskModel.UID">
            <summary>
            Defines the unique id of task.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskModel.TaskMode">
            <summary>
            Defines the mode of task.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskModel.IsCritical">
            <summary>  
            Gets or sets a value indicating whether the task is critical.  
            </summary>  
            <value>  
            <c>true</c> if the task is critical; otherwise <c>false</c>. The default value is <c>false</c>.  
            </value>  
            <remarks>  
            The critical path in a project is indicated by a single task or a series of tasks in a project. The critical path is the longest sequence of activities that must be finished on time to complete the entire project.  
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskModel.Slack">
            <summary>  
            Represents the total slack of the task.  
            </summary>  
            <value>  
            The number of days between current task end data and the project end date. 
            </value>  
            <remarks>  
            Slack is the amount of time that a task can be delayed without affecting the overall completion of the project. It is calculated as the difference of project end date and current task end date. 
            </remarks> 
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskModel.ResourceId">
            <summary>
            Defines the id of resource.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskModel.ResourceName">
            <summary>
            Defines the name of resource.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskModel.ResourceParentId">
            <summary>
            Defines the parent id of resource.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskPredecessor.From">
            <summary>
            Gets or sets the starting point of the task dependency line in the Gantt chart.  
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskPredecessor.IsDrawn">
            <summary>
            Gets or sets a value indicating whether the task dependency line is drawable in the Gantt chart. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskPredecessor.Offset">
            <summary>
            Gets or sets the offset value for positioning the task dependency line in the Gantt chart. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskPredecessor.OffsetUnit">
            <summary>
            Gets or sets the unit of measurement for the offset value of the task dependency line in the Gantt chart. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskPredecessor.To">
            <summary>
            Gets or sets the target task ID of the task dependency in the Gantt chart. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskPredecessor.Type">
            <summary>
            Gets or sets the type of dependency relationship in the Gantt chart. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskPredecessor.IsCritical">
            <summary>  
            Gets or sets a value indicating whether the task is critical.  
            </summary>  
            <value>  
            <c>true</c> if the task is critical; otherwise <c>false</c>. The default value is <c>false</c>.  
            </value>  
            <remarks>  
            The critical path in a project is indicated by a single task or a series of tasks in a project. The critical path is the longest sequence of activities that must be finished on time to complete the entire project.  
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskPredecessor.Slack">
            <summary>  
            Represents the total slack of the task.  
            </summary>  
            <value>  
            The number of days between current task end data and the project end date. 
            </value>  
            <remarks>  
            Slack is the amount of time that a task can be delayed without affecting the overall completion of the project. It is calculated as the difference of project end date and current task end date. 
            </remarks> 
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttTaskResourceData">
            <summary>
            Represents the details of resources assigned to tasks in the Gantt chart.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskResourceData.Id">
            <summary>
            Represents the unique identifier of a resource in the
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskResourceData.Name">
            <summary>
            Represents the unique identifier of a resource in the Gantt chart. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskResourceData.Unit">
            <summary>
            Represents the unit measurement of a resource in the Gantt chart. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskResourceData.Group">
            <summary>
            Represents the group affiliation of a resource in the Gantt chart. 
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.TaskItemModel`1">
            <inheritdoc cref="T:Syncfusion.Blazor.Gantt.IGanttTaskModel`1"/>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.TaskItemModel`1.IsCritical">
            <inheritdoc/>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.TaskItemModel`1.Slack">
            <inheritdoc/>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.TaskItemModel`1.Left">
            <inheritdoc/>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.TaskItemModel`1.Width">
            <inheritdoc/>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.TaskItemModel`1.IsExpanded">
            <inheritdoc/>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.TaskItemModel`1.ProgressWidth">
            <inheritdoc/>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.TaskItemModel`1.HasChildRecords">
            <inheritdoc/>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.TaskItemModel`1.Level">
            <inheritdoc/>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.TaskItemModel`1.Data">
            <inheritdoc/>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.TaskItemModel`1.Segments">
            <summary>
            Gets the list of Gantt segment data associated with a task.
            </summary>
            <value>
            A list of <see cref="T:Syncfusion.Blazor.Gantt.GanttSegmentData"/> representing the segments of a Gantt task.
            </value>
            <remarks>
            The Segments property provides access to detailed segment information for a Gantt task.
            Segments are used to describe specific portions of a task's timeline, such as interruptions or splits.
            </remarks> 
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.TaskItemModel`1.RowIndex">
            <inheritdoc/>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttTimelineFormatter">
            <summary>
            Defines timeline format details.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTimelineFormatter.Date">
            <summary>
            Defines date to be format.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTimelineFormatter.Format">
            <summary>
            Defines the format of the date.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTimelineFormatter.Tier">
            <summary>
            Defines the tier to be format.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTimelineFormatter.Mode">
            <summary>
            Defines the timeline mode.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttTimelineFormat">
            <summary>
            Defines the timeline format.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTimelineFormat.EndDate">
            <summary>
            Defines end date.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTimelineFormat.Height">
            <summary>
            Defines height.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTimelineFormat.IsWeekend">
            <summary>
            Defines weekend status of timeline.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTimelineFormat.StartDate">
            <summary>
            Defines start date.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTimelineFormat.Value">
            <summary>
            Defines value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTimelineFormat.Width">
            <summary>
            Defines width.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTimelineFormat.Date">
            <summary>
            Defines Date.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.BeforeTooltipRenderEventArgs`1">
            <summary>
            Class that defines beforeTooltipRenderEventArgs.
            </summary>
            <typeparam name="TValue">Specifies the type of BeforeTooltipRenderEventArgs.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.BeforeTooltipRenderEventArgs`1.Data">
            <summary>
            Gets the data associated with this instance.
            </summary>
            <value>
            The data value. The default value is null.
            </value>
            <remarks>
            This property used to store data related to this instance.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.BeforeTooltipRenderEventArgs`1.Target">
            <summary>
            Gets the target element.
            </summary>
            <value>
            The string value representing the target element. The default value is null.
            </value>
            <remarks>
            This property defines the target element that is associated with this instance.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.BeforeTooltipRenderEventArgs`1.Content">
            <summary>
            Defines the content.
            </summary>
            <value>
            A <see cref="T:Microsoft.AspNetCore.Components.RenderFragment"/> that defines the content to be displayed in the tooltip.
            </value>
            <remarks>
            Use this property to specify the content that should be displayed in the tooltip. The content can be defined using a <see cref="T:Microsoft.AspNetCore.Components.RenderFragment"/>.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.BeforeTooltipRenderEventArgs`1.Cancel">
            <summary>
            Cancel the tooltip.
            </summary>
            <value>
            <c>true</c>, if the tooltip can be canceled. Otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.TaskbarEditedEventArgs`1">
            <summary>
            Defines the event arguments of taskbar edited action.
            </summary>
            <typeparam name="T">Specifies the type of TaskbarEditedEventArgs.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.TaskbarEditedEventArgs`1.Action">
            <summary>
            Gets the current action.
            </summary>
            <value>
            The string value representing the current action.
            </value>
            <remarks>
            Use this property to define the current action associated with the instance. The action is specified as a string value.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.TaskbarEditedEventArgs`1.ColumnName">
            <summary>
            Gets the column name.
            </summary>
            <value>
            The string value representing the column name.
            </value>
            <remarks>
            Use this property to define the name of the column associated with the instance. The column name is specified as a string value.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.TaskbarEditedEventArgs`1.Cancel">
            <summary>
            Defines the event cancel status.
            </summary>
            <value>
            <c>true</c>, if the event can be canceled. Otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.TaskbarEditedEventArgs`1.Data">
            <summary>
            Gets the data.
            </summary>
            <value>
            A generic type that specifies the value of data for an editing task in the Gantt chart.
            </value>
            <remarks>
            Use this property to define the data associated with an editing task in the Gantt chart.
            The data is of a generic type.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.TaskbarEditedEventArgs`1.EditingFields">
            <summary>
            Defines the editing fields for a task in the Gantt chart.
            </summary>
            <value>
            A GanttTaskModel that specifies the editing fields for a task in the Gantt chart.
            </value>
            <remarks>
            The EditingFields property represents the fields that can be edited for a task in the Gantt chart.
            It is an instance of the GanttTaskModel class, which contains properties such as task name, start date, end date, duration, and other task-related information.
            By setting the EditingFields property, you can customize the fields that are available for editing in the Gantt chart.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.TaskbarEditedEventArgs`1.PreviousData">
            <summary>
            Gets the previous value of the editing task.
            </summary>
            <value>
            A generic type that specifies the previous value of the data for an editing task in the Gantt chart.
            </value>
            <remarks>
            Use this property to define the previous value of the data associated with an editing task in the Gantt chart.
            The previous value is of a generic type.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.TaskbarEditedEventArgs`1.RecordIndex">
            <summary>
            Gets the index of the edited task.
            </summary>
            <value>
            Accepts a int value that specifies the index of the task being edited in the Gantt chart.
            </value>
            <remarks>
            The RecordIndex property represents the index of the task currently being edited in the GanttChart component.
            It is a zero-based index that indicates the position of the task within the Gantt chart's task collection.
            You can use the RecordIndex property to identify the specific task being edited and perform any necessary operations or validations on it.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.TaskbarEditedEventArgs`1.RoundOffDuration">
            <summary>
            Gets or sets the duration roundoff.
            </summary>
            <value>
            <c>true</c> if the duration will be rounded off; otherwise, <c>false</c>.
            </value>
            <remarks>
            The RoundOffDuration property determines whether the duration will be rounded off.
            If set to <c>true</c>, the duration will be rounded off to the nearest whole number or specified decimal places.
            If set to <c>false</c>, the duration will be displayed as is, without rounding off.
            By default, the RoundOffDuration property is set to <c>false</c>.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.TaskbarEditedEventArgs`1.TaskBarEditAction">
            <summary>
            Gets the type of taskbar edit action.
            </summary>
            <value>
            The string value representing the type of taskbar edit action.
            </value>
            <remarks>
            Use this property to define the type of taskbar edit action associated with the instance.
            The type of taskbar edit action is specified as a string value.
            </remarks>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.RowDOM">
            <summary>
            Handles chart row customization.
            </summary>
            <remarks>
            An instance of this class is passed in QueryChartRowInfo events as argument
            through which the conditional class can be added to chart row.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.RowDOM.#ctor(System.Collections.Generic.List{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Gantt.RowDOM"/> class.
            </summary>
            <param name="classList">class list.</param>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.RowDOM.ClassList">
            <summary>
            Defines class List.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.RowDOM.AddClass(System.String[])">
            <summary>
            Add multiple class names to the specific cell.
            </summary>
            <param name="classList">List of class names.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.RowDOM.AddItem(System.Collections.Generic.List{System.String},System.String[])">
            <summary>
            Add array of values to the list.
            </summary>
            <param name="addTo">Source list to be added.</param>
            <param name="values">Array values to be added to the list.</param>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.ConnectorLine">
            <summary>
            Class that defines connector line object details.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.ConnectorLine.ChildIndex">
            <summary>
             Gets or sets the index of the child.
            </summary>
            <value> 
            An integer representing the index of the child. 
            </value> 
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.ConnectorLine.ChildLeft">
            <summary>
            Defines the child left value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.ConnectorLine.ChildWidth">
            <summary>
            Defines the child width value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.ConnectorLine.ConnectorLineId">
            <summary>
            Defines the connector line ID.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.ConnectorLine.MilestoneChild">
            <summary>
            Defines the milestone child.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.ConnectorLine.MilestoneParent">
            <summary>
            Defines the milestone parent.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.ConnectorLine.ParentIndex">
            <summary>
            Gets or sets the index of the parent.
            </summary>
            <value> 
            An integer representing the index of the parent. 
            </value> 
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.ConnectorLine.ParentLeft">
            <summary>
            Defines the parent left value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.ConnectorLine.ParentWidth">
            <summary>
            Defines the parent width value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.ConnectorLine.RowHeight">
            <summary>
            Defines the row height.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.ConnectorLine.Type">
            <summary>
            Defines the name of the event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.ConnectorLine.ParentIndexInCurrentView">
            <summary>
            Gets or sets the index of the parent within the current view data.
            </summary>
            <value> 
            An integer representing the index of the parent within the current view data. 
            </value> 
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.ConnectorLine.ChildIndexInCurrentView">
            <summary>
            Gets or sets the index of the child within the current view data.
            </summary>
            <value> 
            An integer representing the index of the child within the current view data. 
            </value>  
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.ConnectorLine.IsCritical">
            <summary>  
            Gets or sets a value indicating whether the task is critical.  
            </summary>  
            <value>  
            <c>true</c> if the task is critical; otherwise <c>false</c>. The default value is <c>false</c>.  
            </value>  
            <remarks>  
            The critical path in a project is indicated by a single task or a series of tasks in a project. The critical path is the longest sequence of activities that must be finished on time to complete the entire project.  
            </remarks>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttActionEventArgs`1">
            <summary>
            Class that Gantt Action Event details.
            </summary>
            <typeparam name="TValue">Specifies the type of DateValidation.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttActionEventArgs`1.Action">
            <summary>
            Gets the current action.
            </summary>
            <value>
            The string value representing the current action.
            </value>
            <remarks>
            Use this property to define the current action associated with the instance. The action is specified as a string value.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttActionEventArgs`1.Cancel">
            <summary>
            Cancel the print action.
            </summary>
            <value>
            <c>true</c>, if the print action can be canceled. Otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttActionEventArgs`1.ColumnName">
            <summary>
            Gets the field name of the currently grouped columns.
            </summary>
            <value>
            The string value representing the field name of the currently grouped columns.
            </value>
            <remarks>
            Use this property to define the field name of the columns that are currently grouped.
            The field name is specified as a string value.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttActionEventArgs`1.VisibleColumns">
            <summary>
            Gets or sets the list of visible columns in the column chooser.
            </summary>
            <value>
            A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:Syncfusion.Blazor.Grids.GridColumn"/> objects that specifies the list of visible columns in the column chooser of the Gantt chart.
            </value>
            <remarks>
            Use this property to define the list of visible columns that appear in the column chooser of the Gantt chart.
            The columns are represented as <see cref="T:Syncfusion.Blazor.Grids.GridColumn"/> objects.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttActionEventArgs`1.FromColumns">
            <summary>
            Defines the collection of columns to be moved.
            </summary>
            <value>
            A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:Syncfusion.Blazor.Grids.GridColumn"/> objects that specifies the collection of columns to be moved in the Gantt chart.
            </value>
            <remarks>
            Use this property to define the collection of columns that should be moved in the Gantt chart. 
            The columns are represented as <see cref="T:Syncfusion.Blazor.Grids.GridColumn"/> objects.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttActionEventArgs`1.ToColumn">
            <summary>
            Gets or sets the destination column to place reordered columns.
            </summary>
            <value>
            A <see cref="T:Syncfusion.Blazor.Grids.GridColumn"/> object that specifies the destination column to place reordered columns in the Gantt chart.
            </value>
            <remarks>
            Use this property to define the destination column where the reordered columns should be placed in the Gantt chart. 
            The destination column is represented as a <see cref="T:Syncfusion.Blazor.Grids.GridColumn"/> object.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttActionEventArgs`1.Columns">
            <summary>
            Gets or sets the collection of filtered columns.
            </summary>
            <value>
            A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:Syncfusion.Blazor.Grids.PredicateModel`1"/> objects that specifies the collection of filtered columns in the Gantt chart.
            </value>
            <remarks>
            Use this property to define the collection of filtered columns in the Gantt chart. 
            The filtered columns are represented as <see cref="T:Syncfusion.Blazor.Grids.PredicateModel`1"/> objects, where the generic type parameter is <see cref="T:System.Object"/>.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttActionEventArgs`1.CurrentFilterObject">
            <summary>
            Gets or sets the object that is currently filtered.
            </summary>
            <value>
            A <see cref="T:Syncfusion.Blazor.Grids.PredicateModel`1"/> object that specifies the object that is currently filtered in the Gantt chart.
            </value>
            <remarks>
            Use this property to define the object that is currently filtered in the Gantt chart. 
            The filtered object is represented as a <see cref="T:Syncfusion.Blazor.Grids.PredicateModel`1"/> object, where the generic type parameter is <see cref="T:System.Object"/>.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttActionEventArgs`1.CurrentFilteringColumn">
            <summary>
            Gets the column name that is currently filtered.
            </summary>
            <value>
            The string value representing the column name that is currently filtered in the Gantt chart.
            </value>
            <remarks>
            Use this property to define the column name that is currently being used for filtering in the Gantt chart. 
            The column name is specified as a string value.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttActionEventArgs`1.CurrentPage">
            <summary>
            Gets or sets the current page number.
            </summary>
            <value>
            An integer representing the current page number in the Gantt Chart. 
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttActionEventArgs`1.Data">
            <summary>
            Gets or sets the record objects for the Gantt chart.
            </summary>
            <value>
            A value representing the record objects for the Gantt chart.
            </value>
            <remarks>
            Use this property to define the record objects that are associated with the Gantt chart. 
            The record objects are represented by the type specified by <typeparamref name="TValue"/>.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttActionEventArgs`1.Direction">
            <summary>
            Gets or sets the direction of the sort column.
            </summary>
            <value>
            One of the <see cref="T:Syncfusion.Blazor.Grids.SortDirection"/> enumeration values.
            </value>
            <remarks>
            Use this property to define the direction of the sort column in the Gantt chart. 
            The direction is specified as one of the values from the <see cref="T:Syncfusion.Blazor.Grids.SortDirection"/> enumeration.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttActionEventArgs`1.EditEventArgs">
            <summary>
            Gets or sets the edited event arguments.
            </summary>
            <value>
            The event arguments for an edited event.
            </value>
            <remarks>
            Use this property to access the event arguments for an edited event. 
            The event arguments are represented by the type specified by <see cref="T:Syncfusion.Blazor.Gantt.Internal.EditedArgs"/>.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttActionEventArgs`1.ExcelSearchOperator">
            <summary>
            Gets or sets the Excel search operator.
            </summary>
            <value>
            One of the <see cref="T:Syncfusion.Blazor.Operator"/> enumeration values that specifies the Excel search operator. The default value is <see cref="F:Syncfusion.Blazor.Operator.None"/>.
            </value>
            <remarks>
            Use this property to define the Excel search operator to be used in operations. 
            The operator is represented as one of the values from the <see cref="T:Syncfusion.Blazor.Operator"/> enumeration. The default value is <see cref="F:Syncfusion.Blazor.Operator.None"/>.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttActionEventArgs`1.FilterChoiceCount">
            <summary>
            Gets or sets the number of data items to display when filtering data in the Gantt chart.
            </summary>
            <value>
            An integer value that specifies the number of data items to display when filtering data in the Gantt chart.
            </value>
            <remarks>
            Use this property to define the number of data items to display when filtering data in the Gantt chart. 
            The value should be specified as a integer.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttActionEventArgs`1.ForeignKeyData">
            <summary>
            Gets the foreign data objects used by the GanttChart.
            </summary>
            <value>
              A dictionary of foreign data objects where the key represents the identifier for the foreign data and the value represents the collection of objects associated with that foreign data.
            </value>
            <remarks>
            The ForeignKeyData property is used to provide additional data for the GanttChart that is related to the primary data being displayed. 
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttActionEventArgs`1.FilterOperators">
            <summary>
            Gets or sets the custom filter operators used by the component.
            </summary>
            <value>
            A list of filter operators that can be used for custom filtering.
            </value>
            <remarks>
            The FilterOperators property allows you to define a custom set of filter operators that can be used for filtering data in the component.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttActionEventArgs`1.Form">
            <summary>
            Gets or sets the custom filter operators used by the component.
            </summary>
            <value>
            A list of filter operators that can be used for custom filtering.
            </value>
            <remarks>
            The FilterOperators property allows you to define a custom set of filter operators that can be used for filtering data in the component.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttActionEventArgs`1.Index">
            <summary>
            Gets or sets the index of the added row.
            </summary>
            <value>
            An integer value representing the index of the added row.
            </value>
            <remarks>
            The Index property represents the position of the added row within a collection or data structure.
            It should be set to an integer value that indicates the index of the added row.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttActionEventArgs`1.ModifiedRecords">
            <summary>
            Defines the modified records in the GanttChart.
            </summary>
            <value>
            A list of modified records in the GanttChart.
            </value>
            <remarks>
            The ModifiedRecords property represents a collection of records that have been modified in the GanttChart.
            Each record is represented as a dictionary of field names and corresponding values.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttActionEventArgs`1.ModifiedTaskData">
            <summary>
            Defines the modified task data objects in the GanttChart.
            </summary>
            <value>
            A list of modified task data objects in the GanttChart.
            </value>
            <remarks>
            The ModifiedTaskData property represents a collection of task data objects that have been modified in the GanttChart.
            Each task data object corresponds to a modified task in the GanttChart.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttActionEventArgs`1.MovableForm">
            <summary>
            Gets or sets the movable table form element associated with the GanttChart.
            </summary>
            <value>
              The DOM element representing the movable table form associated with the GanttChart.
            </value>
            <remarks>
            The MovableForm property allows you to specify the movable table form element associated with the GanttChart.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttActionEventArgs`1.PreviousData">
            <summary>
            Gets the previous data object for the current operation in the GanttChart.
            </summary>
            <value>
            The previous data object that represents the state before the current operation in the GanttChart.
            </value>
            <remarks>
            The PreviousData property provides access to the data object that represents the state before the current operation in the GanttChart.
            This can be useful for tracking changes and performing actions based on the previous data.
            The type of the PreviousData object should be specified by the generic parameter TValue.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttActionEventArgs`1.PreviousPage">
            <summary>
            Defines the previous page number.
            </summary>
            <value>
             An integer value that specifies the number of the previous page in the Gantt chart.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttActionEventArgs`1.PrimaryKeyValue">
            <summary>
            Gets the primary key value for the current record in the GanttChart.
            </summary>
            <value>
            The value of the primary key that uniquely identifies the current record in the GanttChart.
            </value>
            <remarks>
            The PrimaryKeyValue property provides access to the value of the primary key that uniquely identifies the current record in the GanttChart.
            This can be useful for performing operations such as data retrieval, updates, or deletions based on the primary key value.
            The type of the PrimaryKeyValue property should match the data type of the primary key column in the underlying data source.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttActionEventArgs`1.PrimaryKeys">
            <summary>
            Gets the primary keys used in the GanttChart.
            </summary>
            <value>
            An array of string values representing the primary keys used in the GanttChart.
            </value>
            <remarks>
            The PrimaryKeys property defines the primary keys used in the GanttChart to uniquely identify records.
            It should be set to an array of string values, where each string represents a primary key column name.
            Multiple primary keys can be specified if the GanttChart uses a composite key.
            The primary key columns are used for operations such as data retrieval, updates, or deletions in the GanttChart.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttActionEventArgs`1.RequestType">
            <summary>
            Gets the current action being performed in the GanttChart.
            </summary>
            <value>
            The Action enum value representing the current action in the GanttChart.
            </value>
            <remarks>
            The RequestType property represents the current action being performed in the GanttChart.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttActionEventArgs`1.Row">
            <summary>
            Defines the added row.
            </summary>
            <value>
            A DOM object representing the row element.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttActionEventArgs`1.RowData">
            <summary>
            Gets or sets the record object associated with the row in the GanttChart.
            </summary>
            <value>
            The record object that represents the data associated with the row in the GanttChart.
            </value>
            <remarks>
            The RowData property provides access to the record object associated with the row in the GanttChart.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttActionEventArgs`1.RowIndex">
            <summary>
            Gets the row index of the edited row in the GanttChart.
            </summary>
            <value>
            An integer value representing the row index of the edited row.
            </value>
            <remarks>
            The RowIndex property represents the index of the row that is being edited in the GanttChart.
            It should be set to an integer value that indicates the position of the edited row.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttActionEventArgs`1.SearchString">
            <summary>
            Gets or sets the string value used for searching in the GanttChart.
            </summary>
            <value>
            The string value used for performing search operations in the GanttChart.
            </value>
            <remarks>
            The SearchString property represents the value that is used for searching within the GanttChart.
            It should be set to a string value that specifies the search criteria.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttActionEventArgs`1.SelectedRow">
            <summary>
            Gets or sets the index of the selected row in the GanttChart.
            </summary>
            <value>
            An integer value representing the index of the selected row in the GanttChart.
            </value>
            <remarks>
            The SelectedRow property represents the index of the row that is currently selected in the GanttChart.
            It should be set to an integer value that indicates the position of the selected row.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttActionEventArgs`1.Target">
            <summary>
            Defines the target for dialog.
            </summary>
            <value>
            The DOM element that serves as the target for the dialog.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttActionEventArgs`1.Tr">
            <summary>
            Defines the selected rows for delete.
            </summary>
            <value>
            A list of DOM elements that represent the rows to be deleted in the table.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttActionEventArgs`1.Type">
            <summary>
            Gets or sets the type of event in the GanttChart.
            </summary>
            <value>
            The string value representing the type of event.
            </value>
            <remarks>
            The Type property represents the type of event that is being handled in the GanttChart.
            It should be set to a string value that describes the specific type of event.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttActionEventArgs`1.EditContext">
            <summary>
            Gets or sets the current EditContext instance for the form.
            </summary>
            <value>
            An instance of the EditContext class that represents the current edit context for the form.
            </value>
            <remarks>
            The EditContext property represents the current EditContext instance for the form.
            It should be set to an instance of the EditContext class that is responsible for tracking the state of the form and managing validation.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttActionEventArgs`1.CurrentZoomingLevel">
            <summary>
            Gets or sets the current zooming level for the GanttChart timeline.
            </summary>
            <value>
            An instance of the GanttZoomTimelineSettings class that represents the current zooming level for the GanttChart timeline.
            </value>
            <remarks>
            The CurrentZoomingLevel property represents the current zooming level for the GanttChart timeline.
            It should be set to an instance of the GanttZoomTimelineSettings class, which defines the zooming options and settings for the timeline.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttActionEventArgs`1.ValidateMode">
            <summary>
            Gets or sets the validation mode for predecessor relationships in the GanttChart component.
            </summary>
            <value>
            An instance of the <see cref="P:Syncfusion.Blazor.Gantt.GanttActionEventArgs`1.ValidateMode" /> enumeration that specifies the validation mode for predecessor relationships.
            </value>
            <remarks>
            The ValidateMode property defines the validation mode for predecessor relationships in the GanttChart component.
            It should be set to a value from the <see cref="P:Syncfusion.Blazor.Gantt.GanttActionEventArgs`1.ValidateMode" /> enumeration, which includes options such as "Auto" or "Manual".
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttActionEventArgs`1.EnableAutoLinkValidation">
            <summary>
            Gets or sets whether to enable or disable validation on drawing predecessor (connector) via user interaction.
            </summary>
            <value>
            <c>true</c> if validation should be enabled for drawing predecessors via user interaction; otherwise, <c>false</c>. The default value is <c>true</c>.
            </value>
            <remarks>
            The EnableAutoLinkValidation property determines whether validation should be performed when drawing predecessors (connectors) via user interaction in the GanttChart component.
            By default, the EnableAutoLinkValidation property is set to <c>true</c>, indicating that validation is enabled.
            When validation is enabled, the GanttChart component will validate the drawing of predecessors based on predefined rules or constraints.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttActionEventArgs`1.PredecessorOffSetValidation">
            <summary>
            Gets or sets whether to restrict taskbar dragging beyond a predecessor value.
            </summary>
            <value>
            <c>true</c> if taskbar dragging should be restricted to a date less than the predecessor value; otherwise, <c>false</c>. The default value is <c>false</c>.
            </value>
            <remarks>
            The PredecessorOffSetValidation property determines whether the dragging of taskbars in the GanttChart component should be restricted based on the value of their predecessors.
            When PredecessorOffSetValidation is set to <c>true</c>, the GanttChart component will enforce a rule that prevents taskbars from being dragged to a date that is later than the date of their predecessors.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttActionEventArgs`1.TaskBarEditAction">
            <summary>
            Gets the TaskBar Edit Action for the GanttChart component.
            </summary>
            <value>
            Accepts a string value that defines the TaskBar Edit Action.
            </value>
            <remarks>
            The TaskBarEditAction property defines the action to be performed when editing the taskbar in the GanttChart component.
            It accepts a string value that represents the TaskBar Edit Action.
            </remarks>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.QueryChartRowInfoEventArgs`1">
            <summary>
            To maintain QueryChartRowInfoEventArgs.
            </summary>
            <typeparam name="TValue">Specifies the type of QueryChartRowInfoEventArgs.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.QueryChartRowInfoEventArgs`1.Data">
            <summary>
            Gets the data associated with a row in a QueryChart.
            </summary>
            <value>
            The data object that is associated with a row in a QueryChart.
            </value>
            <remarks>
            The Data property allows you to set or retrieve the data associated with a specific row in a QueryChart.
            This property is typically used in events or callbacks related to the QueryChart, such as the QueryChartRowInfoEventArgs.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.QueryChartRowInfoEventArgs`1.TaskbarType">
            <summary>
            Gets the Taskbar Type in a QueryChartRowInfoEventArgs.
            </summary>
            <value>
            Accepts a string value that represents the Taskbar Type.
            </value>
            <remarks>
            The TaskbarType property allows you to set or retrieve the taskbar type associated with a specific row in a QueryChart.
            This property is typically used in events or callbacks related to the QueryChart, such as the QueryChartRowInfoEventArgs.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.QueryChartRowInfoEventArgs`1.Row">
            <summary>
            To set Row in QueryChartRowInfoEventArgs.
            </summary>
            <value>
            The <see cref="T:Syncfusion.Blazor.Gantt.RowDOM"/> object that represents the current row in a QueryChart.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.QueryChartRowInfoEventArgs`1.GanttTaskModel">
            <summary>
            Gets the hierarchy details of a task.
            </summary>
            <value>
            An instance of <see cref="P:Syncfusion.Blazor.Gantt.QueryChartRowInfoEventArgs`1.GanttTaskModel"/>.
            </value>
            <returns> An instance of the <see cref="P:Syncfusion.Blazor.Gantt.QueryChartRowInfoEventArgs`1.GanttTaskModel"/>.</returns>
            <remarks>
            The GanttTaskModel property represents the hierarchy details of a task in the GanttChart component.
            This property provides access to an instance of the <see cref="P:Syncfusion.Blazor.Gantt.QueryChartRowInfoEventArgs`1.GanttTaskModel"/> class,
            which contains information such as the task's ID, parent ID, start date, end date, duration, and other task-related data.
            </remarks>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.ValidateMode">
            <summary>
            To maintain ValidateMode.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.ValidateMode.RespectLink">
            <summary>
            To set RespectLink in ValidateMode.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.ValidateMode.RemoveLink">
            <summary>
            To set RemoveLink in ValidateMode.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.ValidateMode.PreserveLinkWithEditing">
            <summary>
            To set PreserveLinkWithEditing in ValidateMode.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttHolidayRange">
            <summary>
            GanttHolidayRange for SfGantt component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttHolidayRange.From">
            <summary>
            To set From in GanttHolidayRange.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttHolidayRange.To">
            <summary>
            To set To in GanttHolidayRange.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttHolidayRange.NextWorking">
            <summary>
            To set NextWorking in GanttHolidayRange.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttHolidayRange.PrevWorking">
            <summary>
            To set PrevWorking in GanttHolidayRange.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttHolidayRange.Interval">
            <summary>
            To set Interval in GanttHolidayRange.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttHolidayRange.Width">
            <summary>
            To set Width in GanttHolidayRange.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttHolidayRange.Left">
            <summary>
            To set Left in GanttHolidayRange.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttHolidayRange.Label">
            <summary>
            To set Label in GanttHolidayRange.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttHolidayRange.CssClass">
            <summary>
            To set CssClass in GanttHolidayRange.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttSegmentData">
            <summary>
            Represents a class that defines segment details for a Gantt task.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttSegmentData.StartDate">
            <summary>
            Gets or sets the start date of the segment.
            </summary>
            <value>
            A <see cref="T:System.DateTime"/> representing the start date of the segment.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttSegmentData.EndDate">
            <summary>
            Gets or sets the end date of the segment.
            </summary>
            <value>
            A <see cref="T:System.DateTime"/> representing the end date of the segment.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttSegmentData.Duration">
            <summary>
            Gets the duration of the segment, represented in days, hours, or minutes    based on the <see cref="T:Syncfusion.Blazor.Gantt.DurationUnit"/> property.
            </summary>
            <value>
            A <see cref="T:System.Double"/> representing the duration of the segment, where the unit (day, hour, or minute) is determined by the <see cref="T:Syncfusion.Blazor.Gantt.DurationUnit"/> property.
            </value> 
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttSegmentData.Width">
            <summary>
            Gets or sets the width of the taskbar representing the segment.
            </summary>
            <value>
            A <see cref="T:System.Double"/> representing the width of the taskbar for the segment.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttSegmentData.Left">
            <summary>
            Gets or sets the left offset of the taskbar representing the segment.
            </summary>
            <value>
            A <see cref="T:System.Double"/> representing the left offset of the taskbar for the segment.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttSegmentData.OffsetDuration">
            <summary>
            Gets or sets the duration offset between two segments.
            </summary>
            <value>
            A <see cref="T:System.Double"/> representing the duration offset between two segments.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttSegmentData.SegmentIndex">
            <summary>
            Gets or sets the index of the segment.
            </summary>
            <value>
            An <see cref="T:System.Int32"/> representing the index of the segment.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttSegmentData.ShowProgressBar">
            <summary>
            Gets a value indicating whether the progress indicator is visible in the segment's taskbar.
            </summary>
            <value>
            A <see cref="T:System.Boolean"/> indicating whether the progress indicator is displayed in the segment's taskbar.
            </value>
            <remarks>
            Set this property to true in the taskbar template if you want to display a progress indicator in the taskbar template of the segment. Setting it to false will hide the progress indicator. This helps in showing progress indicator in the corresponding segment.
            </remarks> 
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttSegmentData.ProgressWidth">
            <summary>
            Gets or sets the width of the progress indicator for the segment.
            </summary>
            <value>
            A <see cref="T:System.Double"/> representing the width of the progress indicator for the segment.
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.TaskbarEditingEventArgs`1">
            <summary> 
            Provides information about the TaskbarEditing event. 
            </summary> 
            <typeparam name="TValue">TValue of the <see cref='T:Syncfusion.Blazor.Gantt.SfGantt`1'/>component.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.TaskbarEditingEventArgs`1.Action">
            <summary>
            Gets the taskbar editing action. The available taskbar editing actions are:
            - ParentDrag
            - ChildDrag
            - RightResizing
            - LeftResizing
            - ProgressResizing
            </summary>
            <value>
            Accepts a string value that represents the taskbar editing action.
            </value>
            <remarks>
            The Action property represents the taskbar editing action performed in the GanttChart component.
            It can have different values depending on the type of taskbar manipulation being performed.
            The available taskbar editing actions are:
            - ParentDrag: Indicates that the taskbar is being dragged as a parent task.
            - ChildDrag: Indicates that the taskbar is being dragged as a child task.
            - RightResizing: Indicates that the right side of the taskbar is being resized.
            - LeftResizing: Indicates that the left side of the taskbar is being resized.
            - ProgressResizing: Indicates that the progress portion of the taskbar is being resized.
            You can use the Action property to determine the type of taskbar editing action that is being performed and respond accordingly in your code.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.TaskbarEditingEventArgs`1.Cancel">
            <summary>
            Cancels the taskbar edit action.
            </summary>
            <value>
            <c>true</c>, if the taskbar edit action can be canceled. Otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.TaskbarEditingEventArgs`1.Data">
            <summary>
            Gets the data of the task being edited.
            </summary>
            <value>
            The data object representing the task being edited.
            </value>
            <remarks>
            The Data property represents the data of the task currently being edited in the GanttChart component.
            It provides access to the data object that represents the task and contains various properties such as task name, start date, end date, duration, and other task-related information.
            You can use the Data property to retrieve or modify the data of the task being edited and perform any necessary operations or validations on it.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.TaskbarEditingEventArgs`1.ValidationMode">
            <summary> 
            Gets or sets the data validation mode for predecessor relationships in the <see cref='T:Syncfusion.Blazor.Gantt.SfGantt`1'/>component. 
            </summary> 
            <value> 
            One of the <see cref="P:Syncfusion.Blazor.Gantt.TaskbarEditingEventArgs`1.ValidationMode"/> enumeration that specifies the validation mode for predecessor relationships. 
            </value> 
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.TaskbarEditingEventArgs`1.EnablePredecessorValidation">
            <summary>   
            Determines whether the task’s date values are validated and updated automatically based on predecessor values. 
            </summary>   
            <value>   
            <c>true</c> if validation of task date values based on predecessors is enabled; otherwise, <c>false</c>.  
            The default value is <c>true</c>.  
            </value>   
            <remarks>   
            The EnablePredecessorValidation property controls whether Gantt task dates are validated based on their predecessor tasks. /// When set to <c>true</c>, task date values will be validated based on <see cref="T:Syncfusion.Blazor.Gantt.DependencyType"/>.   
            When set to <c>false</c>, this validation is disabled.  
            By default, EnablePredecessorValidation is set to <c>true</c>, indicating that validation is enabled.  
            </remarks>   
            <example> 
            <code> 
            <![CDATA[ 
            @using Syncfusion.Blazor.Gantt 
            <SfGantt DataSource="@TaskCollection"> 
                <GanttEvents TaskbarEditing="TaskbarEditing" TValue="TaskData"></GanttEvents> 
            </SfGantt> 
            @code{ 
                public void TaskbarEditing(TaskbarEditingEventArgs<TaskData> args) 
                { 
                     args.EnablePredecessorValidation = false;  
                } 
            } 
            ]]> 
            </code> 
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.TaskbarEditingEventArgs`1.EnablePredecessorOffsetValidation">
            <summary>   
            Determines whether to restrict taskbar dragging beyond a predecessor value.  
            </summary>   
            <value>   
            <c>true</c> if taskbar dragging should be restricted to a date less than the predecessor value; otherwise, <c>false</c>.  
            The default value is <c>false</c>.  
            </value>   
            <remarks>   
            When EnablePredecessorOffsetValidation is set to <c>true</c>, the gantt chart component will enforce a rule that prevents taskbars from being dragged to a date later than the date of their predecessors.  
            If the taskbar is dragged above the given predecessor offset value, it gets reverted to the minimum predecessor value.  
            </remarks>   
            <example> 
            <code> 
            <![CDATA[ 
            @using Syncfusion.Blazor.Gantt 
            <SfGantt DataSource="@TaskCollection"> 
                <GanttEvents TaskbarEditing="TaskbarEditing" TValue="TaskData"></GanttEvents> 
            </SfGantt> 
            @code{ 
                public void TaskbarEditing(TaskbarEditingEventArgs<TaskData> args) 
                { 
                     args.EnablePredecessorOffsetValidation = true;  
                } 
            } 
            ]]> 
            </code> 
            </example> 
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.BeforeCopyEventArgs">
            <summary>
            Provides information about the <see cref="P:Syncfusion.Blazor.Gantt.GanttEvents`1.BeforeCopy"/> event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.BeforeCopyEventArgs.Cancel">
            <summary>
            Gets or sets whether to cancel the entire copy action.
            </summary>
            <value>
            <c>true</c>, if the copy action can be canceled. Otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.BeforeCopyEventArgs.ClipboardText">
            <summary>
            Gets or sets the copied selected cells/rows content.
            </summary>
            <value>
            Accepts the string value.
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttRowUpdatingEventArgs`1">
            <summary> 
            Provides information about the <see cref="P:Syncfusion.Blazor.Gantt.GanttEvents`1.RowUpdating"/> event. 
            </summary> 
            <typeparam name="T">TValue of the <see cref='T:Syncfusion.Blazor.Gantt.SfGantt`1'/>component.</typeparam> 
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttRowUpdatedEventArgs`1">
            <summary> 
            Provides information about the <see cref="P:Syncfusion.Blazor.Gantt.GanttEvents`1.RowUpdated"/> event. 
            </summary> 
            <typeparam name="T">TValue of the <see cref='T:Syncfusion.Blazor.Gantt.SfGantt`1'/> component.</typeparam> 
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttRowUpdatedEventArgs`1.ModifiedTaskData">
            <summary> 
            Gets or sets the list of modified task data objects in the Gantt chart. 
            </summary> 
            <value> 
            A list of modified task data objects. 
            </value> 
            <remarks> 
            It represents a collection of task data objects that have been modified due to CRUD operations in the gantt chart. 
            Each task data object corresponds to a modified task in the gantt chart. 
            </remarks> 
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttRowDeletingEventArgs`1">
            <summary> 
            Provides information about the <see cref="P:Syncfusion.Blazor.Gantt.GanttEvents`1.RowDeleting"/> event. 
            </summary> 
            <typeparam name="T">TValue of the <see cref='T:Syncfusion.Blazor.Gantt.SfGantt`1'/>component.</typeparam> 
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttRowDeletedEventArgs`1">
            <summary> 
            Provides information about the <see cref="P:Syncfusion.Blazor.Gantt.GanttEvents`1.RowDeleted"/> event. 
            </summary> 
            <typeparam name="T">TValue of the <see cref='T:Syncfusion.Blazor.Gantt.SfGantt`1'/>component.</typeparam> 
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.ZoomEventArgs">
            <summary> 
            Provides information about the <see cref="P:Syncfusion.Blazor.Gantt.GanttEvents`1.Zooming"/> event. 
            </summary> 
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.ZoomEventArgs.Action">
            <summary> 
            Gets the action name that triggered the zoom operation. 
            </summary> 
            <value> 
            One of the  <see cref="T:Syncfusion.Blazor.Gantt.ZoomAction"/> value that represents the zoom action. Possible values are “ZoomIn”, “ZoomOut” and “ZoomToFit”. 
            </value> 
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.ZoomEventArgs.ZoomTimelineSettings">
            <summary> 
            Gets an instance of <see cref="T:Syncfusion.Blazor.Gantt.GanttZoomTimelineSettings"/> which provides details of the zoom action. 
            </summary> 
            <value> 
            An instance of <see cref="T:Syncfusion.Blazor.Gantt.GanttZoomTimelineSettings"/>. 
            </value> 
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.ZoomEventArgs.Cancel">
            <summary> 
            Gets or sets a value indicating whether to cancel the zoom operation. 
            </summary> 
            <value> 
             If the Cancel property is set to <c>true</c>, the zoom action will be cancelled. The default value is false. 
             </value>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttDialogOpenEventArgs`1">
            <summary> 
            Represents event arguments for the <see cref="P:Syncfusion.Blazor.Gantt.GanttEvents`1.GanttDialogOpening"/> event of a Gantt chart dialog. 
            </summary> 
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttDialogOpenEventArgs`1.Data">
            <summary> 
            Gets the data associated with the row being edited. 
            </summary> 
            <value> 
             An object of the type `TValue` that represents the row data. 
             </value> 
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttDialogOpenEventArgs`1.Cancel">
            <summary> 
            Gets or sets a value indicating whether to cancel the dialog opening. 
            </summary> 
            <value> 
             If the Cancel property is set to <c>true</c>, the dialog open action will be cancelled. The default value is false. 
             </value> 
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttDialogOpenEventArgs`1.IsEditAction">
            <summary> 
            Gets the boolean value indicating whether the current action is Add or Edit. 
            </summary> 
            <value> 
             <c>true</c> if the dialog is opening for edit action; otherwise, <c>false</c>. 
             </value> 
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.TaskConnectorChangeEventArgs`1">
            <summary> 
            Provides information about the <see cref="P:Syncfusion.Blazor.Gantt.GanttEvents`1.TaskConnectorChanging"/> event. 
            </summary> 
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.TaskConnectorChangeEventArgs`1.PredecessorData">
            <summary> 
            Gets the data associated with the predecessor taskbar for which the dependency connection is changing. 
            </summary> 
            <value> 
             An object of the type `TValue` that represents the row data. 
             </value> 
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.TaskConnectorChangeEventArgs`1.SuccessorData">
            <summary> 
            Gets the data associated with the successor taskbar for which the dependency connection is changing. 
            </summary> 
            <value> 
             An object of the type `TValue` that represents the row data. 
             </value> 
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.TaskConnectorChangeEventArgs`1.Cancel">
            <summary> 
            Gets or sets a boolean value indicating whether to cancel the dependency connection change. 
            </summary> 
            <value> 
             If the Cancel property is set to <c>true</c>, the dependency connection action will be cancelled. The default value is false. 
             </value> 
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.TaskConnectorChangeEventArgs`1.IsStartPredecessor">
            <summary> 
            Gets a boolean value indicating whether predecessor taskbar’s connection point is start or finish. 
            </summary> 
            <value> 
             <c>true</c> if the predecessor taskbar’s connector point is at the start; otherwise, <c>false</c>. 
            </value> 
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttDialogOpenedEventArgs`1">
            <summary> 
            Provides information about the <see cref="P:Syncfusion.Blazor.Gantt.GanttEvents`1.GanttDialogOpened"/> event. 
            </summary> 
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttDialogOpenedEventArgs`1.Data">
            <summary> 
            Gets the data associated with the row being edited. 
            </summary> 
            <value> 
             An object of the type `TValue` that represents the row data. 
             </value> 
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttDialogOpenedEventArgs`1.Action">
            <summary> 
            Gets the boolean value indicating whether current action is Add or Edit. 
            </summary> 
            <value> 
             <c>true</c> if the dialog is opened for edit action; otherwise, <c>false</c>. 
             </value> 
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.ZoomedEventArgs">
            <summary> 
            Provides information about the <see cref="P:Syncfusion.Blazor.Gantt.GanttEvents`1.Zoomed"/> event. 
            </summary> 
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.ZoomedEventArgs.Action">
            <summary> 
            Gets the action name that triggered the zoom operation. 
            </summary> 
            <value> 
            One of the <see cref="T:Syncfusion.Blazor.Gantt.ZoomAction"/> value that represents the zoom action. Possible values are “ZoomIn”, “ZoomOut” and “ZoomToFit”. 
            </value> 
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.ZoomedEventArgs.ZoomTimelineSettings">
            <summary> 
            Gets an instance of <see cref="T:Syncfusion.Blazor.Gantt.GanttZoomTimelineSettings"/> which provides details of the zoom action. 
            </summary> 
            <value> 
            An instance of <see cref="T:Syncfusion.Blazor.Gantt.GanttZoomTimelineSettings"/>. 
            </value> 
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.TaskConnectorChangedEventArgs`1">
            <summary> 
            Provides information about the <see cref="P:Syncfusion.Blazor.Gantt.GanttEvents`1.TaskConnectorChanged"/> event. 
            </summary> 
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.TaskConnectorChangedEventArgs`1.PredecessorData">
            <summary> 
            Gets the data associated with the predecessor in the connector line. 
            </summary> 
            <value> 
             An object of the type `TValue` that represents the row data. 
             </value> 
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.TaskConnectorChangedEventArgs`1.SuccessorData">
            <summary> 
            Gets the data associated with the successor in the connector line. 
            </summary> 
            <value> 
             An object of the type `TValue` that represents the row data. 
             </value> 
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.TaskConnectorChangedEventArgs`1.IsStartPredecessor">
            <summary> 
            Gets a boolean value indicating whether predecessor taskbar’s connection point is start or finish. 
            </summary> 
            <value> 
             <c>true</c> if the predecessor taskbar’s connector point is at the start; otherwise, <c>false</c>. 
            </value> 
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.TaskConnectorChangedEventArgs`1.IsStartSuccessor">
            <summary> 
            Gets a boolean value indicating whether successor taskbar’s connection point is start or finish. 
            </summary> 
            <value> 
             <c>true</c> if the successor taskbar’s connector point is at the start; otherwise, <c>false</c>. 
            </value> 
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttRowCreatingEventArgs`1">
            <summary>  
            Provides information about the <see cref="P:Syncfusion.Blazor.Gantt.GanttEvents`1.RowCreating"/> event.  
            </summary>  
            <typeparam name="T">TValue of the <see cref='T:Syncfusion.Blazor.Gantt.SfGantt`1'/>component.
            </typeparam>  
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttRowCreatedEventArgs`1">
            <summary>  
            Provides information about the <see cref="P:Syncfusion.Blazor.Gantt.GanttEvents`1.RowCreated"/> event.  
            </summary>  
            <typeparam name="T">TValue of the <see cref='T:Syncfusion.Blazor.Gantt.SfGantt`1'/>component.
            </typeparam>  
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.SegmentEventArgs`1">
            <summary>
            Provided information about the event <see cref="P:Syncfusion.Blazor.Gantt.GanttSegmentFields`2.SegmentChanging" /> event.
            </summary>
            <typeparam name="TSegments">The type of segments. </typeparam> 
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SegmentEventArgs`1.Cancel">
            <summary>
            Gets or sets a value indicating whether the split or merge task operation should be canceled.
            </summary>
            <value>
            If set to <c>true</c>, then the segment change action will be cancelled. The default value is <c>false</c>.
            </value>
            <remarks>
            This property is applicable specifically to split and merge actions. It does not affect other operations such as cell editing or taskbar editing.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SegmentEventArgs`1.AddedSegments">
            <summary>
            Gets the list of added segments in the task.
            </summary>
            <value>
            A list of <typeparamref name="TSegments"/> representing the segments added as part of the split operation.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SegmentEventArgs`1.UpdatedSegments">
            <summary>
            Gets the list of changed segment records during resize or drag actions of segements.
            </summary>
            <value>
            A list of <typeparamref name="TSegments"/> representing the segments that were updated as part of the segment’s drag or resize operation.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SegmentEventArgs`1.DeletedSegments">
            <summary>
            Gets the list of deleted segment records.
            </summary>
            <value>
            A list of <typeparamref name="TSegments"/> representing the segments that were deleted as part of the merge operation.
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.ResourceAssignmentChangeEventArgs`1">
            <summary>  
            Provides information about the event <see cref="P:Syncfusion.Blazor.Gantt.GanttAssignmentFields`2.ResourceAssignmentChanging" /> 
            </summary>   
            <typeparam name="TAssignment">The type of resources. </typeparam>  
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.ResourceAssignmentChangeEventArgs`1.Cancel">
            <summary>  
            Gets or sets a value indicating whether the resource assignment’s data modification operation should be canceled.  
            </summary>  
            <value>  
            <c>true</c> if the resource change action will be canceled; otherwise, <c>false</c>. The default value is <c>false</c>.  
            </value>  
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.ResourceAssignmentChangeEventArgs`1.AddedResources">
            <summary>  
            Gets or sets the list of added resource assignment data.  
            </summary>  
            <value>  
            A list of <typeparamref name="TAssignment"/> 
            </value>  
            <remarks>  
            This data holds the foreign key relation details of task and resource data.
            </remarks>  
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.ResourceAssignmentChangeEventArgs`1.UpdatedResources">
            <summary>  
            Gets or sets the list of changed resource assignment records during dialog edit and cell edit. 
            </summary>  
            <value>  
            A list of <typeparamref name="TAssignment"/> representing the resources that were updated as part of the resource dialog edit, and cell edit operation.  
            </value>  
            <remarks>  
            This data holds the foreign key relation details of task and resource data. 
            </remarks>  
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.ResourceAssignmentChangeEventArgs`1.DeletedResources">
            <summary>  
            Gets the list of deleted resource assignments.  
            </summary>  
            <value>  
            A list of <typeparamref name="TAssignment"/> representing the resources that were deleted as part of the remove the resource in dialog edit and cell edit operation.  
            </value>  
            <remarks>  
            This data holds the foreign key relation details of task and resource data. 
            </remarks>  
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttAddDialogField">
            <summary>
            Defines the tabs and fields to be included in the add dialog.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttAddDialogField.Type">
            <summary>
            Gets or sets types of tab which contains editor for columns.
             `General` - Defines tab container type as general.
             `Dependency` - Defines tab as dependency editor.
             `Resources` - Defines tab as resources editor.
             `Notes` - Defines tab as notes editor.
            </summary>
            <value>
            The type of tab that contains editor for columns.
            </value>
            <remarks>
            The value of this property determines the type of tab that contains the editor for columns.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttAddDialogField.Fields">
            <summary>
            Gets or sets an array of edited column fields placed inside the tab.
            </summary>
            <value>
            A string array representing the names of the edited column fields placed inside the tab.
            </value>
            <remarks>
            Use this property to define the list of fields that will be displayed in the editing form for the corresponding tab.
            If this property is not set, all fields defined in the data source will be displayed in the editing form.
            Based on mapping taskfields will generated for general tabs for custom tabs it will be empty.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttAddDialogField.HeaderText">
            <summary>
            Gets or sets header text of tab item.
            </summary>
            <value>
            The text to display as the header of the tab item.
            </value>
            <remarks>
            This property is used to set the header text of the tab item.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.GanttAddDialogField.Dispose(System.Boolean)">
            <summary>
            Dispose unmanaged resources in the Syncfusion Blazor component.
            </summary>
            <param name="disposing">Boolean value to dispose the object.</param>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttAddDialogFields">
            <summary>
            Configure Gantt Add dialog fields.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttAddDialogFields.ChildContent">
            <summary>
            Gets or sets the content to be rendered as a child of the component.
            </summary>
            <value>
            A <see cref="T:Microsoft.AspNetCore.Components.RenderFragment"/> that represents the content to be rendered.
            </value>
            <remarks>
            This property is used to set the child content of a component.
            The content is rendered as a child of the component and can include other components, HTML elements, or any other content that can be rendered.
            </remarks>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttAddDialogFields.AddDialogFields">
            <summary>
            Gets or sets the tabs and fields to be included in the add dialog.
            </summary>
            <value>
            A list of <see cref="T:Syncfusion.Blazor.Gantt.GanttAddDialogField"/> objects that define the tabs and fields to be included in the add dialog.
            </value>
            <remarks>
            This property is used to configure the add dialog of the Gantt chart.
            It defines the tabs and fields that are displayed in the add dialog.
            </remarks>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttAssignmentFields`2">
            <summary> 
            Represents a class that defines the mapping of field names in the data object of the resource assignment collection.  
            The resource assignment collection holds the relationship details between tasks and resources data. 
            </summary>  
            <typeparam name="TValue">Specifies the type of the task collection data source in the Gantt chart.</typeparam> 
            <typeparam name="TAssignment">Specifies the type of the resource assignment collection data source.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttAssignmentFields`2.DataSource">
            <summary> 
            Gets or sets the data source of the resource assignment collection.       
            </summary> 
            <remarks> 
            To consume data from a remote service or custom adaptor, use the <see cref="T:Syncfusion.Blazor.Data.SfDataManager"/> component. For more information, refer to the documentation <seealso href="https://blazor.syncfusion.com/documentation/gantt-chart/resource-view#remote-data">here</seealso>. 
            </remarks> 
            <value> 
            The data source value can be of any type that implements IEnumerable. 
            </value>  
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttAssignmentFields`2.PrimaryKey">
            <summary>  
            Gets or sets the primary key property name for the data source. 
            </summary> 
            <value> 
            The name of the primary key property. This property is used to uniquely identify each record in the data source. 
            </value> 
            <remarks> 
            The PrimaryKey is crucial for operations that require unique identification of records, such as data manipulation and retrieval. 
            </remarks>  
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttAssignmentFields`2.TaskID">
            <summary> 
            Gets or sets the name of the task ID field in the resource assignment collection of the Gantt Chart. 
            </summary> 
            <value> 
            The field name that specifies the primary <see cref="P:Syncfusion.Blazor.Gantt.GanttTaskFields.Id"/> value in the task collection datasource 
            </value> 
            <remarks> 
            This property allows the user to establish a relationship between the task collection and the resource assignment collection by specifying the task ID as the TaskID property. 
            </remarks>  
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttAssignmentFields`2.ResourceID">
            <summary>  
            Gets or sets the name of the resource ID field in the resource assignment collection. 
            </summary> 
            <value> 
            The name of the resource ID property that specifies the primary <see cref="P:Syncfusion.Blazor.Gantt.GanttResource`2.Id"/> value of the resource collection. 
            </value> 
            <remarks> 
            This property enables the user to establish a relationship between the resource collection and the resource assignment collection by specifying the resource ID as a ResourceID property. 
            </remarks> 
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttAssignmentFields`2.Units">
            <summary> 
            Gets or sets the name of the unit property in the resource assignment collection in the Gantt Chart. 
            </summary> 
            <value> 
            The name of the resource units property that specifies the resource units of the resource collection in the  
            <see cref="T:Syncfusion.Blazor.Gantt.GanttResource`2"/> of the Gantt chart, and  referencing  
            <see cref="P:Syncfusion.Blazor.Gantt.GanttResource`2.MaxUnits"/>. 
            </value> 
            <remarks> 
            <para> 
            Use this property to specify the percentage of time or quantity dedicated to a task for a work or resource. 
            </para> 
            <para> 
            Examples: 
            - Specify 100% if the resource is to work full-time on the assignment. This is the default for all assignments. 
            - Specify 50% if the resource is spending half the available time on this assignment. 
            - Specify 300% if three full-time equivalent resources are working on this assignment. 
            - Specify 250% if two full-time resources and one half-time resource are working on this assignment. 
            </para> 
            <para> 
            When you want to specify how much of a work resource's time is dedicated to a specific task, or indicate the quantity of material for an assignment, use this property to define assignment units. 
            </para> 
            </remarks> 
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttAssignmentFields`2.DataManager">
            <summary>  
            Gets or sets an instance of the <see cref="P:Syncfusion.Blazor.Gantt.GanttAssignmentFields`2.DataManager"/> class, providing functionality for data operations in applications.  </summary>  
            <value>  
            An instance of the <see cref="P:Syncfusion.Blazor.Gantt.GanttAssignmentFields`2.DataManager"/> class. 
            </value>  
            <remarks>  
            DataManager facilitates interactions with remote data sources, allowing seamless integration and manipulation of data for resource assignments 
            </remarks>  
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttAssignmentFields`2.ChildContent">
            <summary> 
            Gets or sets the child content that will be rendered inside the gantt chart component. 
            </summary> 
            <value> 
            A <see cref="T:Microsoft.AspNetCore.Components.RenderFragment"/> representing the child content for the DataManager. 
            </value> 
            <remarks> 
            Use this property to provide content that will be rendered inside the component. 
            </remarks> 
            <exclude/> 
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttAssignmentFields`2.ResourceAssignmentChanging">
            <summary>  
            Gets or sets an event callback that is raised when the resource for a task is modified.  
            </summary>  
            <remarks>   
            The event handler receives a <see cref="T:Syncfusion.Blazor.Gantt.ResourceAssignmentChangeEventArgs`1"/> object, which provides details about the resource assignment collections. /// </remarks>  
            <value>  
            An event callback function.  
            </value>  
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttBottomTierSettings">
            <summary>
            Defines bottom tier settings in timeline.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttDataOperations">
            <summary>
            GanttDataOperation class to update parent, child and other dependent records on CRUD operations.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.GanttDataOperations.UpdateDependentRecords``1(Syncfusion.Blazor.Gantt.SfGantt{``0},System.Linq.IQueryable{``0},``0)">
            <summary>
            Validates the start date and end date of dependent tasks with current edited task data and returns the collection of resultant data.
            </summary>
            <remarks>
            When data is loaded on demand in gantt chart, only current view port data is available to Gantt Chart.
            Hence during CRUD operations, Gantt Chart cannot identify the dependent tasks which edited data affects. Using this method,
            we can identify the dependent tasks data in server end and update it.
            </remarks>
            <param name="parent">Instance of Gantt chart.</param>
            <param name="datasource">Input data source against which dependent tasks needs to be validated.</param>
            <param name="updatedData">Edited task data.</param>
            <returns>List - updated records.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.SfGantt`1">
            <summary>
            Blazor Gantt chart is a project management tool which is used for scheduling and managing projects. It allows us to manage tasks, task relationships, and resources in a project.
            </summary>
            <summary>
            Blazor Gantt chart is a project management tool which is used for scheduling and managing projects. It allows us to manage tasks, task relationships, and resources in a project.
            </summary>
            <summary>
            Blazor Gantt chart is a project management tool which is used for scheduling and managing projects. It allows us to manage tasks, task relationships, and resources in a project.
            </summary>
            <typeparam name="TValue">The second generic type parameter.</typeparam>
            <summary>
            Blazor Gantt chart is a project management tool which is used for scheduling and managing projects. It allows us to manage tasks, task relationships, and resources in a project.
            </summary>
            <remarks><c>TValue</c> is inferred from value of <c>DataSource</c> property if it is bounded with IEnumerable.
            If data is consumed using <c>SfDataManager</c> then TValue must be assigned explicitly.</remarks>
            <seealso cref="T:Syncfusion.Blazor.Data.SfDataManager"/>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.OnInitializedBase">
            <summary>
            Receive its initial parameters from its parent in the render tree.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.OnParametersSetBase">
            <summary>
            Incoming changedValues have been assigned to properties.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.UpdateChildProperties(System.String,System.Object)">
            <summary>
             Incoming changedValues have been assigned to child properties.
            </summary>
            <param name="key">Specifies the Key.</param>
            <param name="changedValue">Specifies the changedValue.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.ShouldRender">
            <inheritdoc/>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.GanttPersistProperties(System.String)">
            <summary>
            Update Gantt properties based on persisted values.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.ComponentDispose">
            <summary>
            Handles dispose component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.AddDialogFields">
             <summary>
             Gets or sets an instance of <see cref="T:Syncfusion.Blazor.Gantt.GanttAddDialogField"/> collection which provides information on tab sections within the dialog for adding new records and the column fields of the grid within each tab section.
             </summary>
             <value>
             A List instance of <see cref="T:Syncfusion.Blazor.Gantt.GanttAddDialogField"/>.
             </value>
             <remarks>
             The tabs that contain the editors for columns include:
                <b>General</b>:A tab for entering values for the columns of a new gantt record.
                <b>Dependency</b>: A tab for editing dependencies.
                <b>Resources</b>: A tab for editing resources.
                <b>Notes</b>: A tab for editing notes.
             </remarks>
             <example>
             <code>
             <![CDATA[
             <SfGantt DataSource="@TaskCollection" AddDialogFields=@addDialogFields Toolbar="@(new List<string>(){ "Add"})">
             <GanttTaskFields Id="TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate" Duration="Duration" Progress="Progress"  Dependency="Predecessor" ParentID="ParentId">
             </GanttTaskFields>
             <GanttEditSettings AllowAdding="true"></GanttEditSettings>
             </SfGantt>
             @code{
             private List<TaskData> TaskCollection { get; set; }
             private List<GanttAddDialogField> addDialogFields { get; set; } = new List<GanttAddDialogField>()
             {
               new GanttAddDialogField(){ Fields = new string[]{"TaskId","TaskName","EndDate","Duration"}, HeaderText = "General" , Type = GanttDialogFieldType.General},
               new GanttAddDialogField(){ Fields = new string[]{"Dependency"}, HeaderText="Predecessor" ,Type = GanttDialogFieldType.Dependency }
             };
             }
            ]]> 
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.AllowExcelExport">
            <summary>
            Gets or sets a value indicating whether to allow exporting Gantt data to excel and csv.
            </summary>
            <value>
            <c>true</c>If need to allow exporting to excel and csv; otherwise,  <c>false</c>. The default value is <c>false</c>.
            </value>
            <remarks>
            Exporting can be customized using <see cref="T:Syncfusion.Blazor.Grids.ExcelExportProperties" /> type parameter of <see cref="M:Syncfusion.Blazor.Gantt.SfGantt`1.ExportToCsvAsync" /> method.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.ChildContent">
            <summary>
            Gets or sets the child content of the component.
            </summary>
            <value>
            The child content of the component.
            </value>
            <remarks>
            This property can be used to define custom content to be rendered inside the component.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.AllowFiltering">
            <summary>
            Gets or sets a value indicating whether filtering is allowed.
            </summary>
            <value>
            <c>true</c>If filtering of the data in the control is allowed; otherwise,  <c>false</c>.The default value is <c>false</c>.
            </value>
            <remarks>
            You can cancel or customize the filtering action through <see cref="P:Syncfusion.Blazor.Gantt.GanttEvents`1.OnActionBegin" /> event handler.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.AllowReordering">
            <summary> 
            Gets or sets a value indicating whether reordering is allowed.
            </summary> 
            <value> 
            <c>true</c> Enables reordering in the application.; otherwise, <c>false</c>.The default value is <c>false</c>. 
            </value> 
            <remarks> 
            Reordering can be done by drag and drop of a particular column from one index to another index. 
            You can cancel or customize the column reordering action through <see cref="P:Syncfusion.Blazor.Gantt.GanttEvents`1.OnActionBegin" /> event handler.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.AllowResizing">
            <summary> 
            Gets or sets whether to allow resizing of Gantt columns.  
            </summary> 
            <value> 
            <c>true</c> Enables resizing in the application; otherwise, <c>false</c>.The default value is <c>false</c>. 
            </value> 
            <remarks> 
            You can cancel or customize the resizing action through <see cref="P:Syncfusion.Blazor.Gantt.GanttEvents`1.ColumnResizeStart" /> event handler.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.AllowRowDragAndDrop">
            <summary> 
            Gets or sets whether to allow row reordering in Gantt.  
            </summary> 
            <value> 
            <c>true</c> If need to allow row drag and drop in Gantt; otherwise, <c>false</c>.The default value is <c>false</c>. 
            </value> 
            <remarks> 
            You can cancel or customize the row reorder action through <see cref="P:Syncfusion.Blazor.Gantt.GanttEvents`1.OnRowDragStart" /> event handler.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.AllowSelection">
            <summary> 
            Gets or sets whether to allow row and cell selection in Gantt.  
            </summary> 
            <value> 
            <c>true</c> If need to allow selection of Gantt Record; otherwise, <c>false</c>. The default value is <c>true</c>. 
            </value> 
            <remarks>
            To perform the multi-selection, hold CTRL key and click the desired rows/cells.
            To select range of rows/cells, hold SHIFT key and click the rows/cells.The default value is false.
            You can cancel or customize the selection action through <see cref="P:Syncfusion.Blazor.Gantt.GanttEvents`1.RowSelecting" /> event handler.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.AllowSorting">
            <summary> 
            Gets or sets whether to allow sorting of records when column header is clicked.  
            </summary> 
            <value> 
            <c>true</c> If need to allow sorting of records; otherwise, <c>false</c>.The default value is <b>false</b>. 
            </value> 
            <remarks> 
            You can cancel or customize the sorting action through <see cref="P:Syncfusion.Blazor.Gantt.GanttEvents`1.OnActionBegin" /> event handler.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.AllowUnscheduledTasks">
            <summary>
            Gets or sets whether to allow rendering of unscheduled tasks in Gantt.
            </summary>
            <value> 
            <c>true</c> If need to allow unscheduled tasks in Gantt; otherwise, <c>false</c>. The default value is <c>false</c>. 
            </value> 
            <remarks> 
            You can create or update the tasks with anyone of start date, end date, and duration values or none.
            You can enable or disable unscheduled tasks in Gantt chart by setting the <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.AllowUnscheduledTasks"/> property.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.BaselineColor">
            <summary> 
            Gets or sets the background color for baseline taskbar.
            </summary> 
            <value> 
            The background color can be specified as a color name, such as "Orange", or as its hexadecimal value, such as "#FFA500"..
            </value> 
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.CollapseAllParentTasks">
            <summary>
            Gets or sets whether to render root tasks in collapsed state at initial rendering of Gantt Chart.
            </summary>
            <value> 
            <c>true</c> if root tasks are rendered in collapsed state; otherwise, <c>false</c>.The default value is <c>false</c>. 
            </value> 
            <remarks> 
            You can use <see href="Syncfusion.Blazor.Gantt.SfGantt.CollapseAllAsync" /> method for dynamic collapsing of all parent tasks.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.ColumnMenuItems">
             <summary>
             Gets or Sets bulit-in menu items of Gantt columns.
             </summary>
             <value> 
             Column menu items, for example ColumnMenuItems = "@(new string[] { "AutoFillColumns","AutoFitThisColumn"})".
             The available built-in Column menu items are,
               <list type="bullet">
               <item>
               <term>AutoFitAllColumns
               </term>
               <description>Auto fit all columns
               </description>
               </item>
               <item>
               <term>AutoFitThisColumn
               </term>
               <description>Auto fit the current column
               </description>
               </item>
               <item>
               <term>SortAscending
               </term>
               <description>Sort the current column in ascending order
               </description>
               </item>
               <item>
               <term>SortDescending
               </term>
               <description>Sort the current column in descending order
               </description>
               </item>
               <item>
               <term>ColumnChooser
               </term>
               <description>To show/hide the TreeGrid columns
               </description>
               </item>
               <item>
               <term>Filter
               </term>
               <description>Filter options will show based on filterSettings property
               </description>
               </item>
               </list>
             </value> 
             <remarks>
             Displays the column menu items when clicking the menu icon on column headers. <see href="Syncfusion.Blazor.Gantt.ShowColumnMenu">ShowColumnMenu</see> should be enabled.
             </remarks>
             <example>
             <code>
             <![CDATA[
             <SfGantt DataSource = "@TaskCollection" ShowColumnMenu="true" AllowSorting="true">
             <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate"
                Duration="Duration" Progress="Progress" ParentID="ParentId">
             </GanttTaskFields>
             </SfGantt>
             @code{
             private List<TaskData> TaskCollection { get; set; }
             private string[] columnMenuItems = new string[] { "AutoFitAll", "AutoFit", "SortAscending" };
             }
            ]]> 
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.Columns">
            <summary>
            Gets or sets an instance of <see cref="T:Syncfusion.Blazor.Gantt.GanttColumn"/> collection which provides details of grid's columns in Gantt Chart.
            </summary>
            <value> 
            A List instance of <see cref="T:Syncfusion.Blazor.Gantt.GanttColumn"/>.
            </value> 
            <remarks> 
            The columns in the Gantt Chart are used to display the values of the fields from the records of the bound data source.If this property is not set, then the columns are automatically populated based on <see cref="T:Syncfusion.Blazor.Gantt.GanttTaskFields" /> property.
            </remarks> 
            <example> 
            <code> 
            <![CDATA[ 
                <SfGantt DataSource="@TaskCollection" Columns=columns>
                    <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate"
                     Duration="Duration" Progress="Progress" ParentID="ParentId">
                    </GanttTaskFields>
                </SfGantt>
                @code{
                private List<TaskData> TaskCollection { get; set; }
                private List<GanttColumn> columns { get; set; } = new List<GanttColumn>()
                {
                    new GanttColumn() { Field = "TaskId", HeaderText = "ID", Width = "150" },
                    new GanttColumn() { Field = "TaskName", HeaderText = "Task Name", Width = "300" },
                    new GanttColumn() { Field = "Duration", HeaderText = "Duration", Width = "200" }
                };
                }
            ]]> 
            </code> 
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.ConnectorLineBackground">
            <summary> 
            Gets or sets the background color of the connector line in Gantt chart.  
            </summary> 
            <value> 
            A string value which represents the color in CSS format, for example "#ff00ff".The default value is "transparent".
            </value>
            <remarks>
            The connector lines are used to represent the dependency relationship between tasks in Gantt chart.
            </remarks>
            <example>
            <code>
            <![CDATA[
                <SfGantt DataSource="@TaskCollection" ConnectorLineBackground="Red">
                   <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate"
                     Duration="Duration" Progress="Progress" ParentID="ParentId">
                    </GanttTaskFields>
                </SfGantt>
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.ConnectorLineWidth">
            <summary>
            Gets or sets the width of the connector line.
            </summary>
            <value>
            The width is specified in pixels. The default connector line width is 1.
            This property is used to determine the width of the line that connects tasks in a project.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.ContextMenuItems">
            <summary>
            Gets or sets both built-in and custom context menu items.
            </summary>
            <value>
            A list of built-in context menu items names or instance of <see cref="T:Syncfusion.Blazor.Grids.ContextMenuItemModel" /> for custom items.
            </value>
            <example>
            <code>
            <![CDATA[
            <SfGantt @ref="Gantt" DataSource="@TaskCollection" ContextMenuItems=contextMenuItems EnableContextMenu="true">
                <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate" Duration="Duration" Progress="Progress"
                    Dependency="Predecessor" ParentID="ParentId"></GanttTaskFields>
               <GanttEditSettings AllowAdding = "true"></GanttEditSettings>
                <GanttEvents ContextMenuItemClicked = "ContextMenuItemClickedHandler" TValue="TaskData"></GanttEvents>
            </SfGantt>
            @code{
             private SfGantt<TaskData> Gantt;
             private object contextMenuItems = new List<object> { "Add", "TaskInformation", new Syncfusion.Blazor.Grids.ContextMenuItemModel { Text = "Refresh", Target = ".e-content", Id = "refresh" } };
             private List<TaskData> TaskCollection { get; set; }
             private async Task ContextMenuItemClickedHandler(ContextMenuClickEventArgs<TaskData> args)
             {
               if (args.Item.Id == "refresh")
               {
                  await Gantt.RefreshAsync();
               }
             }
             }
            ]]>
            </code>
            </example>
            <remarks>
            The available built-in items are,
            <list type="bullet">
            <item>
                <term>AutoFitAll</term>
                <description>Auto fit the size of all columns</description>
            </item>
            <item>
                <term>AutoFit</term>
                <description>Auto fit the current column</description>
            </item>
            <item>
                <term>SortAscending</term>
                <description>Sort the current column in ascending order</description>
            </item>
            <item>
                <term>SortDescending</term>
                <description>Sort the current column in descending order</description>
            </item>
            <item>
                <term>TaskInformation</term>
                <description>Displays the current task.</description>
            </item>
            <item>
                <term>Save</term>
                <description>Saves the edited Task</description>
            </item>
            <item>
                <term>Cancel</term>
                <description>Cancels the edited Task</description>
            </item>
            <item>
                <term>DeleteTask</term>
                <description>Deletes the current Task</description>
            </item>
            <item>
                <term>Add</term>
                <description>Adds a new row to the Gantt</description>
            </item>
            <item>
                <term>Convert</term>
                <description>Convert Current Task to Milestone or vice-versa</description>
            </item>
            <item>
                <term>Indent</term>
                <description>Indent the selected record to one level</description>
            </item>
            <item>
                <term>Outdent</term>
                <description>Outdent the selected record to one level</description>
            </item>
            <item>
                <term>DeleteDependency</term>
                <description>Deletes the current dependency task link.</description>
            </item>
            </list>
            Context menu items display when clicking mouse right. Enable the built in context menu item using <see href="Syncfusion.Blazor.Gantt.EnableContextMenuItems">EnableContextMenuItems</see>.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.DataSource">
            <summary>
            Gets or sets the data source for rendering gantt rows.
            </summary>
            <value>
            The data source value can be of any type that implements IEnumerable.
            </value>
            <remarks>
            To consume data from remote service or custom adaptor,
            <see cref="T:Syncfusion.Blazor.Data.SfDataManager"/> component has to be used.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.DataSourceChanged">
            <summary>
            An event that is raised when data source is updated in Gantt Chart.
            </summary>
            <value>
            An event callback function.
            </value>
            <remarks>
            This event handler receives a <see cref="T:System.Collections.Generic.IEnumerable`1"/> object which provides updated data.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfTreeGrid>
                <TreeGridEvents DataSourceChanged="DataUpdateHandler" TValue="BusinessObject"></TreeGridEvents>
            </SfTreeGrid>
            @code {
                public void DataUpdateHandler(IEnumerable<TValue> args)
                {
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.DateFormat">
            <summary>
            Gets or sets the date format used to display dates in the Gantt Chart.
            </summary>
            <value>
            This property should be set to a string that represents a valid date format.
            Examples of valid Date format "MM/dd/YYYY". The default format is based on the culture.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.DayWorkingTime">
            <summary>
            Gets or sets an instance of <see cref="T:Syncfusion.Blazor.Gantt.GanttDayWorkingTime"/> which represents the working time for a project.
            </summary>
            <remarks>
            The working time is used to calculate the duration of tasks and the completion of the project.
            <see cref="T:Syncfusion.Blazor.Gantt.GanttDayWorkingTime"/> provides various properties to customize the working time. The default day working time from 8.00 To 17.00.
            </remarks>
            <value>
            A List instance of <see cref="T:Syncfusion.Blazor.Gantt.GanttDayWorkingTime"/>.
            </value>
            <example>
            <code>
            <![CDATA[
            <SfGantt DataSource="@TaskCollection" DayWorkingTime=ganttDayWorkingTimes>
            <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate" Duration="Duration" Progress="Progress" ParentID="ParentId">
            </GanttTaskFields>
            </SfGantt>
            @code{
            private List<GanttDayWorkingTime> ganttDayWorkingTimes = new List<GanttDayWorkingTime>()
            {
                new GanttDayWorkingTime(){From= 9, To= 13},
                new GanttDayWorkingTime(){From =14, To= 20}
            };
            private List<TaskData> TaskCollection { get; set; }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.DisableHtmlEncode">
            <summary>
            Gets or sets whether to encode HTML of the header and content cells.
            </summary>
            <value> 
            <c>true</c> If need to disable html encode; otherwise, <c>false</c>.The default value is <c>false</c>. 
            </value>
            <remarks> 
            If 'DisableHtmlEncode' is set to false, it encodes the HTML of the header and content cells.
            </remarks> 
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.DurationUnit">
            <summary>
            Gets or sets the unit for duration field in the Gantt chart.
            </summary>
            <value>
            The default value is of type <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.DurationUnit"/> and represents the unit for duration field in the Gantt chart.
            The available duration units are,
             <list>
             <item>
             <term>Day</term>
             <description>Unit value of duration is measured as day.</description>
             </item>
             <item>
             <term>Minute</term>
             <description>Unit value of duration is measured  as minute.</description>
             </item>
             <item>
             <term>Hour</term>
             <description>Unit value of duration is measured  as hour.</description>
             </item>
             </list>
            </value>
            <remarks>
            Used to map duration unit of all tasks from data source.
            </remarks>
            <example> 
            <code> 
            <![CDATA[ 
                <SfGantt DurationUnit="DurationUnit.Day">  
                </SfGantt> 
            ]]> 
            </code> 
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.EditDialogFields">
             <summary>
             Gets or sets an instance of <see cref="T:Syncfusion.Blazor.Gantt.GanttEditDialogField"/> collection which provides information on tab sections within the dialog for editing a records and the column fields of the grid within each tab section.
             </summary>
             <value>
             A List instance of <see cref="T:Syncfusion.Blazor.Gantt.GanttEditDialogField"/>.
             </value>
             <remarks>
             The tabs that contain the editors for columns include:
                <b>General</b>:A tab for entering values for the columns of a new gantt record.
                <b>Dependency</b>: A tab for editing dependencies.
                <b>Resources</b>: A tab for editing resources.
                <b>Notes</b>: A tab for editing notes.
             </remarks>
             <example>
             <code>
             <![CDATA[
             <SfGantt DataSource="@TaskCollection" EditDialogFields=@editDialogFields Toolbar="@(new List<string>(){ "Edit"})">
             <GanttTaskFields Id="TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate" Duration="Duration" Progress="Progress"  Dependency="Predecessor" ParentID="ParentId">
             </GanttTaskFields>
             <GanttEditSettings AllowEditing="true"></GanttEditSettings>
             </SfGantt>
             @code{
             private List<TaskData> TaskCollection { get; set; }
             private List<GanttEditDialogField> editDialogFields { get; set; } = new List<GanttEditDialogField>()
             {
               new GanttEditDialogField(){ Fields = new string[]{"TaskId","TaskName","EndDate","Duration"}, HeaderText = "General" , Type = GanttDialogFieldType.General},
               new GanttEditDialogField(){ Fields = new string[]{"Dependency"}, HeaderText="Predecessor" ,Type = GanttDialogFieldType.Dependency }
             };
             }
            ]]> 
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.EditSettings">
            <summary>
            Gets or sets an instance of <see cref="T:Syncfusion.Blazor.Gantt.GanttEditSettings"/> which configures CRUD action behavior in Gannt Chart.
            </summary>
            <value>
            An instance of <see cref="T:Syncfusion.Blazor.Gantt.GanttEditSettings"/>.
            </value>
            <remarks>
            <see cref="T:Syncfusion.Blazor.Gantt.GanttEditSettings"/> class provides various properties to customize editing operations.
            </remarks>
            <example> 
            <code> 
            <![CDATA[ 
            <SfGantt DataSource = "@TaskCollection" EditSettings=ganttEditSettings Toolbar = "@(new List<string>() { "Add", "Delete", "Edit"})">
                <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate" Duration="Duration" Progress="Progress" ParentID="ParentId">
                </GanttTaskFields>
            </SfGantt>
            @code{
            private List<TaskData> TaskCollection { get; set; }
            private GanttEditSettings ganttEditSettings { get; set; } = new GanttEditSettings()
            {
                AllowAdding = true,AllowEditing= true, AllowDeleting= true
            };
            }
            ]]> 
            </code> 
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.EnableContextMenu">
            <summary>
            Gets or sets whether to enable all built-in context menu Items.
            </summary>
            <value>
            <c>true</c> if need to enable all built-in Context menu items; otherwise, <c>false</c>.The default value is <c>false</c>. 
            </value>
            <remarks>
            You can customize the context menu actions through <see cref="P:Syncfusion.Blazor.Gantt.GanttEvents`1.ContextMenuOpen" /> and <see cref="P:Syncfusion.Blazor.Gantt.GanttEvents`1.ContextMenuItemClicked" /> event handlers.
            </remarks>
            <example>
            <code>
            <![CDATA[ 
            <SfGantt DataSource = "@TaskCollection" EnableContextMenu="true">
                <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate" Duration="Duration" Progress="Progress" ParentID="ParentId">
                </GanttTaskFields>
            </SfGantt>
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.EnableVirtualization">
            <summary>
            Gets or sets whether to render only the rows visible within the view-port and render timeline cells twice the width of the gantt element.
            Gantt load subsequent rows on vertical scrolling and timeline cells on horizontal scrolling.
            </summary>
            <value>
            <c>true</c> if need to enable virtualization; otherwise, <c>false</c>.The default value is <c>false</c>.
            </value>
            <remarks>
            If 'EnableVirtualization' set to true, then the Gantt will render only the rows visible within the view-port and also loads project with large time span with better performance.
            Subsequent rows and timeline cells are loaded on vertical scrolling and horizontal scrolling respectively.This helps to load large dataset with large timespan in Gantt.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt DataSource = "@TaskCollection" EnableVirtualization="true">
                <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate" Duration="Duration" Progress="Progress" ParentID="ParentId">
                </GanttTaskFields>
            </SfGantt>
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.EnableRowVirtualization">
            <summary> 
            Gets or sets a value indicating whether to enable row virtualization on the grid. When enabled, only the rows visible within the viewport are rendered and on vertical scrolling, subsequent rows are loaded.  
            </summary> 
            <value> 
            <c>true</c> if need to enable row virtualization to render only the rows visible within the viewport, which enhances performance; otherwise, <c>false</c>. The default value is <c>false</c>.  
            </value> 
            <remarks> 
            If `EnableRowVirtualization` set to true, then the Gantt loads only the rows that are visible within the viewport, which improves performance for large datasets.
            </remarks> 
            <example> 
            <code> 
            <![CDATA[ 
            <SfGantt DataSource = "@TaskCollection" EnableRowVirtualization="true"> 
            <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate" Duration="Duration" Progress="Progress" ParentID="ParentId"> 
            </GanttTaskFields> 
            </SfGantt> 
            ]]> 
            </code> 
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.EnableTimelineVirtualization">
             <summary> 
             Gets or sets a value indicating whether to enable timeline virtualization on the chart side. When enabled, only the timeline cells in the current viewport are rendered and subsequent timeline cells are loaded dynamically on horizontal scrolling. 
             </summary> 
            <value> 
             <c>true</c> If need to enable timeline virtualization to load project with larger timespan with better performance; otherwise, <c>false</c>. The default value is <c>false</c>. 
             </value> 
             <remarks> 
             If `EnableTimelineVirtualization` set to true, then the Gantt loads only the timeline cells thrice the width of the Gantt element, which improves performance for large time span.  
             </remarks>   
             <example> 
             <code> 
             <![CDATA[ 
             <SfGantt DataSource = "@TaskCollection" EnableTimelineVirtualization ="true"> 
                 <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate" Duration="Duration" Progress="Progress" ParentID="ParentId"> 
                 </GanttTaskFields> 
             </SfGantt> 
             ]]> 
             </code> 
             </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.EnableColumnVirtualization">
            <summary> 
            Gets or sets whether to enable the column virtualization for the Gantt.
            </summary> 
            <value> 
            <c>true</c> if need to enable column virtualization; otherwise, <c>false</c>. The default value is <c>false</c>.
            </value> 
            <remarks>
            If 'EnableColumnVirtualization' is set to true, then the Gantt will Initially, render only the columns that are in the current viewport and also load projects with a large number of columns with better performance.
            Subsequent columns are loaded on horizontal scrolling. This helps to load a large dataset with a large number of columns in the Gantt.
            </remarks> 
            <example>
            <code>
            <![CDATA[ 
            <SfGantt DataSource = "@TaskCollection" EnableColumnVirtualization="true">
                <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate" Duration="Duration" Progress="Progress" ParentID="ParentId">
                </GanttTaskFields>
            </SfGantt>
            ]]>
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.LoadChildOnDemand">
            <summary> 
            Gets or sets whether to load child record on demand in remote data binding. Initially parent records are rendered in collapsed state. 
            </summary> 
            <value> 
            <c>true</c> If need to load only parent records at initial load, otherwise, <c>false</c>. The default value is <c>false</c>. 
            </value> 
            <remarks>   
            Loading child records on demand can improve the performance of data-bound controls with a large number of records. 
            Child records are only loaded when they are requested, rather than loading all child records at once.  
            </remarks>   
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.EnablePersistence">
            <summary>
            Gets or sets whether to persist the Gantt state while refreshing the web page.
            </summary>
            <value>
            <c>true</c> If need to persist Gantt state, otherwise, <c>false</c>. The default value is <c>false</c>.
            </value>
            <remarks>
            Gantt state is saved in the browser local storage by which the properties of the Gantt will be retained even after refreshing the page.
            </remarks>
            <example>
            <code>
            <![CDATA[ 
            <SfGantt DataSource = "@TaskCollection" EnablePersistence="true">
                <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate" Duration="Duration" Progress="Progress" ParentID="ParentId">
                </GanttTaskFields>
            </SfGantt>
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.EnablePredecessorValidation">
            <summary>
            Gets or sets whether to validate the predecessor.
            </summary>
            <value>
            <c>true</c> if need to enable predecessor validation; otherwise, <c>false</c>. The default value is <c>true</c>.
            </value>
            <remarks>
            Enabling predecessor validation ensures that the relationships between tasks are properly maintained. 
            You can perform custom validations through <see cref="P:Syncfusion.Blazor.Gantt.GanttEvents`1.OnActionBegin" /> event handler.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.DependencyTypes">
            <summary>   
            Gets or sets the dependency types in Gantt Chart.   
            </summary>   
            <value>
            A List instance of <see cref="T:Syncfusion.Blazor.Gantt.DependencyType"/>.The default value is a list containing DependencyType.FS, DependencyType.SS, DependencyType.FF, and DependencyType.SF.
            </value>   
            <remarks> 
            Only the dependency types specified in the list are allowed for mapping relationships between multiple tasks in the Gantt chart. The type specified in the first index of the `DependencyTypes` property will be the default type.
            </remarks>   
            <example>   
            <code>   
            <![CDATA[   
                <SfGantt DataSource="@TaskCollection" DependencyTypes="@(new List<DependencyType>() { DependencyType.FS })" >  
                </SfGantt>   
            ]]>   
            </code>   
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.AutoCalculateDateScheduling">
            <summary>  
            Gets or sets whether to auto calculate start and end-date by using the cases mentioned in <seealso href="https://blazor.syncfusion.com/documentation/gantt-chart/scheduling-tasks#automatically-scheduled-tasks">this UG</seealso>. 
            </summary>  
            <value>  
            <c>false</c> to skip the auto calculation of scheduling dates; otherwise, <c>true</c>.  By default, the property value is true. 
            </value>  
            <remarks>
            Disable the scheduling date validation, it will not change the dates value available in the data source. Also, it will improve the load time performance for the valid data source. 
            </remarks>  
            <example>  
            <code>  
            <![CDATA[  
                <SfGantt DataSource="@TaskCollection" AutoCalculateDateScheduling="false">  
                </SfGantt>  
            ]]>  
            </code>  
            </example>  
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.EnableRtl">
            <summary>
            Gets or sets whether to render Gantt Chart component in right to left direction, and fields are accessible in right to left
            </summary>
            <value>
            <c>true</c> if need to enable rendering component in right to left direction; otherwise, <c>false</c>. The default value is <c>false</c>.
            </value>
            <remarks>
            This property is used to enable or disable the RTL layout for the Gantt chart.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.TaskType">
            <summary>
            Defines the behavior of tasks in Gantt Chart.
            </summary>
            <value>
            One of the <see cref="T:Syncfusion.Blazor.Gantt.TaskType"/> enumeration that specifies task behavior.
            The default type is <b>Syncfusion.Blazor.Gantt.TaskType.FixedUnit</b>. 
            </value> 
            <remarks>
            The availble Task types are,
            <list type="bullet">
            <item>
            <term>None</term>
            <description>Fields are None.</description>
            </item>
            <item>
            <term>FixedDuration</term>
            <description>Duration task field will remain constant while updating resource unit or work field.</description>
            </item>
            <item>
            <term>FixedWork</term>
            <description>Work field will remain constant while updating resource unit or duration field.</description>
            </item>
            <item>
            <term>FixedUnit</term>
            <description>Resource units will remain constant while updating duration or work field.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.EventMarkers">
            <summary>
            Gets or sets a collection of <see cref="T:Syncfusion.Blazor.Gantt.GanttEventMarker"/> instances that configure the events displayed in the Gantt Chart. 
            </summary>
            <value>
            A List instance of <see cref="T:Syncfusion.Blazor.Gantt.GanttEventMarker"/>.
            </value>
            <remarks>
            The <see cref="T:Syncfusion.Blazor.Gantt.GanttEventMarker"/> class provides various properties to customize event markers in the Gantt Chart.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt DataSource="@TaskCollection" EventMarkers=events>
            <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate"
               Duration="Duration" Progress="Progress" ParentID="ParentId">
            </GanttTaskFields>
            </SfGantt>
            @code{
            public List<TaskData> TaskCollection { get; set; }
            private List<GanttEventMarker> events { get; set; } = new List<GanttEventMarker>()
            {
               new GanttEventMarker(){ Day = new DateTime(2019, 04, 11), Label = "Project approval and kick-off", CssClass = "e-custom-event-marker" }
            };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.FilterSettings">
            <summary>
            Gets or sets an instance of the <see cref="T:Syncfusion.Blazor.Gantt.GanttFilterSettings"/> class, which is used to configure the filtering action in the Gantt Chart.
            </summary>
            <value>
            An instance of <see cref="T:Syncfusion.Blazor.Gantt.GanttFilterSettings"/>.
            </value>
            <remarks>
            The <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.FilterSettings"/> enum class provides various options to customize the filter action.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt DataSource="@TaskCollection" AllowFiltering="true" FilterSettings=ganttFilterSettings>
            <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate" Duration="Duration" Progress="Progress" ParentID="ParentId">
            </GanttTaskFields>
            </SfGantt>
            @code{
            private GanttFilterSettings ganttFilterSettings = new GanttFilterSettings()
            {
                HierarchyMode = FilterHierarchyMode.None
            }
            public List<TaskData> TaskCollection { get; set; }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.GridLines">
            <summary>
            Defines how to show borders of row and cells in Gantt Chart.
            </summary>
            <value>
            One of the <see cref="T:Syncfusion.Blazor.Grids.GridLine"/> enumeration that specifies whether to render horizontal and vertical border lines.
            The default value is <b>Syncfusion.Blazor.Grids.GridLine.Horizontal</b>. 
            </value>
            <remarks>
            The availble grid lines are,
            <list type="bullet">
            <item>
            <term>Both</term>
            <description>Displays both the horizontal and vertical grid lines.</description>
            </item>
            <item>
            <term>None</term>
            <description>No grid lines are displayed.</description>
            </item>
            <item>
            <term>Horizontal</term>
            <description>Displays the horizontal grid lines only.</description>
            </item>
            <item>
            <term>Vertical</term>
            <description>Displays grid lines based on the theme.</description>
            </item>
            </list>
            </remarks>
            <example>  
            <code>  
            <![CDATA[  
            <SfGantt DataSource="@TaskCollection" GridLines="GridLine.Horizontal">
               <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate" Duration="Duration" Progress="Progress" ParentID="ParentId">
            </GanttTaskFields>
            <GanttSelectionSettings Mode = "Syncfusion.Blazor.Grids.SelectionMode.Cell" ></ GanttSelectionSettings >
            </ SfGantt > 
            ]]>  
            </code>  
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.KeySettings">
            <summary>
            Gets or Sets an instance of <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.KeySettings"/> to configure the hot keys of Gantt Chart.
            </summary>
            <value>
            An instance of <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.KeySettings"/>             
            </value>
            <remarks>
            <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.KeySettings"/> class provides the properties to customize the hot keys.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt DataSource="@TaskCollection" KeySettings=ganttkeySettings>
               <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate" Duration="Duration" Progress="Progress" ParentID="ParentId">
            </GanttTaskFields>
            <GanttSelectionSettings Mode = "Syncfusion.Blazor.Grids.SelectionMode.Cell" ></ GanttSelectionSettings >
            </ SfGantt >
            @code{
            private GanttKeySettings ganttkeySettings = new GanttKeySettings()
            {
                MoveLeftCell = "Shift+LeftArrow"
            };
            public List<TaskData> TaskCollection { get; set; }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.Height">
            <summary>
            Gets or sets the height of the Gantt component container.
            </summary>
            <value>
            The height of the Gantt chart should be set to a specific pixel or percentage or auto, for example "500px". The default value is "auto".
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.HighlightWeekends">
            <summary>
            Gets or sets whether to highlight all the weekend days. It is applicable only on day timeline mode. 
            </summary>
            <value>
            <c>true</c> if need to enable the weekend highlights; otherwise, <c>false</c>.The default value is <c>fasle</c>. 
            </value>
            <example>
            <code>
            <![CDATA[
            <SfGantt DataSource="@TaskCollection" HighlightWeekends="true">
               <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate" Duration="Duration" Progress="Progress" ParentID="ParentId">
            </GanttTaskFields>
            <GanttSelectionSettings Mode = "Syncfusion.Blazor.Grids.SelectionMode.Cell" ></ GanttSelectionSettings >
            </ SfGantt >
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.Holidays">
            <summary>
            Gets or sets an instance of <see cref="T:Syncfusion.Blazor.Gantt.GanttHoliday"/> collection in the Gantt chart to display holidays.
            </summary>
            <value>
            A List instance of <see cref="T:Syncfusion.Blazor.Gantt.GanttHoliday"/> objects.
            </value>
            <remarks>
            The <see cref="T:Syncfusion.Blazor.Gantt.GanttHoliday"/> class provides various properties to customize the appearance of holidays in the Gantt chart.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt DataSource="@TaskCollection" Holidays=holidays >
            <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate" Duration="Duration" Progress="Progress" ParentID="ParentId">
            </GanttTaskFields>
            </ SfGantt >
            @code{
            private List<GanttHoliday> holidays = new List<GanttHoliday>()
            {
                new GanttHoliday(){ From = new DateTime(2022, 04, 11), To = new DateTime(2022, 04, 12), Label = "Public holidays"},
            };
            public List<TaskData> TaskCollection { get; set; }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.ID">
            <summary>
            Gets or sets the Gantt DOM element's Id.
            </summary>
            <value>
            HtmlElement ID, for example "GanttEditing".
            </value>
            <example>
            <code>
            <![CDATA[
            <SfGantt ID="GanttEditing" DataSource="@TaskCollection">
            <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate" Duration="Duration" Progress="Progress" ParentID="ParentId">
            </GanttTaskFields>
            </ SfGantt >
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.IncludeWeekend">
            <summary>
            Gets or sets whether to consider weekend days as working day or not.
            </summary>
            <value>
            <c>true</c> if need to include weekend as working days; otherwise, <c>false</c>.The default value is <c>false</c>. 
            </value>
            <example>
            <code>
            <![CDATA[
            <SfGantt DataSource="@TaskCollection" IncludeWeekend=true>
            <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate" Duration="Duration" Progress="Progress" ParentID="ParentId">
            </GanttTaskFields>
            </SfGantt>
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.Locale">
            <summary>
            Gets or sets the culture name for displaying localized content in Gantt Chart.
            </summary>
            <value>
            The default value is "en-US"
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.ProjectEndDate">
            <summary>
            Gets or sets the end date of the project.
            </summary>
            <value>
            The date value of the project end date. The default value is null.
            </value>
            <remark>
            This property is used to store the end date of a project.
            If `ProjectEndDate` value not set then it will be automatically calculated from a data source.
            </remark>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.ProjectStartDate">
            <summary>
            Gets or sets the start date of the project in Gantt chart.
            </summary>
            <value>
            Project start date value in DateTime. The default value is null.
            </value>
            <remark>
            If `ProjectStartDate` value not set then it will be calculated from data source.
            </remark>
            <example>
            <code>
            <![CDATA[
            <SfGantt DataSource="@TaskCollection" ProjectStartDate="@ProjectStart">
            <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate" Duration="Duration" Progress="Progress" ParentID="ParentId">
            </GanttTaskFields>
            </ SfGantt >
            @code{
            private DateTime? ProjectStart = new DateTime(2022, 01, 01);
            public List<TaskData> TaskCollection { get; set; }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.Query">
            <summary>
            Gets or sets an instance of <see cref="T:Syncfusion.Blazor.Data.Query"/> which process the data based on query provided.
            </summary>
            <remarks>
            The `Query` property is used to retrieve data from a data source and display it in the Gantt chart.
            <see cref="T:Syncfusion.Blazor.Data.Query"/> class provides various options for doing data operations in Gantt Chart.
            </remarks>
            <value>
            An instance of <see cref="T:Syncfusion.Blazor.Data.Query"/>.
            </value>
            <example>
            <code>
            <![CDATA[
            <SfGantt DataSource="@TaskCollection" Query=query>
            <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate" Duration="Duration" Progress="Progress" ParentID="ParentId">
            </GanttTaskFields>
            </ SfGantt >
            @code{
            private Syncfusion.Blazor.Data.Query query = new Syncfusion.Blazor.Data.Query().Take(10);
            public List<TaskData> TaskCollection { get; set; }
            }
            ]]>
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.RenderBaseline">
            <summary>
            Gets or sets whether to render the baseline in the Gantt chart.
            </summary>
            <value>
            <c>true</c> if need to render the baseline in gantt; otherwise, <c>false</c>.The default value is <c>true</c>.
            </value>
            <remarks>
            Baseline is used to display the initial planned start and end date of a task.
            The baseline start and end date values should be mapped from data source.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt DataSource="@TaskCollection" RenderBaseline=true>
            <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate" Duration="Duration" Progress="Progress" ParentID="ParentId">
            </GanttTaskFields>
            </SfGantt>
            @code{
            public List<TaskData> TaskCollection { get; set; }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.ResourceFields">
            <summary>
            Gets or sets an instance of <see cref="T:Syncfusion.Blazor.Gantt.GanttResourceFields`1"/> that allocates the resources (human resources) for each task.
            </summary>
            <remarks>
            The <see cref="T:Syncfusion.Blazor.Gantt.GanttResourceFields`1"/> class provides various properties to customizes the resource allocations.
            </remarks>
            <value>
            An instance of <see cref="T:Syncfusion.Blazor.Gantt.GanttResourceFields`1"/>.
            </value>
            <example>
            <code>
            <![CDATA[
            <SfGantt DataSource="@TaskCollection" ResourceFields="ResourceFields">
            <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate" Duration="Duration" Progress="Progress" ParentID="ParentId">
            </GanttTaskFields>
            </ SfGantt >
            @code{
            private GanttResourceFields<ExpandoObject> resourceFields = new GanttResourceFields<ExpandoObject>()
            {
                ID = "ResourceId",
                Name = "ResourceName"
            };
            public List<TaskData> TaskCollection { get; set; }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.RowHeight">
            <summary>
            Gets or sets the height value for the grid rows and chart rows of Gantt chart.
            </summary>
            <value>
            An integer value that represents the height of the row in pixels. The default value is 36 pixel.
            </value>
            <remarks>
            Row height can be changed by using 'RowHeight' property.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt DataSource="@TaskCollection" RowHeight="50">
            <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate" Duration="Duration" Progress="Progress" ParentID="ParentId">
            </GanttTaskFields>
            </ SfGantt >
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.SearchSettings">
            <summary>
            Gets or sets an instance of <see cref="T:Syncfusion.Blazor.Gantt.GanttSearchSettings"/> which configures searching behavior in Gannt Chart.
            </summary>
            <value>
            An instance of <see cref="T:Syncfusion.Blazor.Gantt.GanttSearchSettings"/>.
            </value>
            <remarks>
            The <see cref="T:Syncfusion.Blazor.Gantt.GanttSearchSettings"/> class provides various properties to customize searching operations.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt DataSource="@TaskCollection" SearchSettings=ganttSearchSettings Toolbar="@(new List<string>() { "Search" })">
            <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate" Duration="Duration" Progress="Progress" ParentID="ParentId">
            </GanttTaskFields>
            </SfGantt>
            @code{
            private GanttSearchSettings ganttSearchSettings = new GanttSearchSettings()
            {
              Fields = new string[] { "TaskName" },
              Operator = Operator.Contains,
            };
            public List<TaskData> TaskCollection { get; set; }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.SelectedRowIndex">
            <summary>
            Gets or sets the selected row index in Gantt.
            </summary>
            <value>
            Row index of selected row.
            </value>
            <remarks>
            The `SelectedRowIndex` allows you to select a row at initial rendering.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt DataSource="@TaskCollection" SelectedRowIndex=2>
            <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate" Duration="Duration" Progress="Progress" ParentID="ParentId">
            </GanttTaskFields>
            </ SfGantt >
            @code{
            public List<TaskData> TaskCollection { get; set; }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.SelectionSettings">
            <summary>
            Gets or sets an instance of <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.SelectionSettings"/> to configure the selection behavior.
            </summary>
            <value>
            An instance of <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.SelectionSettings"/>
            </value>
            <remarks>
            <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.SelectionSettings"/> class provides the properties to customize the selection action in Gantt chart.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt DataSource="@TaskCollection" SelectionSettings = ganttSelectionSettings >
            <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate" Duration="Duration" Progress="Progress" ParentID="ParentId">
            </GanttTaskFields>
            </SfGantt>
            @code{
            private GanttSelectionSettings ganttSelectionSettings = new GanttSelectionSettings()
            {
                Mode = Syncfusion.Blazor.Grids.SelectionMode.Both
            };
            private List<TaskData> TaskCollection { get; set; }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.ShowColumnMenu">
            <summary>
            Gets or sets whether to render the column menu option in each column with default items.
            </summary>
            <value>
            <c>true</c> if need to enable column menu; otherwise, <c>false</c>.The default value is <c>false</c>.
            </value>
            <remarks>
            If 'ShowColumnMenu' set to true, then it will enable all the build in column menu items. You can customize the column menu items using <seealso href="Syncfusion.Blazor.Gantt.SfGantt.ColumnMenuItems"/>.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt DataSource="@TaskCollection" ShowColumnMenu=true>
            <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate" Duration="Duration" Progress="Progress" ParentID="ParentId">
            </GanttTaskFields>
            </ SfGantt >
            @code{
            public List<TaskData> TaskCollection { get; set; }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.ShowColumnChooser">
            <summary>
            Gets or sets whether to render column chooser in Gantt.
            </summary>
            <value>
            <c>true</c> if need to enable the column chooser; otherwise, <c>false</c>.The default value is <c>false</c>.
            </value>
            <remarks>
            This property determines whether to enable or disable column chooser in the Gantt chart. Set this property to `true` to enable the column chooser, or `false` to disable it.
            It allows you to dynamically show or hide columns.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.SortSettings">
            <summary>
            Gets or sets an instance of <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.SortSettings"/> to configure the sorting behavior.
            </summary>
            <value>
            An instance of <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.SortSettings"/>
            </value>
            <remarks>
            The <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.SortSettings"/> class provides the properties to customize the sorting behavior of the gantt chart.
            </remarks>
            <example>
            <code>
            <![CDATA[
            SfGantt DataSource="@TaskCollection" AllowSorting="true" SortSettings=ganttSortSettings>
               <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate" Duration="Duration" Progress="Progress" ParentID="ParentId">
            </GanttTaskFields>
            </SfGantt>
            @code{
            private GanttSortSettings ganttSortSettings = new GanttSortSettings()
            {
              Columns = new List<GanttSortDescriptor>()
              {
                  new GanttSortDescriptor(){ Field="TaskId", Direction=Syncfusion.Blazor.Grids.SortDirection.Descending},
              }
            };
            public List<TaskData> TaskCollection { get; set; }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.SplitterSettings">
            <summary>
            Gets or Sets an instance of <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.SplitterSettings"/> to configure the splitter panes in Gantt.
            </summary>
            <value>
            An instance of <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.SplitterSettings"/>.
            </value>
            <remarks>
            <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.SplitterSettings"/> class provides the properties to customize the splitter.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt DataSource="@TaskCollection" SplitterSettings=ganttSplitterSettings Height="300px" Width="500px">
               <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate" Duration="Duration" Progress="Progress" ParentID="ParentId">
            </GanttTaskFields>
            </SfGantt>
            @code{
            public List<TaskData> TaskCollection { get; set; }
            private GanttSplitterSettings ganttSplitterSettings = new GanttSplitterSettings()
            {
              Position = "20%"
            };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.TaskbarHeight">
            <summary>
            Gets or sets the height of the taskbar in the Gantt chart.
            </summary>
            <value>
            Taskbar HtmlElement height in pixel.
            </value>
            <example>
            <code>
            <![CDATA[
            SfGantt DataSource="@TaskCollection" TaskbarHeight="50">
               <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate" Duration="Duration" Progress="Progress" ParentID="ParentId">
            </GanttTaskFields>
            </SfGantt>
            public List<TaskData> TaskCollection { get; set; }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.TaskFields">
            <summary>
            Gets or sets an instance of <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.TaskFields"/> to configure the Task fields in Gantt.
            </summary>
            <value>
            An instance of <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.TaskFields"/>.
            </value>
            <remarks>
            <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.TaskFields"/> class provides an properties to customize the Task fields.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt DataSource="@TaskCollection" TaskFields=taskFields>
            </SfGantt>
            @code{
            public List<TaskData> TaskCollection { get; set; }
            private GanttTaskFields taskFields = new GanttTaskFields()
            {
              Id = "TaskId",
              Name = "TaskName",
              StartDate = "StartDate",
              EndDate = "EndDate",
              Duration = "Duration",
              Progress = "Progress",
               ParentID = "ParentId"
            };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.TaskMode">
            <summary>
            Gets or sets the schedule mode of tasks in the Gantt chart.
            </summary>
            <value>
            The available scheduling mode are,
            <list type="bullet">
            <item>
            <term>Auto</term>
            <description>Tasks are displayed in auto scheduled mode.</description>
            </item>
            <item>
            <term>Manual</term>
            <description>Tasks are displayed in manual scheduled mode.</description>
            </item>
            <item>
            <term>Custom</term>
            <description>Both Auto and Manual tasks are render by mapped from data source.</description>
            </item>
            </list>
            The default value is <see cref="F:Syncfusion.Blazor.Gantt.ScheduleMode.Auto"/>.
            </value>
            <remarks>
            This property determines how task values in the Gantt chart will be validated.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt DataSource="@TaskCollection" TaskMode="ScheduleMode.Auto">
               <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate" Duration="Duration" Progress="Progress" ParentID="ParentId">
            </GanttTaskFields>
            </SfGantt>
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.TimelineSettings">
            <summary>
            Gets or sets an instance of <see cref="T:Syncfusion.Blazor.Gantt.GanttTimelineSettings"/> which configures the Gannt chart timeline.
            </summary>
            <value>
            An instance of <see cref="T:Syncfusion.Blazor.Gantt.GanttTimelineSettings"/>.
            </value>
            <remarks>
            The <see cref="T:Syncfusion.Blazor.Gantt.GanttTimelineSettings"/> class provides various properties to customize Gantt chart timeline.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt DataSource="@TaskCollection" TimelineSettings=ganttTimelineSettings Height="450px" Width="1000px">
            <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate"
                Duration="Duration" Progress="Progress" ParentID="ParentId">
            </GanttTaskFields>
            </SfGantt>
            @code{
            private GanttTimelineSettings ganttTimelineSettings = new GanttTimelineSettings()
            {
                TimelineUnitSize = 45,
                TimelineViewMode = TimelineViewMode.Week
            };
            private List<TaskData> TaskCollection { get; set; }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.ColumnChooserSettings">
            <summary>
            Gets or sets an instance <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.ColumnChooserSettings"/> to configure the column chooser setting.
            </summary>
            <value>
            An instance of <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.ColumnChooserSettings"/>.
            </value>
            <remarks>
            The Column Chooser settings allows developers to specify which columns should be displayed in the Gantt chart and in what order.
            The <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.LabelSettings"/> class provides properties to customize the column chooser settings.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.ZoomTimelineSettings">
            <summary>
            Gets or sets an instance of <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.ZoomTimelineSettings"/> to configure the timeline zooming behavior.
            </summary>
            <value>
            An instance of <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.ZoomTimelineSettings"/>.
            </value>
            <remarks>
            Use this property to control the behavior of the zoom timeline, such as the minimum and maximum zoom levels and the steps to increment or decrement the zoom level.
            The <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.ZoomTimelineSettings"/> class provides an properties to customize the zoomtimeline action.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.Toolbar">
            <summary>
            Gets or sets the toolbar items in Gantt.
            </summary>
            <value>
            The available built-in toolbar items are:
            <list type="bullet">
            <item>
            <term>Add</term>
            <description>Adds a new record.</description>
            </item>
            <item>
            <term>Edit</term>
            <description>Edits the selected task.</description>
            </item>
            <item>
            <term>Update</term>
            <description>Saves the edited task.</description>
            </item>
            <item>
            <term>Delete</term>
            <description>Deletes the selected task.</description>
            </item>
            <item>
            <term>Cancel</term>
            <description>Cancels the edit state.</description>
            </item>
            <item>
            <term>Search</term>
            <description>Searches tasks by the given key.</description>
            </item>
            <item>
            <term>ExpandAll</term>
            <description>Expands all the task of Gantt.</description>
            </item>
            <item>
            <term>CollapseAll</term>
            <description>Collapses all the task of Gantt.</description>
            </item>
            <item>
            <term>PrevTimeSpan</term>
            <description>Extends timeline with one unit before the timeline start date</description>
            </item>
            <item>
            <term>NextTimeSpan</term>
            <description>Extends timeline with one unit after the timeline finish date.</description>
            </item>
            <item>
            <term>ZoomIn</term>
            <description>Zoom-in the timeline</description>
            </item>
            <item>
            <term>ZoomOut</term>
            <description>Zoom-out the timeline</description>
            </item>
            <item>
            <term>ZoomToFit</term>
            <description>Displays all tasks within the viewable Gantt chart within current view port.</description>
            </item>
            <item>
            <term>ExcelExport</term>
            <description>Exports Gantt data in Excel format.</description>
            </item>
            <item>
            <term>CsvExport</term>
            <description>Exports Gantt data in CSV format.</description>
            </item>
            </list>
            </value>
            <remarks>
            The toolbar items are strings that represent built-in or custom actions that can be performed on the Gantt tasks.
            Both built-in and custom toolbar items can be added to toolbar.
            </remarks>
            <example>
            <code>   
            <![CDATA[   
                  <SfGantt @ref = "Gantt" DataSource="@TaskCollection" Toolbar="@(new List<string>() { "Add", "Cancel", "Delete", "Edit", "Update", new ItemModel() { Text = "QuickFilter", TooltipText = "Quick Filter", PrefixIcon = "e-click", Id = "QuickFilter" }})">
                  </SfGantt> 
            ]]>   
            </code>   
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.TooltipSettings">
            <summary>
            Gets or sets an instance of <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.TooltipSettings"/> to configure the tooltip behavior in the Gantt.
            </summary>
            <value>
            An instance of <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.TooltipSettings"/>.
            </value>
            <remarks>
            The <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.TooltipSettings"/> class provides the properties to customize the tooltip setting.
            </remarks>
            <example>
            <code>   
            <![CDATA[   
                  <SfGantt @ref = "Gantt" ID="GanttEditing" DataSource="@TaskCollection">
                            <GanttTooltipSettings ShowTooltip="true">
                            <TaskbarTemplate>
                              @{
                                  <div>TaskID: @context.TaskId</div>
                                }
                             </TaskbarTemplate>
                            </GanttTooltipSettings>
                  </SfGantt> 
            ]]>   
            </code>   
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.TreeColumnIndex">
            <summary>
            Gets or sets a column index that is used to expand or collapse its child rows.
            </summary>
            <value>
            Tree column index, for example integer value 4.The default value is 0.
            </value>
            <remarks>
            The TreeColumnIndex property determines which column in the Gantt chart should be used to display the tree structure.
            Tree column index can be changed by using 'TreeColumnIndex' property.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt @ref = "Gantt" DataSource="@TaskCollection" TreeColumnIndex="1">
            </SfGantt>
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.ValidateManualTasksOnLinking">
            <summary>
            Gets or sets whether to validate date values while connecting manually scheduled tasks with predecessor.
            </summary>
            <value>
            <c>true</c> if need to validate manual tasks on linking; otherwise, <c>false</c>.The default value is <c>false</c>.
            </value>
            <example>
            <code>
            <![CDATA[
            <SfGantt @ref = "Gantt" DataSource="@TaskCollection" ValidateManualTasksOnLinking="True">
            </SfGantt>
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.ViewType">
            <summary>
            Gets or sets an instance of <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.ViewType"/> to configure the view type.
            </summary>
            <value>
            An instance of <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.ViewType"/>.
            </value>
            <remarks>
            <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.viewType"/> enum class provides an properties to customize the viewType.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.Width">
            <summary>
            Gets or sets the Width of the Gantt Component container.
            </summary>
            <value>
            Pixel or percentage values. The default value is "auto".
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.WorkUnit">
            <summary>
            Gets or sets an instance of <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.workUnit"/> to configure Work unit.
            </summary>
            <value>
            An instance of <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.WorkUnit"/>
            </value>
            <remarks>
            The <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.workUnit"/> enum class provides the properties to customize work unit.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.WorkWeek">
            <summary>
            Gets or sets the workweek of project.
            </summary>
            <value>
            An array of strings that represents the working days of the week. The default value is `{"Monday", "Tuesday", "Wednesday", "Thursday", "Friday"}`.
            </value>
            <example>
            <code>   
            <![CDATA[   
                <SfGantt  DataSource="@TaskCollection" WorkWeek="@(new string[] { "Monday","Tuesday"})">      
                </SfGantt> 
            ]]>   
            </code>   
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.TimelineTierSettings">
            <summary>
            Gets or sets an instance of <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.TimelineTierSettings"/> to configure the time line tier setting.
            </summary>
            <value>
            An instance of <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.TimelineTierSettings"/>
            </value>
            <remarks>
            The <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.TimelineTierSettings"/> class provides the various properties to customize timeline tier setting.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.AllowMultiSorting">
            <summary>
            Gets or sets whether to allow user to sort multiple column in Gantt.
            </summary>
            <value>
            <c>true</c> if need to enable AllowMultiSorting; otherwise, <c>false</c>.The default value is <c>true</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.ShowInlineNotes">
            <summary>
            Gets or sets a value that determines whether the notes column value should be displayed inside a cell or in a tooltip.
            </summary>
            <value>
            <c>true</c> if need to enable ShowInlineNotes; otherwise, <c>false</c>.The default value is <c>true</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.LabelSettings">
            <summary>
            Gets or sets an instance of <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.LabelSettings"/> to configure the labels in Gantt Chart.
            </summary>
            <value>
            An instance of <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.LabelSettings"/>.
            </value>
            <remarks>
            The <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.LabelSettings"/> class provides the various properties of the gantt label setting.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.CustomZoomingLevels">
            <summary>
            Gets or sets an instance of <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.CustomZoomingLevels"/> to configure zooming levels in the Gantt chart..
            </summary>
            <value>
            An instance of <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.CustomZoomingLevels"/>.
            </value>
            <remarks>
            The <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.CustomZoomingLevels"/> class provides the various properties to customize the zooming level.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt @ref="Gantt" DataSource="@TaskCollection" CustomZoomingLevels=zoomingLevel Toolbar="@(new List<string>() { "ZoomIn", "ZoomOut", "ZoomToFit" })" Height="450px" Width="700px">
             <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate" Duration="Duration" Progress="Progress" ParentID="ParentId" Dependency="Predecessor">
            </GanttTaskFields>
            <GanttLabelSettings LeftLabel = "TaskName" TValue="TaskData"></GanttLabelSettings>
            </SfGantt>
            private GanttZoomTimelineSettings[] zoomingLevel = new GanttZoomTimelineSettings[]
            {
              new GanttZoomTimelineSettings
              {
                  TopTier = new GanttTopTierSettings { Unit = TimelineViewMode.Week, Format = "MMM dd,yyyy", Count = 1 },
                  BottomTier = new GanttBottomTierSettings { Unit = TimelineViewMode.Day, Format = "dd", Count = 1 },
                  TimelineUnitSize = 99, TimelineViewMode = TimelineViewMode.Week, WeekStartDay = 0, UpdateTimescaleView = true,
                  WeekendBackground = null, ShowTooltip = true, Level = 0
              },
               new GanttZoomTimelineSettings
               {
                  TopTier = new GanttTopTierSettings { Unit = TimelineViewMode.Day, Format = "MMM dd yyyy", Count = 1 },
                  BottomTier = new GanttBottomTierSettings { Unit = TimelineViewMode.Hour, Format = "hh tt", Count = 12 },
                  TimelineUnitSize = 66,
                  TimelineViewMode = TimelineViewMode.Day,
                  WeekStartDay = 0,
                  UpdateTimescaleView = true,
                  WeekendBackground = null,
                  ShowTooltip = true,
                  Level = 1
              },
              new GanttZoomTimelineSettings
              {
                  TopTier = new GanttTopTierSettings { Unit = TimelineViewMode.Day, Format = "MMM dd yyyy", Count = 1 },
                  BottomTier = new GanttBottomTierSettings { Unit = TimelineViewMode.Hour, Format = "hh tt", Count = 12 },
                  TimelineUnitSize = 99,
                  TimelineViewMode = TimelineViewMode.Day,
                  WeekStartDay = 0,
                  UpdateTimescaleView = true,
                  WeekendBackground = null,
                  ShowTooltip = true,
                  Level = 2
              },
            };
            private SfGantt<TaskData> Gantt;
            private List<TaskData> TaskCollection { get; set; }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.ScrollToTaskbarOnClick">
            <summary>
            Gets or sets whether to scroll and bring the taskbar into current view port on row click action.
            </summary>
            <value>
            <c>true</c>, if taskbar is brought into view on row selection by horizontally scrolling the chart timeline.The default value is false
            </value>
            <remarks>
            For seemless view of task information you can enable this property.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.UnmatchedValues">
            <summary>
            Gets or sets the unmatched attributes of the Gantt Chart component.
            </summary>
            <value> Dictionary collections of attributes.
            Key (string): attribute name
            Value (object): value of the attribute
            </value>
            <remarks>
            It will capture the custom attributes and native events.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt DataSource="@TaskCollection" @onkeydown="KeyDown" @onkeyup="KeyUp">
            <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate"
                Duration="Duration" Progress="Progress" ParentID="ParentId">
            </GanttTaskFields>
            </SfGantt>
            @code{
            private async Task KeyDown(KeyboardEventArgs Args)
            {
                // Triggers with key information on keyboard actions
            }
            private async Task KeyUp(KeyboardEventArgs Args)
            {
                // Triggers with key information on keyboard actions
            }
            private List<TaskData> TaskCollection { get; set; }
            }
            ]]>
            </code>
            </example>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.CopyHierarchyMode">
            <summary>
            Gets or sets the mode for copying the hierarchy of the selected data in the tree grid rows. 
            </summary>
            <remarks>
            This property determines the way in which the hierarchy of the selected data in the tree grid should be copied. The available built-in items are,
            `Parent`: Copy the selected data with parent record.
            `Child`: Copy the selected data with child record.
            `Both`: Copy the selected data with both parent and child record.
            `None`: Copy only the selected record.
            </remarks>
            <value>
            One of the <see cref="T:Syncfusion.Blazor.TreeGrid.CopyHierarchyType"/> enumeration that specifies how the data is copies to clipboard.
            The default mode is <b>Syncfusion.Blazor.TreeGrid.CopyHierarchyType.Parent</b>. 
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.FrozenColumns">
            <summary>
            Gets or sets the number of frozen columns.
            </summary>
            <value>The number of columns to be frozen. The default value is 0.</value>
            <remarks>Specific column can be frozen using <see cref="P:Syncfusion.Blazor.Gantt.GanttColumn.IsFrozen"/> property.</remarks>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.AllowFreezeLineMoving">
             <summary>
             Gets or sets whether allow the user to move the frozen line by dragging and dropping it.
             </summary>
             <value>
             <b>true</b> if allowed to adjust freeze line; otherwise, <b>false</b>.  By default, the property value is false.
             </value>
             <remarks>
             Enable FreezeLineMoving property that helps to increase/decrease the frozen columns by drag-and-drop the freeze bar between columns.
             </remarks>
             <exclude/>
             <example>
             <code><![CDATA[
            <SfGantt AllowFreezeLineMoving=true FrozenColumns="2" Height="500" Width="500">
             ..
            </SfGantt>
             ]]>
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.CriticalSettings">
            <summary> 
            Gets or sets an instance of <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.CriticalSettings"/> to configure the critical tasks behavior in Gantt. 
            </summary> 
            <value> 
            An instance of <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.CriticalSettings"/>. 
            </value> 
            <remarks> 
            Provides options to customize the critical path behavior. 
            </remarks> 
            <example> 
            <code>    
            <![CDATA[    
                  <SfGantt @ref = "Gantt" DataSource="@TaskCollection"> 
                            <GanttCriticalPathSettings SlackValue="1"> 
                             
                            </GanttCriticalPathSettings> 
                  </SfGantt>  
            ]]>    
            </code>    
            </example> 
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.EnableCriticalPath">
            <summary> 
            Gets or sets a value indicating whether the critical task and the chain of linked tasks in the Gantt Chart should be highlighted. 
            </summary> 
            <value> 
            <c>true</c> if the tasks that affect the project's end date will be highlighted in the Gantt Chart; otherwise <c>false</c>. The default value is <c>false</c>. 
            </value> 
            <remarks> 
            The critical path in a project is indicated by a single task or a series of tasks in a project. Critical path is the longest sequence of activities that must be finished on time to complete the entire project 
            </remarks> 
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.ShowOverallocation">
            <summary>
            Gets or sets a value whether to highlight the time period in chart side for the resource assigned with multiple tasks happening on the same time period.
            </summary>
            <value>
            <c>true</c> if overallocated resource's taskbar in chart side should be highlighted; otherwise, <c>false</c>.
            </value>
            <remarks>
            The time period in chart side is highlighted with square brackets. This can be useful for identifying and managing resource conflicts.
            </remarks> 
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.TaskbarSettings">
            <summary> 
            Gets or sets an instance of <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.TaskbarSettings"/> to configure the taskbar settings behavior in Gantt. 
            </summary> 
            <value> 
            An instance of <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.TaskbarSettings"/>. 
            </value> 
            <remarks> 
            Provides options to customize the multitaskbar behavior. 
            </remarks> 
            <example> 
            <code>    
            <![CDATA[    
                  <SfGantt @ref = "Gantt" DataSource="@TaskCollection"> 
                            <GanttTaskbarSettings EnableMultiTaskbar="true" AllowTaskbarDragAndDrop="true"> 
                             
                            </GanttTaskbarSettings> 
                  </SfGantt>  
            ]]>    
            </code>    
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.EnableAdaptiveUI">
            <summary>  
            Gets or sets whether to enable the adaptive user interface (UI) that adjusts the Gantt DOM elements with different alignment and layout, improving user interaction on mobile and tablet devices.  
            </summary>  
            <value>  
            <c>true</c> to enable the adaptive UI in mobile and tablet devices; <c>false</c> to disable it. The default value is <c>false</c>. /// </value> 
            <remarks>  
            Enabling the adaptive UI allows users to interact seamlessly with the elements of the Gantt chart on mobile and tablet devices. 
            The mobile and tablet adaptive layouts are enabled for various actions, including filtering, add dialog, edit dialog, and viewing dependency details in the grid view of task information dialogs. 
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.OverscanCount">
            <summary> 
            Gets or sets the number of additional items to be rendered in the DOM before and after the visible items (based on <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.PageSize"/>) when virtual scrolling is enabled in gantt. 
            </summary> 
            <value> 
            The number of additional items to pre-render before and after the visible items (based on <c>PageSize</c>). 
            The default value is 0. 
            </value> 
            <remarks> 
            Adjusting this property can enhance scrolling performance and optimize rendering, especially for large datasets in a virtualized Gantt Chart. 
            By pre-rendering a buffer of extra items that are not yet visible, the component minimizes the need for frequent re-rendering while scrolling. 
            This optimization results in a smoother and more responsive user experience. 
            </remarks> 
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.PageSize">
            <summary> 
            Gets or sets the number of items displayed per page when virtual scrolling feature is enabled.. 
            </summary> 
            <value> 
            An integer value representing the number of items displayed per page. 
            </value> 
            <remarks> 
            This property specifies the number of visible items on each page, ensuring a clear and organized view of the Gantt Chart. Without this setting, twice the number of records based on the gantt content height are displayed per page. 
            </remarks> 
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.EnableRowHover">
            <summary>
            Gets or sets whether to enable hovering effect on Gantt chart rows while mouse over it.
            </summary>
            <value>
            <c>true</c> If need to enable hovering effect; otherwise, <c>false</c>. The default value is <c>false</c>.
            </value>
            <remarks>
            While hovering on the row, the background color of the row element changes.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.AddPredecessor(System.Int32,System.String)">
            <summary>
            Adds the dependency between the tasks.
            Task relationships are categorized into four types based on the start and finish dates of the task.
            <b>SS</b>cannot start the task until the dependent task also start.
            <b>SF</b>cannot finish the task until the  dependent task aso start.
            <b>FS</b>cannot start the task until the dependent task is completed.
            <b>FF</b>cannot finish the task until the dependent task is Completed.
            </summary>
            <param name="id">The task value of `Id` property of <see cref="P:Syncfusion.Blazor.Gantt.GanttTaskFields.Id"/> class.</param>
            <param name="predecessorString">The dependency relationship type.</param>
            <remarks>
            Adds the dependency between the tasks by passing TaskId and dependency type.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button @onclick="AddPredecessorFunc">Add Predecessor</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            public void AddPredecessorFunc()
            {
               gantt.AddPredecessor(12,"4FS");
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.AddPredecessor(System.Guid,System.String)">
            <summary>
            Adds the dependency between the tasks.
            Task relationships are categorized into four types based on the start and finish dates of the task.
            <b>SS</b>cannot start the task until the dependent task also start.
            <b>SF</b>cannot finish the task until the dependent task also start.
            <b>FS</b>cannot start the task until the dependent task also completed.
            <b>FF</b>cannot finish the task until the dependent task also completed. 
            </summary>
            <param name="id">The task of value ‘id’ property of <see cref="P:Syncfusion.Blazor.Gantt.GanttTaskFields.Id" /> class.</param>
            <param name="predecessorString">The dependency relationship type.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code>
            <![CDATA[
            <button @onclick="AddPredecessorfunc">Add Predecessor</button>
            <SfGantt @ref = "gantt" DataSource="@TaskCollection">
                <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate"
                    Duration="Duration" Progress="Progress" Child="SubTasks">
                </GanttTaskFields>
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task AddPredecessorFunc()
            {
                await gantt.AddPredecessor(“9245fe4a-d402-451c-b9ed-9c1a04247482”,”3F2504E0-4F89-11D3-9A0C-0305E82C3301 FS”); /// pass task id and predecessor type.
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.AddPredecessor(System.String,System.String)">
            <summary>
            Adds the dependency between the tasks.
            Task relationships are categorized into four types based on the start and finish dates of the task.
            <b>SS</b>cannot start the task until the dependent task also start.
            <b>SF</b>cannot finish the task until the dependent task also start.
            <b>FS</b>cannot start the task until the dependent task also completed.
            <b>FF</b>cannot finish the task until the dependent task also completed. 
            </summary>
            <param name="id">The task of value ‘id’ property of <see cref="P:Syncfusion.Blazor.Gantt.GanttTaskFields.Id"/> class.</param>
            <param name="predecessorString">The dependency relationship type.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code>
            <![CDATA[
            <button @onclick="AddPredecessorfunc">Add Predecessor</button>
            <SfGantt @ref = "gantt" DataSource="@TaskCollection">
                <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate"
                    Duration="Duration" Progress="Progress" Child="SubTasks">
                </GanttTaskFields>
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task AddPredecessorFunc()
            {
                await gantt.AddPredecessor(“ABCD12”,”ABCS FS”); /// pass task id and predecessor type.
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.AddRecordAsync(`0,System.Nullable{System.Int32},System.Nullable{Syncfusion.Blazor.Gantt.RowPosition},System.Object)">
            <summary> 
            Adds the new record into gantt chart asynchronously. 
            </summary> 
            <param name="data">The new record to be added. </param>  
            <param name="index">The index in which new record is to be added. </param>  
            <param name="position">The position such as Below, Above or Child, in which new record is to be added. </param> 
            <param name="resourceData">The resourceData is added to the new resource assignment <see cref="P:Syncfusion.Blazor.Gantt.GanttAssignmentFields`2.DataSource" /> collection when adding a new task record. </param> 
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns> 
            <remarks>  
            When index and position parameter are not passed, new record is added at top first row index.  
            <see cref="P:Syncfusion.Blazor.Gantt.GanttEditSettings.AllowAdding" /> should be true. 
            </remarks>  
            <example> 
            <code> 
            <![CDATA[ 
            <button @onclick="AddItemFunc">Add Record</button> 
            <SfGantt @ref="gantt" DataSource="@TaskCollection"> 
                <GanttAssignmentFields TValue="TaskData" TAssignment="ResourceAssignmentData" PrimaryKey="Id" TaskID="TaskId" ResourceID="ResourceId" Units="Unit" DataSource="@ResourceAssignmentCollection"> 
                </GanttAssignmentFields> 
            </SfGantt> 
            @code{ 
            private SfGantt<TaskData> gantt; 
            private async Task AddItemFunc() 
            { 
                ResourceAssignmentData resourceAssignmentData = new ResourceAssignmentData() 
                { 
                    Id = 14, 
                    TaskId = 2, 
                    ResourceId = 5, 
                    Unit = 40 
                }; 
               TaskData data = new TaskData(30,"ProjectApproval", new DateTime(2022,04,01),new DateTime(2022,04,05),"5",56,29); 
               await gantt.AddRecordAsync(data,29, RowPosition.Below, resourceAssignmentData); 
            } 
            } 
            ]]> 
            </code> 
            </example> 
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.GetHierarchicalData(System.Int32)">
            <summary>
            Retrieves the hierarchical data for a specified Id.
            </summary>
            <param name="id">The Id of the data to retrieve</param>
            <returns><see cref="T:System.Dynamic.ExpandoObject"/>.</returns>
            <remarks>
            Shows the hierarchical relation properties of the tasks in the Gantt chart component.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button @onclick="GetHierarchyInfo">Get Hierarchial Data</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private void GetHierarchyInfo()
            {
               var recordInfo = gantt.GetHierarchicalData(1);
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.CancelEdit">
            <summary>
            Cancels the current edit operation in the Gantt chart component.
            </summary>
            <remarks>
            Closes the add or edit form without saving changes.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button @onclick="CancelEditFunc">Cancel Edit</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            public void CancelEditFunc()
            {
               gantt.CancelEdit(); 
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.ClearFilteringAsync">
            <summary>
            Clears all filtering that has been applied to the current data set or from all columns in the Gantt chart Component.
            </summary>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.
            </returns>
            <remarks>
            Clears the filtered rows of Gantt chart.
            This method will reset all filters applied to the data set, resulting in all data being shown.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button @onclick="ClearFilterFunc">Clear Filtering </button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task ClearFilterFunc()
            {
               await gantt.ClearFilteringAsync();
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.ClearSelectionAsync">
            <summary>
            Clears all the selected rows and cells in Gantt chart.
            </summary>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.
            </returns>
            <remarks>
            Currently selected rows and cells in Gantt chart are cleared.
            This method can be used to clear the currently selected items in a gantt chart component.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button @onclick="ClearSelectionFunc">Clear Slection</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task ClearSelectionFunc()
            {
               await gantt.ClearSelectionAsync();
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.ClearSortingAsync">
            <summary>
            Clears the current sorting from all the columns of the gantt chart.
            </summary>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.
            </returns>
            <remarks>
            Clear all the sorted columns in Gantt chart.
            This method can be used to clear the sorting applied on a gantt chart component.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button @onclick="ClearSortingFunc">Clear Sorting</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task ClearSortingFunc()
            {
               await gantt.ClearSortingAsync();
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.CollapseAllAsync">
            <summary>
            Collapses all the parent rows or items in a collection.
            </summary>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.
            </returns>
            <remarks>
            This method can be used to collapse all parent rows and items in a gantt chart component that can be expanded and collapsed.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button @onclick="CollapseHandler">Collapse All</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task CollapseHandler()
            {
               await gantt.CollapseAllAsync();
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.ExportToCsvAsync">
            <summary>
            Exports the Gantt chart data to CSV formal excel file.
            </summary>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.
            </returns>
            <remarks>
            This method can be used to export data to a CSV file.
            <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.AllowExcelExport" /> should be enabled.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button @onclick="ExportToCsvFunc">Export to CSV</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task ExportToCsvFunc()
            {
               await gantt.ExportToCsvAsync();
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.ExportToCsvAsync(Syncfusion.Blazor.Grids.ExcelExportProperties)">
             <summary>
             Exports the Gantt chart data to CSV format excel file with provided properties.
             </summary>
             <param name="excelExportProperties">Options for customizing the excel document during export.</param>
             <returns>
             A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.
             </returns>
             <remarks>
             This method can be used to export data to a CSV file.
            </remarks>
             <example>
             <code>
             <![CDATA[
             /// <SfGantt @ref="gantt" DataSource="@TaskCollection"Toolbar="@(new List<string>() { "CsvExport" })">
             <GanttEvents OnToolbarClick="ToolbarClickHandler" TValue="TaskData"></GanttEvents>
             </SfGantt>
             @code{
             private SfGantt<TaskData> gantt;
             public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
             {
              Syncfusion.Blazor.Grids.ExcelExportProperties ExportProperties = new Syncfusion.Blazor.Grids.ExcelExportProperties();
              Syncfusion.Blazor.Grids.ExcelStyle ThemeStyle = new Syncfusion.Blazor.Grids.ExcelStyle()
             {
                FontName = "Segoe UI",
                FontColor = "#666666",
                FontSize = 12
             };
             Theme.Header = ThemeStyle;
             Theme.Record = ThemeStyle;
             ExportProperties.Theme = Theme;
              if (args.Item.Text == "CSV export")
              {
                await this.Gantt.CsvExport(ExportProperties);
              }
              }
             }
             ]]>
             </code>
             </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.DeleteRecordAsync(System.Nullable{System.Int32})">
            <summary>
            Deletes a record from Gantt chart component.
            </summary>
            <param name="TaskID">The task value of `Id` property of <see cref="P:Syncfusion.Blazor.Gantt.GanttTaskFields.Id"/> class to be deleted</param>
            <returns>
            A task that represents the asynchronous operation.
            <see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <remarks>
            <see cref="P:Syncfusion.Blazor.Gantt.GanttEditSettings.AllowDeleting" /> should be true. 
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button @onclick="DeleteRecordFunc">Delete Record</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task DeleteRecordFunc()
            {
               await gantt.DeleteRecordAsync(2); 
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.DeleteRecordAsync(System.Guid)">
            <summary>
            Deletes a record from Gantt chart component.
            </summary>
            <param name="TaskID">The task of value ‘Id’ property of <see cref="P:Syncfusion.Blazor.Gantt.GanttTaskFields.Id"/> class to be deleted. The unique identifier of the record to delete.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous oepration.
            </returns>
            <remarks>
            When the parameters are not passed, the selected record will be deleted.
            It accepts an unique identifier of a record as a parameter.
            <see cref="P:Syncfusion.Blazor.Gantt.GanttEditSettings.AllowDeleting"/> should be true.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button @onclick="DeleteRecordFunc">Delete Record</button>
            <SfGantt @ref = "gantt" DataSource="@TaskCollection">
                <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate"
                    Duration="Duration" Progress="Progress" Child="SubTasks">
                </GanttTaskFields>
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task DeleteRecordFunc()
            {
                await gantt.DeleteRecordAsync(“3F2504E0-4F89-11D3-9A0C-0305E82C3301”); /// pass task id.
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.DeleteRecordAsync(System.String)">
             <summary>
             Deletes a record from Gantt chart component.
             </summary>
             <param name="TaskID">The task of value ‘Id’ property of <see cref="P:Syncfusion.Blazor.Gantt.GanttTaskFields.Id"/> class to be deleted. The unique identifier of the record to delete.</param>
             <returns>
             A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.
             </returns>
             <remarks>
             When the parameters are not passed, the selected record will be deleted.
             It accepts an unique identfier of a record as a parameter.
             <see cref="P:Syncfusion.Blazor.Gantt.GanttEditSettings.AllowDeleting"/> should be true.
            </remarks>
             <example>
             <code>
             <![CDATA[
             <button @onclick="DeleteRecordFunc">Delete Record</button>
             <SfGantt @ref = "gantt" DataSource="@TaskCollection">
                 <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate"
                     Duration="Duration" Progress="Progress" Child="SubTasks">
                 </GanttTaskFields>
             </SfGantt>
             @code{
             private SfGantt<TaskData> gantt;
             private async Task DeleteRecordFunc()
             {
                 await gantt.DeleteRecordAsync(“ABCD12”); /// pass task id.
             }
             }
             ]]>
             </code>
             </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.EnableItems(System.Collections.Generic.List{System.Int32},System.Boolean)">
            <summary>
            Enable or disable the toolbar items dynamically.
            </summary>
            <param name="items">Indexes of toolbar Items to be enabled or disabled</param>
            <param name="isEnable">A boolean value indicating whether the items should be enabled (true) or disabled (false).</param>
            <returns>None</returns>
            <remarks>
            This method can be used to enable or disable items in a list, depending on the value of the isEnable parameter.
            If `isEnable` is set to true, the items will be enabled.
            If `isEnable` is set to false, the items will be disabled.</remarks>
            <example>
            <code>
            <![CDATA[
            <button @onclick="EnableItemFunc">Enable Items</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection"  Toolbar="Toolbaritems">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            public List<ItemModel> Toolbaritems = new List<ItemModel>() { new ItemModel() { Text = "Quick Filter", TooltipText = "Quick Filter", Id = "quickfilter" },
            new ItemModel() { Text = "Clear Filter", TooltipText = "Clear Filter", Id = "clearfilter" }};
            }
            private async Task EnableItemFunc()
            {
               await gantt.EnableItems(new List<int>() { 0,1 },true);
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.ExportToExcelAsync">
            <summary>
            Exports the Gantt chart data to an Excel file asynchronously.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>
            This method will export data to an excel file in a separate thread, allowing the caller to continue executing while the export is in progress.
            <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.AllowExcelExport" /> should be enabled.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button @onclick="ExportToExcelFunc">Export to Excel</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task ExportToExcelFunc()
            {
               await gantt.ExportToExcelAsync();
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.ScrollIntoViewAsync(System.Int32,System.Int32)">
            <summary>
            Asynchronously scrolls a specific row or column into current view port.
            </summary>
            <param name="columnIndex">The index of the column to scroll horizontally. If not provided, defaults to -1.</param>
            <param name="rowIndex">The index of the row to scroll vertically. If not provided, defaults to -1.</param>
            <returns>A task representing the asynchronous scrolling operation.</returns>
            <remarks>
            Programmatically scrolls to view particular data in grid part of Gantt.
            If both <paremref name="columnIndex"/> and <paremref name="rowIndex"/> are set to -1, the method wil scroll to the top left corner.
            </remarks>
            <code><![CDATA[
            <SfButton @onclick="Scroll">Scroll to row/column</SfButton>
            <SfGantt @ref="Gantt">
            ........
            </SfGantt>
            public void Scroll()
            {
            Gantt.ScrollIntoViewAsync(4, 3);
            }
            ]]></code>
            <returns><see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.ExportToExcelAsync(Syncfusion.Blazor.Grids.ExcelExportProperties)">
            <summary>
            Asynchronously Exports the Gantt chart data to Excel file.
            </summary>
            <param name="excelExportProperties">An object containing the properties of the excel export. The options for customizing the excel document during export.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous excel export operation.</returns>
            <remarks>
            <paramref name="excelExportProperties"/>should contain information such as file name, sheet name, data to be exported and any other information related to excel export.
            <see cref="T:Syncfusion.Blazor.Grids.ExcelExportProperties"/> class provides various properties to customize Excel export.
            <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.AllowExcelExport" /> should be enabled.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt @ref="gantt" DataSource="@TaskCollection"Toolbar="@(new List<string>() { "ExcelExport" })">
            <GanttEvents OnToolbarClick="ToolbarClickHandler" TValue="TaskData"></GanttEvents>
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
            {
             Syncfusion.Blazor.Grids.ExcelExportProperties ExportProperties = new Syncfusion.Blazor.Grids.ExcelExportProperties();
             Syncfusion.Blazor.Grids.ExcelStyle ThemeStyle = new Syncfusion.Blazor.Grids.ExcelStyle()
            {
               FontName = "Segoe UI",
               FontColor = "#666666",
               FontSize = 12
            };
            Theme.Header = ThemeStyle;
            Theme.Record = ThemeStyle;
            ExportProperties.Theme = Theme;
             if (args.Item.Text == "Excel export")
             {
               await this.Gantt.ExcelExport(ExportProperties);
             }
             }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.IncludingTemplateColumn(System.Boolean)">
            <summary>
            Includes the template column.
            </summary>
            <param name="isFromExcel">A boolean value indicating if the data is coming from excel or not.</param>
            <returns>This method returns a task that can be awaited.</returns>
            <remarks>
            This method is used to include template column in the data when it is coming from excel.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.UpdateExcelProperties(Syncfusion.Blazor.Grids.ExcelExportProperties)">
            <summary>
            Updates the excel properties
            </summary>
            <param name="excelExportProperties">An object of ExcelExportProperties class containing excel export properties</param>
            <returns>This method returns a task that can be awaited</returns>
            <remarks>
            This method is used to update the excel properties for the export process
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.ExpandAllAsync">
            <summary>
            Expands all the parent rows of Gantt chart.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous expand operation.</returns>
            <remarks>
            This method can be used to expand all nodes in the gantt chart.
            It can be useful for instance when you need to show the whole gantt chart structure at once.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button @onclick="ExpandAllFunc">Expand All</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task ExpandAllFunc()
            {
               await gantt.ExpandAllAsync();
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.FilterByColumnAsync(System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Filters the Gantt chart data based on the specified column and criteria asynchronously. 
            </summary>
            <param name="fieldName">The name of the column by which the Gantt chart data will be filtered.</param>  
            <param name="filterOperator">The filtering operator represented as a string. See <see cref="T:Syncfusion.Blazor.Operator"/> for available operators.</param>  
            <param name="filterValue">The value used for filtering the specified column.</param>  
            <param name="predicate">Specifies a predicate condition (e.g., AND, OR) for filtering multiple values. It is useful for multiple values filtering. Use <c>null</c> if not applicable and it is optional parameter.</param> 
            <param name="enableMatchCase">Specifies whether the filtering operation should be case-sensitive. It is an optional parameter. </param> 
            <param name="isIgnoreAccent">Specifies whether the filtering operation ignores accent differences. It is an optional parameter. </param> 
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous filter operation.</returns>  
            <remarks>  
            This method asynchronously filters the Gantt chart data by the specified column and criteria.  
            Additional options such as predicate, enableMatchCase, and isIgnoreAccent can be utilized to customize the filtering operation.  
            The predicate parameter allows for specifying a predicate condition (e.g., AND, OR) for filtering multiple values, which is optional.  
            </remarks> 
            <example>  
            Use the following code to filter the Gantt chart data by a specific column and value:  
            <![CDATA[  
            <button @onclick="FilterByColumn>Filter By Column</button>  
            <SfGantt @ref="gantt" DataSource="@GanttData">     
                ........     
            </SfGantt>     
            @code{  
                private SfGantt<TaskData> gantt;  
                private async Task FilterByColumn()  
                {  
                    await gantt.FilterByColumnAsync("TaskName", "startswith", "Iden", “or”, true, false);  
                }  
            }
            ]]>  
            </example>  
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.ZoomToFitAsync">
            <summary>
            Asynchronously zooms the time line in Gantt Chart such that all the taskbars are visibile in single view port.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>
            This method should be called after adding or removing features to ensure that all features are visible within the view.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button @onclick="ZoomFitFunc">Zoom to Fit</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task ZoomFitFunc()
            {
               await gantt.ZoomToFitAsync();
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.HideColumnAsync(System.String,System.String)">
            <summary>
            Hides a column by column name and the condition by which it was hidden.
            </summary>
            <param name="key">The column name to be hidden.</param>
            <param name="hideBy">Specifies whether the column name is based on <see cref="P:Syncfusion.Blazor.Gantt.GanttColumn.Field" /> or <see cref="P:Syncfusion.Blazor.Gantt.GanttColumn.HeaderText" /> property of column.</param>
            <remarks>
            The column will be hidden and will no longer be displayed to the user.
            You can dynamically hide a column.
            </remarks>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous hide operation.</returns>
            <example>
            <code>
            <![CDATA[
            <button @onclick="HideColumnFunc">Hide Column</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task HideColumnFunc()
            {
               await gantt.HideColumnAsync(new string[] {"TaskId"},"Id");
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.HideColumnsAsync(System.String[],System.String)">
            <summary>
            Hides the specified columns based on the column names.
            </summary>
            <param name="key">The fields or header text of the columns to hide</param>
            <param name="hideBy">A string value that determines the criteria for hiding columns. Specifies whether the column name is based on <see cref="P:Syncfusion.Blazor.Gantt.GanttColumn.Field" /> or <see cref="P:Syncfusion.Blazor.Gantt.GanttColumn.HeaderText" /> property of column.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>
            You can dynamically hide columns.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button @onclick="HideColumnFunc">Hide Column</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task HideColumnFunc()
            {
               await gantt.HideColumnAsync("TaskId","Id");
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.HideSpinnerAsync">
            <summary>
            Hide the default spinner asynchronously in Gantt Chart whenever needed.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <example>
            <remarks>
            When the spinner is displayed manually, then you can manually hide the spinner using this method.
            This method can be used to hide the spinner in the UI.
            The method will return a task representing the asynchronous operation.
            The task can be awaited to ensure that the spinner has been hidden before continuing with the next step.
            </remarks>
            <code>
            <![CDATA[
            <button @onclick="HideSpinner">Hide Spinner</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task HideSpinner()
            {
               await gantt.HideSpinnerAsync();
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.IndentAsync">
            <summary>
            Indents the record to one level of hierarchy. Moves the selected row as the last child of its previous row.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <remarks>
            This method can be used to indent the record.
            The method will return a task representing the asynchronous operation.
            The task can be awaited to ensure that the text has been indented before continuing with the next step.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button @onclick="IndentFunc">Indent</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task IndentFunc()
            {
               await gantt.IndentAsync();
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.NextTimeSpan">
            <summary>
            Updates the timeline at end point with one unit.
            </summary>
            <remarks>
            This method can be used to retrieve the next time span.
            Extends timeline with one unit after the timeline finish date.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button @onclick="NextTimeSpanFunc">Next Time Span</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            public void NextTimeSpanFunc()
            {
               gantt.NextTimeSpan();
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.OpenAddDialogAsync">
            <summary>
            Opens a dialog to add new task asynchronously.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <remarks>
            This method can be used to open the add dialog in the UI.
            The method will return a task representing the asynchronous operation.
            The task can be awaited to ensure that the dialog has been opened before continuing with the next step.
            <see cref="P:Syncfusion.Blazor.Gantt.GanttEditSettings.AllowAdding" /> should be enabled.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button @onclick="OpenAddDialog">Open Add Dialog</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task OpenAddDialog()
            {
               await gantt.OpenAddDialogAsync();
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.OpenEditDialogAsync(System.Nullable{System.Int32})">
            <summary>
            Opens a dialog to edit a task asynchronously.
            </summary>
            <param name="TaskID">The task value of `Id` property of <see cref="P:Syncfusion.Blazor.Gantt.GanttTaskFields.Id"/> class to be edited.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <remarks>
            This method can be used to open the edit dialog in the UI.
            The method will return a task representing the asynchronous operation.
            The task can be awaited to ensure that the dialog has been opened before continuing with the next step.
            <see cref="P:Syncfusion.Blazor.Gantt.GanttEditSettings.AllowEditing" /> should be enabled.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button @onclick="OpenEditDialog">Open EditDialog</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task OpenEditDialog()
            {
               await gantt.OpenEditDialogAsync(2);
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.OpenEditDialogAsync(System.Guid)">
            <summary>
            This method opens an edit dialog for a task with the given task ID.
            </summary>
            <param name="TaskID">The task of value ‘Id’ property of <see cref="P:Syncfusion.Blazor.Gantt.GanttTaskFields.Id"/> class to be deleted.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <remarks>
            This method uses the TaskID to retrieve the task from the records collection and then opens a dialog for editing its properties.
            The method should be awaited to ensure that the task has been retrieved and the dialog has been opened before continuing execution.
            <see cref="P:Syncfusion.Blazor.Gantt.GanttEditSettings.AllowEditing"/> should be true.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button @onclick="OpenEditDialog">Open EditDialog</button>
            <SfGantt @ref = "gantt" DataSource="@TaskCollection">
                <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate"
                    Duration="Duration" Progress="Progress" Child="SubTasks">
                </GanttTaskFields>
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task OpenEditDialog()
            {
                await gantt.OpenEditDialogAsync(“3F2504E0-4F89-11D3-9A0C-0305E82C3301”); /// pass task id.
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.OpenEditDialogAsync(System.String)">
            <summary>
            Opens an edit dialog for a task with the given task ID. 
            </summary>
            <param name="TaskID">The task of value ‘Id’ property of <see cref="P:Syncfusion.Blazor.Gantt.GanttTaskFields.Id"/> class to be deleted.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <remarks>
            This method uses the TaskID to retrieve the task from the records collection and then opens a dialog for editing its properties. 
            The method should be awaited to ensure that the task has been retrieved and the dialog has been opened before continuing execution.
            <see cref="P:Syncfusion.Blazor.Gantt.GanttEditSettings.AllowEditing"/> should be true.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button @onclick="OpenEditDialog">Open EditDialog</button>
            <SfGantt @ref = "gantt" DataSource="@TaskCollection">
                <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate"
                    Duration="Duration" Progress="Progress" Child="SubTasks">
                </GanttTaskFields>
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task OpenEditDialog()
            {
                await gantt.OpenEditDialogAsync(“ABCD12”); /// pass task id.
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.OutdentAsync">
            <summary>
            Outdents the record to one level of hierarchy. Moves the selected row as sibling to its parent row. 
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/>  representing the asynchronous operation.</returns>
            <remarks>
            This method Outdent the selected records.
            It should be awaited to ensure that the operation has been completed before continuing execution.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button @onclick="OutdentFunc">Outdent</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task OutdentFunc()
            {
               await gantt.OutdentAsync();
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.PreviousTimeSpan">
            <summary>
            Goes to the previous time span.
            </summary>
            <remarks>
            This method can be used in cases where you want to go to the previous timespan.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button @onclick="PreviousTimeSpanFunc">Previous TimeSpan</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            Public Void PreviousTimeSpanFunc()
            {
               gantt.PreviousTimeSpan();
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.RefreshAsync">
            <summary>
            Refreshes the current view of the gantt chart component.
            </summary>
            <remarks>
            This method refreshes the current view. 
            It should be awaited to ensure that the operation has been completed before continuing execution. 
            You can use this method whenever a manual refresh is needed to gantt chart.
            </remarks>
            <returns>A task representing the asynchronous operation.</returns>
            <example>
            <code>
            <![CDATA[
            <button @onclick="Refresh">Refresh</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task Refresh()
            {
               await gantt.RefreshAsync();
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.RemovePredecessor(System.Int32)">
            <summary>
            Removes the predecessor of the task with the given id.
            </summary>
            <param name="id">The task value of `Id` property of <see cref="P:Syncfusion.Blazor.Gantt.GanttTaskFields.Id"/> class</param>
            <example>
            <remarks>
            This method will remove the predecessor of the task with the given id.
            </remarks>
            <code>
            <![CDATA[
            <button @onclick="RemovePredecessorFunc">Remove Predecessor</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            public void RemovePredecessorFunc()
            {
               gantt.RemovePredecessor(2);
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.RemovePredecessor(System.Guid)">
            <summary>
            Removes a predecessor from the current task based on its id.
            </summary>
            <param name="id">The task of value ‘Id’ property of <see cref="P:Syncfusion.Blazor.Gantt.GanttTaskFields.Id"/> class</param>
            <remarks>
            It does not delete the predecessor task itself.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button @onclick="RemovePredecessorFunc">Remove Predecessor</button>
            <SfGantt @ref = "gantt" DataSource="@TaskCollection">
                <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate"
                    Duration="Duration" Progress="Progress" Child="SubTasks">
                </GanttTaskFields>
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private void RemovePredecessorFunc()
            {
                gantt.RemovePredecessor(“3F2504E0-4F89-11D3-9A0C-0305E82C3301”); /// pass task id.
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.RemovePredecessor(System.String)">
            <summary>
            Removes a predecessor from the current task based on its id.
            </summary>
            <param name="id">The task of value ‘Id’ property of <see cref="P:Syncfusion.Blazor.Gantt.GanttTaskFields.Id"/> class</param>
            <remarks>
            This method will remove the predecessor task from the current task's list of predecessor tasks.
            It does not delete the predecessor task itself.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button @onclick="RemovePredecessorFunc">Remove Predecessor</button>
            <SfGantt @ref = "gantt" DataSource="@TaskCollection">
                <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate"
                    Duration="Duration" Progress="Progress" Child="SubTasks">
                </GanttTaskFields>
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private void RemovePredecessorFunc()
            {
                gantt.RemovePredecessor(“ABCD12”); /// pass task id.
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.ReorderColumnsAsync(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Moves the columns position in UI from one column index to another asynchoronously.
            </summary>
            <param name="fromFName">The list of current column names that needs to be reordered.</param>
            <param name="toFName">The target column name where selected columns will be placed.</param>
            <remarks>
            This method will reorder the columns in the current tree grid as per the given parameters.
            It moves the selected columns to the target column name in the table.
            <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.AllowReordering" /> should be enabled.
            </remarks>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>
            Change the TreeGrid column positions by field names.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button @onclick="ReOrderColumn">Reorder Columns</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task ReOrderColumn()
            {
                await gantt.ReorderColumnsAsync(new List<string> {"TaskName","TaskId"},"Duration");
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.OpenColumnChooser(System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Open column chooser pop up to show or hide columns dynamically.
            </summary>
            <param name="x">The x-coordinate at which to open the column chooser.</param>
            <param name="y">The y-coordinate at which to open the column chooser.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>
            This method is used to open the column chooser, which allows the user to select which columns are visible in the view.
            You can manually open the column chooser at any position of screen at any desired time.
            </remarks>
            <remarks>
            Column chooser can be displayed on screen by given position(X and Y axis).
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button @onclick="OpenColumnChooserFunc">Open columnChooser</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task OpenColumnChooserFunc()
            {
               await gantt.OpenColumnChooser(2,4);
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.GetColumnIndexByFieldAsync(System.String)">
            <summary>
            Returns the index of a particular column based on the field name.
            </summary>
            <param name="field">A string value representing the name of the field whose index is to be returned.</param>
            <returns>An integer value representing the index of the column.
            A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>
            This method is asynchronous and should be awaited when called.
            </remarks>
            <example>
            The following code shows how to use this method: 
            <code>
            <![CDATA[
            <button @onclick="GetColumnIndex">Get ColumnIndexByField</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task GetColumnIndex()
            {
               await gantt.GetColumnIndexByFieldAsync("id"); //pass the field name of the column.
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.SearchAsync(System.String)">
            <summary>
            Searches the Gantt chart records using the given key in dataset.
            </summary>
            <param name="key">A string value representing the key to be searched for in the dataset.</param>
            <remarks>
            This method is asynchronous and should be awaited when called.
            It will search the dataset for the key provided and return the result.
            Searches the given key and displays only the rows which matches the key with any of its column values.
            </remarks>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> object representing the asynchronous operation.</returns>
            <example>
            <code>
            <![CDATA[
            <button @onclick="Search">Search</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task Search()
            {
               await gantt.SearchAsync("id"); 
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.SelectCellAsync(System.ValueTuple{System.Int32,System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Selects a cell based on the given index and toggle value.
            </summary>
            <param name="cellIndex">A tuple representing the (row,column) index of the cell to be selected.</param>
            <param name="isToggle">A boolean value representing whether the cell should be toggled on or off. If null, the cell's current state will not be changed.</param>
            <remarks>
            This method is asynchronous and should be awaited when called.
            The method will select the cell at the provided index and toggle it on or off based on the provided value.
            If no value is provided for the toggle parameter, the cell's current state will not be changed.
            <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.AllowSelection" /> should be enabled.
            </remarks>
            <returns> A <see cref="T:System.Threading.Tasks.Task"/> object representing the asynchronous operation.</returns>
            <example>
            <code>
            <![CDATA[
            <button @onclick="SelectCellFunc">Select Cell</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            Tuple<int,int> cellIndex=new Tuple<int,int>(1,2);
            private async Task SelectCellFunc()
            {
               await gantt.SelectCellAsync(cellIndex,true);
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.SelectRowAsync(System.Int32,System.Boolean)">
            <summary>
            Selects a row by index and allows for toggling the selection.
            </summary>
            <param name="index">The index of the row to select</param>
            <param name="isToggle">Determines whether to toggle the selection of the row or not. Default is false.</param>
            <remarks>
            This method selects a row based on the provided index and allows for toggling the selecting of the row.
            If the isToggle parameter is set to true, the method will toggle the selection of the row.
            If isToggle is set to false, the method will select the row.
            <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.AllowSelection" /> should be enabled.
            </remarks>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous oepration.</returns>
            <example>
            <code>
            <![CDATA[
            <button @onclick="SelectRowFunc">Select Row</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task SelectRowFunc()
            {
               await gantt.SelectRowAsync(2,true);
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.SelectRowsAsync(System.Int32[])">
            <summary>
            Selects multiple rows by their indexes.
            </summary>
            <param name="rowIndexes">An arrray of the indexes of the rows to select</param>
            <remarks>
            This method allows the selection of multiple rows by providing an array of row indexes.
            <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.AllowSelection" /> should be enabled.
            </remarks>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <example>
            <code>
            <![CDATA[
            <button @onclick="SelectRows">Select Rows</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task SelectRows()
            {
               await gantt.SelectRowsAsync(new int[] {2,5});
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.SetSplitterPositionAsync(System.String)">
            <summary>
            Changes the splitter position dynamically based on position property.
            </summary>
            <param name="positionValue">Any value from 0 to 100 that denotes the perentage of total gantt width.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>
            This method sets the splitter position using the provided position value. 
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button @onclick="SetSplitterPosition">Set Splitter position</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task SetSplitterPosition()
            {
               await gantt.SetSplitterPositionAsync("0");
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.SetSplitterPositionAsync(System.Int32)">
            <summary>
            Sets the splitter position to the end of a column asynchronously.
            </summary>
            <param name="positionValue">The position value to set the splitter to.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>
            This method sets the splitter position using the provided position value. The position value must be an integer.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button @onclick="SetSplitter">Set Splitter Position</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task SetSplitter()
            {
               await gantt.SetSplitterPositionAsync(2);
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.SetSplitterPositionAsync(Syncfusion.Blazor.Gantt.SplitterView)">
            <summary>
            Changes the splitter position dynamically to show only grid section or chart section or both sections.
            </summary>
            <param name="positionValue">One of the <see cref="T:Syncfusion.Blazor.Gantt.SplitterView"/> value.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>This method sets the splitter position using the provided SplitterView object. 
            The position value must be a valid SplitterView object.</remarks>
            <example>
            <code>
            <![CDATA[
            <button @onclick="SetSplitterPosition">Set Splitter Position</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task SetSplitterPosition()
            {
               await gantt.SetSplitterPositionAsync(SplitterView.Grid);
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.ShowColumnAsync(System.String,System.String)">
            <summary>
            Asynchronously shows a column by its column name.
            </summary>
            <param name="key">The name of the column.</param>
            <param name="hideBy">Specifies whether the column name is based on <see cref="P:Syncfusion.Blazor.Gantt.GanttColumn.Field" /> or <see cref="P:Syncfusion.Blazor.Gantt.GanttColumn.HeaderText" /> property of column.</param>
            <remarks>
            You can dynamically show hidden column.
            This method shows a column in the view using the provided key and hideBy value.
            </remarks>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchroous operation.</returns>
            <example>
            <code>
            <![CDATA[
            <button @onclick="ShowColumn">Show Column</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task ShowColumn()
            {
               await gantt.ShowColumnAsync("TaskName","Name");
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.ShowColumnsAsync(System.String[],System.String)">
            <summary>
            Asynchronously shows multiple columns by its column names.
            </summary>
            <param name="key">An array of keys of the columns should be shown</param>
            <param name="hideBy">Specifies whether the column name is based on <see cref="P:Syncfusion.Blazor.Gantt.GanttColumn.Field" /> or <see cref="P:Syncfusion.Blazor.Gantt.GanttColumn.HeaderText" /> property of column.</param>
            <remarks>
            This method shows multiple columns in the view using the provided keys and hideBy value. 
            You can dynamically show hidden columns.
            </remarks>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <example>
            <code>
            <![CDATA[
            <button @onclick="ShowColumn">Show Columns</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task ShowColumn()
            {
            await Gantt.ShowColumnsAsync(new string[] { "TaskName","TaskId"},"TaskDetails"); 
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.ShowSpinnerAsync">
            <summary>
            Asynchronously shows the spinner in gantt chart whenever needed to indicate that a gantt chart action is in processing.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>
            This method should be used when a long-running task is being executed and the user should be notified that the task is still in progress.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button @onclick="ShowSpinner">Show Spinner</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task ShowSpinner()
            {
               await gantt.ShowSpinnerAsync();
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.SortByColumnAsync(System.String,Syncfusion.Blazor.Grids.SortDirection,System.Nullable{System.Boolean})">
            <summary>
            Asynchronously sorts the data by the specified column in the specified direction.
            </summary>
            <param name="columnName">The field name to be sorted.</param>
            <param name="direction">The sort direction <see cref="T:Syncfusion.Blazor.Grids.SortDirection" /> (ascending or descending).</param>
            <param name="isMultiSort">Indicates whether or not multiple column sorting is enabled.</param>
            <remarks>
            This method should be used to sort the data displayed in a grid or table.
            <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.AllowSorting" /> should be enabled.
            </remarks>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <example>
            <code>
            <![CDATA[
            <button @onclick="SortByColumn">Sort by column</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task SortByColumn()
            {
              await Gantt.SortByColumnAsync("Id", SortDirection.Ascending,true);
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.UpdatePredecessor(System.Int32,System.String)">
            <summary>
            Updates the dependency value of a task by the task id and the predecessor string.
            </summary>
            <param name="id">The task value of `Id` property of <see cref="P:Syncfusion.Blazor.Gantt.GanttTaskFields.Id"/> class.</param>
            <param name="predecessorString">A string containing the updated predecessor information for the task.</param>
            <remarks>
            The predecessor string should be formatted as a comma-seperated list of task ids with specific predecessor type.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button @onclick="UpdatePredecessorHandler">Update Predecessor</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async UpdatePredecessorHandler()
            {
               await gantt.UpdatePredecessor(7,"4FS");
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.UpdatePredecessor(System.Guid,System.String)">
            <summary>
            Updates the dependency value of a task by the task id and predecessor string.
            </summary>
            <param name="id">The task of value ‘Id’ property of <see cref="P:Syncfusion.Blazor.Gantt.GanttTaskFields.Id"/> class</param>
            <param name="predecessorString">A string containing the updated predecessor information for the task.</param>
            <remarks>
            The predecessor string should be formatted as a comma-seperated list of task ids with specific predecessor type.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button @onclick="UpdatePredecessorHandler">Update Predecessor</button>
            <SfGantt @ref = "gantt" DataSource="@TaskCollection">
                <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate"
                    Duration="Duration" Progress="Progress" Child="SubTasks">
                </GanttTaskFields>
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private void updatePredecessorHandler()
            {
                gantt.UpdatePredecessor(“3F2504E0-4F89-11D3-9A0C-0305E82C3301”,”9245fe4a-d402-451c-b9ed-9c1a04247482 FS”); /// pass task id and predecessor type.
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.UpdatePredecessor(System.String,System.String)">
            <summary> Updates the dependency value of a task by the task id and predecessor string. </summary>
            <param name="id">The task of value ‘Id’ property of <see cref="P:Syncfusion.Blazor.Gantt.GanttTaskFields.Id"/> class</param>
            <param name="predecessorString">A string containing the updated predecessor information for the task.</param>
            /// <remarks>
            The predecessor string should be formatted as a comma-seperated list of task ids, with specific predecessor type.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button @onclick="UpdatePredecessorHandler">Update Predecessor</button>
            <SfGantt @ref = "gantt" DataSource="@TaskCollection">
                <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate"
                    Duration="Duration" Progress="Progress" Child="SubTasks">
                </GanttTaskFields>
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private void updatePredecessorHandler()
            {
                gantt.UpdatePredecessor(“ABCD12”,”ABCS FS”); /// pass task id and predecessor type.
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.ZoomInAsync">
            <summary>
            Increases the zoom level of the current view of Gantt chart Component.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>
            This method can be used to increase the zoom level of the current view in an asynchronous manner.
            The method will update the zoom level of the view without blocking the current thread.
            The task completes when the zoom operation in finished.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button @onclick="ZoomIn">Zoom In</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async ZoomIn()
            {
               await gantt.ZoomInAsync();
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.ZoomOutAsync">
            <summary>
            Decreases the zoom level of the current view asynchronously.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>
            This method can be used to decrease the zoom level of the current view in an asynchronous manner.
            The method will update the zoom level of the view without blocking the current thread.
            The task completes when the zoom operation is finished.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button @onclick="ZoomOut">Zoom Out</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task ZoomOut()
            {
               await gantt.ZoomOutAsync();
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.UpdateProjectDates(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Updates the project start date and end date of the project.
            </summary>
            <param name="startDate">The new start date of the project.</param>
            <param name="endDate">The new end date of the project.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <remarks>
            The method updates the start and end dates of the project.
            If the start date is null, the original start date will be kept.
            If the end date is null, the original end date will be kept.
            If both are null, no updates will be made.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button @onclick="UpdateProjectDatesFunc">Update Project Date</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private void UpdateProjectDatesFunc()
            {
                gantt.UpdateProjectDates(new DateTime(2021, 04, 02), new DateTime(2021, 05, 05));
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.ReorderRowAsync(System.Int32,System.Int32,System.String)">
            <summary>
            Reorders the row from one index to another with a position as above, below or child to destination index.
            </summary>
            <remarks>
            This method can be used to reorder a row in the gantt chart in an asynchronous manner.
            The method will update the index of the row without blocking the current thread.
            The task completes when the reorder operation is finished. The "position" parameter should be either "top" or "bottom" or "child".
            <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.AllowRowDragAndDrop" /> should be enabled.
            </remarks>
            <param name="fromIndex">The current row index from which the row needs to be moved.</param>
            <param name="toIndex">The new row index to which the row needs to be moved..</param>
            <param name="position">One of the string values of <see cref="T:Syncfusion.Blazor.TreeGrid.RowPosition" /> that decides whether to move the row as above or below or child to destination row index</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <example>
            <code>
            <![CDATA[
            <button @onclick="ReorderRow">Reorder Row</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task ReorderRow()
            {
               await gantt.ReorderRowAsync(2,5,"above");
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.GetSelectedRowIndexesAsync">
            <summary>
            Returns the collection of selected rows indexes.
            </summary>
            <returns>A task that represents the asynchronous operation, the task result contains a list of doubles representing the indexes of the selected rows.<see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <remarks>
            This method can be used to retrieve the indexes of the currently selected rows in the gantt chart asynchronously.
            The method will retrieve the indexes without blocking the current thread.
            The task completes when the retrieval operation is finished. The returned list of indexes may be empty if no rows are currently selected.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button @onclick="GetSelectedRow">Get Selected Row Index</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task GetSelectedRow()
            {
               await gantt.GetSelectedRowIndexesAsync();
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.SelectRowsByRangeAsync(System.Int32,System.Int32)">
            <summary>
            Select a range of rows within a specified range in Gantt Chart asynchronously.
            </summary>
            <param name="startIndex">The row starting index to be selected.</param>
            <param name="endIndex">The Row ending index to be selected.</param>
            <remarks>
            <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.AllowSelection" /> should be enabled.
            </remarks>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>
            This method can be used to select rows within a specified range in an asynchronous manner.
            The method will update the selection without blocking the current thread.
            The task completes when the selection operation is finished. 
            Method to select <see cref="M:Syncfusion.Blazor.Gantt.SfGantt`1.SelectRowsByRangeAsync(System.Int32,System.Int32)"/> a range of rows from start and end row indexes.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button @onclick="SelectRowByRange">Select rows by Range</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task SelectRowByRange()
            {
               await gantt.SelectRowsByRangeAsync(2,6);
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.GetSelectedRecordsAsync">
            <summary>
            Returns the collections of selected records in Gantt chart component asynchronously.
            </summary>
            <returns>A task that represents the asynchronous operation, the task result contains a list of selected records of type TValue.<see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <remarks>
            This method can be used to retrieve the selected records in the gantt chart asynchronously.
            The method will retrieve the records without blocking the current thread.
            The task completes when the retrieval operation is finished. The returned list of records my be empty if not rows are currently selected.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button @onclick="GetSelectedRecords">Get Selected Record </button>
            <SfGantt @ref="gantt" TValue="TaskData">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async GetSelectedRecords()
            {
               await gantt.GetSelectedRecordsAsync();
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.ExpandAtLevelAsync(System.Int32)">
            <summary>
            Expands the records along with its parent at specific hierarchical level.
            </summary>
            <param name="level">The hierarchical level until which the rows to be Expanded.</param>
            <remarks>
            This method can be used to expand the records to a certain level in an asynchronous manner.
            The method will update the records without blocking the current thread.
            The task completes when the expand operation is finished. 
            The level parameter should be a non-negative integer representing the level of the records to expand to.
            The root parent level is 0.
            </remarks>
            <returns>A task that represents the asynchronous operation.</returns>
            <example>
            <code>
            <![CDATA[
            <button @onclick="ExpandLevel">ExpandLevel</button>
            <SfGantt @ref = "gantt" DataSource="@TaskCollection">
                <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate"
                    Duration="Duration" Progress="Progress" Child="SubTasks">
                </GanttTaskFields>
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task ExpandLevel()
            {
                await gantt.ExpandAtLevelAsync(12); /// pass the hierarchical level
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.CollapseAtLevelAsync(System.Int32)">
            <summary>
            Collapses the records along with its child records, at specific hierarchical level.
            </summary>
            <param name="level">The level of the record until which the rows to be Collapsed.</param>
            <remarks>
            This method can be used to collapse the record to a certain level in an asynchronous manner.
            The method will update the records without blocking the current thread.
            The task completes when the collapse operation is finished. 
            The level parameter should be a non-negative integer representing the level of the records to collapse to.
            The root parent level is 0.
            </remarks>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.A task that represents the asynchronous operation.</returns>
            <example>
            <code>
            <![CDATA[
            <button @onclick="CollapseLevel">CollapseLevel</button>
            <SfGantt @ref = "gantt" DataSource="@TaskCollection">
                <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate"
                    Duration="Duration" Progress="Progress" Child="SubTasks">
                </GanttTaskFields>
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task CollapseLevel()
            {
                await gantt.CollapseAtLevelAsync(12); /// pass the hierarchical level 
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.GetRecordByID(System.String)">
            <summary>
            Returns a record from Gantt chart data source based on the given ID.
            </summary>
            <param name="id">The task value of `Id` property of <see cref="P:Syncfusion.Blazor.Gantt.GanttTaskFields.Id"/> class</param>
            <returns>A dictionary that contains the record's field names and corresponding values.<see href="System.Collection.IDictionary{string,object}">.</see></returns>
            <remarks>
            This method can be used to retrieve a record from the data source based on the given ID.
            The returned dictionary contains the field names and corresponding values of the record.
            If the ID is not found, the method will return null.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.GetTaskByID(System.String)">
            <summary>
            Returns a record from Gantt chart data source based on the given ID.
            </summary>
            <param name="id">The task value of `Id` property of <see cref="P:Syncfusion.Blazor.Gantt.GanttTaskFields.Id"/> class
            </param>
            <returns>A TValue that contains the record's field names and corresponding values.<see href="SfGantt{TValue}">.</see>
            </returns>
            <remarks>
            This method can be used to retrieve a record from the data source based on the given ID.
            The returned TValue contains the field names and corresponding values of the record.
            If the ID is not found, the method will return null.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.UpdateRecordByIDAsync(`0)">
            <summary>
            Updates a record in the data source asynchronously.
            </summary>
            <param name="data">The updated record object.</param>
            <remarks>
            This method can be used to update a record in the data source asynchronously.
            The method will update the record without blocking the current thread.
            The task completes when the update operation is finished.
            The data paramemter should be a valid object of the type TValue.
            <see cref="P:Syncfusion.Blazor.Gantt.GanttEditSettings.AllowEditing" /> should be true. 
            </remarks>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
             <example>
            <code>
            <![CDATA[
            <button @onclick="UpdateRecordFunc">Update Record By ID</button>
            <SfGantt TValue="TaskData">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async UpdateRecordFunc()
            {
               TaskData data = new TaskData(30,"ProjectApproval",new DateTime(2022,04,01),new DateTime(2022,04,05),"5",56,29);
               await gantt.UpdateRecordByIDAsync(data);
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.ConvertToMilestone(System.String)">
            <summary>
            Converts task data to Milestone data based on the given task id.
            </summary>
            <param name="id">The task value of `Id` property of <see cref="P:Syncfusion.Blazor.Gantt.GanttTaskFields.Id"/> class</param>
            <returns>void</returns>
            <remarks>
            This method will convert the task with the given id to a milestone. 
            The task's start and end date will be set to the same value.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button @onclick="ClickHandler">Convert To MileStones</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private void ClickHandler()
            {
               gantt.ConvertToMilestone("1"); 
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.PreventRender(System.Boolean)">
            <summary>
            Prevents the Gantt chart component re-render.
            </summary>
            <param name="preventRender">Indicates wheter the component should be prevented from re-rendering or not. Defalut is true.</param>
            <example>
            <remarks>
            It will internally sets value to be returned from ShouldRender method.
            By default, this method prevents the component from rendering. Set preventRender to false to allow the component to render again.
            </remarks>
            <code>
            <![CDATA[
            <button @onclick="PreventRenderFunc">Prevent Render</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task PreventRenderFunc()
            {
               await gantt.PreventRender(true);
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.GetColumnsAsync">
            <summary>
            Returns the columns collection from the Gantt Chart.
            </summary>
            <returns>A task that represents the asynchronous operation, the task result contains a list of GanttColumns.<see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <remarks>
            This method can be used to retrieve the columns of a Gantt chart asynchronously.
            The method will retrieve the columns without blocking the current thread.
            The task completes when the retrieval operation is finished.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button @onclick="ClickHandler">GetColumns</button>
            <SfGantt @ref = "gantt" DataSource="@TaskCollection">
                <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate"
                    Duration="Duration" Progress="Progress" Child="SubTasks">
                </GanttTaskFields>
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task ClickHandler()
            {
                var columns = await gantt.GetColumnsAsync();
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.RefreshColumnsAsync">
            <summary>
            Refreshed the gantt chart with columns changes, if any.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous refresh operation.</returns>
            <remarks>
            This method updates the columns in the class asynchronously.
            Refresh the Gantt chart columns when column property values are updated externally.
            It returns a task that can be awaited to get the result of the operation.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button @onclick="ClickHandler">RefreshColumns</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
                <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate"
                    Duration="Duration" Progress="Progress" Child="SubTasks">
                </GanttTaskFields>
                   <GanttColumns>
                       <GanttColumn Field="TaskId"></GanttColumn>
                       <GanttColumn Field="TaskName"></GanttColumn>
                   </GanttColumns>
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task ClickHandler()
            {
                gantt.Columns[0].Width = "250";
                gantt.RefreshColumnsAsync();
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.ExpandByKeyAsync(System.Object)">
            <summary>
            Expands a record identified by the primary key value of the record.
            </summary>
            <param name="key">The primary key value of the record to be expanded.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous expansion operation.</returns>
            <remarks>
            Expand a record based on the primary key value of the record.
            The `Id` property of <see cref="P:Syncfusion.Blazor.Gantt.GanttTaskFields.Id"/> is the primary key of the record by default.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button @onclick="ExpandKey">ExpandKey</button>
            <SfGantt @ref = "gantt" DataSource="@TaskCollection">
                <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate"
                    Duration="Duration" Progress="Progress" Child="SubTasks">
                </GanttTaskFields>
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task ExpandKey()
            {
                await gantt.ExpandByKeyAsync(12); /// pass primary key value here
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.CollapseByKeyAsync(System.Object)">
            <summary>
            Collapses a record based on the primary key value of the record asynchronously.
            </summary>
            <param name="key">The primary key value of the record to be collapsed.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <remarks>
            Collapse a record based on the primary key value of the record.
            The task returned by this method will complete when the operation is complete.
            The field value  of `Id` property of <see cref="P:Syncfusion.Blazor.Gantt.GanttTaskFields.Id"/> class is the primary key of the record.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button @onclick="CollapseKey">CollapseKey</button>
            <SfGantt @ref = "gantt" DataSource="@TaskCollection">
                <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate"
                    Duration="Duration" Progress="Progress" Child="SubTasks">
                </GanttTaskFields>
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task CollapseKey()
            {
                await gantt.CollapseByKeyAsync(12); /// pass primary key value here
            }
            }
            ]]>
            </code>
            </example>    
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.ScrollToTimelineAsync(System.DateTime)">
            <summary>
            Scrolls the chart timeline horizontally to a specific date or time asynchronously.
            </summary>
            <param name="scrollDateTime">The DateTime in the timeline to be focused.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <remarks>
            This method scrolls the timeline to the specified data and time.
            The task returned by this method will complete when the operation is complete.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button @onclick="ScrollToTimeline">ScrollTimeline</button>
            <SfGantt @ref = "gantt" DataSource="@TaskCollection">
                <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate"
                    Duration="Duration" Progress="Progress" ParentID="ParentId">
                </GanttTaskFields>
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task ScrollToTimeline()
            {
                await gantt.ScrollToTimelineAsync(new DateTime(2021, 12, 25)); /// pass the date here
            }
            }
            ]]>
            </code>
            </example> 
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.ScrollToTaskbarAsync(System.Int32)">
            <summary>
            Scrolls the content to bring the taskbar (specified by task id) visible to the user.
            </summary>
            <param name="taskId">The task value of `Id` property of <see cref="P:Syncfusion.Blazor.Gantt.GanttTaskFields.Id"/> class.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous scrolling operation.</returns>
            <remarks>
            This method can be used to smoothly scroll the taskbar to bring the task to the view port with the specified task ID.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button @onclick="ScrollToTaskbar">ScrollToTaskbar</button>
            <SfGantt @ref = "gantt" DataSource="@TaskCollection">
                <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate"
                    Duration="Duration" Progress="Progress" ParentID="ParentId">
                </GanttTaskFields>
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async Task ScrollToTaskbar()
            {
                await gantt.ScrollToTaskbarAsync(12); /// pass the task id here
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.ScrollToTaskbarAsync(System.Guid)">
            <summary>
            Scrolls the content to bring the taskbar(specified by task id) visible to the user.
            </summary>
            <param name="taskId">The task of value ‘Id’ property of <see cref="P:Syncfusion.Blazor.Gantt.GanttTaskFields.Id"/> class</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous scrolling operation.</returns>
            <remarks>
            This method can be used to smoothly scroll the taskbar to bring the task to the view port with the specified task ID.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button @onclick="ScrollToTaskbar">ScrollToTaskbar</button>
            <SfGantt @ref = "gantt" DataSource="@TaskCollection">
                <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate"
                    Duration="Duration" Progress="Progress" ParentID="ParentId">
                </GanttTaskFields>
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async task ScrollToTaskbar()
            {
                await gantt.ScrollToTaskbarAsync(“3F2504E0-4F89-11D3-9A0C-0305E82C3301”); /// pass the task here id.
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.ScrollToTaskbarAsync(System.String)">
            <summary>
            Scrolls the content to bring the taskbar(specified by task id) visible to the user asynchronously.
            </summary>
            <param name="taskId">The task of value ‘Id’ property of <see cref="P:Syncfusion.Blazor.Gantt.GanttTaskFields.Id"/> class</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous scrolling operation.</returns>
            <remarks>
            This method can be used to smoothly scroll the taskbar to bring the task to the view port with the specified task ID.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button @onclick="ScrollToTaskbar">ScrollToTaskbar</button>
            <SfGantt @ref = "gantt" DataSource="@TaskCollection">
                <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate"
                    Duration="Duration" Progress="Progress" ParentID="ParentId">
                </GanttTaskFields>
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async task ScrollToTaskbar()
            {
                await gantt.ScrollToTaskbarAsync(“ABCD12”); /// pass the task here id.
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.GetPersistDataAsync">
            <summary>
            Returns the serialized gantt chart properties to be maintained in the persisted state.
            </summary>
            <returns>A task representing the asynchronous operation.The result of the task is a string that contains the persist data.  System.Threading.Tasks.Task.</returns>
            <remarks>
            The persist data returned by this method should be stored in a secure location and encrypted if necessary.
            Ensure that the storage used in this method is reliable and can handle high read/write workloads.
            Users can use this method to later restore the gantt chart state through <see cref="M:Syncfusion.Blazor.Gantt.SfGantt`1.SetPersistDataAsync(System.String)" /> method.
            </remarks> 
            <example>
            <code>
            <![CDATA[
            <button id="GetPersistence" @onclick="GetPersistence">Get Persistence</button>
            <SfGantt @ref = "gantt" EnablePersistence=”true” DataSource="@TaskCollection">
                <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate"
                    Duration="Duration" Progress="Progress" ParentID="ParentId">
                </GanttTaskFields>
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            public string currentState;
            private async Task GetPersistence()
            {
               currentState= await gantt.GetPersistDataAsync();
             }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.SetPersistDataAsync(System.String)">
            <summary>
            Loads a already saved state of the Gantt chart asynchronously.
            </summary>
            <param name="properties"> Serialized gantt chart properties to apply to current state.
            </param>
            <returns> A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <remarks>
            The persist data passed as a parameter should be stored in a secure location and encrypted if necessary.
            Ensure that the storage used in this method is reliable and can handle high read/write workloads.
            Users can view pre stored state easily in gantt chart. Current state can be stored using <see cref="M:Syncfusion.Blazor.Gantt.SfGantt`1.GetPersistDataAsync" /> method.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button id="SetPersistence" @onclick="SetPersistence">Set Persistence</button>
            <SfGantt @ref = "gantt" EnablePersistence=”true” DataSource="@TaskCollection">
            </SfGantt>
            @code{
              private SfGantt<TaskData> gantt;
              private string currentState;
              private async Task SetPersistence()
              {
                await gantt.SetPersistDataAsync(currentState);
              }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.ResetPersistDataAsync">
            <summary>
            Resets the current state and refreshes the gantt chart with original state given declaratively.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>
            Applicable when State Persistence feature is enabled in gantt chart.
            This method should be used to reset any data that is meant to persist across application launches.
            The method should run asynchronously to avoid blocking the UI thread.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button id="ClearPersistence" @onclick="ClearPersistence">Clear Persistence</button>>
            <SfGantt @ref = "gantt" EnablePersistence=”true” DataSource="@TaskCollection">
             ........
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            private async void ClearPersistence()
            {
                await gantt.ResetPersistDataAsync();
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.GetFilteredRecordsAsync">
            <summary> 
            Retrieves all filtered records asynchronously from Gantt Chart as collection of data objects for the local data source, and returns a promise object if the Gantt Chart has remote data binding.  
            </summary> 
            <remarks> 
            Helps to obtain the filtered data after filtering in Gantt Chart.
            This method should be used to retrieve a list of filtered records based on some criteria.
            The method should run asynchronously to avoid blocking the UI thread.
            </remarks> 
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation. 
            The task result contains a list of filtered records of type.</returns>
            <example> 
            <code><![CDATA[ 
            <button id=”GetFilteredRecords” @onclick=”FilterHandler”> GetFilteredRecords</button> 
            <SfGantt @ref=”Gantt” DataSource=”GanttData”> 
            <GanttEditSettings AllowFiltering=”true” /> 
            … 
            </GanttEditSettings> 
            </SfGantt> 
            @code{ 
            SfGantt<TaskData> Gantt; 
            private async task  FilterHandler (){ 
               var data = await Gantt.GetFilteredRecordsAsync(); 
            } 
            }
            ]]> 
            </code> 
            </example> 
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.GetCurrentViewRecords">
            <summary> 
            Retrieves a list of the currently visible records in Gantt Chart. For example, when virtualization is disabled, it returns all records including the child records in expanded state. When virtualization is enabled, it returns the record and child records in current view port it might include the records over scanned for smooth scrolling.
            </summary> 
            <remarks>
            This method can be called to retrieve a list of all records that are currently displayed in the view.
             Helps to obtain the data currenlty rendered in DOM. 
            </remarks> 
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that gives visible records in current view.</returns> 
            <example> 
            <code><![CDATA[ 
            <button id=”GetCurrentViewData” @onclick=” GetCurrentViewData”>  GetCurrentViewData </button> 
            <SfGantt @ref=”Gantt” DataSource=”GanttData”> 
            <GanttEditSettings AllowEditing=”true”/> 
            … 
            </GanttEditSettings> 
            </SfGantt> 
            @code{ 
            SfGantt<TaskData> Gantt; 
            private async task  BatchAddHandler  (){ 
               var data = await Gantt.GetcurrentviewRecordsAsync (); 
            } 
            }
            ]]> 
            </code> 
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.GetSelectedRowCellIndexesAsync">
            <summary> 
            Retrieves the collection of indexes of selected row and cells . 
            </summary> 
            <remarks> 
            Using this method, selected cell or row data can be obtained for any custom actions on selected data. 
            A list of value tuples representing the row and column indexes of the selected cells.
            </remarks> 
            <returns>A list of value tuples representing the row and column indexes of the selected cells.
            A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>
            The first element of each tuple is the row index and the second is the column index.
            </remarks>
            <example> 
            <code><![CDATA[ 
            <button id=”GetSelectedRowCellIndexes” @onclick=” GetSelectedRowCellIndexes”>GetSelectedRowCellIndexes </button> 
            <SfGantt @ref=”Gantt” DataSource=”GanttData”> 
            </SfGantt> 
            @code{ 
            SfGantt<TaskData> Gantt; 
            private async task  GetSelectedRowCellIndexes(){ 
               var data = await Gantt. GetSelectedRowCellIndexesAsync(); 
            } 
            }
            ]]> 
            </code> 
            </example> 
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.CopyAsync(System.Nullable{System.Boolean})">
            <summery> 
            Copies the data from selected rows or cells into clipboard.
            </summery>
            <param name="withHeader">Indicates whether the header row should be included in the copy.
            If set to null, the header will not be copied.</param> 
            <remarks> 
            This method is intended to be used for copying cells from gantt chart.
            The behavior of copying the record can be modified using <see cref="T:Syncfusion.Blazor.TreeGrid.CopyHierarchyType"/> enumeration property. 
            </remarks> 
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns> 
            <example> 
            <code>!
            <![CDATA[ 
            <button id="Copy" @onclick="CopyHandler">Copy</button> 
            <SfGantt @ref="Gantt" DataSource="GanttData"> 
            . . . . 
            </SfGantt> 
            @code{ 
            SfGantt<TaskData> Gantt; 
            private async Task CopyHandler(){ 
               await Gantt.CopyAsync(true); 
            } 
            }
            ]]>
            </code> 
            </example> 
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.GetCriticalTasksAsync">
            <summary>
            Retrieves a collection of critical tasks asynchronously.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation. The task result is a list of critical tasks.</returns>
            <remarks>
            This method retrieves a list of critical tasks that require immediate attention to ensure a project is completed on time.
            </remarks>
            <example> 
            <code>!
            <![CDATA[ 
            <button id="Critical" @onclick="CriticalTasks">CriticalTask</button> 
            <SfGantt @ref="Gantt" DataSource="GanttData"> 
            . . . . 
            </SfGantt> 
            @code{ 
            SfGantt<TaskData> Gantt; 
            private List<TaskData> CriticalTasks(){ 
               var data = Gantt.GetCriticalTasksAsync();
               return data;
            } 
            }
            ]]>
            </code> 
            </example> 
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.GetRowTaskModel(`0)">
             <summary>
             Gets the Gantt task model for the specified data.
             </summary>
             <param name="data">The data for which to retrieve the Gantt task model.</param>
             <returns>
             An <see cref="T:Syncfusion.Blazor.Gantt.IGanttTaskModel`1"/> object representing the Gantt task model for the specified data.
             </returns>
             <remarks>
             This method is intended to be get the objects that are part of the Gantt task model for the specified data, such as the expanded state, task width, task left, task progress width and etc.
             </remarks>
             <example>
             <code>
            <![CDATA[
             <SfGantt @ref="Gantt" DataSource="@GanttData">  
                 <GanttEvents TValue="TaskData" RowSelected="RowSelect"></ GanttEvents > 
                 ........  
             </SfGantt>  
             @code{  
             SfGantt<TaskData> Gantt;  
             public void RowSelect(RowSelectEventArgs<TaskData> args) 
             {  
                 var ganttItem = Gantt.GetRowTaskModel(args.Data); 
             }  
             }  
             ]]>
             </code>
             </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.MergeTaskAsync(System.Int32,System.Collections.Generic.List{System.ValueTuple{System.Int32,System.Int32}})">
            <summary>
            Merges a task by its ID <see cref="P:Syncfusion.Blazor.Gantt.GanttTaskFields.Id"/> with the specified segment indexes.
            </summary>
            <param name="id">The ID of the task to merge. Should be of type <see cref="T:System.Int32"/>.</param>
            <param name="segmentIndexes">The list of segment indexes to merge. This list holds the ValueTuple with from and to indexes of multiple segment</param>
            <remarks>
            This method allows merging a task by its ID with the provided list of segment indexes.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button @onclick="MergeTaskFunc">Merge Task</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            public async void MergeTaskFunc()
            {
               List<ValueTuple<int, int>> indexes = new List<ValueTuple<int, int>>();
               indexes.Add((0, 1));
               await Gantt.MergeTaskAsync(3, indexes);
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.MergeTaskAsync(System.Guid,System.Collections.Generic.List{System.ValueTuple{System.Int32,System.Int32}})">
            <summary>
            Merges a task by its ID <see cref="P:Syncfusion.Blazor.Gantt.GanttTaskFields.Id"/> with the specified segment indexes.
            </summary>
            <param name="id">The ID of the task to merge. Should be of type <see cref="T:System.Guid"/>.</param>
            <param name="segmentIndexes">The list of segment indexes to merge.This list holds the ValueTuple with from and to indexes of multiple segment</param>
            <remarks>
            This method allows merging a task by its ID with the provided list of segment indexes.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button @onclick="MergeTaskFunc">Merge Task</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            public async Task MergeTaskFunc()
            {
               List<ValueTuple<int, int>> indexes = new List<ValueTuple<int, int>>();
               indexes.Add((0, 1));
               await Gantt.MergeTaskAsync(8B23A701-4E27-4A77-A3C7-F1B14D7F7D72, indexes);
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.MergeTaskAsync(System.String,System.Collections.Generic.List{System.ValueTuple{System.Int32,System.Int32}})">
            <summary>
            Merges a task by its ID <see cref="P:Syncfusion.Blazor.Gantt.GanttTaskFields.Id"/> with the specified segment indexes.
            </summary>
            <param name="id">The ID of the task to merge. Should be of type <see cref="T:System.String"/>.</param>
            <param name="segmentIndexes">The list of segment indexes to merge.This list holds the ValueTuple with from and to indexes of multiple segment</param>
            <remarks>
            This method allows merging a task by its ID with the provided list of segment indexes.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button @onclick="MergeTaskFunc">Merge Task</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            public async Task MergeTaskFunc()
            {
               List<ValueTuple<int, int>> indexes = new List<ValueTuple<int, int>>();
               indexes.Add((0, 1));
               await Gantt.MergeTaskAsync("3", indexes);
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.SplitTaskAsync(System.Int32,System.Collections.Generic.List{System.DateTime})">
            <summary>
            Splits a task by its ID <see cref="P:Syncfusion.Blazor.Gantt.GanttTaskFields.Id"/> with the specified split dates.
            </summary>
            <param name="id">The ID of the task to split. Should be of type <see cref="T:System.Int32"/>.</param>
            <param name="splitDates">The list of date where the task to be split.</param>
            <remarks>
            This method allows splitting a task by its ID with the provided list of split dates.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button @onclick="SplitTaskFunc">Split Task</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            public async void SplitTaskFunc()
            {
               await gantt.SplitTaskAsync(7, new List<DateTime> { new DateTime(03/02/2023) , new DateTime(03/06/2023) });
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.SplitTaskAsync(System.Guid,System.Collections.Generic.List{System.DateTime})">
            <summary>
            Splits a task by its ID <see cref="P:Syncfusion.Blazor.Gantt.GanttTaskFields.Id"/> with the specified split dates.
            </summary>
            <param name="id">The ID of the task to split. Should be of type <see cref="T:System.Guid"/>.</param>
            <param name="splitDates">The list of date where the task to be split.</param>
            <remarks>
            This method allows splitting a task by its ID with the provided list of split dates.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button @onclick="SplitTaskFunc">Split Task</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            public async void SplitTaskFunc()
            {
               await gantt.SplitTaskAsync(D1B8DCC4-C9F3-4E70-85F0-0FE7243F83C1, new List<DateTime> { new DateTime(03/02/2023) , new DateTime(03/06/2023) });
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.SplitTaskAsync(System.String,System.Collections.Generic.List{System.DateTime})">
            <summary>
            Splits a task by its ID <see cref="P:Syncfusion.Blazor.Gantt.GanttTaskFields.Id"/> with the specified split dates.
            </summary>
            <param name="id">The ID of the task to split. Should be of type <see cref="T:System.String"/>.</param>
            <param name="splitDates">The list of date where the task to be split.</param>
            <remarks>
            This method allows splitting a task by its ID with the provided list of split dates.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button @onclick="SplitTaskFunc">Split Task</button>
            <SfGantt @ref="gantt" DataSource="@TaskCollection">
            </SfGantt>
            @code{
            private SfGantt<TaskData> gantt;
            public async void SplitTaskFunc()
            {
               await gantt.SplitTaskAsync("12", new List<DateTime> { new DateTime(03/02/2023) , new DateTime(03/06/2023) });
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.ResetZoomAsync">
            <summary>
            Resets the zoom level to its initial state, as configured during the initial rendering.
            </summary>
            <remarks>
            This method resets the zoom level to the default level set in the <see cref="T:Syncfusion.Blazor.Gantt.GanttTimelineSettings"/> during the initial rendering.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button @onclick="ResetZoomLevel">Reset Zoom</button>
            <SfGantt @ref="Gantt" DataSource="GanttData"></SfGantt>
            @code{
                SfGantt<TaskData> Gantt;
                private async Task ResetZoomLevel() => await Gantt.ResetZoomAsync();
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.AutoFitColumnsAsync(System.String[])">
            <summary>  
            Updates the column width to autofit their content, ensuring that the width displays the content without wrapping or hiding.  
            </summary>  
            <param name="fieldNames">A collection of column names to be autofitted.</param>  
            <remarks>  
            Use this method to update the width of specified columns to autofit their content. Autofitting ensures that the column width is adjusted dynamically to display the content without wrapping or hiding. 
            This method is typically used within the <see cref="P:Syncfusion.Blazor.Gantt.GanttEvents`1.DataBound"/> event to autofit columns during the initial rendering. 
            </remarks>  
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>  
            <example>  
            Use the following code to automatically fit columns to their content:  
            <![CDATA[  
            <button id="AutofitColumns" @onclick="FitColumnsHandler">FitColumns</button>  
            <SfGantt @ref="Gantt" DataSource="@GanttData">     
                ........     
            </SfGantt>     
            @code   
            {   
               SfGantt<TaskData> Gantt;     
               private async Task FitColumnsHandler()   
               {   
                   await Gantt.AutofitColumnsAsync(new[] { "TaskName", "Duration" }); // Pass the desired column field names   
               }   
            }   
            ]]>  
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.AddResourceAssignmentAsync``1(``0)">
            <summary> 
            Assigns a resource to the task data. 
            </summary> 
            <typeparam name="TAssignment">The type of resource assignment data. </typeparam> 
            <param name="resourceAssignment">The resource assignment data to be added.</param> 
            <remarks> 
            Use this method to add a new resource assignment to the task data. The <paramref name="resourceAssignment"/> parameter should contain the necessary information such as the, primary key, task ID, resource ID, and any additional details required for the assignment. 
            </remarks> 
            <example> 
            <code> 
            <![CDATA[ 
            <button @onclick="AddResourceAssignmentFunc">Add ResourceAssignment</button> 
            <SfGantt<TaskData> @ref="gantt" DataSource="@TaskCollection"> 
                <GanttAssignmentFields TValue="TaskData" TAssignment="ResourceAssignmentData" PrimaryKey="Id" TaskID="TaskId" ResourceID="ResourceId" Units="Unit" DataSource="@ResourceAssignmentCollection"> 
                </GanttAssignmentFields> 
            </SfGantt> 
            @code{ 
                private SfGantt<TaskData> gantt; 
                public async void AddResourceAssignmentFunc() 
                { 
                    ResourceAssignmentData newResourceAssignment = new ResourceAssignmentData() 
                    { 
                        Id = 14, 
                        TaskId = 2, 
                        ResourceId = 5 
                    }; 
                    await gantt.AddResourceAssignmentAsync(newResourceAssignment); 
                } 
            } 
            ]]> 
            </code> 
            </example> 
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.UpdateResourceAssignmentAsync``1(``0)">
            <summary> 
            Updates an existing task resource assignment data based on the primary key value. 
            </summary> 
            <typeparam name="TAssignment">The type of resource assignment data. </typeparam> 
            <param name="resourceAssignment">The updated resource assignment data.</param> 
            <remarks> 
            Use this method to modify the resource assignment data  of an existing task resource assignment. The <paramref name="resourceAssignment"/> parameter should contain the necessary information such as the primary key, task ID, resource ID, and resource units. 
            The updation is based on the provided primary key. If any changes are made in your collection, they will be reflected in the modified existing resource assignment. 
            </remarks> 
            <example> 
            <code> 
            <![CDATA[ 
            <button @onclick="UpdateResourceAssignmentFunc">Update ResourceAssignment</button> 
            <SfGantt<TaskData> @ref="gantt" DataSource="@TaskCollection"> 
                <GanttAssignmentFields TValue="TaskData" TAssignment="ResourceAssignmentData" PrimaryKey="Id"TaskID="TaskId" ResourceID="ResourceId" Units="Unit" DataSource="@ResourceAssignmentCollection"> 
                </GanttAssignmentFields> 
            </SfGantt> 
            @code{ 
                private SfGantt<TaskData> gantt; 
                public async void UpdateResourceAssignmentFunc() 
                { 
                    ResourceAssignmentData updatedResourceAssignment = new ResourceAssignmentData() 
                    { 
                        Id=3, 
                        TaskId = 2, 
                        ResourceId = 5, 
                        Unit = 40 
                    }; 
                    await gantt.UpdateResourceAssignmentAsync(updatedResourceAssignmen 
                } 
            } 
            ]]> 
            </code> 
            </example> 
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.DeleteResourceAssignmentAsync``1(``0)">
            <summary> 
            Removes a resource for a task. 
            </summary> 
            <typeparam name="TAssignment">The type of the resource assignment data.</typeparam> 
            <remarks> 
            Use this method to remove a resource assignment associated with a task. The <paramref name="resourceAssignment"/> parameter should contain the necessary information such as the task ID and resource ID for the assignment to be removed. 
            </remarks> 
            <example> 
            <code> 
            <![CDATA[ 
            <button @onclick="RemoveResourceAssignmentFunc">Remove ResourceAssignment</button> 
            <SfGantt<TaskData> @ref="gantt" DataSource="@TaskCollection"> 
                <GanttAssignmentFields TValue="TaskData" TAssignment="ResourceAssignmentData" PrimaryKey="Id"TaskID="TaskId" ResourceID="ResourceId" Units="Unit" DataSource="@ResourceAssignmentCollection"> 
                </GanttAssignmentFields> 
            </SfGantt> 
            @code{ 
                private SfGantt<TaskData> gantt; 
                public async void RemoveResourceAssignmentFunc() 
                { 
                    ResourceAssignmentData resourceAssignmentData = new ResourceAssignmentData() 
                    { 
                        TaskId = 2, 
                        ResourceId = 5, 
                    }; 
                    await gantt.DeleteResourceAssignmentAsync (resourceAssignmentData); 
                } 
            } 
            ]]> 
            </code> 
            </example> 
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.GetResourceAssignments``1(`0)">
            <summary> 
            Gets the resource assignments for the specified task data. 
            </summary> 
            <typeparam name="TAssignment">The type of resource assignment model.</typeparam> 
            <param name="data">The task data for which the resource assignments are to be retrieved.</param> 
            <returns> 
            A list of resource assignments for the specified data. 
            </returns> 
            <remarks> 
            This method is intended to retrieve a list of resource assignments for the specified data, such as the resource assignment collection. 
            </remarks> 
            <example> 
            <code> 
            <![CDATA[ 
            <SfGantt @ref="Gantt" DataSource="@GanttData">    
                <GanttEvents TValue="TaskData" RowSelected="RowSelect"></GanttEvents>   
                ........    
            </SfGantt>    
            @code{    
            SfGantt<TaskData> Gantt;    
            public void RowSelect(RowSelectEventArgs<TaskData> args)   
            {    
                var resourceAssignments = Gantt.GetResourceAssignments<ResourceAssignmentModel>(args.Data);   
            }    
            } 
            ]]> 
            </code> 
            </example> 
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.GetResources``1(`0)">
            <summary> 
            Gets the resources for the specified task data. 
            </summary> 
            <typeparam name="TResources">The type of resource.</typeparam> 
            <param name="data">The task data for which the resources are to be retrieved.</param> 
            <returns> 
            A list of resources for the specified data. 
            </returns> 
            <remarks> 
            This method is intended to retrieve resources associated with the specified task data, such as resource names and other relevant details. 
            </remarks> 
            <example> 
            <code> 
            <![CDATA[ 
            <SfGantt @ref="Gantt" DataSource="@GanttData">    
                <GanttEvents TValue="TaskData" RowSelected="RowSelect"></GanttEvents>   
                ........    
            </SfGantt>    
            @code{    
            SfGantt<TaskData> Gantt;    
            public void RowSelect(RowSelectEventArgs<TaskData> args)   
            {    
                var resources = Gantt.GetResources<ResourceModel>(args.Data);   
            }    
            } 
            ]]> 
            </code> 
            </example> 
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.SfGantt`1.treegridPersistedState">
            <summary>
            Gets the serialized treegrid properties to be maintained in the persisted state.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.ExpandedFlatData">
            <summary>
            For virtualization support added this property like flat data,but it has the updated view records after expanding and collapsing action.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.GanttEditDialogRenderer">
            <summary>
            This property used to access the EditDialogRender taskIdEditable variable. 
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.SfGantt`1.contentWidth">
            <summary>
            This property is used to maintain the content width of a gantt. In case of, timeline virtualization, content width equals thrice the gantt width.
            Whereas in non-virtual timeline mode, content width equals total timeline width.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.SfGantt`1.containerHeight">
            <summary>
            This property holds the chart content height in virtual mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.SfGantt`1.OriginalProp">
            <summary>
            This property is used to store the original values of Gantt properties, which is used to reset the persisted data.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.SfGantt`1.PreviousData">
            <summary>
            To maintain record collection with old values before it gets updated.
            This collection is used to update child items on parent drag action.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.IsFrozenColumn">
            <summary>
            Gets or sets the isFrozenColumn which is used to pass on JS side. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.ObservableCollectionChanged">
            <summary>
            Gets or sets a value indicating whether the internal collection of this ObservableCollection has changed.
            </summary>
            <value>
            True if the internal collection has changed; otherwise, false. The default is false.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.ResourceFlatData">
            <summary>
            Represents a collection of resources as an IEnumerable.
            </summary>
            <returns>An IEnumerable of objects</returns>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.SfGantt`1.ResourceTaskIds">
            <summary>
            Represents a dictionary mapping resource names to task IDs.
            </summary>
            <returns>An IDictionary of strings mapping resource names to task IDs</returns>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.SfGantt`1.ResourceIds">
            <summary>
            Represents a list of resource IDs.
            </summary>ResourceTaskIds
            <returns>A List of strings representing resource IDs</returns>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.PredecessorType">
            <summary>
            To maintain predecessor types in array of string.
            This property gets the ENUM values and store it as a array of string, which is configured in DependencyTypes property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.IsDataSourceUpdated">
            <summary>
            To restrict calling the updateRecord by Id method when editing from UI to observable collection.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.IsExpandCollapseKey">
            <summary>
            Gets or sets the key from ExpandbyKey or Collapsebykey method. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.CachedAttributes">
            <summary>
            Gets or sets the unamtched attributes which is used to pass SfGantt pane. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.TreeGridAttributes">
            <summary>
            Gets or sets the unmatched attributes which is used to pass TreeGrid pane. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.taskIdType">
            <summary>
            This property used to get the task id type.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.ZoomingLevels">
            <summary>
            Gets or sets the default zooming levels.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.weekstartDay">
            <summary>
            Gets or sets the Timeline settings week start day to update in zooming levels.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.weekendBackground">
            <summary>
            Gets or sets the Timeline settings weekend background to update in zooming levels.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.isDataProcessed">
            <summary>
            To check whether record validations completed or not in order to calculate project dates.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.isCrudAction">
            <summary>
            Boolean property maintained to restrict, updating predecessor collection on crud operation in Load On Demand.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.isDynamicOrExpandoDataBinding">
            <summary>
            This property used for check the dynamic or expandoObject data binding for Read-only support
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.IsCriticalPath">
            <summary>
            This property used for toolbar refersh in critical path.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.SfGantt`1.CriticalParentRecordCollection">
            <summary>
            This collection used for parent validation.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.SfGantt`1.NewRowPosition">
            <summary>
            This property used for child record adding in hierarchy data source
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.UpdateChildModelCollection(Syncfusion.Blazor.TreeGrid.Internal.TreeListItem{`0},System.Boolean)">
            <summary>
            This method is used to maintain parent and child collections in key-value pairs
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.SetLocalStorage">
            <summary>
            Update the Persistence value to local storage.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.SerializeModel(Syncfusion.Blazor.Gantt.SfGantt{`0})">
            <summary>
            Returns serialized Gantt properties in order to save in local storage.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.RefreshChartElement">
            <summary>
            This method used to refresh the chart rows, connector lines and set the chart height
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.SfGantt`1.IsParentRecord(Syncfusion.Blazor.TreeGrid.Internal.TreeListItem{`0})">
            <summary>
            To check a record is parent or not.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttColumn">
            <summary>
            Defines column collection displayed in grid If the columns declaration was empty then columns are automatically populated from taskSettings value.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.GanttColumn.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Gantt.GanttColumn"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttColumn.ChildContent">
            <summary>
            Defines the child content.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttColumn.AllowEditing">
            <summary>
            Gets or sets a value indicating whether editing is allowed for the column.
            </summary>
            <value>
            The default value is <c>true</c>. If set to <c>false</c>, editing will be disable to the column.
            </value>
            <remarks>
            If <c>AllowEditing</c> is set to <c>false</c>, the column will not be editable, which means that users will not be able to modify the column's values.
            By default, all columns are editable.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttColumn.AllowFiltering">
            <summary>
            Gets or sets a value indicating whether filtering is allowed for the column.
            </summary>
            <value>
            The default value is <c>true</c>. If set to <c>false</c>, the column will not be filterable, and the filter menu element will be disabled for the column.
            </value>
            <remarks>
            If <c>AllowFiltering</c> is set to <c>false</c>, the column will not be filterable, which means that users will not be able to filter the data based on the column's values, and the filter menu element will be disabled for the column.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttColumn.AllowReordering">
            <summary> 
            Gets or sets whether to enable or disable reordering of columns. 
            Reordering can be done by drag and drop of a particular column from one index to another index. 
            </summary> 
            <value> 
            <b>true</b> if need to allow reordering of columns; otherwise, <b>false</b>. The default value is <b>true</b>. 
            </value> 
            <remarks> 
            Determines whether to allow or restrict reordering for specific column. 
            </remarks> 
            <seealso cref="T:Syncfusion.Blazor.Gantt.GanttColumn"/> 
            <example> 
            <code> 
            <![CDATA[ 
                <SfGantt DataSource="@TaskCollection" > 
                    <GanttColumns> 
                        <GanttColumn Field = "TaskId" AllowReordering="false"></GanttColumn> 
                    </GanttColumns> 
                </SfGantt> 
            ]]> 
            </code> 
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttColumn.AllowResizing">
            <summary> 
            Gets or sets whether to enable or disable resizing of columns. 
            </summary> 
            <value> 
            <b>true</b> if need to allow resizing of columns; otherwise, <b>false</b>. The default value is <b>true</b>. 
            </value> 
            <remarks> 
            Determines whether to allow or restrict resizing for specific column. 
            </remarks> 
            <seealso cref="T:Syncfusion.Blazor.Gantt.GanttColumn"/> 
            <example> 
            <code> 
            <![CDATA[ 
                <SfGantt DataSource="@TaskCollection" > 
                    <GanttColumns> 
                        <GanttColumn Field = "TaskId" AllowResizing="false"></GanttColumn> 
                    </GanttColumns> 
                </SfGantt> 
            ]]> 
            </code> 
            </example> 
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttColumn.AllowSorting">
            <summary>
            Gets or sets a value indicating whether sorting is allowed for a particular column.
            </summary>
            <value>
            <c>true</c> if sorting is allowed for the column; otherwise, <c>false</c>.
            The default value is <c>true</c>.
            </value>
            <remarks>
            By default, all columns are sortable.
            Setting this property to <c>false</c> disables sorting for the column.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttColumn.ClipMode">
            <summary>
            Gets or sets the cell content's overflow mode.
            </summary>
            <value>
            A value of the <see cref="P:Syncfusion.Blazor.Gantt.GanttColumn.ClipMode"/> enumeration that specifies the overflow mode.
            The default value is <see cref="F:Syncfusion.Blazor.Grids.ClipMode.Ellipsis"/>.
            </value>
            <remarks>
            The available modes are:
            <list type="bullet">
            <item><description><see cref="F:Syncfusion.Blazor.Grids.ClipMode.Clip"/>: Truncates the cell content when it overflows its area.</description></item>
            <item><description><see cref="F:Syncfusion.Blazor.Grids.ClipMode.Ellipsis"/>: Displays ellipsis when the cell content overflows its area.</description></item>
            <item><description><see cref="F:Syncfusion.Blazor.Grids.ClipMode.EllipsisWithTooltip"/>: Displays ellipsis when the cell content overflows its area
            and displays a tooltip when the user hovers over the ellipsis.</description></item>
            </list>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttColumn.DefaultValue">
            <summary>
            Gets or sets the default value for the component when adding a new record to the Gantt chart.
            </summary>
            <value>The default value to be used when adding a new record to the Gantt chart.</value>
            <remarks>
            This property is used to set the default value for the component when adding a new record to the Gantt.
            The default value will be used if no other value is specified.
            If this property is not set, the component will use some predefined value to the default columns and use an empty string for custom columns as the default value.
            </remarks>>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttColumn.DisableHtmlEncode">
            <summary>
            Gets or sets a value indicating whether the HTML content of header and content cells should be encoded or not.
            </summary>
            <value>
            When set to <c>true</c>, HTML content of header and content cells is encoded. Default value is <c>true</c>.
            </value>
            <remarks>
            Setting this property to <c>true</c> ensures that any HTML content in the header and content cells of the grid are encoded, preventing malicious content from being injected and executed by a user's browser.
            However, if you have already encoded the content yourself, or if you trust the source of the content, you can set this property to <c>false</c>.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttColumn.DisplayAsCheckBox">
            <summary>
            Gets or sets a value indicating whether to display the column value as a check box instead of a Boolean value.
            </summary>
            <value>
              <c>true</c> if the column value is displayed as a check box; otherwise, <c>false</c>.
              The default value is <c>false</c>.
            </value>
            <remarks>
            When set to <c>true</c>, the column value will be displayed as a check box in the UI, and the check box will be checked if the column value is <c>true</c> and unchecked if the column value is <c>false</c>.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttColumn.EditorSettings">
            <summary>
            Defines the object to customize default cell editors. The following types can be used to customize default
            editors.
            <list type="bullet">
            <item>
            <term><see cref="T:Syncfusion.Blazor.Grids.NumericEditCellParams"/></term>
            <description>Customizes the default numerictextbox editor.</description>
            </item>
            <item>
            <term><see cref="T:Syncfusion.Blazor.Grids.DropDownEditCellParams"/></term>
            <description>Customizes the default dropdown editor.</description>
            </item>
            <item>
            <term><see cref="T:Syncfusion.Blazor.Grids.DateEditCellParams"/></term>
            <description>Customizes the default datepicker editor.</description>
            </item>
            <item>
            <term><see cref="T:Syncfusion.Blazor.Grids.BooleanEditCellParams"/></term>
            <description>Customizes the default checkbox editor.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttColumn.EditTemplate">
            <summary>
            Gets or sets the cell edit template that is used as an editor for a particular column.
            </summary>
            <value>
              A <see cref="T:Microsoft.AspNetCore.Components.RenderFragment`1"/> that defines the template used for editing the cell.
              The default value is <c>null</c>.
            </value>
            <remarks>
            The template can be defined as an HTML element ID. 
            The template should define the HTML elements and components to be used when editing the cell. 
            When the user clicks on a cell to edit it, the template is rendered in place of the cell contents. 
            When the user saves the changes, the edited value is passed to the component that defines the grid.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttColumn.EditType">
            <summary>
            Gets or sets the type of component used for editing.
            </summary>
            <value>
              An <see cref="P:Syncfusion.Blazor.Gantt.GanttColumn.EditType"/> value that defines the type of component used for editing.
            </value>
            <remarks>
            The EditType property is used to specify the type of component that is used for editing a cell in the Gantt chart. 
            There are several predefined edit types, such as "Default", "TextArea", "Checkbox", and "Select". 
            When the EditType property is set to a particular value, the Gantt chart uses the corresponding component for editing the cell.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttColumn.Field">
            <summary>
            Defines the field name of the column that is mapped with the mapping name of the DataSource.
            </summary>
            <value>
            A string representing the field name of the column.
            The default value is an empty string.
            </value>
            <remarks>
            Use the Field property to bind the columns for sorting, filtering, and other operations. 
            The field name must match the mapping name specified in the DataSource. 
            If the field name is invalid or does not match the mapping name, an exception may be thrown.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttColumn.FilterSettings">
            <summary>
            Defines the filter options to customize filtering for the particular column.
            </summary>
            <value>
            A <see cref="P:Syncfusion.Blazor.Gantt.GanttColumn.FilterSettings"/> object that represents the filter settings for the column. 
            The default value is null, indicating that the column does not support filtering.
            </value>
            <remarks>
            Use this property to customize the filtering behavior for a specific column. 
            You can set various filter options, such as filter type, operator, and value. 
            If the FilterSettings property is not set, filtering will not be available for the column. 
            The default value of this property is null, which means that the column does not support filtering by default.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttColumn.FilterTemplate">
            <summary>
            Gets or sets the filter template/UI that is used as a filter for a particular column.
            </summary>
            <value>
            A <see cref="T:Microsoft.AspNetCore.Components.RenderFragment`1"/> representing the template or HTML element ID for the filter.
            </value>
            <remarks>
            Use this property to define a custom template or HTML element ID for the filter of a column.
            The filter template/UI can be defined as a RenderFragment representing an HTML element ID. 
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttColumn.Format">
            <summary>
            It is used to change display value with the given format and does not affect the original data.
            Gets or sets the format from the user which can be standard or custom.
            </summary>
            <value>
            The format string used for displaying the property value. The default value is an empty string.
            </value>
            <remarks>
            This property provides a way to format the display value of the property without modifying the original data.
            The format can be specified as either a standard format string or a custom format string.
            If this property is not set, the default format string used is an empty string.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttColumn.Formatter">
            <summary>
            Gets or sets an external function used to achieve custom formatting for the cells in the component.
            </summary>
            <value>
            An external function that accepts the cell value as an input and returns a formatted string. If not specified,
            the default formatting for the cell value will be used.
            </value>
            <remarks>
            The Formatter property allows you to define a custom formatting function that will be used for each cell in the component.
            This function should accept the cell value as an input and return a string with the desired formatting applied.
            The formatting function will be called before rendering each cell, allowing you to apply custom formatting logic based on the cell value or any other criteria.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttColumn.HeaderTemplate">
            <summary>
            Gets or sets the column header template that defines a customized element in the header.
            </summary>
            <value>
            A <see cref="T:Microsoft.AspNetCore.Components.RenderFragment`1"/> delegate representing the template to be used for rendering the header.
            </value>
            <remarks>
            The header template can be defined as a string or as an HTML element ID. 
            When specified as an HTML element ID, the element will be used as a reference to the template.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttColumn.HeaderText">
            <summary>
            Gets or sets the header text of the column which is used to display in the column header.
            If the HeaderText property is not defined, then the field name value will be assigned to the header text.
            </summary>
            <value>
            A string value that represents the header text of the column. The default value is field name.
            </value>
            <remarks>
            Use the HeaderText property to specify the header text of the column.
            If the HeaderText property is not set, the field name value will be used as the header text.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttColumn.HeaderTextAlign">
            <summary>
            Gets or sets the alignment of the column header text.
            </summary>
            <value>
            A value from the TextAlign enumeration that represents the alignment of the column header text.
            The default value is TextAlign.Left.
            </value>
            <remarks>
            Use the HeaderTextAlign property to specify the alignment of the column header text.
            The available options for alignment are Justify, Left, Center, and Right.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttColumn.HideAtMedia">
            <summary>
            Gets or sets the media query at which the column should be hidden.
            </summary>
            <value>
            A string value that represents the media query at which the column should be hidden.
            The default value is an empty string, which means the column is not hidden based on a media query.
            </value>
            <remarks>
            Use the HideAtMedia property to specify the media query at which the column should be hidden.
            This property accepts only valid Media Queries. If an invalid Media Query is provided, the column will not be hidden.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttColumn.IsFrozen">
            <summary>
            Gets or sets whether the gantt column should be frozen.
            </summary>
            <value>
            A boolean value that indicates whether the gantt column should be frozen. Set to <c>true</c> to freeze the column and prevent it from scrolling; otherwise, set to <c>false</c>. The default value is <c>false</c>.
            </value>
            <remarks>
            Use the IsFrozen property to freeze the gantt column and prevent it from scrolling.
            When IsFrozen is set to <c>true</c>, the gantt column will remain fixed on the screen while the rest of the columns can be scrolled horizontally.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttColumn.Freeze">
            <summary>
            Gets or sets a value that indicates which side column needs to freeze. 
            </summary>
            <value>
            One of the <see cref="T:Syncfusion.Blazor.Grids.FreezeDirection"/> enumeration that specifies in which direction the columns is frozen.
            The default mode is <b> Syncfusion.Blazor.Grids.FreezeDirection.Left</b>. 
            </value>  
            <remarks>  
            Columns can be frozen both at left and right side of tree grid content. Columns in the center part of tree grid content are scrollable.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttColumn.IsIdentity">
            <summary>
            Gets or sets a value indicating whether the column is an identity column.
            </summary>
            <value>
            <c>true</c> if the column is an identity column; otherwise, <c>false</c>.
            The default value is <c>false</c>.
            </value>
            <remarks>
            When IsIdentity is set to <c>true</c>, the primary key value for the new record is auto generated by the database.
            It is recommended to set the IsPrimaryKey property to <c>true</c> when using IsIdentity.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttColumn.IsPrimaryKey">
            <summary>
            Gets or sets a value indicating whether the column is part of the primary key constraint.
            </summary>
            <value>
            <c>true</c> if the column is part of the primary key constraint; otherwise, <c>false</c>.
            The default value is <c>false</c>.
            </value>
            <remarks>
            When IsPrimaryKey is set to <c>true</c>, this column is considered as the primary key constraint.
            It is recommended to set IsPrimaryKey to <c>true</c> when using IsIdentity.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttColumn.MaxWidth">
            <summary>
            Gets or sets the maximum width of the column in pixels or percentage.
            </summary>
            <value>
            A string value that represents the maximum width of the column in pixels or percentage.
            </value>
            <remarks>
            The MaxWidth property specifies the maximum width of the column in pixels or percentage.
            If the column's width is greater than the specified maximum value, it will restrict resizing beyond this value.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttColumn.MinWidth">
            <summary>
            Gets or sets the minimum width of the column in pixels or percentage.
            </summary>
            <value>
            A string value that represents the minimum width of the column in pixels or percentage.
            </value>
            <remarks>
            The MinWidth property specifies the minimum width of the column in pixels or percentage.
            If the column's width is less than the specified minimum value, it will restrict resizing beyond this value.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttColumn.ShowCheckbox">
            <summary>
            Gets or sets a value indicating whether to show checkboxes in the column.
            </summary>
            <value>
            <c>true</c> if checkboxes are displayed in the column; otherwise, <c>false</c>. The default value is <c>false</c>.
            </value>
            <remarks>
            When the ShowCheckbox property is set to true, checkboxes will be displayed in the column.
            Developers can use this feature to add checkboxes to the column for multiple selections.
            The default value of this property is <c>false</c>, which means the checkboxes will not be displayed by default.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttColumn.ShowColumnMenu">
            <summary>  
            Gets or sets whether to display the menu options in each column.  
            </summary>  
            <value>  
            <c>true</c> if need to enable column menu options; otherwise, <c>false</c>. The default value is <c>true</c>.  
            </value> 
            <remarks> 
            Determines whether the columns should display the menu options. 
            </remarks> 
            <seealso cref="T:Syncfusion.Blazor.Gantt.GanttColumn"/> 
            <example> 
            <code> 
            <![CDATA[ 
                <SfGantt DataSource="@TaskCollection" > 
                    <GanttColumns> 
                        <GanttColumn Field = "TaskId" ShowColumnMenu="false"></GanttColumn> 
                    </GanttColumns> 
                </SfGantt> 
            ]]> 
            </code> 
            </example> 
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttColumn.ShowInColumnChooser">
            <summary> 
            Gets or sets whether to display the column chooser to dynamically show or hide columns. 
            </summary> 
            <value> 
            <c>true</c> if need to show column chooser options; otherwise, <c>false</c>. The default value is <c>true</c>. 
            </value> 
            <remarks> 
            Determines which columns should display the column chooser. 
            </remarks> 
            <seealso cref="T:Syncfusion.Blazor.Gantt.GanttColumn"/> 
            <example> 
            <code> 
            <![CDATA[ 
                <SfGantt DataSource="@TaskCollection" > 
                    <GanttColumns> 
                        <GanttColumn Field = "TaskId" ShowInColumnChooser="false"></GanttColumn> 
                    </GanttColumns> 
                </SfGantt> 
            ]]> 
            </code> 
            </example> 
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttColumn.Template">
            <summary>
            Gets or sets the column template that renders a customized element in each cell of the column.
            </summary>
            <value>
            A <see cref="T:Microsoft.AspNetCore.Components.RenderFragment`1"/> that renders the customized element in each cell of the column.
            </value>
            <remarks>
            The Template property allows you to define a customized element to render in each cell of the column.
            Developers can use this feature to display data in a customized way by creating a custom template.
            To use this property, you must provide a <see cref="T:Microsoft.AspNetCore.Components.RenderFragment`1"/> as the template.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttColumn.TextAlign">
            <summary>
            Gets or sets the alignment of the column of the content cells.
            </summary>
            <value>
            A <see cref="P:Syncfusion.Blazor.Gantt.GanttColumn.TextAlign"/> enumeration value that specifies the alignment of the column.
            </value>
            <remarks>
            The <c>TextAlign</c> property specifies the alignment of the content in the cells of the column, including the header cell.
            By default, the value of this property is set to <see cref="F:Syncfusion.Blazor.Grids.TextAlign.Left"/>.
            You can set this property to any value from the <see cref="P:Syncfusion.Blazor.Gantt.GanttColumn.TextAlign"/> enumeration to align the column.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttColumn.Type">
            <summary>
            Gets or sets the data type of the column.
            </summary>
            <value>
            The data type of the column.
            </value>
            <remarks>
            This property specifies the type of data that will be stored in the column. Available options for this property are defined in the <see cref="T:Syncfusion.Blazor.Grids.ColumnType"/> enumeration.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttColumn.Visible">
            <summary>
            Gets or sets a value indicating whether the particular column is visible or hidden.
            </summary>
            <value>
            <c>true</c> if the column is visible; otherwise, <c>false</c>. The default value is <c>true</c>.
            </value>
            <remarks>
            Use this property to show or hide the particular column. By default, columns are displayed. When this property is set to <c>false</c>, the column is hidden. When it is set to <c>true</c>, the column is visible.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttColumn.Width">
            <summary>
            Gets or sets the width of the column in pixels or percentage.
            </summary>
            <value>
            A string that represents the width of the column. The default value is <c>null</c>.
            </value>
            <remarks>
            Use this property to specify the width of the column.
            The width can be specified in pixels or percentage.
            For example, "100px" or "50%".
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttColumn.Uid">
            <summary>
            Gets or sets the unique identifier value of the column. It is used to get the column object from the column collection.
            </summary>
            <value>The unique identifier value of the column.</value>
            <remarks>
            Unique id helps to get the particular column object for customizations.
            </remarks>
            <example>
            <code>
            <![CDATA[
                <SfGantt DataSource="@TaskCollection" >
                    <GanttColumns>
                        <GanttColumn Field = "TaskId" Uid="Gantt-Column1"></GanttColumn>
                    </GanttColumns>
                </SfGantt>
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.GanttColumn.SetWidth(System.String)">
            <summary>
            Update the width of the column.
            </summary>
            <param name="_width">sets the width of the column.</param>
            <exclude />
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.GanttColumn.SetUid(System.String)">
            <summary>
            Update the unique id of the column.
            </summary>
            <param name="_uid">sets the Uid of the column.</param>
            <exclude />
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.GanttColumn.Dispose(System.Boolean)">
            <summary>
            Dispose unmanaged resources in the Syncfusion Blazor component.
            </summary>
            <param name="disposing">Boolean value to dispose the object.</param>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttColumnChooserSettings">
            <summary>
            Configures gantt Column chooser settings
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttColumnChooserSettings.ChildContent">
            <summary>
            Gets or sets the child content of the gantt chart component.
            </summary>
            <value>
            A <see cref="T:Microsoft.AspNetCore.Components.RenderFragment"/> that represents the child content of the component.
            </value>
            <remarks>
            This property is used to define the child content of a component.
            The child content is typically defined using Razor syntax and can contain any valid HTML markup or other components. 
            </remarks>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttColumnChooserSettings.Template">
            <summary>
            Gets or sets the custom content template for the ColumnChooser.
            </summary>
            <value>
            A <see cref="T:Microsoft.AspNetCore.Components.RenderFragment`1"/> that represents the custom content template for the ColumnChooser.
            </value>
            <remarks>
            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.
            The context is of type TValue of the grid.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttColumnChooserSettings.FooterTemplate">
            <summary>
            Gets or sets the custom footer content for the ColumnChooser.
            </summary>
            <value>
            The custom footer content is specified as a <see cref="T:Microsoft.AspNetCore.Components.RenderFragment`1"/> that takes a single parameter named <c>context</c>, which represents the current value of the gantt chart.
            </value>
            <remarks>
            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.
            The context is of type TValue of the gantt chart.
            </remarks>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttColumns">
            <summary>
            Configures gantt column.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttColumns.ChildContent">
            <summary>
            Gets or sets the child content that will be rendered inside the gantt chart component.
            </summary>
            <value>
            A <see cref="T:Microsoft.AspNetCore.Components.RenderFragment"/> representing the child content that will be rendered inside the component.
            </value>
            <remarks>
            Use this property to provide content that will be rendered inside the component.
            </remarks>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttColumns.Columns">
            <summary>
            Gets or sets the list of columns to be displayed in the Gantt chart.
            </summary>
            <value>
            A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:Syncfusion.Blazor.Gantt.GanttColumn"/> objects representing the columns to be displayed in the Gantt chart.
            </value>
            <remarks>
            Use this property to define the columns that will be displayed in the Gantt chart. 
            The columns should be specified in the order in which they should appear in the chart.
            By default, this property is initialized to an empty list.
            </remarks>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttCriticalPathSettings">
            <summary>   
            Configures the critical path settings for the Gantt chart.  
            </summary> 
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttCriticalPathSettings.SlackValue">
            <summary> 
            Gets or sets the slack value, in number of days, which is used to determine whether a task is critical in the Gantt chart. 
            </summary> 
            <value> 
            The number of days between the project's end date and task's end date that must elapse before the task is considered critical. The default value is zero. 
            </value> 
            <remarks> 
            Slack is a measure of how many days a task can be delayed without affecting the project's completion. Tasks with zero or negative slack values are critical, while tasks with positive slack values are non-critical. If a task's end date is the same as the project's end date, the slack value is 0, and the task is considered critical. 
            For example, consider a project with an end date of January 15th, 2023. If a task has an end date of January 14th, 2023, and the slack value is zero, then the task is considered non-critical. If the slack value is 1, then the task is considered critical. On the other hand, if the task has an end date of January 16th, 2023, and the slack value is zero, then the task is considered critical. If the slack value is -2, then the task is considered non-critical. 
            </remarks>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttDayWorkingTime">
            <summary>
            Gantt DayWorkingTime collection.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttDayWorkingTime.ChildContent">
            <summary>
            Gets or sets the child content for the component.
            </summary>
            <value>
            A RenderFragment that represents the child content for the component.
            </value>
            <remarks>
            This property is used to define the child content for the component.
            </remarks>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttDayWorkingTime.From">
            <summary>
            Gets or sets start time of working time range.
            </summary>
            <value>
            A <see cref="T:System.Double"/> value that represents the start time of the working time range.
            </value>
            <remarks>
            This property specifies the start time of the working time range. 
            The value should be in hours, expressed as a decimal number.
            For example, 8.5 represents 8:30 AM.
            The default value is 8, which represents morning.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttDayWorkingTime.To">
            <summary>
            Gets or sets the end time of working time range.
            </summary>
            <value>
            A <see cref="T:System.Double"/> value that represents the end time of the working time range.
            </value>
            <remarks>
            This property specifies the end time of the working time range.
            The value should be in hours, expressed as a decimal number.
            For example, 17 represents 5 PM.
            The default value is 17, which represents the evening.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.GanttDayWorkingTime.Dispose(System.Boolean)">
            <summary>
            Dispose unmanaged resources in the Syncfusion Blazor component.
            </summary>
            <param name="disposing">Boolean value to dispose the object.</param>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttDayWorkingTimeCollection">
            <summary>
            Configures gantt dayworking time collection.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttDayWorkingTimeCollection.ChildContent">
            <summary>
            Gets or sets the child content for the component.
            </summary>
            <value>
            A RenderFragment that represents the child content for the component.
            </value>
            <remarks>
            This property is used to define the child content for the component.
            The content can be defined using Razor syntax.
            </remarks>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttDayWorkingTimeCollection.DayWorkingTime">
            <summary>
            Gets or sets the customized working time of the project.
            </summary>
            <value>
            A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:Syncfusion.Blazor.Gantt.GanttDayWorkingTime"/> that represents the customized working time for the project.
            </value>
            <remarks>
            This property is used to define the customized working time for the project.
            The list should contain different working hours of a day and same working hours is same for all days.
            If the list is empty, the default working time will be used for all days of the week.
            The working time for each day of the week is defined by a <see cref="T:Syncfusion.Blazor.Gantt.GanttDayWorkingTime"/> object.
            </remarks>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttEditDialogField">
            <summary>
            Configure edit dialog field.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEditDialogField.Type">
            <summary>
            Gets or sets types of tab which contains editor for columns.
             `General` - Defines tab container type as general.
             `Dependency` - Defines tab as dependency editor.
             `Resources` - Defines tab as resources editor.
             `Notes` - Defines tab as notes editor.
            </summary>
            <value>
            A <see cref="T:Syncfusion.Blazor.Gantt.GanttDialogFieldType"/> enumeration value that represents the type of the dialog tab.
            </value>
            <remarks>
            This property is used to define the type of the dialog tab that contains the column editor.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEditDialogField.Fields">
            <summary>
            Gets or sets edited column fields that are edited inside the tab.
            </summary>
            <value>
            A <see cref="T:System.String"/> array that represents the column fields that are edited inside the tab.
            </value>
            <remarks>
            This property is used to define an array of column fields that are edited inside the tab.
            The array should contain the names of the columns that should be shown in the tab. 
            Based on mapping taskfields will generated for general tabs for custom tabs it will be empty.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEditDialogField.HeaderText">
            <summary>
            Gets or sets header text of the tab item.
            </summary>
            <value>
            A <see cref="T:System.String"/> value that represents the text displayed in the header of the tab item.
            </value>
            <remarks>
            This property is used to define the text that will be displayed in the header of the tab item.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.GanttEditDialogField.Dispose(System.Boolean)">
            <summary>
            Dispose unmanaged resources in the Syncfusion Blazor component.
            </summary>
            <param name="disposing">Boolean value to dispose the object.</param>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttEditDialogFields">
            <summary>
            Defines the tabs and fields to be included in the edit dialog.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEditDialogFields.EditDialogFields">
            <summary>
            Gets or sets the list of edit dialog fields that are included in the edit dialog.
            </summary>
            <value>
            A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:Syncfusion.Blazor.Gantt.GanttEditDialogField"/> that represents the edit dialog fields that are included in the edit dialog.
            </value>
            <remarks>
            This property is used to define a list of edit dialog fields that are included in the edit dialog.
            Each field contains information about the tab and the columns to be shown in the edit dialog.
            If the list is empty, no tabs will be shown in the edit dialog.
            </remarks>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttEditSettings">
            <summary>
             Class that defines the edit settings property in Gantt.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEditSettings.Parent">
            <summary>
            Gets or sets the parent Gantt control.
            </summary>
            <value>
            An <see cref="T:Syncfusion.Blazor.Gantt.IGantt"/> object that represents the parent Gantt chart control.
            </value>
            <remarks>
            This property is used by the child components of the Gantt chart control to access the parent control, allowing for communication and coordination between the components. The <see cref="T:Microsoft.AspNetCore.Components.CascadingParameterAttribute"/> attribute is used to indicate that the value of this property should be cascaded down to child components, allowing them to access the parent control without the need for explicit references or event handling. 
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEditSettings.ChildContent">
            <summary>
            Gets or sets the child content to be rendered inside the component.
            </summary>
            <value>
            A <see cref="T:Microsoft.AspNetCore.Components.RenderFragment"/> instance that represents the child content to be rendered inside the component.
            </value>
            <remarks>
            This property is used to define the child content to be rendered inside the component.
            The content can be any valid HTML markup or other components.
            The child content will be rendered inside the component's template wherever the <c>@ChildContent</c> Razor directive is used. 
            </remarks>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEditSettings.AllowAdding">
            <summary>
            Gets or sets a value indicating whether new records can be added to the Gantt chart.
            </summary>
            <value>
            <c>true</c> if new records can be added to the Gantt chart; otherwise, <c>false</c>.
            </value>
            <remarks>
            Use this property to control whether new records can be added to the Gantt chart.
            If this property is set to <c>true</c>, an "Add" button will be displayed on the toolbar, which allows users to add new records.
            If this property is set to <c>false</c>, the "Add" button will be hidden and users will not be able to add new records.
            By default, this property is set to <c>false</c>.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEditSettings.AllowDeleting">
            <summary>
            Gets or sets a value indicating whether the user is allowed to delete items from the gantt chart component.
            </summary>
            <value>
            <c>true</c> if the user is allowed to delete items; otherwise, <c>false</c>.
            </value>
            <remarks>
            Set this property to <c>true</c> to allow users to delete items. The default value is <c>false</c>.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEditSettings.AllowEditing">
            <summary>
            Gets or sets a value indicating whether the record is allowed to be edited.
            </summary>
            <value>
            <c>true</c> if editing is allowed; otherwise, <c>false</c>.
            </value>
            <remarks>
            Set this property to <c>true</c> to allow values to be updated in the existing record.
            If set to <c>false</c>, the record will be read-only.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEditSettings.AllowTaskbarEditing">
            <summary>
            Gets or sets whether to enable or disable taskbar resizing, taskbar dragging, progress bar resizing and
            predecessor draw action in gantt chart.
            </summary>
            <value>
            <c>true</c> to enable taskbar editing; otherwise, <c>false</c>.
            </value>
            <remarks>
             When set to <c>true</c>, this property allows users to resize taskbars, drag them within the chart, resize the
             progress bars and draw dependencies between tasks.
             The default value of this property is <c>false</c>, which means that taskbar editing is disabled by default.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEditSettings.Mode">
            <summary>
            Gets or sets edit mode in Gantt chart component.
             `Auto` - Defines cell edit mode in grid side and dialog mode in chart side.
             `Dialog` - Defines dialog edit mode on both sides.
            </summary>
            <value>
            The default value is EditMode.Auto.
            </value>
            <remarks>
            The default value of this property is <c>Auto</c>, which means that cell editing is allowed in the grid side
            and dialog editing is allowed in the chart side.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEditSettings.NewRowPosition">
            <summary>
            Gets or sets the row position for new records of the gantt chart component.
            </summary>
            <value>
            The default value is RowPosition.Top.
            </value>
            <remarks>
            The row position determines where new records are added when the user inserts them.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEditSettings.ShowDeleteConfirmDialog">
            <summary>
            Gets or sets a value indicating whether to show a confirmation dialog before deleting a record.
            </summary>
            <value>
            The default value is false.
            </value>
            <remarks>
            If set to true, a confirmation dialog will be displayed before deleting a record. You can also cancel the delete command from the dialog.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEditSettings.AllowSchedulingOnDrag">
            <summary>  
            Gets or sets whether to allow click and drag action on chart area of gantt to schedule dates and create a taskbar.   
            </summary>  
            <value>  
            <c>false</c> If need to allow scheduling dates by click and drag action; otherwise, <b>false</b>. The default value is <b>false</b>. 
            </value>  
            <remarks>  
            When set to <c>true</c>, users can interact on gantt chart rows and schedule the task on their desired dates. 
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEditSettings.allowSchedulingOnDrag">
            <b>true</b> If need to allow scheduling dates by click and drag action; otherwise, <b>false</b>. The default value is <b>false</b>. 
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttEventMarker">
            <summary>
            Configure event marker.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEventMarker.CssClass">
            <summary>
            Gets or sets the custom CSS class of Gantt EventMarker to customize background and label.
            </summary>
            <value>
            A <see cref="T:System.String"/> value that represents the custom CSS class of the Gantt event marker.
            </value>
            <remarks>
            This property is used to define a custom CSS class for the Gantt event marker.
            The custom CSS class can be used to customize the background and label of the event marker.
            If the property is not set, the default CSS class will be used.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEventMarker.Day">
            <summary>
            Gets or sets the date of Gantt EventMarker.
            </summary>
            <value>
            A <see cref="T:System.DateTime"/> value that represents the date of the Gantt event marker.
            </value>
            <remarks>
            This property is used to define the date of the Gantt event marker.
            The event marker will be displayed on the specified date.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEventMarker.Label">
            <summary>
            Gets or sets label of Gantt EventMarker.
            </summary>
            <value>
            A <see cref="T:System.String"/> value that represents the label of the Gantt event marker.
            </value>
            <remarks>
            This property is used to define the label of the Gantt event marker.
            The label will be displayed on the event marker.
            If the property is not set, no label will be displayed.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.GanttEventMarker.Dispose(System.Boolean)">
            <summary>
            Dispose unmanaged resources in the Syncfusion Blazor component.
            </summary>
            <param name="disposing">Boolean value to dispose the object.</param>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttEventMarkers">
            <summary>
            Defines events and status of project throughout the timeline.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEventMarkers.ChildContent">
            <summary>
            Gets or sets the child content for the component.
            </summary>
            <value>
            A RenderFragment that represents the child content for the component.
            </value>
            <remarks>
            This property is used to define the child content for the component.
            The content can be defined using Razor syntax.
            </remarks>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEventMarkers.EventMarkers">
            <summary>
            Gets or sets the Gantt Eventsmarkers of the component.
            </summary>
            <value>
            A list of GanttEventMarker objects representing visual indicators that represent a specific event on a particular date.
            The default value is an empty list if not set.
            </value>
            <remarks>
            This property is used to define the EventMarkers of the Gantt chart.
            An EventMarker is a visual indicator in the chart that represents a specific event on a particular date.
            This property is typically used to add EventMarkers to the Gantt chart.
            If the property is not set, the chart will not have any EventMarkers.
            </remarks>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttEvents`1">
            <summary>
            Configures gantt events.
            </summary>
            <typeparam name="TValue">Specifies the type of GanttEvents.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.Created">
             <summary>
             An event that is raised when the  Gantt component is generated.
             </summary>
             <value>
             An event callback function.
             </value>
             <remarks>
            An event that is raised when a Gantt componenet is created . And that event handler receives a <see cref="T:System.Object"/> object which provides the details of created component.
             </remarks>
             <example>
             <code>
             <![CDATA[
             <SfGantt>
                 <GanttEvents Created="CreateHandler" TValue="TaskData"></GanttEvents>
             </SfGantt>
             @code{
                 private void CreateHandler(System.Object args)
                 {   
                 }
             }
             ]]>
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.OnLoad">
            <summary>
            An event that is raised before the rendering of Gantt Component.
            </summary>
            <value>
            An event callback function.
            </value>
            <remarks>
            This event handler receives a <see cref="T:System.Object"/> object which provides the details of the gantt before initial rendering.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt>
                <GanttEvents OnLoad="OnLoadHandler" TValue="TaskData"></GanttEvents>
            </SfGantt>
            @code{
                private void OnLoadHandler(System.Object args)
                {
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.Destroyed">
            <summary>
            An event that is raised when the component is destroyed.
            </summary>
            <value>
            An event callback function.
            </value>
            <remarks>
            This event handler receives a <see cref="T:System.Object"/> object which provides the details when the component is detroyed.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt>
                <GanttEvents Destroyed = "DestroyHandler" TValue="TaskData"></GanttEvents>
            </SfGantt>
            @code{
                private void DestroyHandler(System.Object args)
                {
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.SplitterResizeStart">
            <summary>
            An event that is raised when the Splitter is started to be resized.
            </summary>
            <value>
            An event callback function.
            </value>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Layouts.ResizeEventArgs"/> object which provides the details of resize action.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt>
                <GanttEvents SplitterResizeStart="SplitterResizeStartHandler" TValue="TaskData"></GanttEvents>
            </SfGantt>
            @code{
                private void SplitterResizeStartHandler(Syncfusion.Blazor.Layouts.ResizeEventArgs args)
                {
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.SplitterResized">
            <summary>
            An event that is raised when the splitter is resized.
            </summary>
            <value>
            An event callback function.
            </value>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Layouts.ResizingEventArgs"/> object which provides the details of splitter resize action.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt>
                <GanttEvents SplitterResized="SplitterResizeHandler" TValue="TaskData"></GanttEvents>
            </SfGantt>
            @code{
                private void SplitterResizeHandler(Syncfusion.Blazor.Layouts.ResizingEventArgs args)
                {
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.SplitterResizing">
            <summary>
            An event that is raised when the splitter is resizing. 
            </summary>
            <value>
            An event callback function.
            </value>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Layouts.ResizingEventArgs"/> object which provides the details of splitter resize action.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt>
                <GanttEvents SplitterResizing="SplitterResizingHandler" TValue="TaskData"></GanttEvents>
            </SfGantt>
            @code{
                private void SplitterResizingHandler(Syncfusion.Blazor.Layouts.ResizingEventArgs args)
                {
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.SplitterCreated">
            <summary>
            An event that is raised when a splitter is created in Gantt.
            </summary>
            <value>
            An event callback function.
            </value>
            <remarks>
            This event handler receives a <see cref="T:System.Object"/> object which provides the details of splitter.
            </remarks>
            <example>
            <code><![CDATA[
            @using Syncfusion.Blazor.Gantt
            <SfGantt>
            <GanttEvents TValue="TaskData" SplitterCreated="SplitterCreatedHandler"></GanttEvents>
            </SfGantt>
            @code{
            public void SplitterCreatedHandler(System.Object args)
            {
               Console.WriteLine("Callback for splitter created event");
            }
            }
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.OnActionFailure">
            <summary>
            An event that is raised when any Gantt action failed to achieve the desired results.
            </summary>
            <value>
            An event callback function.
            </value>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.FailureEventArgs"/> object which provides the details of action failure in Gantt Chart. Stack trace of exceptions, if any, can also be obtained here.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt >
                <GanttEvents OnActionFailure="OnActionFailureHandler" TValue="TaskData"></GanttEvents>
            </SfGantt
            @code{
                private void OnActionFailureHandler(Syncfusion.Blazor.Grids.FailureEventArgs args)
                {
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.OnToolbarClick">
            <summary>
            An event that is raised when a toolbar item is clicked.
            </summary>
            <value>
            An event callback function.
            </value>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Navigations.ClickEventArgs"/> object which provides the details about the toolbar item. Custom actions for custom toolbar items can be performed using this event.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt>
                <GanttEvents OnToolbarClick="OnToolbarClickHandler" TValue="TaskData"></GanttEvents>
            </SfGantt>
            @code{
                private void OnToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
                {
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.TaskbarEdited">
            <summary>
            An event that is raised when taskbar was dragged and dropped in a new position.
            </summary>
            <value>
            An event callback function.
            </value>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Gantt.TaskbarEditedEventArgs`1"/> object which provides the details about the taskbar current position. 
            To cancel the taskbar save action, you can use cancel argument property in event.
            To retrieve details about the modified record collection, you can refer to the <see cref="T:Syncfusion.Blazor.Gantt.GanttRowUpdatedEventArgs`1"/> event handler.
            Each record is represented as a dictionary of field names and corresponding values.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt>
                <GanttEvents TaskbarEdited="TaskbarEditHandler" TValue="TaskData"></GanttEvents>
            </SfGantt>
            @code{
                private void TaskbarEditHandler(TaskbarEditedEventArgs<TaskData> args)
                {
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.EndEdit">
            <summary>
            An event that is raised when a task is updated with new data.
            </summary>
            <value>
            An event callback function.
            </value>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Gantt.TaskbarEditedEventArgs`1"/> object which provides the details aboud the updated task data.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt>
                <GanttEvents EndEdit="EndEditHandler" TValue="TaskData"></GanttEvents>
            </SfGantt>
            @code{
                private void EndEditHandler(TaskbarEditedEventArgs<TaskData> args)
                {
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.OnCellEdit">
            <summary>
            An event that is raised when editing a cell.
            </summary>
            <value>
            An event callback function.
            </value>
            <remarks>
             The event handler will be called when the value of a cell is edited.And the event handler receives a <see cref="T:Syncfusion.Blazor.Grids.CellEditArgs`1"/> object which provides the details of the cell to be edited. Cell edit action can be cancelled using <see cref="P:Syncfusion.Blazor.Grids.CellEditArgs`1.Cancel"/> argument property.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt>
                <GanttEvents OnCellEdit="OnCellEditHandler" TValue="TaskData"></GanttEvents>
            </SfGantt>
            @code{
                private void OnCellEditHandler(Syncfusion.Blazor.Grids.CellEditArgs<TValue> args)
                {
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.OnCellSave">
            <summary>
            An event that occurs prior to the updating of a cell with new data.
            </summary>
            <value>
            An event callback function.
            </value>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.CellSaveArgs`1"/> object which provides the details about the cell to be saved.
            To retrieve details about the modified record collection, you can refer to the <see cref="T:Syncfusion.Blazor.Gantt.GanttRowUpdatedEventArgs`1"/> event handler.
            Each record is represented as a dictionary of field names and corresponding values.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt>
                <GanttEvents OnCellSave="OnCellSaveHandler" TValue="TaskData"></GanttEvents>
            </SfGantt>
            @code{
                private void OnCellSaveHandler(Syncfusion.Blazor.Grids.CellSaveArgs<TaskData> args)
                {
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.CellSaved">
            <summary> 
            An event that is triggered when a cell is saved. 
            </summary> 
            <value> 
            An event callback function. 
            </value> 
            <remarks> 
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.CellSavedArgs`1"/> object, which provides the details about the cell to be saved. 
            </remarks> 
            <example> 
            <code> 
            <![CDATA[ 
            <SfGantt> 
            <GanttEvents CellSaved="CellSavedHandler" TValue="TaskData"></GanttEvents> 
            </SfGantt> 
            @code{ 
                private void CellSavedHandler (Syncfusion.Blazor.Grids.CellSavedArgs<TaskData> args) 
                { 
                } 
            } 
            ]]> 
            </code> 
            </example> 
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.CellSelected">
            <summary>
            An event is triggered when a cell is selected.
            </summary>
            <value>
            An event callback function.
            </value>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.CellSelectEventArgs`1"/> object which provides the details of the selected cell.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt>
                <GanttEvents CellSelected="CellSelectedHandler" TValue="TaskData"></GanttEvents>
            </SfGantt>
            @code{
                private void CellSelectedHandler(Syncfusion.Blazor.Grids.CellSelectEventArgs<TaskData> args)
                {
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.CellSelecting">
            <summary>
            An event that is raised prior to a cell being selected.
            </summary>
            <value>
            An event callback function.
            </value>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.CellSelectingEventArgs`1"/> object which provides information about cell to be selected. The Cell selection action can be cancelled using <see cref="P:Syncfusion.Blazor.Grids.CellSelectingEventArgs`1.Cancel"/> argument proprety.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt>
                <GanttEvents CellSelecting="CellSelectingHandler" TValue="TaskData"></GanttEvents>
            </SfGantt>
            @code{
                private void CellSelectingHandler(Syncfusion.Blazor.Grids.CellSelectingEventArgs<TaskData> args)
                {
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.CellDeselecting">
            <summary>
            An event that is raised before a cell is deselected
            </summary>
            <value>
            An event callback function.
            </value>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.CellDeselectEventArgs`1"/> object which provides the details of the cell to be deselected.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt TValue="TaskData">
                <GanttEvents CellDeselecting="CellDeselectingHandler"></GanttEvents>
            </SfGantt>
            @code{
                private void CellDeselectingHandler(Syncfusion.Blazor.Grids.CellDeselectEventArgs<TaskData> args)
                {
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.CellDeselected">
            <summary>
            An event that is raised when the selected cell is deselected.
            </summary>
            <value>
            An event callback function.
            </value>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.CellDeselectEventArgs`1"/> object that provides the details of the deselected cell.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt>
                <GanttEvents CellDeselected="CellDeselectedHandler" TValue="TaskData"></GanttEvents>
            </SfGantt>
            @code{
                private void CellDeselectedHandler(Syncfusion.Blazor.Grids.CellDeselectEventArgs<TaskData> args)
                {
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.RowDeselected">
            <summary>
            An event that is raised when a selected row is deselected.
            </summary>
            <value>
            An event callback function.
            </value>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.RowDeselectEventArgs`1"/> object which provides the details of the deselected row.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt>
                <GanttEvents RowDeselected="RowDeselectedHandler" TValue="TaskData"></GanttEvents>
            </SfGantt>
            @code{
                private void RowDeselectedHandler(Syncfusion.Blazor.Grids.RowDeselectEventArgs<TaskData> args)
                {
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.RowDeselecting">
            <summary>
            An event that is raised before a row is deselected.
            </summary>
            <value>
            An event callback function.
            </value>
            <remarks>
            The RowDeselecting event occurs before a row is deselected. This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.RowDeselectEventArgs`1"/> object which provides the details of the row to be deselected.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt>
                <GanttEvents RowDeselecting="RowDeselectingHandler" TValue="TaskData"></GanttEvents>
            </SfGantt>
            @code{
                private void RowDeselectingHandler(Syncfusion.Blazor.Grids.RowDeselectEventArgs<TaskData> args)
                {
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.RowSelected">
            <summary>
            An event that is raised when a row is selected.
            </summary>
            <value>
            An event callback function.
            </value>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.RowSelectEventArgs`1"/> object which provides the details of the selected row.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt>
                <GanttEvents RowSelected="RowSelectedHandler" TValue="TaskData"></GanttEvents>
            </SfGantt>
            @code{
                private void RowSelectedHandler(Syncfusion.Blazor.Grids.RowSelectEventArgs<TaskData> args)
                {
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.RowSelecting">
            <summary>
            An event that is raised before row selection occurs.
            </summary>
            <value>
            An event callback function.
            </value>
            <remarks>
            An event is raised whenever the user is about to select a row. And that event handler receives a <see cref="T:Syncfusion.Blazor.Grids.RowSelectingEventArgs`1"/> object which provides the details of the row to be selected. Row selection action can be cancelled using <see cref="P:Syncfusion.Blazor.Grids.RowSelectingEventArgs`1.Cancel"/> argument property.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt>
                <GanttEvents RowSelecting="RowSelectingHandler" TValue="TaskData"></GanttEvents>
            </SfGantt>
            @code{
                private void RowSelectingHandler(Syncfusion.Blazor.Grids.RowSelectingEventArgs<TaskData> args)
                {
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.OnActionBegin">
            <summary>
            An event that is raised when Gantt actions such as sorting, filtering, searching etc., begins.
            </summary>
            <value>
            An event callback function.
            </value>
            <remarks>
            And that event handler receives a <see cref="T:Syncfusion.Blazor.Gantt.GanttActionEventArgs`1"/> object which provides the details about the current action to be performed in Gantt. Current action can be cancelled using <see cref="P:Syncfusion.Blazor.Gantt.GanttActionEventArgs`1.Cancel"/> argument property.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt>
                <GanttEvents OnActionBegin="OnActionBeginHandler" TValue="TaskData"></GanttEvents>
            </SfGantt>
            @code{
                private void OnActionBeginHandler(GanttActionEventArgs<TaskData> args)
                {
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.OnActionComplete">
            <summary>
            An event that is raised when Gantt actions such as sorting, filtering, searching, etc. are completed.
            </summary>
            <value>
            An event callback function.
            </value>
            <remarks>
            An event is raised whenever the actions is triggered. And that  event handler receives a <see cref="T:Syncfusion.Blazor.Gantt.GanttActionEventArgs`1"/> object which provides the details about the current action performed in Gantt.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt>
                <GanttEvents OnActionComplete="OnActionCompleteHandler" TValue="TaskData"></GanttEvents>
            </SfGantt>
            @code{
                private void OnActionCompleteHandler(GanttActionEventArgs<TaskData> args)
                {
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.BeforeTooltipRender">
            <summary>
            An event that is raised every time before the tooltip appears in Gantt Chart.
            </summary>
            <value>
            An event callback function.
            </value>
            <remarks>
            An event is raised before a tooltip is displayed.And that event handler receives a <see cref="T:Syncfusion.Blazor.Gantt.BeforeTooltipRenderEventArgs`1"/> object which provides the details of the target element. Rendering tooltip can be cancelled using <see cref="P:Syncfusion.Blazor.Gantt.BeforeTooltipRenderEventArgs`1.Cancel"/> argument property.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt TValue="TaskData">
                <GanttEvents BeforeTooltipRender="BeforeTooltipRenderHandler"></GanttEvents>
            </SfGantt>
            @code{
                private void BeforeTooltipRenderHandler(BeforeTooltipRenderEventArgs<TaskData> args)
                {
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.QueryChartRowInfo">
            <summary>
            An event that is raised whenever a chart row is rendered or refreshed in Gantt.
            </summary>
            <value>
            An event callback function.
            </value>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Gantt.QueryChartRowInfoEventArgs`1"/> object which provides the details about the chart row. Customizations for chart row element can be performed here.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt>
                <GanttEvents QueryChartRowInfo="QueryChartRowInfoHandler" TValue="TaskData"></GanttEvents>
            </SfGantt>
            @code{
                private void QueryChartRowInfoHandler(QueryChartRowInfoEventArgs<TValue> args)
                {
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.QueryCellInfo">
            <summary>
            An event that is raised whenever a grid cell is rendered or refreshed in Gantt.
            </summary>
            <value>
            An event callback function.
            </value>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.QueryCellInfoEventArgs`1"/> object which provides the details of the grid cell. Customizations for grid cell element can be performed here.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt>
                <GanttEvents QueryCellInfo="QueryCellInfoHandler" TValue="TaskData"></GanttEvents>
            </SfGantt>
            @code{
                private void QueryCellInfoHandler(Syncfusion.Blazor.Grids.QueryCellInfoEventArgs<TaskData> args)
                {
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.RowDataBound">
            <summary>
            An event that is raised whenever a grid row is rendered or refreshed in Gantt.
            </summary>
            <value>
            An event callback function.
            </value>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.RowDataBoundEventArgs`1"/> object which provides the details of the grid row. Customizations for grid row element can be performed here.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt>
                <GanttEvents RowDataBound="RowDataBoundHandler" TValue="TaskData"></GanttEvents>
            </SfGantt>
            @code{
                private void RowDataBoundHandler(Syncfusion.Blazor.Grids.RowDataBoundEventArgs<TaskData> args)
                {
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.ContextMenuItemClicked">
            <summary>
            An event that is raised when a context menu items is clicked.
            </summary>
            <value>
            An event callback function.
            </value>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.ContextMenuClickEventArgs`1"/>object that contains information regarding the conetxt menu item. Custom actions for custom context menu items can be performed here.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt>
                <GanttEvents ContextMenuItemClicked="ContextMenuItemClickedHandler" TValue="TaskData"></GanttEvents>
            </SfGantt>
            @code{
                private void ContextMenuItemClickedHandler(Syncfusion.Blazor.Grids.ContextMenuClickEventArgs<TaskData> args)
                {
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.ContextMenuOpen">
            <summary>
            An event that is raised before the context menu appears.
            </summary>
            <value>
            An event callback function.
            </value>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.ContextMenuOpenEventArgs`1"/> object which provides the details about the context menu.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt>
                <GanttEvents ContextMenuOpen="ContextMenuOpenHandler" TValue="TaskData"></GanttEvents>
            </ SfGantt >
            @code{
                private void ContextMenuOpenHandler(Syncfusion.Blazor.Grids.ContextMenuOpenEventArgs<TaskData> args)
                {
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.ColumnMenuClicked">
            <summary>
            An event that is raised when a column menu is clicked.
            </summary>
            <value>
            An event callback function.
            </value>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.ColumnMenuClickEventArgs"/> object which provides the details for the column menu item.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt>
                <GanttEvents ColumnMenuClicked="ColumnMenuClickedHandler" TValue="TaskData"></GanttEvents>
            </SfGantt>
            @code{
                private void ColumnMenuClickedHandler(Syncfusion.Blazor.Grids.ColumnMenuClickEventArgs args)
                {
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.RowDropped">
            <summary>
            An event that is raised when the dragged row elements are dropped on a target row.
            </summary>
            <value>
            An event callback function.
            </value>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.RowDroppedEventArgs`1"/> object which provides the details of dragged and dropped target rows.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt>
                <GanttEvents RowDropped="RowDroppedHandler" TValue="TaskData"></GanttEvents>
            </SfGantt>
            @code{
                private void RowDroppedHandler(Syncfusion.Blazor.Grids.RowDroppedEventArgs<TaskData> args)
                {
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.OnRowDragStart">
            <summary>
            Gets or sets the event callback that is raised when we start dragging the rows to perform a reorder.
            </summary>
            <value>
            An event callback function.
            </value>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.RowDragEventArgs`1"/> object that shows information about the rows it is being dragged from.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt>
                <GanttEvents OnRowDragStart="OnRowDragStartHandler" TValue="TaskData"></GanttEvents>
            </SfGantt>
            @code{
                private void OnRowDragStartHandler(Syncfusion.Blazor.Grids.RowDragEventArgs<TaskData> args)
                {
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.RowDragStarting">
            <summary>
            Gets or sets the event callback that is raised when we start dragging the rows to perform a reorder.
            </summary>
            <value>
            An event callback function.
            </value>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.RowDragStartingEventArgs`1"/> object that shows information about the rows it is being dragged from.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt>
                <GanttEvents RowDragStarting="RowDragStartingHandler" TValue="TaskData"></GanttEvents>
            </SfGantt>
            @code{
                private void RowDragStartingHandler(Syncfusion.Blazor.Grids.RowDragStartingEventArgs<TaskData> args)
                {
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.RowDropping">
            <summary>
            Gets or sets the event callback that is raised when the row  of elements are dropping on  target element. You can cancel the dropping action using this event.
            </summary>
            <value>
            An event callback function.
            </value>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.RowDroppingEventArgs`1"/> object which provides the details of the rows which are dropping and the target where the rows are dropping.
            If the dropping action is prevented using the <c>Cancel</c> argument, then the RowDropped event doesn't trigger.
            </remarks>
            <example>
            <code><![CDATA[
            <SfGantt>
                <GanttEvents RowDropping="OnRowDroppingHandler" TValue="TaskData"></GanttEvents>
            </SfGantt>
            @code{
            private void RowDroppingHandler(RowDroppingEventArgs<BusinessObject> args)
            {
                 //you can cancel the dropping action here
                 args.Cancel = true;
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.Expanding">
            <summary>
            An event that is raised when begin expanding a parent row to show its child rows.
            </summary>
            <value>
            An event callback function.
            </value>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.TreeGrid.RowExpandingEventArgs`1"/> object which provides the details of parent and child rows. Row expand action can be cancelled using <see cref="P:Syncfusion.Blazor.TreeGrid.RowExpandingEventArgs`1.Cancel"/> argument property.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt>
                <GanttEvents Expanding="ExpandingHandler" TValue="TaskData"></GanttEvents>
            </SfGantt>
            @code{
                private void ExpandingHandler(Syncfusion.Blazor.TreeGrid.RowExpandingEventArgs<TaskData> args)
                {
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.Expanded">
            <summary>
            An event that is raised after a parent row is expanded to show is child rows.
            </summary>
            <value>
            An event callback function.
            </value>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.TreeGrid.RowExpandedEventArgs`1"/> object which provides the details of parent and child rows.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt>
                <GanttEvents Expanded="ExpandHandler" TValue="TaskData"></GanttEvents>
            </SfGantt>
            @code{
                private void ExpandHandler(Syncfusion.Blazor.TreeGrid.RowExpandedEventArgs<TaskData> args)
                {
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.Collapsing">
            <summary>
            An event that is raised a row begings collapsing to hide its child rows.
            </summary>
            <value>
            An event callback function.
            </value>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.TreeGrid.RowCollapsingEventArgs`1"/> object which provides the details of parent and child rows. Row collapse action can be cancelled using <see cref="P:Syncfusion.Blazor.TreeGrid.RowCollapsingEventArgs`1.Cancel"/> argument property.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt>
                <GanttEvents Collapsing="CollapseHandler" TValue="TaskData"></GanttEvents>
            </SfGantt>
            @code{
                private void CollapseHandler(Syncfusion.Blazor.TreeGrid.RowCollapsingEventArgs<TaskData> args)
                {
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.Collapsed">
            <summary>
            An event that is raised after the row is collapsed to hide its child rows.
            </summary>
            <value>
            An event callback function.
            </value>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.TreeGrid.RowCollapsedEventArgs`1"/> object which provides the details of parent and child rows.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt>
                <GanttEvents Collapsed ="CollapseHandler" TValue="TaskData"></GanttEvents>
            </SfGantt>
            @code{
                private void CollapseHandler(Syncfusion.Blazor.TreeGrid.RowCollapsedEventArgs<TaskData> args)
                {
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.ColumnResizeStart">
            <summary>
            An event is raised when a grid column resizing.
            </summary>
            <value>
            An event callback function.
            </value>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.ResizeArgs"/> object which provides the details of the resizing column.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt>
                <GanttEvents ColumnResizeStart ="ColumnResizeStartHandler" TValue="TaskData"></GanttEvents>
            </SfGantt>
            @code{
                private void ColumnResizeStartHandler(Syncfusion.Blazor.Grids.ResizeArgs args)
                {
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.ColumnResized">
            <summary>
            An event that is raised when a grid column resize action ends.
            </summary>
            <value>
            An event callback function.
            </value>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.ResizeArgs"/> object which provides the details of the resized column.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt>
                <GanttEvents ColumnResized ="ColumnResizedHandler" TValue="TaskData" ></GanttEvents>
            </ SfGantt >
            @code{
                private void ColumnResizedHandler(Syncfusion.Blazor.Grids.ResizeArgs args)
                {
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.TaskbarEditing">
            <summary>
            An event that is raised when the user starts editing the taskbar.
            </summary>
            <value>
            An event callback function.
            </value>
            <remarks>
            An event is raised when the taskbar is being edited.And that event handler recevies a <see cref="T:Syncfusion.Blazor.Gantt.TaskbarEditingEventArgs`1"/> object which provides the taskbar editing information and an option to cancel the taskbar edit action.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfGantt DataSource = "@TaskCollection" Height="450px" Width="700px">
            <GanttTaskFields Id = "TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate" Duration="Duration" Progress="Progress" ParentID="ParentId" Dependency="Predecessor">
            </GanttTaskFields>
            <GanttEditSettings AllowTaskbarEditing = "true" ></ GanttEditSettings >
            < GanttEvents TaskbarEditing="TaskbarEditingHandler" TValue="TaskData"></GanttEvents>
            </SfGantt>
            @code{
            private void TaskbarEditingHandler(TaskbarEditingEventArgs<TValue> args)
            {
              TaskData record = args.Data;
              string actionName = args.Action;
              args.Cancel = true;
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.DataBound">
            <summary> 
            An event that is raised when data source is populated on the Gantt Chart. 
            </summary>
            <value>
            An event callback function.
            </value>
            <remarks>
            This event is raised after the data has been successfully bound to the control.Object which provides the Bounded data
            </remarks>
            <example>
            <code>
            <![CDATA[ 
            <SfGantt @ref=”Gantt” DataSource=”GanttData”> 
            <GanttEditSettings AllowEditing = "true" ></GanttEditSettings> 
            <GanttEvents DataBound="DataBoundHandler" TValue="TaskData"></GanttEvents>
            </SfGantt> 
            @code{ 
            SfGantt<TaskData> Gantt; 
            private void DataBoundHandler(){ 
             … 
            } 
            } 
            ]]>
            </code> 
            </example> 
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.BeforeCopy">
            <summery> 
            An event that is raised before the copy action in the grid cells. You can cancel the copy action by cancelling this event. 
            </summery>
            <value>
            An event callback function.
            </value>
            <remarks> 
            This event triggers before <see cref="P:Syncfusion.Blazor.Gantt.GanttEvents`1.BeforeCopy"/> event, so you can cancel copy operation by using this event.
            Also, this event handler receives a <see cref="T:Syncfusion.Blazor.Gantt.BeforeCopyEventArgs"/> object which provides the details of before copy action. 
            </remarks> 
            <example> 
            <code> 
            <![CDATA[ 
            <SfGantt> 
            <GanttEvents BeforeCopy=”BeforeCopyHandler”></GanttEvents> 
            </SfGantt> 
            @Code { 
            private void BeforeCopyHandler (Syncfusion.Blazor.Gantt.BeforeCopyEventArgs args){ 
             … 
            } 
            } 
            ]]> 
            </code> 
            </example> 
            
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.FreezeLineMoving">
            <summary>
            An event that is raised when moving freeze line.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.FreezeLineMovingEventArgs"/> object which provides the details about freeze line.
            </remarks>
            <exclude/>
            <example>
            <code>
            <![CDATA[
            <SfGantt>
                <GanttEvents FreezeLineMoving="FreezeLineMovingHandler" TValue="TaskData"></GanttEvents>
            </SfGantt>
            @code{
                private void FreezeLineMovingHandler(Syncfusion.Blazor.Grids.FreezeLineMovingEventArgs args)
                {
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.FreezeLineMoved">
            <summary>
            An event that is raised after moved freeze line.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.FreezeLineMovedEventArgs"/> object which provides the details about freeze line.
            </remarks>
            <exclude/>
            <example>
            <code>
            <![CDATA[
            <SfGantt>
                <GanttEvents FreezeLineMoved="FreezeLineMovedHandler" TValue="TaskData"></GanttEvents>
            </SfGantt>
            @code{
                private void FreezeLineMovedHandler(Syncfusion.Blazor.Grids.FreezeLineMovedEventArgs args)
                {
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.Sorting">
             <summary>  
             Gets or sets the event callback that is invoked before a sorting action is performed or a column is removed from sorting in the Gantt Chart or when the sort column direction changes from Ascending to Descending or vice versa for the same column.  
             </summary>  
             <remarks>  
             The event handler receives a  <see cref="T:Syncfusion.Blazor.Grids.SortingEventArgs"/> object, which provides details about the sorting action or a column is removed from sorting in the Gantt Chart or when the sort column direction changes from <c>Ascending</c> to <c>Descending</c> or vice versa for the same column.  
            </remarks>  
             <value>  
             An event callback function.  
             </value>  
             <example>  
             This example shows how to handle the Sorting event:  
             <code><![CDATA[  
             <SfGantt>  
             <GanttEvents TValue="Orders" Sorting="SortingHandler"></ GanttEvents>  
             ........  
             </SfGantt>  
             @code{  
             public async Task SortingHandler(SortingEventArgs args)  
             {  
                 args.Cancel = true; // To cancel the sorting action.  
             }  
             ]]>  
             </code>  
             </example> 
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.Sorted">
             <summary> 
             Gets or sets the event callback that is raised after sorting action is performed in the Gantt Chart. 
             </summary> 
             <remarks> 
             The event handler receives a <see cref="T:Syncfusion.Blazor.Grids.SortedEventArgs"/> object, which provides details about the sorting action in the Gantt Chart. 
            </remarks> 
             <value> 
             An event callback function. 
             </value> 
             <example> 
             This example shows how to handle the Sorted event: 
             <code><![CDATA[ 
             <SfGantt> 
             <GanttEvents TValue="Orders" Sorted="SortedHandler"></GanttEvents> 
             ........ 
             </SfGantt> 
             @code{ 
             public async Task SortedHandler(SortedEventArgs args) 
             { 
                var direction = args.Direction; // Gets the current sorting direction. 
             } 
             ]]> 
             </code> 
             </example> 
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.Searching">
            <summary> 
            Gets or sets the event callback that is raised before the search action is performed in the Gantt Chart. 
            </summary> 
            <remarks> 
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.SearchingEventArgs"/> object, 
            which provides details about the search action in the Gantt Chart. 
            </remarks> 
            <value> 
            An event callback function. 
            </value> 
            <example> 
            This example shows how to handle the Searching event: 
            <code><![CDATA[ 
            <SfGantt> 
            <GanttEvents TValue="Orders" Searching ="SearchingHandler"></GanttEvents> 
            ........ 
            </ SfGantt> 
            @code { 
            public async Task SearchingHandler (SearchingEventArgs args) 
            { 
            args.Cancel = true; // To cancel the search begin action. 
            } 
            ]]> 
            </code> 
            </example>  
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.Searched">
             <summary> 
             Gets or sets the event callback that is raised after the search action is performed in the Gantt Chart. 
             </summary> 
             <remarks> 
             The event handler receives a<see cref="T:Syncfusion.Blazor.Grids.SearchedEventArgs"/> object, 
             which provides details about the search action in the Gantt Chart. 
            </remarks> 
             <value> 
             An event callback function. 
             </value> 
             <example> 
             This example shows how to handle the Searched event: 
             <code><![CDATA[ 
             <SfGantt > 
             <GanttEvents TValue="Orders" Searched="SearchedHandler"></GanttEvents> 
             ........ 
             </SfGantt> 
             @code{ 
             public async Task SearchedHandler (SearchedEventArgs args) 
             { 
               var searchResult = args.SearchString; // Gets the search result. 
             } 
             ]]> 
             </code> 
             </example> 
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.RowUpdating">
            <summary> 
            Gets or sets the event callback that is raised before the save action is performed in the Gantt Chart. 
            </summary> 
            <remarks> 
            The event handler receives a <see cref="T:Syncfusion.Blazor.Gantt.GanttRowUpdatingEventArgs`1"/> object, 
            which provides details about the save action in the Gantt Chart. 
            </remarks> 
            <value> 
            An event callback function. 
            </value> 
            <example> 
            This example shows how to handle the RowUpdating event: 
            <code><![CDATA[ 
            <SfGantt> 
            <GanttEvents TValue="Orders" RowUpdating ="RowUpdatingHandler"></ GanttEvents > 
            ........ 
            </SfGantt> 
            @code{ 
            public async Task RowUpdatingHandler (GanttRowUpdatingEventArgs<Order> args) 
            { 
            args.Cancel = true; // To cancel the save action. 
            } 
            ]]> 
            </code> 
            </example>  
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.RowUpdated">
            <summary> 
            Gets or sets the event callback that is raised after the save action is performed in the Gantt Chart. 
            </summary> 
            <remarks> 
            The event handler receives a<see cref="T:Syncfusion.Blazor.Gantt.GanttRowUpdatedEventArgs`1"/> object, 
            which provides details about the save action in the Gantt Chart. 
            </remarks> 
            <value> 
            An event callback function. 
            </value> 
            <example> 
            This example shows how to handle the RowUpdated event: 
            <code><![CDATA[ 
            <SfGantt > 
            <GanttEvents TValue="Orders" RowUpdated ="RowUpdatedHandler"></GanttEvents> 
            ........ 
            </SfGantt> 
            @code{ 
            public async Task RowUpdatedHandler (GanttRowUpdatedEventArgs<Order> args) 
            { 
               var rowIndex = args.Index; // Gets the row index of the saved record. 
            } 
            ]]> 
            </code> 
            </example> 
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.Filtering">
            <summary> 
            Gets or sets the event callback that is raised before the filtering or clear filtering action is performed in the Gantt Chart. 
            </summary> 
            <remarks> 
            The event handler receives a <see cref="T:Syncfusion.Blazor.Grids.FilteringEventArgs"/> object, 
            which contains details about filtering or clearing the filtering action in the Gantt Chart. 
            This event is invoked once with <c>Action</c> argument set to <c>Reset</c> when calling the 
            <see cref="M:Syncfusion.Blazor.Gantt.SfGantt`1.ClearFilteringAsync"/> API without passing the column's field as a parameter. It notifies 
            the clear filtering action, and the event arguments will not be updated in this case. You can 
            prevent the clear filtering action using this event. 
            Conversely, this event is invoked for each field with <c>Action</c> set to <c>Remove</c> when 
            calling the <c>ClearFilteringAsync</c> API with the column's field name as a parameter. In this 
            scenario, you can access detailed information in the corresponding event arguments. 
            </remarks> 
            <value> 
            An event callback function. 
            </value> 
            <example> 
            This example shows how to handle the Filtering event: 
            <code><![CDATA[ 
            <SfGantt> 
            <GanttEvents TValue="Orders" Filtering ="FilteringHandler"></ GanttEvents> 
            ........ 
            </ SfGantt> 
            @code{ 
            public async Task FilteringHandler(FilteringEventArgs args) 
            { 
            
            } 
            ]]> 
            </code> 
            </example>  
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.Filtered">
            <summary> 
            Gets or sets the event callback that is raised after the filtered or clear filtered action is performed in the Gantt Chart. 
            </summary> 
            <remarks> 
            The event handler receives a <see cref="T:Syncfusion.Blazor.Grids.FilteredEventArgs"/> object, 
            which contains details about filtering or clearing the filtering action in the Gantt Chart. 
            This event is invoked once with <c>Action</c> argument set to <c>Reset</c> when calling the 
            <see cref="M:Syncfusion.Blazor.Gantt.SfGantt`1.ClearFilteringAsync"/> API without passing the column's field as a parameter. It notifies 
            the clear filtering action, and the event arguments will not be updated in this case. You can 
            prevent the clear filtering action using this event. 
            </remarks> 
            <value> 
            An event callback function. 
            </value> 
            <example> 
            This example shows how to handle the Filtered event: 
            <code><![CDATA[ 
            <SfGantt > 
            <GanttEvents TValue="Orders" Filtered ="FilteredHandler"></GanttEvents> 
            ........ 
            </SfGantt> 
            @code{ 
            public async Task FilteredHandler(FilteredEventArgs args) 
            { 
            
            } 
            ]]> 
            </code> 
            </example> 
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.FilterDialogOpening">
            <summary> 
            Gets or sets the event callback that is raised before the filter dialog is opened in the Gantt Chart. 
            </summary> 
            <remarks> 
            The event handler receives a<see cref="T:Syncfusion.Blazor.Grids.FilterDialogOpeningEventArgs"/> object, 
            which provides details about the filter dialog opening in the Gantt Chart. 
            </remarks> 
            <value> 
            An event callback function. 
            </value> 
            <example> 
            This example shows how to handle the FilterDialogOpening event: 
            <code><![CDATA[ 
            <SfGantt> 
            <GanttEvents TValue="Orders" FilterDialogOpening ="FilterDialogOpeningHandler"></ GanttEvents> 
            ........ 
            </SfGantt> 
            @code{ 
            public async Task FilterDialogOpeningHandler(FilterDialogOpeningEventArgs args) 
            { 
            args.Cancel = true; // To cancel the filter dialog opening action. 
            } 
            ]]> 
            </code> 
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.FilterDialogOpened">
            <summary> 
            Gets or sets the event callback that is raised after the filter dialog is opened in the Gantt Chart. 
            </summary> 
            <remarks> 
            The event handler receives a<see cref="T:Syncfusion.Blazor.Grids.FilterDialogOpenedEventArgs"/> object, 
            which provides details about the filter dialog opened in the Gantt Chart. 
            </remarks> 
            <value> 
            An event callback function. 
            </value> 
            <example> 
            This example shows how to handle the FilterDialogOpened event: 
            <code><![CDATA[ 
            <SfGantt > 
            <GanttEvents TValue="Orders" FilterDialogOpened ="FilterDialogOpenedHandler"></GanttEvents> 
            ........ 
            </SfGantt> 
            @code{ 
            public async Task FilterDialogOpenedHandler(FilterDialogOpenedEventArgs args) 
            { 
            
            } 
            ]]> 
            </code> 
            </example> 
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.RowDeleting">
            <summary> 
            Gets or sets the event callback that is raised before the delete action is performed in the Gantt Chart. 
            </summary> 
            <remarks> 
            The event handler receives a <see cref="T:Syncfusion.Blazor.Gantt.GanttRowDeletingEventArgs`1"/> object,which provides details about the delete action in the Gantt Chart. 
            </remarks> 
            <value> 
            An event callback function. 
            </value> 
            <example> 
            This example shows how to handle the RowDeleting event: 
            <code><![CDATA[ 
            <SfGantt> 
            <GanttEvents TValue="Orders" RowDeleting ="RowDeletingHandler"></ GanttEvents > 
            ........ 
            </SfGantt> 
            @code{ 
            public async Task RowDeletingHandler(GanttRowDeletingEventArgs<Order> args) 
            { 
            if(args.Data.OrderID == 10248) // To cancel the delete action for a specific record. 
               { 
            args.Cancel = true; 
               } 
            } 
            ]]> 
            </code> 
            </example> 
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.RowDeleted">
            <summary> 
            Gets or sets the event callback that is raised after the delete action is performed in the Gantt Chart. 
            </summary> 
            <remarks> 
            The event handler receives a <see cref="T:Syncfusion.Blazor.Gantt.GanttRowDeletedEventArgs`1"/> object, 
            which provides details about the delete action in the Gantt Chart. 
            </remarks> 
            <value> 
            An event callback function. 
            </value> 
            <example> 
            This example shows how to handle the RowDeleted event: 
            <code><![CDATA[ 
            <SfGantt > 
            <GanttEvents TValue="Orders" RowDeleted ="RowDeletedHandler"></GanttEvents> 
            ........ 
            </SfGantt> 
            @code{ 
            public async Task RowDeletedHandler(GanttRowDeletedEventArgs<Order> args) 
            { 
               var rowIndex = args.Index; // Gets the row index of the deleted record. 
            } 
            ]]> 
            </code> 
            </example> 
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.ColumnReordering">
            <summary> 
            Gets or sets the event callback that is raised when columns reordering action is performed in the Gantt Chart. 
            </summary> 
            <remarks> 
            The event handler receives a <see cref="T:Syncfusion.Blazor.Grids.ColumnReorderingEventArgs"/> object, 
            which provides details about the columns reordering action in the Gantt Chart. 
            </remarks> 
            <value> 
            An event callback function. 
            </value> 
            <example> 
            This example shows how to handle the ColumnReordering event: 
            <code><![CDATA[ 
            <SfGantt> 
            <GanttEvents TValue="Orders" ColumnReordering ="ColumnReorderingHandler"></GanttEvents> 
            ........ 
            </SfGantt> 
            @code{ 
            public async Task ColumnReorderingHandler(ColumnReorderingEventArgs args) 
            { 
               var fromColumn = args.FromColumn; // To get the from columns list 
            } 
            ]]> 
            </code> 
            </example>   
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.ColumnReordered">
            <summary> 
            Gets or sets the event callback that is raised when columns are reordered in the Gantt Chart. 
            </summary> 
            <remarks> 
            The event handler receives a<see cref="T:Syncfusion.Blazor.Grids.ColumnReorderedEventArgs"/> object, 
            which provides details about the columns reordered in the Gantt Chart. 
            </remarks> 
            <value> 
            An event callback function. 
            </value> 
            <example> 
            This example shows how to handle the ColumnReordered event: 
            <code><![CDATA[ 
            <SfGantt > 
            <GanttEvents TValue="Orders" ColumnReordered ="ColumnReorderedHandler"></GanttEvents> 
            ........ 
            </SfGantt> 
            @code{ 
            public async Task ColumnReorderedHandler(ColumnReorderedEventArgs args) 
            { 
               var toColumn = args.ToColumn; // To get the to columns list 
            } 
            ]]> 
            </code> 
            </example> 
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.Zooming">
            <summary> 
            Gets or sets an event callback that is raised before zoom action is performed. 
            </summary> 
            <remarks> 
            The event handler receives a <see cref="T:Syncfusion.Blazor.Gantt.ZoomEventArgs"/> object, which provides details about the zoom action in the gantt chart./// </remarks> 
            <value> 
            An event callback function. 
            </value> 
            <example> 
            <code> 
            <![CDATA[ 
            <SfGantt> 
                <GanttEvents Zooming="ZoomBeginHandler" TValue="TaskData"></GanttEvents> 
            </SfGantt> 
            @code{ 
                private void ZoomBeginHandler(Syncfusion.Blazor.Gantt.ZoomEventArgs args) 
                { 
                    args.Cancel = true; // To cancel the zoom action and not allow it to proceed. 
                } 
            } 
            ]]> 
            </code> 
            </example> 
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.GanttDialogOpening">
            <summary> 
            Gets or sets the event callback that is raised before the dialog opens. 
            </summary> 
            <remarks> 
            The event handler receives a <see cref="T:Syncfusion.Blazor.Gantt.GanttDialogOpenEventArgs`1"/> object, which provides details about the edit or add action in the gantt chart.
            </remarks> 
            <value> 
            An event callback function. 
            </value> 
            <example> 
            <code> 
            <![CDATA[ 
            <SfGantt> 
                <GanttEvents GanttDialogOpening="GanttDialogOpeningHandler" TValue="TaskData"></GanttEvents> 
            </SfGantt> 
            @code{ 
                private void GanttDialogOpeningHandler(Syncfusion.Blazor.Gantt.GanttDialogOpenEventArgs<TValue> args) 
                { 
                       args.Cancel = true; // To cancel the dialog open. 
                } 
            } 
            ]]> 
            </code> 
            </example> 
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.TaskConnectorChanging">
            <summary> 
            Gets or sets an event callback that is raised when beginning to connect a taskbar to another. 
            </summary> 
            <remarks> 
            The event handler receives a <see cref="T:Syncfusion.Blazor.Gantt.TaskConnectorChangeEventArgs`1"/> object, which provides details about the taskbar and connector details. 
            </remarks> 
            <value> 
            An event callback function. 
            </value> 
            <example> 
            <code> 
            <![CDATA[ 
            <SfGantt> 
                <GanttEvents TaskConnectorChanging="ConnectorLineDrawHandler" TValue="TaskData"></GanttEvents> 
            </SfGantt> 
            @code{ 
                private void ConnectorLineDrawHandler (Syncfusion.Blazor.Gantt.TaskConnectorChangeEventArgs <TValue> args) 
                { 
                        args.Cancel = true; // Cancel the connector line process. 
                } 
            } 
            ]]> 
            </code> 
            </example> 
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.GanttDialogOpened">
            <summary> 
            Gets or sets the event callback that is raised after the dialog opened. 
            </summary> 
            <remarks> 
            The event handler receives a <see cref="T:Syncfusion.Blazor.Gantt.GanttDialogOpenedEventArgs`1"/> object, which provides details about the edit or add action in the gantt chart.
            </remarks> 
            <value> 
            An event callback function. 
            </value> 
            <example> 
            <code> 
            <![CDATA[ 
            <SfGantt> 
                <GanttEvents GanttDialogOpened=”DialogOpenedHandler" TValue="TaskData"></GanttEvents> 
            </SfGantt> 
            @code{ 
                private void DialogOpenedHandler(Syncfusion.Blazor.Gantt.GanttDialogOpenedEventArgs<TValue> args) 
                { 
                    // Handle actions that should occur after the dialog has been opened. 
                } 
            } 
            ]]> 
            </code> 
            </example> 
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.Zoomed">
            <summary> 
            Gets or sets an event callback that is raised after zoom action is performed. 
            </summary> 
            <remarks> 
            The event handler receives a <see cref="T:Syncfusion.Blazor.Gantt.ZoomedEventArgs"/> object, which provides details about the zoom action in the gantt chart.
            </remarks>
            <value> 
            An event callback function. 
            </value> 
            <example> 
            <code> 
            <![CDATA[ 
            <SfGantt> 
                <GanttEvents Zoomed="ZoomCompleteHandler"></GanttEvents> 
            </SfGantt> 
            @code{ 
                private void ZoomCompleteHandler(Syncfusion.Blazor.Gantt.ZoomedEventArgs  args) 
                { 
                    // Handle actions that should occur after a zoom action has been completed. 
                } 
            } 
            ]]> 
            </code> 
            </example> 
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.IndentationChanging">
             <summary>
             An event that is raised before an indent or outdent action is performed in the Gantt Chart.
             </summary>
             <remarks>
             The event handler receives a <see cref="T:Syncfusion.Blazor.TreeGrid.IndentationChangingEventArgs`1"/> object, which provides details about the indent or outdent action performing in the Gantt Chart. 
             Based on the `IsIndent` property of this event argument, the type of indentation (indent or outdent) can be determined.
             </remarks>
             <value>
             An event callback function.
             </value>
             <example>
             This example demonstrates how to handle the IndentationChanging event:
             <code>
             <![CDATA[
             <SfGantt @ref="Gantt" DataSource="GanttData">
                 <GanttEvents TValue="TaskData" IndentationChanging=" IndentationChangingHandler "></GanttEvents>
                 ........
             </SfGantt>
             @code {
                 public async Task IndentationChangingHandler (IndentationChangingEventArgs<TaskData> args)
                 {
            
                 }
             }
             ]]>
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.IndentationChanged">
             <summary>
             An event that is raised after indent or outdent action is performed in the Gantt Chart.
             </summary>
             <remarks>
             The event handler receives a <see cref="T:Syncfusion.Blazor.TreeGrid.IndentationChangedEventArgs`1"/> object, which provides details about the indent or outdent action performed in the Gantt Chart.
             </remarks>
             <value>
             An event callback function.
             </value>
             <example>
             This example demonstrates how to handle the IndentationChanged event:
             <code><![CDATA[
             <SfGantt>
                 <GanttEvents TValue="TaskData" IndentationChanged=" IndentationChangedHandler "></GanttEvents>
                 ........
             </SfGantt>
             @code{
                 public async Task IndentationChangedHandler(IndentationChangedEventArgs<TaskData> args)
                 {
            
                 }
             }
             ]]>
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.TaskConnectorChanged">
             <summary> 
             Gets or sets the event callback that is raised when a dependency connector line is drawn between two taskbar and connection is complete. 
             </summary> 
             <remarks> 
             The event handler receives a <see cref="T:Syncfusion.Blazor.Gantt.TaskConnectorChangedEventArgs`1"/> object, which provides details about the dependency connection for the tasks. 
            </remarks>
             <value> 
             An event callback function. 
             </value>
             <example> 
             <code> 
             <![CDATA[ 
             <SfGantt> 
                 <GanttEvents TaskConnectorChanged =" ConnectorLineDrawCompletedHandler" TValue="TaskData"></GanttEvents> 
             </SfGantt> 
             @code{ 
                 private void ConnectorLineDrawCompleted Handler(Syncfusion.Blazor.Gantt. TaskConnectorChangedEventArgs<TValue> args) 
                 { 
                     // Handle actions that should occur after a connector line has been successfully completed. 
                 } 
             } 
             ]]> 
             </code> 
             </example> 
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.RowCreating">
            <summary>  
            Gets or sets the event callback that is raised before the add action is performed in the Gantt Chart.  
            </summary>  
            <remarks>  
            The event handler receives a <see cref="T:Syncfusion.Blazor.Gantt.GanttRowCreatingEventArgs`1"/> object, which provides details about the add action in the Gantt Chart.  
            </remarks>  
            <value>  
            An event callback function.  
            </value>  
            <example>  
            This example shows how to handle the RowCreating event:  
            <code><![CDATA[  
            <SfGantt>  
            <GanttEvents TValue="Orders" RowCreating ="RowAddingHandler"></ GanttEvents>  
            ........  
            </ SfGantt>  
            @code{  
            public async Task RowAddingHandler (GanttRowCreatingEventArgs<Order> args)  
            {  
               args.Cancel = true; // To cancel the add action.  
            }  
            ]]>  
            </code>  
            </example>  
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttEvents`1.RowCreated">
            <summary>  
            Gets or sets the event callback that is raised after the add action is performed in the Gantt Chart.  
            </summary>  
            <remarks>  
            The event handler receives a  <see cref="T:Syncfusion.Blazor.Gantt.GanttRowCreatedEventArgs`1"/> object,   
            which provide details about the add action in the Gantt Chart.  
            </remarks>  
            <value>  
            An event callback function.  
            </value>  
            <example>  
            This example shows how to handle the RowCreated event:  
            <code><![CDATA[  
            <SfGantt >  
            <GanttEvents TValue="Orders" RowCreated ="RowCreatedHandler"></GanttEvents>  
            ........  
            </SfGantt>  
            @code{  
            public async Task RowCreatedHandler (GanttRowCreatedEventArgs<Order> args)  
            {  
               var addedRecord = args.Data; // Gets the added record.  
            }  
            ]]>  
            </code>  
            </example>  
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttFilterSettings">
            <summary>
            Configures the filter settings for Gantt.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttFilterSettings.ChildContent">
            <summary>
            Gets or sets the child content for the component.
            </summary>
            <value>
            A RenderFragment that represents the child content for the component.
            </value>
            <remarks>
            This property is used to define the child content for the component.
            The content can be defined using Razor syntax.
            </remarks>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttFilterSettings.Columns">
            <summary>
            Gets or sets the list of columns to be filtered at initial rendering of the Gantt chart.
            </summary>
            <value>
            A list of PredicateModel objects representing the columns to be filtered at the initial rendering of the Gantt chart.
            </value>
            <remarks>
            Use this property to specify the columns that should be filtered at the initial rendering of the Gantt chart.
            To get the columns that are currently filtered, access this property after the chart has been rendered.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttFilterSettings.HierarchyMode">
            <summary>
            Gets or sets the filter hierarchy mode for the gantt chart. The available options are,
            `Parent`: Shows the filtered record with parent record.
            `Child`: Shows the filtered record with child record.
            `Both` : shows the filtered record with both parent and child record.
            `None` : Shows only filtered record.
            </summary>
            <value>
            A FilterHierarchyMode value that specifies how the records should be filtered in the chart.
            </value>
            <remarks>
            Use this property to set the filter hierarchy mode for the Gantt chart.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttFilterSettings.IgnoreAccent">
            <summary>
            Gets or sets a value that indicates whether the filter should ignores the diacritic characters or accents while filtering.
            </summary>
            <value>
              <c>true</c> if diacritic characters or accents should be ignored; otherwise, <c>false</c>.
            </value>
            <remarks>
            Use this property to specify whether the filter should ignore diacritic characters or accents while filtering. 
            If this property is set to <c>true</c>, then the filter will ignore diacritic characters or accents while filtering. 
            By default, this property is set to <c>false</c>, which means that diacritic characters or accents are taken into account while filtering.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttFilterSettings.Operators">
            <summary>
            Gets or sets a value that allows you to customize the filter operations.
            </summary>
            <value>
            An object that defines custom filter operators for specific data types.
            </value>
            <remarks>
            Use this property to customize the filter operators that are displayed in the filter menu for specific data types.
            The `Operators` property should be defined by data type (string, number, date, and boolean). 
            Based on the data type of the column, the customized operator list will be rendered in the filter menu.
            </remarks>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttHoliday">
            <summary>
            Gantt Holiday collection.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttHoliday.ChildContent">
            <summary>
            Gets or sets the child content that will be rendered inside the gantt chart component.
            </summary>
            <value>
            A <see cref="T:Microsoft.AspNetCore.Components.RenderFragment"/> representing the child content that will be rendered inside the component.
            </value>
            <remarks>
            Use this property to provide content that will be rendered inside the component.
            </remarks>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttHoliday.CssClass">
            <summary>
            Gets or sets custom css class to apply to the holiday for customizing the background and label.
            </summary>
            <value>
            A string representing the custom CSS class to apply to the holiday.
            </value>
            <remarks>
            This property allows to customize the appearance of the holiday by providing a custom CSS class.
            The CSS class can be used to apply specific styles to the holiday, such as changing the background color or label text color.
            If no custom CSS class is provided, the holiday will use the default styles.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttHoliday.From">
            <summary>
            Gets or sets start date of the holiday.
            </summary>
            <value>
            A nullable DateTime representing the start date of the holiday.
            </value>
            <remarks>
            This property is used to define the start date of the holiday.
            If no start date is provided, the holiday will not be displayed.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttHoliday.Label">
            <summary>
            Gets or sets label for the holiday.
            </summary>
            <value>
            A string representing the label for the holiday.
            </value>
            <remarks>
            This property is used to define the label for the holiday.
            The label is the text that will be displayed on the holiday.
            If no label is provided, no text will be displayed on the holiday.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttHoliday.To">
            <summary>
            Gets or sets end date of the holiday.
            </summary>
            <value>
            A nullable DateTime representing the end date of the holiday.
            </value>
            <remarks>
            This property is used to define the end date of the holiday.
            If no end date is provided, the holiday will be displayed as a single-day event.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.GanttHoliday.Dispose(System.Boolean)">
            <summary>
            Dispose unmanaged resources in the Syncfusion Blazor component.
            </summary>
            <param name="disposing">Boolean value to dispose the object.</param>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttHolidays">
            <summary>
            Configures gantt holidays collection.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttHolidays.ChildContent">
            <summary>
            Gets or sets the child content that will be rendered inside the gantt chart component.
            </summary>
            <value>
            A <see cref="T:Microsoft.AspNetCore.Components.RenderFragment"/> representing the child content that will be rendered inside the component.
            </value>
            <remarks>
            Use this property to provide content that will be rendered inside the component.
            </remarks>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttHolidays.Holidays">
            <summary>
            Gets or sets the list of holidays for the Gantt chart component.
            </summary>
            <value>
            A list of GanttHoliday objects representing the holidays for the chart.
            </value>
            <remarks>
            This property is used to define the holidays for the Gantt chart.
            A GanttHoliday object represents a single holiday, which can have a start and end date, a label, and a custom CSS class.
            By default, this property is set to an empty list.
            </remarks>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttKeySettings">
            <summary>
            Configures Gantt key settings.
            </summary>
            <remarks>
            The properties set to GanttKeySettings will handle the hot key's default action.
            </remarks>
            <Exceptions>
            </Exceptions>
            <example>
            <code><![CDATA[
            <SfGantt @ref="Gantt" DataSource="@GanttData">
            <GanttKeySettings MoveLeftCell="Shift+LeftArrow" MoveRightCell="Tab" MoveUpCell="UpArrow" MoveDownCell=""></GanttKeySettings>
            ........
            </SfGantt>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttKeySettings.MoveLeftCell">
            <summary>
            Gets or sets any or all of the following hot keys for the left cell movement.
            <list type="bullet">
            <item>
            <term>Shift+Tab</term>
            <description>Moves to left cell on pressing Shift+Tab key</description>
            </item>
            <item>
            <term>LeftArrow</term>
            <description>Moves to left cell on pressing LeftArrow key</description>
            </item>
            <item>
            <term>Shift+LeftArrow</term>
            <description>Moves to left cell on pressing Shift+LeftArrow key</description>
            </item>
            </list>
            <value>
            The default value are <b>Shift+Tab,LeftArrow,Shift+LeftArrow</b>.
            </value>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttKeySettings.MoveRightCell">
            <summary>
            Gets or sets any or all of the following hot keys for the right cell movement.
            <list type="bullet">
            <item>
            <term>Tab</term>
            <description>Moves to right cell on pressing Tab key</description>
            </item>
            <item>
            <term>RightArrow</term>
            <description>Moves to right cell on pressing RightArrow key</description>
            </item>
            <item>
            <term>Shift+RightArrow</term>
            <description>Moves to right cell on pressing Shift+RightArrow key</description>
            </item>
            </list>
            <value>
            The default value are <b>Tab,RightArrow,Shift+RightArrow</b>.
            </value>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttKeySettings.MoveUpCell">
            <summary>
            Gets or sets any or all of the following hot keys for the up cell movement.
            <list type="bullet">
            <item>
            <term>Shift+Enter</term>
            <description>Moves to top cell on pressing Shit+Enter key</description>
            </item>
            <item>
            <term>UpArrow</term>
            <description>Moves to top cell on pressing UpArrow key</description>
            </item>
            <item>
            <term>Shift+UpArrow</term>
            <description>Moves to top cell on pressing Shift+UpArrow key</description>
            </item>
            </list>
            <value>
            The default value are <b>Shift+Enter,UpArrow,Shift+UpArrow</b>.
            </value>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttKeySettings.MoveDownCell">
            <summary>
            Gets or sets any or all of the following hot for the down cell movement.
            <list type="bullet">
            <item>
            <term>Enter</term>
            <description>Moves to down cell on pressing Enter key</description>
            </item>
            <item>
            <term>DownArrow</term>
            <description>Moves to down cell on pressing DowArrow key</description>
            </item>
            <item>
            <term>Shift+DownArrow</term>
            <description>Moves to down cell on pressing Shift+DownArrow key</description>
            </item>
            </list>
            <value>
            The default value are <b>Enter,DownArrow,Shift+DownArrow</b>.
            </value>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttKeySettings.IndentRow">
            <summary>
            Gets or sets any hot keys combination for indenting the row.
            <list type="bullet">
            <item>
            <term>Alt+Shift+RightArrow</term>
            <description>Indent the row on pressing Alt+Shift+RightArrow keys</description>
            </item>
            </list>
            <value>
            The default value is <b>Alt+Shift+RightArrow</b>.
            </value>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttKeySettings.OutdentRow">
            <summary>
            Gets or sets any hot keys combination for outdenting the row.
            <list type="bullet">
            <item>
            <term>Alt+Shift+LeftArrow</term>
            <description>Indent the row on pressing Alt+Shift+LeftArrow keys</description>
            </item>
            </list>
            <value>
            The default value is <b>Alt+Shift+LeftArrow</b>.
            </value>
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttLabelSettings`1">
            <summary>
            Configures Gantt Label settings.
            </summary>
            <typeparam name="TValue">Specifies the type of GanttLabelSettings.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttLabelSettings`1.Parent">
            <summary>
            Defines the parent component.
            </summary>
            <exclude />
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttLabelSettings`1.ChildContent">
            <summary>
            Gets or sets the child content that will be rendered inside the gantt chart component.
            </summary>
            <value>
            A <see cref="T:Microsoft.AspNetCore.Components.RenderFragment"/> representing the child content that will be rendered inside the component.
            </value>
            <remarks>
            Use this property to provide content that will be rendered inside the component.
            </remarks>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttLabelSettings`1.RightLabel">
            <summary>
            Gets or sets right side label of the task.
            </summary>
            <value>
            A string representing the right side label of the task.
            </value>
            <remarks>
            This property is used to define the right side label of the task.
            The right side label typically displays information such as the task's end date or duration.
            By default, this property is set to null.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttLabelSettings`1.LeftLabel">
            <summary>
            Gets or sets left side label of the task.
            </summary>
            <value>
            A string representing the left side label of the task.
            </value>
            <remarks>
            This property is used to define the left side label of the task.
            The left side label typically displays information such as the task's name or start date.
            By default, this property is set to null.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttLabelSettings`1.TaskLabel">
            <summary>
            Defines the label which is displayed on the taskbar of the Gantt chart component.
            </summary>
            <value>
            The taskbar label to be displayed. 
            </value>
            <remarks>
            This property is used to set the label that appears on the taskbar.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttLabelSettings`1.RightLabelTemplate">
            <summary>
            Gets or sets template for the right label.
            </summary>
            <value>
            A <see cref="T:Microsoft.AspNetCore.Components.RenderFragment`1"/> that represents the template for the right label.
            </value>
            <remarks>
            This property allows the user to specify a custom template for the right label of the control.
            By default, the right label is null. The template should be specified as a <see cref="T:Microsoft.AspNetCore.Components.RenderFragment`1"/>.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttLabelSettings`1.LeftLabelTemplate">
            <summary>
            Gets or sets template for the left label.
            </summary>
            <value>
            A <see cref="T:Microsoft.AspNetCore.Components.RenderFragment`1"/> that represents the template for the left label.
            </value>
            <remarks>
            This property allows the user to specify a custom template for the left label of the control.
            By default, the left label is null. 
            The template should be specified as a <see cref="T:Microsoft.AspNetCore.Components.RenderFragment`1"/>.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttLabelSettings`1.TaskLabelTemplate">
            <summary>
            Gets or sets template for the task label.
            </summary>
            <value>
            A <see cref="T:Microsoft.AspNetCore.Components.RenderFragment`1"/> that represents the template for the task label.
            </value>
            <remarks>
            This property allows the user to specify a custom template for the task label of the control.
            By default, the task label is null.
            The template should be specified as a <see cref="T:Microsoft.AspNetCore.Components.RenderFragment`1"/>.
            </remarks>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttResource`2">
            <summary>  
            Represents a class that manages the mapping of resource data source fields to the Gantt chart. 
            <typeparam name="TValue">Specifies the type of the task collection data source in the Gantt chart.</typeparam> 
            <typeparam name=" TResources"> Specifies the type of the resource data source. </typeparam>  
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttResource`2.Id">
            <summary> 
             Gets or sets the ID of the resource from the resource collection. 
            </summary> 
            <value> 
            A string representing the identifier for the resource. 
            </value> 
            <remarks> 
            This property allows the user to specify the identifier of resource from resource collection. 
            The default value is null, and it should be a non-null value in order to identify the resource. 
            </remarks> 
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttResource`2.Name">
            <summary> 
            Gets or sets the name of the resource for the task. 
            </summary> 
            <value> 
            The name of the resource. 
            The default value is an empty string. 
            </value> 
            <remarks> 
            This property is used to map the name of the particular resource for the task. 
            The value of the Name property must be a string that matches the name of the resource. 
            </remarks> 
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttResource`2.Group">
            <summary> 
            Gets or sets the name of the field in the data source that will be used to group resources in the Gantt Chart. When this field is mapped, resources will be displayed with a group column in the Task Information view. 
            </summary> 
            <value> 
            A string value representing the name of the field in the data source that will be used to group resources. 
            </value>  
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttResource`2.DataSource">
            <summary> 
            Gets or sets the data source of the resource collection. 
            </summary> 
            <remarks> 
            To consume data from a remote service or custom adaptor, use the <see cref="T:Syncfusion.Blazor.Data.SfDataManager"/> component. For more information, refer to the documentation <seealso href="https://blazor.syncfusion.com/documentation/gantt-chart/resource-view#remote-data">here</seealso>. 
            </remarks> 
            <value> 
            The data source value can be of any type that implements <see cref="T:System.Collections.IEnumerable" />. 
            </value> 
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttResource`2.MaxUnits">
            <summary> 
            Gets or sets the name of the MaxUnits field in the resource collection of the Gantt Chart. 
            </summary> 
            <value> 
            The name of the property in the data object of the resources collection, provided through the <see cref="P:Syncfusion.Blazor.Gantt.GanttResource`2.DataSource" /> property. 
            </value> 
            <remarks> 
            When you want to specify how much time a work resource has available for work on all tasks in a project. 
            The Max Units field contains the maximum percentage or number of units representing the maximum capacity for which a resource is available to accomplish any tasks during the current time period. The default for the Max Units field is 100 percent. 
            </remarks> 
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttResource`2.DataManager">
            <summary>  
            Gets or sets an instance of the <see cref="P:Syncfusion.Blazor.Gantt.GanttResource`2.DataManager"/> class, providing functionality for data operations in applications.  
            DataManager serves as an abstraction layer for working with remote data sources.  
            </summary>  
            <value>  
            An instance of the <see cref="P:Syncfusion.Blazor.Gantt.GanttResource`2.DataManager"/> class. 
            </value>  
            <remarks>  
            DataManager facilitates interactions with remote data sources, allowing seamless integration and manipulation of data in applications.  
            </remarks>  
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttResource`2.ChildContent">
            <summary> 
            Gets or sets the child content that will be rendered inside the gantt chart component. 
            </summary> 
            <value> 
            A <see cref="T:Microsoft.AspNetCore.Components.RenderFragment"/> representing the child content for the DataManager. 
            </value> 
            <remarks> 
            Use this property to provide content that will be rendered inside the component. 
            </remarks> 
            <exclude/> 
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttResourceFields`1">
            <summary>
            Defines mapping properties for resource values.
            </summary>
            <typeparam name="TResources">Specifies the type of GanttResourceFields.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttResourceFields`1.Id">
            <summary>
            Gets or sets id of resource from resource collection.
            </summary>
            <value>
            A string that represents the identifier for the task.
            </value>
            <remarks>
            This property allows the user to specify the identifier of resource from resource collection.
            The default value is null, and it should be a non-null value in order to identify the resource.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttResourceFields`1.Unit">
            <summary>
            Gets or sets the unit of work done by the resource for the task.
            </summary>
            <value>
            A string that represents the unit of work done by the resource for the task.
            </value>
            <remarks>
            When the resource unit is defined in resource collection, the amount of work done by that particular resource will be the same for all the tasks.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttResourceFields`1.Resources">
            <summary>
            Gets or sets the resources to be rendered on the gantt chart component.
            `Resources` value was defined as array of JavaScript objects or instances of `Resources`.
            </summary>
            <value>
            An enumerable collection of resources defined as an array of JavaScript objects or instances of <typeparamref name="TResources"/>.
            </value>
            <remarks>
            The resources property is used to specify a set of resources to be rendered on the Gantt chart.
            This can include anything from people, equipment, or facilities to anything else required for the project.
            The `Resources` property can be defined as an array of JavaScript objects or instances of the generic type `TResources`.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttResourceFields`1.Name">
            <summary>
            Gets or sets the name of the resource for the task.
            </summary>
            <value>
            The name of the resource.
            The default value is an empty string.
            </value>
            <remarks>
            This property is used to map the name of the particular resource for the task.
            The value of the Name property must be a string that matches the name of the resource.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttResourceFields`1.Group">
            <summary>
            Gets or sets the name of the field in the data source that will be used to group resources in the Gantt Chart. When this field is mapped, resources will be displayed with a group column in the Task Information view.
            </summary>
            <value>
            A string value representing the name of the field in the data source that will be used to group resources.
            </value> 
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttSearchSettings">
            <summary>
            Configures the search settings for Gantt.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttSearchSettings.ChildContent">
            <summary>
            Gets or sets the child content that will be rendered inside the gantt chart component.
            </summary>
            <value>
            A <see cref="T:Microsoft.AspNetCore.Components.RenderFragment"/> representing the child content that will be rendered inside the component.
            </value>
            <remarks>
            Use this property to provide content that will be rendered inside the component.
            </remarks>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttSearchSettings.Fields">
            <summary>
            Specifies the columns to be searched at initial rendering of the Gantt chart component.
            You can also get the columns that were currently filtered.
            </summary>
            <value>
            An array of strings representing the fields to be searched when the Gantt is initially rendered.
            </value>
            <remarks>
            Use this property to set the initial columns to be searched in the Gantt. By default, all columns are searched.
            The <c>Fields</c> property can also be used to retrieve the currently filtered columns.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttSearchSettings.HierarchyMode">
            <summary>
            Defines the search types of hierarchical data. The available options are,
            `Parent`: Shows the searched record with parent record.
            `Child`: Shows the searched record with child record.
            `Both` : shows the searched record with both parent and child record.
            `None` : Shows only searched record.
            </summary>
            <value>
            A value from the <see cref="T:Syncfusion.Blazor.Gantt.FilterHierarchyMode"/> enum that specifies how the search should be performed on hierarchical data.
            </value>
            <remarks>
            Use this property to set the search mode for hierarchical data.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttSearchSettings.IgnoreAccent">
            <summary>
            Gets or sets a value indicating whether diacritic characters or accents are ignored while filtering.
            </summary>
            <value>
            The default value is <c>false</c>. If set to <c>true</c>, diacritic characters or accents will be ignored while filtering.
            </value>
            <remarks>
            If <c>IgnoreAccent</c> is set to <c>true</c>, filtering will ignore diacritic characters or accents, which means that the filter will consider two strings that differ only by diacritic characters or accents to be the same.
            This property is supported by remote data alone.
            When the <c>IgnoreAccent</c> property is set to <c>true</c>, the <c>IgnoreAccent</c> key will be sent to the server and the operation should be handled at the user level.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttSearchSettings.IgnoreCase">
            <summary>
            Gets or sets a value indicating whether the comparison should ignore the case of characters during filtering.
            </summary>
            <value>
            <c>true</c> if the comparison should be case-insensitive; otherwise, <c>false</c>.
            The default value is <c>true</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttSearchSettings.Key">
            <summary>
            A key word for searching the Gantt chart content.
            </summary>
            <value>
            A string value representing the keyword used for searching. The default value is an empty string.
            </value>
            <remarks>
            This property specifies a keyword that is used to filter the Gantt content.
            The search operation is case-insensitive, so it can match any part of the content.
            To match exact text, use the Equals operator along with this property.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttSearchSettings.Operator">
            <summary>
            Defines the operator to search records.
            </summary>
            <value>
            The default value for this property is 'Operator.Contains'.
            </value>
            <remarks>
            This property determines the type of search operation to be performed while filtering records.
            The 'Contains' operator matches records that have the search value anywhere in the specified field.
            Other supported operators include 'Equals', 'StartsWith' and 'EndsWith'.
            </remarks>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttSegmentFields`2">
            <summary>
            Represents a class for Gantt segment fields.
            </summary>
            <typeparam name="TValue">The type of Tasks in the Gantt chart.</typeparam>
            <typeparam name="TSegments">The type of segments in the Gantt chart.</typeparam> 
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttSegmentFields`2.parent">
            <summary>
            Gets or sets the parent Gantt chart.
            </summary>
            <value>The parent Gantt chart that contains these segments.</value>
            
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttSegmentFields`2.PrimaryKey">
            <summary>
            Gets or sets the name of the primary key property for the segments collection in the Gantt chart.
            </summary>
            <value>The name of the primary key property for the segments collection in the Gantt chart.</value>
            <remarks>
            This property allows the user to specify the identifier of a segment from the segment collection.
            The default value is null, and it should be a non-null value to identify the segment.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttSegmentFields`2.ForeignKey">
            <summary>
            Gets or sets the name of the foreign key property for segments.
            </summary>
            <value> The name of the foreign key property that specifies the primary id of the task collection in the <see cref="T:Syncfusion.Blazor.Gantt.GanttSegmentFields`2" /> of the Gantt chart, referencing <see cref="P:Syncfusion.Blazor.Gantt.GanttTaskFields.Id"/> </value>
            <remarks>
            This property allows the user to establish a relationship between the task collection and the segment collection by specifying the foreign key property.
            </remarks> 
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttSegmentFields`2.StartDate">
            <summary>
            Gets or sets the name of the start date property for segments.
            </summary>
            <remarks>
            This property is used to map the start date of the segment from the segment collection.
            It's a mandatory field for <see cref="T:Syncfusion.Blazor.Gantt.GanttSegmentFields`2" />.
            </remarks>
            <value>
            The value of this property can be set to a string value indicating the start date of the segment.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttSegmentFields`2.EndDate">
            <summary>
            Gets or sets the name of the end date property for segments.
            </summary>
            <remarks>
            This property is used to map the end date of the segment from the segment collection.
            </remarks>
            <value>
            The value of this property can be set to a string value indicating the end date of the segment.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttSegmentFields`2.Duration">
            <summary>
            Gets or sets the name of the  duration property for segments.
            </summary>
            <remarks>
            This property is used to map the duration of the segment from the segment collection.
            </remarks>
            <value>
            The value of this property can be set to a string value indicating the duration’s field name in data object of the segment datasource collection.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttSegmentFields`2.DataSource">
            <summary>
            Gets or sets the data collection for the Gantt chart segments.
            </summary>
            <value>The collection of segments of type <see cref="T:System.Collections.IEnumerable" /> used for rendering multiple segments for a task.</value>
            <remarks>
            This collection is used to map segments into the tasks collection.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttSegmentFields`2.SegmentChanging">
            <summary>
            Gets or sets an event callback that is raised when the segment in a task is modified.
            </summary>
            <remarks>
            The event handler receives a <see cref="T:Syncfusion.Blazor.Gantt.SegmentEventArgs`1" /> object, which provides details about the taskbar and connector details.
            </remarks>
            <value>
            An event callback function.
            </value> 
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttSegmentFields`2.DataManager">
            <summary>
            Gets or sets an instance of the <see cref="P:Syncfusion.Blazor.Gantt.GanttSegmentFields`2.DataManager"/> class, which provides functionality for performing data operations in applications.
            DataManager serves as an abstraction layer for working with remote data sources.
            </summary>
            <value>
            An instance of <see cref="P:Syncfusion.Blazor.Gantt.GanttSegmentFields`2.DataManager" />
            </value>
            <remarks>
            Through DataManager we can bind remote data for segments.
            </remarks> 
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttSegmentFields`2.ChildContent">
            <summary>
            Gets or sets the child content that will be rendered inside the gantt chart component.
            </summary>
            <value>
            A <see cref="T:Microsoft.AspNetCore.Components.RenderFragment"/> representing the child content for the DataManager.
            </value>
            <remarks>
            Use this property to provide content that will be rendered inside the component.
            </remarks>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttSelectionSettings">
            <summary>
            Configures Gantt Selection settings collection.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttSelectionSettings.BaseParent">
            <summary>
            Defines the parent component.
            </summary>
            <exclude />
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttSelectionSettings.ChildContent">
            <summary>
            Defines the child content.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttSelectionSettings.CellSelectionMode">
            <summary>
            Gets or sets the selection mode of the cell.
            </summary>
            <value>
            The selection mode of the cell. The default value is <see cref="F:Syncfusion.Blazor.Grids.CellSelectionMode.Flow"/>.
            </value>
            <remarks>
            Use this property to set the selection mode of the cell.
            The CellSelectionMode enumeration is used to set the possible values of this property.
            The default value of this property is CellSelectionMode.Flow.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttSelectionSettings.Mode">
            <summary>
            Gets or sets the selection mode for the Gantt chart control.
            </summary>
            <value>
            A <see cref="T:Syncfusion.Blazor.Grids.SelectionMode"/> value that specifies the selection mode. The default value is <see cref="F:Syncfusion.Blazor.Grids.SelectionMode.Row"/>.
            </value>
            <remarks>
            This property determines how the user can select elements in the Gantt control.
            When the <see cref="T:Syncfusion.Blazor.Grids.SelectionMode"/> is set to <see cref="F:Syncfusion.Blazor.Grids.SelectionMode.Row"/>, the control allows the user to select entire rows of data.
            When the <see cref="T:Syncfusion.Blazor.Grids.SelectionMode"/> is set to <see cref="F:Syncfusion.Blazor.Grids.SelectionMode.Cell"/>, the control allows the user to select individual cells.
            When the <see cref="T:Syncfusion.Blazor.Grids.SelectionMode"/> is set to <see cref="F:Syncfusion.Blazor.Grids.SelectionMode.Both"/>, the control allows the user to select both rows and cells.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttSelectionSettings.PersistSelection">
            <summary>
            Gets or sets a value indicating whether the Gantt selection should be persisted on all operations.
            If 'persistSelection' set to true, then the Gantt selection is persisted on all operations.
            </summary>
            <value>
            <c>true</c> if the Gantt selection should be persisted on all operations; otherwise, <c>false</c>.
            The default value is <c>false</c>.
            </value>
            <remarks>
            This property determines whether the Gantt control should keep the user's selection even if the user performs other operations on the control, such as sorting or filtering the data.
            When <see cref="P:Syncfusion.Blazor.Gantt.GanttSelectionSettings.PersistSelection"/> is set to <c>true</c>, the selection will be maintained even when the control is updated or refreshed.
            When <see cref="P:Syncfusion.Blazor.Gantt.GanttSelectionSettings.PersistSelection"/> is set to <c>false</c>, the selection will be lost when the control is updated or refreshed.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttSelectionSettings.EnableToggle">
            <summary>
            Gets or sets a value indicating whether the user can perform a toggle action on the selection row.
            If 'enableToggle' set to true, then the user can able to perform toggle for the selected row.
            </summary>
            <value>
            If <c>true</c>, the user can perform a toggle action on the selected row.
            If <c>false</c>, the user cannot perform a toggle action on the selected row.
            The default value is <c>false</c>.
            </value>
            <remarks>
            When <c>true</c>, the user can toggle the selected row by clicking on it.
            The toggle action will change the selected row's state, typically visually highlighting or changing the row's appearance in some way.
            When <c>false</c>, the user cannot perform the toggle action and the selected row remains in its default state.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttSelectionSettings.Type">
            <summary>
            Gets or sets the selection type for the component. They are
             `Single`: Allows selection of only a row or a cell.
             `Multiple`: Allows selection of multiple rows or cells.
            </summary>
            <value>
            <see cref="F:Syncfusion.Blazor.Grids.SelectionType.Single"/>Allows selection of only one row or one cell at a time. This is the default selection type.
            </value>
            <remarks>
            When the selection type is set to <see cref="F:Syncfusion.Blazor.Grids.SelectionType.Single"/>, the user can select only one row or one cell at a time. When the selection type is set to <see cref="F:Syncfusion.Blazor.Grids.SelectionType.Multiple"/>, the user can select multiple rows or cells at a time. The default selection type is <see cref="F:Syncfusion.Blazor.Grids.SelectionType.Single"/>.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttSelectionSettings.AllowDragSelection">
            <summary>
            Gets or sets whether to enable selection of multiple rows and cells by dragging mouse.
            </summary>
            <value>
            <c>true</c> if the row and cell selection enabled when dragging mouse. Otherwise, false. The default value is false.
            </value>
            <remarks>
            To perform drag selection in grid part of Blazor Gantt, set <see cref="P:Syncfusion.Blazor.Gantt.GanttSelectionSettings.Type"/> as <c>Multiple</c>.
            </remarks>
            <example>
            In the below code example, enabled AllowDragSelection property 
            <code><![CDATA[
            <SfGantt @ref="Gantt">
                <GanttSelectionSettings AllowDragSelection = "true" Type="Syncfusion.Blazor.Grids.SelectionType.Multiple"></GanttSelectionSettings>
            </SfGantt>
            ]]></code>
            </example>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttSortDescriptor">
            <summary>
            Configures sort descriptor.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttSortDescriptor.Direction">
            <summary>
            Defines the direction of the sort column.
            </summary>
            <value>
            The default value of this property is SortDirection.Ascending.
            </value>
            <remarks>
            This property specifies the direction in which the sort column will be sorted. 
            By default, this property is set to SortDirection.Ascending.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttSortDescriptor.Field">
            <summary>
            Defines the field name of the sort column.
            </summary>
            <value>
            The default value of this property is an empty string.
            </value>
            <remarks>
            This property specifies the name of the field that will be used for sorting. 
            By default, this property is set to an empty string.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.GanttSortDescriptor.Dispose(System.Boolean)">
            <summary>
            Dispose unmanaged resources in the Syncfusion Blazor component.
            </summary>
            <param name="disposing">Boolean value to dispose the object.</param>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttSortDescriptors">
            <summary>
            Configures sort descriptors.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttSortDescriptors.ChildContent">
            <summary>
            Defines the child content.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttSortDescriptors.Columns">
            <summary>
            Gets the collection of sorted columns in the Gantt chart.
            </summary>
            <value>
            This property specifies the collection of columns that are currently sorted in the Gantt chart.
            The default value of this property is an empty list of <see cref="T:Syncfusion.Blazor.Gantt.GanttSortDescriptor"/>.
            </value>
            <remarks>
            Use this property to retrieve a collection of columns that are currently sorted in the Gantt chart.
            </remarks>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttSortSettings">
            <summary>
            Configures the sort settings of the Gantt.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttSortSettings.ChildContent">
            <summary>
            Defines the child content.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttSortSettings.AllowUnsort">
            <summary>
            Gets or sets a value indicating whether sort the gantt by clicking on the sorted column header.
            </summary>
            <value>
            A boolean value that is set to true by default, which means the user can sort the Gantt in any order by clicking on the sorted column header.
            </value>
            <remarks>
            Set this property to false to prevent the user from getting the Gantt in an unsorted state by clicking on the sorted column header.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttSortSettings.Columns">
            <summary>
            Gets or sets the columns to sort at the initial rendering of the Gantt control and allows the user to get the currently sorted columns.
            </summary>
            <value>
            A list of <see cref="T:Syncfusion.Blazor.Gantt.GanttSortDescriptor"/> objects that defines the columns to sort at the initial rendering of the Gantt control.
            </value>
            <remarks>
            To specify columns for initial sorting, create one or more GanttSortDescriptor objects and add them to the Columns list.
            The sort order of the columns is determined by the order in which they are added to the list.
            To get the currently sorted columns, retrieve the Columns list and examine the properties of the GanttSortDescriptor objects it contains.
            </remarks>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttSplitterSettings">
            <summary>
            Configures gantt splitter settings collection.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttSplitterSettings.ChildContent">
            <summary>
            Defines the child content.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttSplitterSettings.ColumnIndex">
            <summary>
            Defines the index of the column where the splitter bar is to be positioned in the grid.
            If `ColumnIndex` set as `2` then splitter bar placed at third column of grid.
            </summary>
            <value>
            An integer value representing the column index. The default value is -1.
            </value>
            <remarks>
            This property is used to specify the location of the splitter bar in relation to the columns of the grid.
            If the index value is not added, the default value should be 250px.
            Otherwise, the value should be set to the index of the column where the splitter bar should be positioned.
            For example, if the value is set to 2, the splitter bar will be positioned at the third column of the grid.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttSplitterSettings.Minimum">
            <summary>
            Gets or sets the minimum width of the grid part where the splitter is located.
            </summary>
            <value>
            A string representing the minimum width of the grid part. The default value is null.
            </value>
            <remarks>
            This property is used to set the minimum width of the grid part where the splitter is located.
            When the user tries to move the splitter to a position that would result in a width smaller than the minimum value, the splitter will stop moving and stay at its current position.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttSplitterSettings.Position">
            <summary>
            Gets or sets the initial position of the splitter in pixels.
            </summary>
            <value>
            A string representing the initial position of the splitter in pixels.
            </value>
            <remarks>
            This property is used to set the initial position of the splitter when the component is first loaded.
            The position value should be specified as a string, representing the number of pixels from the left of the grid, depending on the orientation of the splitter. 
            If the value is null, the position of the splitter will be set to the 250px from the left of the grid.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttSplitterSettings.SeparatorSize">
            <summary>
            Defines the size of the splitter bar for separating content in a control.
            </summary>
            <value>
            The size of the splitter bar in pixels. Default value is 4.
            </value>
            <remarks>
            This property specifies the size of the splitter bar in pixels.
            The splitter bar is used to separate Gantt chart content,into grid view and chart view.
            The size of the splitter bar can be adjusted by the user in some scenarios, but this property sets the default size for the splitter bar.
            The value of this property must be greater than or equal to zero.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttSplitterSettings.View">
            <summary>
            Defines the predefined view of the Gantt chart.
             `Default` - Shows Grid side and Chart side of Gantt chart.
             `Grid` - Shows grid side alone in Gantt.
             `Chart` - Shows chart side alone in Gantt.
            </summary>
            <value>
            A string that specifies the predefined view of the Gantt chart.
            </value>
            <remarks>
            This property specifies the predefined view of the Gantt chart.
            The Gantt chart displays tasks and their dependencies over a timeline.
            This property can be used to control which side(s) of the Gantt chart are visible by default.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttSplitterSettings.Collapsible">
            <summary>
            This property is used to enable/disable splitter expand collapse feature in Gantt chart.
            </summary>
            <value>boolean value to enable/disable expand/collapse feature</value> 
            <remarks>It enables expand collapse icon near splitter resizer.</remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskbarSettings.EnableMultiTaskbar">
            <summary>
            Gets or sets a value indicating whether multiple taskbars can be displayed in the parent chart row.
            </summary>
            <value>
            <c>true</c> if multiple taskbars are enabled; otherwise, <c>false</c>. The default value is <c>false</c>.
            </value>
            <remarks>
            Multiple taskbars can be displayed only in the ResourceView <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.ViewType"/> of the Gantt Chart.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskbarSettings.AllowTaskbarDragAndDrop">
            <summary>
            Gets or sets a value indicating whether users can drag and drop taskbars between resources in the Resource View of the Gantt Chart.
            </summary>
            <value>
            <c>true</c> if taskbar drag and drop is enabled; otherwise, <c>false</c>. The default value is <c>false</c>.
            </value>
            <remarks>
            Users can reassign tasks to resources and change the timeline of the tasks while performing drag and drop operations.
            </remarks> 
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.GanttTaskbarSettings.Dispose(System.Boolean)">
            <summary>
            Dispose unmanaged resources in the Syncfusion Blazor component.
            </summary>
            <param name="disposing">Boolean value to dispose the object.</param>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttTaskFields">
            <summary>
            Configures Gantt taskfields column.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskFields.ChildContent">
            <summary>
            Defines the child content.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskFields.BaselineEndDate">
            <summary>
            Specifies the name of the data source field that contains the baseline end date of the task.
            </summary>
            <value>
            A string that specifies the name of the data source field that contains the baseline end date of the task.
            </value>
            <remarks>
            This property is used to map the baseline end date of a task from a data source.
            The baseline end date is a reference date that is used to compare the actual end date of the task to the planned end date.
            By default, the property is empty, indicating that no mapping is performed. If a data source field is specified, it must contain valid date values.
            If an invalid or non-existent field name is provided, an exception may be thrown during runtime.
            This property is only applicable when the task data is loaded from a data source.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskFields.BaselineStartDate">
            <summary>
            Specifies the name of the data source field that contains the baseline start date of the task.
            </summary>
            <value>
            A string that specifies the name of the data source field that contains the baseline start date of the task.
            </value>
            <remarks>
            This property is used to map the baseline start date of a task from a data source.
            The baseline start date is a reference date that is used to compare the actual start date of the task to the planned start date. 
            By default, the property is empty, indicating that no mapping is performed.
            If a data source field is specified, it must contain valid date values.
            If an invalid or non-existent field name is provided, an exception may be thrown during runtime.
            This property is only applicable when the task data is loaded from a data source.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskFields.Child">
            <summary>
            Specifies the name of the data source field that contains the child tasks of the current task.
            </summary>
            <value>
            A string that specifies the name of the data source field that contains the child tasks of the current task.
            </value>
            <remarks>
            This property is used to map the child tasks of a task from a data source.
            Child tasks are tasks that are part of a larger parent task.
            By default, the property is empty, indicating that no mapping is performed.
            If a data source field is specified, it must contain valid task IDs that match the parent task ID of the current task.
            If an invalid or non-existent field name is provided, an exception may be thrown during runtime.
            This property is only applicable when the task data is loaded from a data source.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskFields.CssClass">
            <summary>
            Specifies the name of the data source field that contains the custom CSS class for the current task.
            </summary>
            <value>
            A string that specifies the name of the data source field that contains the custom CSS class for the current task.
            </value>
            <remarks>
            This property is used to map the custom CSS class of a task from a data source.
            By default, the property is empty, indicating that no mapping is performed.
            If a data source field is specified, it must contain valid CSS class names.
            If an invalid or non-existent field name is provided, an exception may be thrown during runtime.
            This property is only applicable when the task data is loaded from a data source.
            The custom CSS class is used to customize the appearance of the task in the UI.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskFields.Dependency">
            <summary>
            Gets or sets the name of the field that maps dependencies of tasks on initial load.
            </summary>
            <value>
            A string that represents the name of the field in the data source.
            </value>
            <remarks>
            This property is used to define dependencies between tasks in a workflow or process, where one task must be completed before another can start.
            Task relationships are categorized into four types based on the start and finish dates of the task.
            The available types are FS,SS,SF,FF.
            By setting this property to the name of the corresponding field in the data source, the system can automatically determine the order in which tasks should be executed based on their dependencies.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskFields.Duration">
            <summary>
            Specifies the name of the data source field that contains the duration information for the task.
            </summary>
            <value>
            A string that specifies the name of the data source field that contains the duration information for the task.
            </value>
            <remarks>
            This property is used to map the task duration from a data source.
            Duration is the amount of time it takes to complete a task.
            By default, the property is empty, indicating that no mapping is performed.
            If a data source field is specified, it must contain valid duration values in a format that can be parsed by the system.
            If an invalid or non-existent field name is provided, an exception may be thrown during runtime.
            This property is only applicable when the task data is loaded from a data source.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskFields.DurationUnit">
            <summary>
            Specifies the name of the data source field that contains the duration unit information for the task.
            </summary>
            <value>
            A string that specifies the name of the data source field that contains the duration unit information for the task.
            </value>
            <remarks>
            This property is used to map the task duration unit from a data source.
            Duration unit is the unit of time used to measure the task duration, such as days, hours, or minutes.
            By default, the property is empty, indicating that no mapping is performed.
            If a data source field is specified, it must contain valid duration unit values that can be recognized by the system.
            If an invalid or non-existent field name is provided, an exception may be thrown during runtime.
            This property is only applicable when the task data is loaded from a data source.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskFields.EndDate">
            <summary>
            Specifies the name of the data source field that contains the end date information for the task.
            </summary>
            <value>
            A string that specifies the name of the data source field that contains the end date information for the task.
            </value>
            <remarks>
            This property is used to map the task end date from a data source.
            End date is the date when the task is expected to be completed.
            By default, the property is empty, indicating that no mapping is performed.
            If a data source field is specified, it must contain valid date values in a format that can be recognized by the system.
            If an invalid or non-existent field name is provided, an exception may be thrown during runtime.
            This property is only applicable when the task data is loaded from a data source.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskFields.ExpandState">
            <summary>
            Specifies the name of the data source field that contains the expand status information for the parent record.
            </summary>
            <value>
            A string that specifies the name of the data source field that contains the expand status information for the parent record.
            </value>
            <remarks>
            This property is used to map the expand status of the parent record from a data source.
            The expand status indicates whether the parent record is expanded or collapsed by default when the Gantt chart is loaded.
            By default, the property is empty, indicating that no mapping is performed. If a data source field is specified, it must contain valid expand status values that can be recognized by the system.
            If an invalid or non-existent field name is provided, an exception may be thrown during runtime.
            This property is only applicable to parent records.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskFields.Id">
            <summary>
            Specifies the name of the data source field that contains the ID information for the task.
            </summary>
            <value>
            A string that specifies the name of the data source field that contains the ID information for the task.
            </value>
            <remarks>
            This property is used to map the task ID from a data source.
            The ID is a unique identifier that is assigned to the task.
            By default, the property is empty, indicating that no mapping is performed.
            If a data source field is specified, it must contain valid ID values that can be recognized by the system.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskFields.Indicators">
            <summary>
            Gets or sets the indicators of the task from the data source.
            </summary>
            <value>
            A <see cref="T:System.String"/> value representing the indicators of the task. The default value is an empty string.
            </value>
            <remarks>
            This property is used to map the indicators of the task from the data source.
            If this property is not set or is set to an empty string, the task will not have any indicators associated with it.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskFields.Manual">
            <summary>
            Gets or sets the schedule mode of the task from the data source.
            </summary>
            <value>
            A <see cref="T:System.String"/> value representing the schedule mode of the task. The default value is an empty string.
            </value>
            <remarks>
            This property is used to map the schedule mode of the task from the data source.
            The value of this property can be set to a string value indicating whether the task should be run manually or on a schedule.
            If this property is not set or is set to an empty string, the task will not have a schedule mode associated with it.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskFields.Milestone">
            <summary>
            Gets or sets the milestone of the task from the data source.
            </summary>
            <value>
            A <see cref="T:System.String"/> value representing the milestone of the task. The default value is an empty string.
            </value>
            <remarks>
            This property is used to map the milestone of the task from the data source.
            The value of this property can be set to a string value indicating the name of the milestone associated with the task.
            If this property is not set or is set to an empty string, the task will not have a milestone associated with it.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskFields.Name">
            <summary>
            Gets or sets the name of the task from the data source.
            </summary>
            <value>
            A <see cref="T:System.String"/> value representing the name of the task. The default value is an empty string.
            </value>
            <remarks>
            This property is used to map the name of the task from the data source.
            The value of this property can be set to a string value indicating the name of the task.
            If this property is not set or is set to an empty string, the task will not have a name associated with it.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskFields.Notes">
            <summary>
            Gets or sets the notes value of the task from the data source.
            </summary>
            <value>
            A <see cref="T:System.String"/> value representing the notes value of the task. The default value is an empty string.
            </value>
            <remarks>
            This property is used to map the notes value of the task from the data source.
            The value of this property can be set to a string value indicating the notes associated with the task.
            If this property is not set or is set to an empty string, the task will not have any notes associated with it.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskFields.ParentID">
            <summary>
            Gets or sets the parent ID of the task from the data source.
            </summary>
            <value>
            A <see cref="T:System.String"/> value representing the parent ID of the task. The default value is an empty string.
            </value>
            <remarks>
            This property is used to map the parent ID of the task from the data source.
            The value of this property can be set to a string value indicating the parent ID associated with the task.
            If this property is not set or is set to an empty string, the task will not have a parent ID associated with it.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskFields.Progress">
            <summary>
            Gets or sets the progress of the task from the data source.
            </summary>
            <value>
            A <see cref="T:System.String"/> value representing the progress of the task. The default value is an empty string.
            </value>
            <remarks>
            This property is used to map the progress of the task from the data source.
            The value of this property can be set to a string value indicating the progress of the task.
            If this property is not set or is set to an empty string, the task will not have any progress associated with it.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskFields.ResourceInfo">
            <summary>
            Gets or sets the assigned resources of the task from the data source.
            </summary>
            <value>
            A <see cref="T:System.String"/> value representing the assigned resources of the task. The default value is an empty string.
            </value>
            <remarks>
            This property is used to map the assigned resources of the task from the data source.
            The value of this property can be set to a string value indicating the assigned resources associated with the task.
            If this property is not set or is set to an empty string, the task will not have any assigned resources associated with it.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskFields.StartDate">
            <summary>
            Gets or sets the start date of the task from the data source.
            </summary>
            <value>
            A <see cref="T:System.String"/> value representing the start date of the task. The default value is an empty string.
            </value>
            <remarks>
            This property is used to map the start date of the task from the data source.
            The value of this property can be set to a string value indicating the start date of the task.
            If this property is not set or is set to an empty string, the task will not have a start date associated with it.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskFields.TaskType">
            <summary>
            Gets or sets the task type value of the task from the data source.
            </summary>
            <value>
            A <see cref="T:System.String"/> value representing the task type of the task. The default value is an empty string.
            </value>
            <remarks>
            This property is used to map the task type value of the task from the data source.
            The value of this property can be set to a string value indicating the task type of the task.
            If this property is not set or is set to an empty string, the task will not have a task type associated with it.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskFields.Work">
            <summary>
            Gets or sets the work of the task to map from the data source.
            </summary>
            <value>
            A string representing the work of the task. The default value is an empty string.
            </value>
            <remarks>
            This property is used to map the work of a task from the data source to a property in the code.
            The value of this property should be set to a string that represents the work of the task, typically in hours or days.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTaskFields.HasChildMapping">
            <summary>
            Gets or sets a field name of data object in data source that specifies whether the current record has child records. 
            </summary>
            <value>
            Field name in data object of data source which denotes whether current record holds any child records. The default value is null.
            </value>
            <remarks> 
            It is applicable only when <b>LoadChildOnDemand</b> property is enabled  to handle the record as parent item. 
            </remarks>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttTemplates`1">
            <summary>
            Configures Gantt Chart templates.
            </summary>
            <typeparam name="TValue">Specifies the type of GanttTemplates.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTemplates`1.ChildContent">
            <summary>
            Gets or sets the child content to be rendered inside the component.
            </summary>
            <value>
            A <see cref="T:Microsoft.AspNetCore.Components.RenderFragment"/> that represents the child content to be rendered inside the component.
            </value>
            <remarks>
            This property allows you to define and render child content inside a component.
            Pass any HTML, Razor or component-based content to this property.
            To render the child content, you can use the <c>@ChildContent</c> razor directive in the component's markup.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTemplates`1.ParentTaskbarTemplate">
            <summary>
            Gets or sets the template used to customize the parent taskbar element.
            </summary>
            <value>
            A <see cref="T:Microsoft.AspNetCore.Components.RenderFragment`1"/> that represents the template used to customize the parent taskbar element. The default value is <c>null</c>.
            </value>
            <remarks>
            This property allows you to customize the parent taskbar element by providing a template.
            The template must be of type <see cref="T:Microsoft.AspNetCore.Components.RenderFragment`1"/> and should accept an object parameter to be used in rendering the parent taskbar element.
            If this property is set to <c>null</c>, the default template for the parent taskbar element is used.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTemplates`1.TaskbarTemplate">
            <summary>
            Gets or sets the template used to customize the taskbar element.
            </summary>
            <value>
            A <see cref="T:Microsoft.AspNetCore.Components.RenderFragment`1"/> that represents the template used to customize the taskbar element. The default value is <c>null</c>.
            </value>
            <remarks>
            This property allows you to customize the appearance of a taskbar element by providing a template.
            The template must be of type <see cref="T:Microsoft.AspNetCore.Components.RenderFragment`1"/> and should accept an object parameter to be used in rendering the taskbar element.
            If this property is set to <c>null</c>, the default template for the taskbar element is used.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTemplates`1.MilestoneTemplate">
            <summary>
            Gets or sets the template used to customize the milestone element.
            </summary>
            <value>
            A <see cref="T:Microsoft.AspNetCore.Components.RenderFragment`1"/> that represents the template used to customize the milestone element. The default value is <c>null</c>.
            </value>
            <remarks>
            This property allows you to customize the appearance of a milestone element by providing a template.
            The template must be of type <see cref="T:Microsoft.AspNetCore.Components.RenderFragment`1"/> and should accept an object parameter to be used in rendering the milestone element.
            If this property is set to <c>null</c>, the default template for the milestone element is used.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTemplates`1.RowTemplate">
            <summary>
            Gets or sets the template used to customize the row element.
            </summary>
            <value>
            A <see cref="T:Microsoft.AspNetCore.Components.RenderFragment`1"/> that represents the template used to customize the row element. The default value is <c>null</c>.
            </value>
            <remarks>
            This property allows you to customize the appearance of a row element by providing a template.
            The template must be of type <see cref="T:Microsoft.AspNetCore.Components.RenderFragment`1"/> and should accept a parameter of the same type as the data item being rendered in the row.
            If this property is set to <c>null</c>, the default template for the row element is used.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTemplates`1.ManualTaskbarTemplate">
            <summary>
            Gets or sets the template used to customize the manual taskbar element.
            </summary>
            <value>
            A <see cref="T:Microsoft.AspNetCore.Components.RenderFragment`1"/> that represents the template used to customize the manual taskbar element. The default value is <c>null</c>.
            </value>
            <remarks>
            This property allows you to customize the appearance of a manual taskbar element by providing a template.
            The template must be of type <see cref="T:Microsoft.AspNetCore.Components.RenderFragment`1"/> and should accept an object parameter to be used in rendering the manual taskbar element.
            If this property is set to <c>null</c>, the default template for the manual taskbar element is used.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTemplates`1.BaselineTemplate">
            <summary>
            Gets or sets the template used to customize the baseline element.
            </summary>
            <value>
            A <see cref="T:Microsoft.AspNetCore.Components.RenderFragment`1"/> that represents the template used to customize the baseline element. The default value is <c>null</c>.
            </value>
            <remarks>
            This property allows you to customize the appearance of the baseline element by providing a template.
            The template must be of type <see cref="T:Microsoft.AspNetCore.Components.RenderFragment`1"/> and should accept an object parameter to be used in rendering the baseline element.
            If this property is set to <c>null</c>, the default template for the baseline element is used.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTemplates`1.BaselineMilestoneTemplate">
            <summary>
            Gets or sets the template used to customize the baseline milestone element.
            </summary>
            <value>
            A <see cref="T:Microsoft.AspNetCore.Components.RenderFragment`1"/> that represents the template used to customize the baseline milestone element. The default value is <c>null</c>.
            </value>
            <remarks>
            This property allows you to customize the appearance of the baseline milestone element by providing a template.
            The template must be of type <see cref="T:Microsoft.AspNetCore.Components.RenderFragment`1"/> and should accept an object parameter to be used in rendering the baseline milestone element.
            If this property is set to <c>null</c>, the default template for the baseline milestone element is used.
            </remarks>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttTimelineSettings">
            <summary>
            Configures gantt timeline settings collection.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTimelineSettings.ChildContent">
            <summary>
            Defines the child content.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTimelineSettings.ShowTooltip">
            <summary> 
            Gets or sets a value indicating whether to show tooltip when hover the timeline cells in Gantt chart header.  
            </summary> 
            <value> 
            <c>true</c>, to show tooltips for the timeline cells in header; otherwise, <c>false</c>. The default value is <c>true</c>. 
            </value>
            <remarks>
            Set this parameter to true to show a tooltip when the user hovers over the timeline cells in the gantt chart component.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTimelineSettings.TimelineUnitSize">
            <summary>
            Gets or sets the width of timeline cell.
            </summary>
            <value>
            The width of the timeline cell or unit.
            </value>
            <remarks>
            This parameter represents the width, in pixels, of a single cell on a timeline. This value is used to calculate the width of the cell on the timeline.
            The default value is <c>33</c>.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTimelineSettings.TimelineViewMode">
            <summary>
            Gets or sets the timeline mode of Gantt chart header for the timeline view.
            </summary>
            <value>
            The mode for the timeline view. The default value is <c>TimelineViewMode.None</c>.
            </value>
            <remarks>
            The timeline view mode determines how the timeline is displayed to the user. Possible values are <c>TimelineViewMode.None</c>,
            <c>TimelineViewMode.Day</c>, <c>TimelineViewMode.Week</c>, <c>TimelineViewMode.Month</c>, and <c>TimelineViewMode.Year</c>.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTimelineSettings.UpdateTimescaleView">
            <summary>
            Gets or sets a value indicating whether the timescale view should be auto updated on editing action.
            </summary>
            <value>
            <c>true</c> if the timescale view should be updated; otherwise, <c>false</c>. The default value is <c>true</c>.
            </value>
            <remarks>
            When set to <c>true</c>, the timescale view will be updated. When set to <c>false</c>, the timescale view will not be updated.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTimelineSettings.WeekStartDay">
            <summary>
            Gets or sets the day of the week that the timeline view starts on.
            </summary>
            <value>
            The day of the week that the timeline view starts on. The default value is <c>0</c>, which represents Sunday.
            </value>
            <remarks>
            This property determines which day of the week the timeline view starts on. The value should be an integer between <c>0</c> and <c>6</c>,
            where <c>0</c> represents Sunday, <c>1</c> represents Monday, and so on. 
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTimelineSettings.WeekendBackground">
            <summary>
            Gets or sets the background color of weekend cell in week - day timeline mode.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the color of the background for the weekend cell in the week - day timeline mode.
            </value>
            <remarks>
            This property can be set to any valid CSS color value, such as a color name (e.g. "red"), a hex value (e.g. "#FF0000"), or an RGB value (e.g. "rgb(255, 0, 0)").
            If this property is set to <see langword="null"/>, the default background color for the weekend days will be used.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTimelineSettings.BottomTier">
            <summary>
            Gets or sets the settings for the bottom tier timeline of the gantt chart component.
            </summary>
            <value>
            A <see cref="T:Syncfusion.Blazor.Gantt.GanttTimelineTierSettings"/> object representing the settings for the bottom timeline tier of the gantt chart component.
            </value>
            <remarks>
            This property allows to customize the appearance and behavior of the bottom timeline tier of the gantt chart component.
            If this property is not set, the default settings for the bottom timeline tier will be used.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTimelineSettings.TopTier">
            <summary>
            Gets or sets the settings for the top tier of the gantt chart timeline.
            </summary>
            <value>
            A <see cref="T:Syncfusion.Blazor.Gantt.GanttTimelineTierSettings"/> object representing the settings for the top timeline tier of the gantt chart component.
            </value>
            <remarks>
            This property specifies the settings for the top timeline tier.
            You can customize the appearance and behavior of the timeline tier by setting the properties of the <see cref="T:Syncfusion.Blazor.Gantt.GanttTimelineTierSettings"/> object.
            </remarks>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttTimelineTierSettings">
            <summary>
            Configures gantt Timeline tier collection.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTimelineTierSettings.ChildContent">
            <summary>
            Defines the child content.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTimelineTierSettings.Count">
            <summary>
            Gets or sets the number of timeline units combined for a single cell.
            </summary>
            <value>
            An <see cref="T:System.Int32"/> that represents the number of timeline units combined for a single cell. The default value is <c>1</c>.
            </value>
            <remarks>
            This property allows you to control how many timeline units are combined into a single cell in the timeline view.
            For example, if Count is set to 2 and the timeline view displays hours, each cell will represent a two-hour period.
            The default value is 1, which means each cell represents a single timeline unit.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTimelineTierSettings.Format">
            <summary>
            Gets or sets the timeline cell format.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the timeline cell format. The default value is an empty string.
            </value>
            <remarks>
            This property allows you to specify the format of the text displayed in the timeline cells.
            The format is a string that can include a combination of static text and format placeholders.
            For example, if the timeline displays hours, the format string "h:mm tt" would display the time in a 12-hour clock format with AM or PM. 
            If this property is set to an empty string, the default format for the timeline unit is used.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTimelineTierSettings.Formatter">
            <summary>
            Defines a method to get custom formatted values of timeline cells.
            </summary>
            <value>
            This property gets or sets the custom formatter used to get the formatted values of timeline cells. Default value is null.
            </value>
            <remarks>
            The custom formatter method should accept a single parameter of type dynamic and return a string.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTimelineTierSettings.Unit">
            <summary>
            Defines the timeline mode.
            </summary>
            <value>
            This property gets or sets the timeline mode. Default value is TimelineViewMode.Day.
            </value>
            <remarks>
            The TimelineViewMode enum determines the type of time unit per cell.
            The available options are Day, Week, Month, Year.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTimelineTierSettings.FormatterTemplate">
            <summary>
            Defines a template for formatting the timeline cells.
            </summary>
            <value>
            This property gets or sets the template for formatting the timeline cells. Default value is null.
            </value>
            <remarks>
            The RenderFragment type allows you to define a template that can be used to format the timeline cells. The template should accept a single parameter of type GanttTimelineFormatter and return a RenderFragment.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.GanttTimelineTierSettings.OnInitializedAsync">
            <summary>
            Receive its initial parameters from its parent in the render tree.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.GanttTimelineTierSettings.OnParametersSetAsync">
            <summary>
            Incoming values have been assigned to properties.
            </summary>
            <retruns>Task.</retruns>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttTooltipSettings`1">
            <summary>
            Configures Gantt Tooltip settings collection.
            </summary>
            <typeparam name="TValue">Specifies the type of GanttTooltipSettings.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTooltipSettings`1.Parent">
            <summary>
            Defines the parent component.
            </summary>
            <exclude />
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTooltipSettings`1.ChildContent">
            <summary>
            Defines the child content.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTooltipSettings`1.ShowTooltip">
            <summary>
            Gets or sets a value indicating whether the tooltip should be shown in Gantt Chart.
            </summary> 
            <value> 
            <b>true</b> if need to render tooltip; otherwise, <b>false</b>.  The default value is true. 
            </value> 
            <remarks> 
            This property is not applicable for the timeline header cells tooltip. To control the visibility of the timeline cell tooltip, use the <c>ShowTooltip</c> property in <see cref="T:Syncfusion.Blazor.Gantt.GanttTimelineSettings"/>. 
            </remarks> 
            <seealso cref="T:Syncfusion.Blazor.Gantt.GanttTooltipSettings`1"/> 
            <example> 
            <code> 
            <![CDATA[ 
                <SfGantt DataSource="@TaskCollection"> 
            <GanttTooltipSettings ShowTooltip="true"></GanttTooltipSettings> 
                </SfGantt> 
            ]]> 
            </code> 
            </example> 
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTooltipSettings`1.ShowTooltipOnEditing">
             <summary> 
             Gets or sets whether to enable or disable the editing tooltip in gantt chart. 
             </summary> 
            <value> 
             <b>true</b> if need to render editing tooltip; otherwise, <b>false</b>.  The default value is true. 
             </value> 
             <remarks> 
             Displays the respective content values like start date, end date, duration, progress, etc., in editing tooltip 
             </remarks> 
             <seealso cref="T:Syncfusion.Blazor.Gantt.GanttTooltipSettings`1"/> 
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTooltipSettings`1.BaselineTemplate">
            <summary>
            Gets or sets the template for the baseline tooltip element.
            </summary>
            <value>
            This property gets or sets the template for the baseline tooltip element. Default value is null.
            </value>
            <remarks>
            The RenderFragment type allows you to define a template that can be used to format the baseline tooltip element.
            The template should accept a single parameter of type TValue and return a RenderFragment.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTooltipSettings`1.ConnectorLineTemplate">
            <summary>
            Gets or sets the template for the dependency line tooltip.
            </summary>
            <value>
            This property gets or sets the template for the dependency line tooltip. Default value is null.
            </value>
            <remarks>
            The RenderFragment type allows you to define a template that can be used to format the dependency line tooltip.
            The template should accept a single parameter of type TValue and return a RenderFragment.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTooltipSettings`1.EditingTemplate">
            <summary> 
            Gets or sets a template that appears on tooltip while editing taskbar. 
            </summary>   
            <remarks> 
            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>. 
            The context is of type TValue of Gantt.  
            </remarks> 
            <example> 
            <code> 
            <![CDATA[ 
            <GanttTooltipSettings ShowTooltip="true" TValue="TaskData"> 
                  <EditingTemplate> 
                      @{ 
                           <div>Start Date: @context.StartDate</div> 
                       } 
                   </EditingTemplate> 
               </GanttTooltipSettings>
            ]]> 
            </code> 
            </example> 
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTooltipSettings`1.TaskbarTemplate">
            <summary>
            Gets or sets the template for the tooltip of taskbar elements.
            </summary>
            <value>
            This property gets or sets the template for the tooltip of taskbar elements. Default value is null.
            </value>
            <remarks>
            The RenderFragment type allows you to define a template that can be used to format the tooltip of taskbar elements.
            The template should accept a single parameter of type TValue and return a RenderFragment.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTooltipSettings`1.ManualTaskbarTemplate">
            <summary>
            Gets or sets the template for the tooltip of manual taskbar elements.
            </summary>
            <value>
            This property gets or sets the template for the tooltip of manual taskbar elements. Default value is null.
            </value>
            <remarks>
            The RenderFragment type allows you to define a template that can be used to format the tooltip of manual taskbar elements.
            The template should accept a single parameter of type TValue and return a RenderFragment.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTooltipSettings`1.IndicatorTemplate">
            <summary> 
            Gets or sets a template that defines the appearance of the tooltip that appears when the mouse is over a Gantt indicator. <see cref="T:Syncfusion.Blazor.Gantt.GanttIndicator"/> is passed as context to the template. 
            </summary> 
            <value> 
            The template content, represented as <seealso href=" https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.components.renderfragment-1"> RenderFragment </seealso>. The default value is <c>null</c>.  
            </value> 
            <example>  
            <code>  
            <![CDATA[  
            <SfGantt DataSource="@TaskCollection">  
                <GanttTooltipSettings ShowTooltip="true"> 
                    <IndicatorTemplate>  
                        @{ 
                            var indicator = context as GanttIndicator;  
                            <div>
                                <img src="~/ganttindicator.png"> @indicator.Tooltip 
                            </div> 
                        }  
                    </IndicatorTemplate>  
                </GanttTooltipSettings>  
            </SfGantt>  
            ]]>  
            </code>  
            </example> 
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttTooltipSettings`1.TimelineCellTemplate">
             <summary> 
             Gets or sets a template that defines the appearance of the tooltip that appears when the mouse is over a timeline cell. Cell value as type <see cref="T:System.String"/> is passed as context to the template. 
            </summary> 
             <value> 
             The template element, represented as <seealso href=" https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.components.renderfragment-1"> RenderFragment </seealso>. The default value is <c>null</c>. 
             </value> 
             <example>  
             <code>  
             <![CDATA[  
             <SfGantt DataSource="@TaskCollection">  
                 <GanttTimelineSettings ShowTooltip="true"></GanttTimelineSettings>
                 <GanttTooltipSettings> 
                     <TimelineCellTemplate>  
                         @{ 
                             var indicator = context as string;  
                             <div> 
                                 <img src="~/ganttheader.png"> @timelineCell  
                             </div> 
                         }  
                     </TimelineCellTemplate> 
                 </GanttTooltipSettings>  
             </SfGantt>  
             ]]>  
             </code>   
             </example> 
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttTopTierSettings">
            <summary>
            Represents the setting for the top tier in the Gantt chart timeline.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.GanttZoomTimelineSettings">
            <summary>
            Configures Gantt Chart zoom timeline settings collection.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttZoomTimelineSettings.Level">
            <summary>
            Gets or sets the level in a timeline.
            </summary>
            <value>
            This property gets or sets the level in a timeline.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.GanttZoomTimelineSettings.PerDayWidth">
            <summary>
            Gets or sets the width of each day in a zooming level.
            </summary>
            <value>
            This property gets or sets the width of each day in a zooming level.
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.IGantt">
            <summary>
            Interface for SfGantt component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.IGantt.Columns">
            <summary>
            To set columns collections in Gantt.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.IGantt.DateFormat">
            <summary>
            To set date format in Gantt.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.IGantt.DayWorkingTime">
            <summary>
            Defines customized working time of project.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.IGantt.Height">
            <summary>
            Defines the height of the Gantt component container.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.IGantt.Locale">
            <summary>
            Defines Gantt localization feature.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.IGantt.ProjectEndDate">
            <summary>
            Defines end date of the project, if `projectEndDate` value not set then it will be calculated from data source.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.IGantt.ProjectStartDate">
            <summary>
            Defines start date of the project, if `projectStartDate` value not set then it will be calculated from data source.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.IGantt.Query">
            <summary>
            Defines the external Query that will be executed along with data processing.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.IGantt.RowHeight">
            <summary>
            Defines height value for grid rows and chart rows in Gantt.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.IGantt.SplitterSettings">
            <summary>
            Configures the splitter settings of the Gantt.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.IGantt.TaskFields">
            <summary>
            Defines task fields value for grid rows and chart rows in Gantt.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.IGantt.ResourceFields">
            <summary>
            Defines mapping properties to find task values such as id, name and unit values from resource fields.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.IGantt.KeySettings">
            <summary>
            Configures the key settings.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.IGantt.TimelineSettings">
            <summary>
            configures timeline settings of the Gantt.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.IGantt.ColumnChooserSettings">
            <summary>
            Configures gantt Column chooser settings
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.IGantt.TimelineTierSettings">
            <summary>
            configures timelineTier settings of the Gantt.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.IGantt.GridLines">
            <summary>
            Configures the grid lines in tree grid and gantt chart.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.IGantt.DurationUnit">
            <summary>
            To set duration unit in Gantt.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.IGantt.TreeColumnIndex">
            <summary>
            To define expander column index in Grid.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.IGantt.ViewType">
            <summary>
            Defines the view type of the Gantt.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.IGantt.Width">
            <summary>
            Defines the width of the Gantt component container.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.IGantt.Holidays">
            <summary>
            Defines Gantt Holiday collection.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.IGantt.EventMarkers">
            <summary>
            Defines Gantt EventMarker collection.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.IGantt.AddDialogFields">
            <summary>
            Defines the tabs and fields to be included in the add dialog.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.IGantt.EditDialogFields">
            <summary>
            Defines the tabs and fields to be included in the edit dialog.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.IGantt.IncludeWeekend">
            <summary>
            To include weekend days in schedule calculation.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.IGantt.HighlightWeekends">
            <summary>
            If highlightWeekends set to true, then all weekend days are highlighted in week - day timeline mode.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.IGantt.Toolbar">
            <summary>
            `Toolbar` defines the toolbar items of the Gantt.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.IGantt.FilterSettings">
            <summary>
            Configures the filter settings of the Gantt.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.IGantt.AllowSelection">
            <summary>
            To enable selection feature in Gantt.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.IGantt.SelectedRowIndex">
            <summary>
            The selectedRowIndex allows you to select a row at initial rendering.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.IGantt.EditSettings">
            <summary>
            Configures the edit settings.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.IGantt.SelectionSettings">
            <summary>
            Configures the selection settings.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.IGantt.SearchSettings">
            <summary>
            Configures the search settings of the Gantt.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.IGantt.ShowInlineNotes">
            <summary>
            To show notes column cell values inside the cell or in tooltip.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.IGantt.SortSettings">
            <summary>
            Configures the sort settings of the Gantt.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.IGantt.AllowSorting">
            <summary>
            Configures the AllowSorting of the Gantt.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.IGantt.AllowMultiSorting">
            <summary>
            Configures the AllowMultiSorting of the Gantt.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.IGantt.CriticalSettings">
            <summary> 
            Gets or sets an instance of <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.CriticalSettings"/> to configure the critical tasks behavior in Gantt. 
            </summary> 
            <value> 
            An instance of <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.CriticalSettings"/>. 
            </value> 
            <remarks> 
            Provides options to customize the critical path behavior. 
            </remarks> 
            <example> 
            <code>    
            <![CDATA[    
                  <SfGantt @ref = "Gantt" DataSource="@TaskCollection"> 
                            <GanttCriticalPathSettings SlackValue="1"> 
                             
                            </GanttCriticalPathSettings> 
                  </SfGantt>  
            ]]>    
            </code>    
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.IGantt.TaskbarSettings">
            <summary> 
            Gets or sets an instance of <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.TaskbarSettings"/> to configure the taskbar settings behavior in Gantt. 
            </summary> 
            <value> 
            An instance of <see cref="P:Syncfusion.Blazor.Gantt.SfGantt`1.TaskbarSettings"/>. 
            </value> 
            <remarks> 
            Provides options to customize the multitaskbar behavior. 
            </remarks> 
            <example> 
            <code>    
            <![CDATA[    
                  <SfGantt @ref = "Gantt" DataSource="@TaskCollection"> 
                            <GanttTaskbarSettings EnableMultiTaskbar="true" AllowTaskbarDragAndDrop="true"> 
                             
                            </GanttTaskbarSettings> 
                  </SfGantt>  
            ]]>    
            </code>    
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.IGantt.UpdateChildProperties(System.String,System.Object)">
            <summary>
            To update Child Properties.
            </summary>
            <param name="key">key.</param>
            <param name="changedValue">value.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.IGantt.ModelChanged(System.Collections.Generic.IDictionary{System.String,System.Object},System.String)">
            <summary>
            ModelChanged in Gantt.
            </summary>
            <param name="propertyChanges">propertyChanges.</param>
            <param name="propertyName">propertyName.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.IGantt.CallStateHasChangedAsync">
            <summary>
            Refreshes the state of Gantt component.
            </summary>
            <exclude />
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.IGanttTaskModel`1">
            <summary>  
            Represents the hierarchy details maintained in each data object.  
            </summary>  
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.IGanttTaskModel`1.IsCritical">
            <summary>  
            Gets a value indicating whether the task is critical or not.  
            </summary>  
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.IGanttTaskModel`1.Slack">
            <summary>  
            Represents the total slack of the task.  
            </summary>  
            <value>  
            The number of days between current task end data and the project end date. 
            </value>  
            <remarks>  
            Slack is the amount of time that a task can be delayed without affecting the overall completion of the project. It is calculated as the difference of project end date and current task end date. 
            </remarks> 
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.IGanttTaskModel`1.Left">
            <summary>  
            Gets the position of the task on the horizontal axis in gantt chart.  
            </summary>  
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.IGanttTaskModel`1.Width">
            <summary>  
            Gets or sets the width of the taskbar in gantt chart.  
            </summary>  
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.IGanttTaskModel`1.ProgressWidth">
            <summary>  
            Gets the width of the progress bar in gantt chart.  
            </summary>  
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.IGanttTaskModel`1.Segments">
            <summary>
            Gets the list of Gantt segment data of a task.
            </summary>
            <value>
            A list of <see cref="T:Syncfusion.Blazor.Gantt.GanttSegmentData"/> representing the segments of a Gantt task.
            </value>
            <remarks>
            The Segments property provides access to the detailed segment information of a Gantt task. Segments are used to describe specific portions of a task's timeline, such as interruptions, or splits.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.IGanttTaskModel`1.RowIndex">
            <summary>  
            Gets the index of the row.  
            </summary>  
            <value>  
            A <see cref="T:System.Int32"/> representing the index of the row.  
            </value>  
            <remarks>  
            The RowIndex property represents the index of the row in the HTML table or the current view rows collection. 
            </remarks>  
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.Internal.CellEdit`1">
            <summary>
            Handles Cell edit feature of Gantt.
            </summary>
            <typeparam name="TValue">Specifies the type of CellEdit.</typeparam>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.CellEdit`1.#ctor(Syncfusion.Blazor.Gantt.SfGantt{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Gantt.Internal.CellEdit`1"/> class.
            </summary>
            <param name="parent">Defines Gantt.</param>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.Internal.CellEdit`1.Parent">
            <summary>
            Blazor Gantt chart is a project management tool which is used for scheduling and managing projects. It allows us to manage tasks, task relationships, and resources in a project.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.Internal.ContextMenu`1">
            <summary>
            Handles ContextMenu feature of Gantt.
            </summary>
            <typeparam name="TValue">Specifies the type of ContextMenu.</typeparam>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.Internal.DialogValidation`1">
            <summary>
            Handles Dialog edit feature of Gantt.
            </summary>
            <typeparam name="TValue">Specifies the type of DialogValidation.</typeparam>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.DialogValidation`1.ValidateSegmentFields(System.String,System.String,System.Object)">
            <summary>
            Validates the segment fields including segment start date, segment end date, and duration values in the segment tab.
            </summary>
            <param name="columnName">The name of the column being validated.</param>
            <param name="cellValue">The value of the cell being validated.</param>
            <param name="args">Additional arguments or context information for the validation.</param>
            <remarks>
            This method is used to ensure that the segment start date, segment end date, and duration values are valid in the segment tab.
            </remarks>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.Internal.EditBase`1">
            <summary>
            Handles Edit feature of Gantt.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Internal.EditBase`1.MaxTaskID">
            <summary>
            To maintain the maximum value of TaskId from the existing dataSource.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Internal.EditBase`1.MinStartDate">
            <summary>
            When open add dialog, the default value of start date will be minimum value of start date of existing datasource.
            Hence, using MinStartDate property to maintain the minimum value of start date.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Internal.EditBase`1.MaxEndDate">
            <summary>
            This property used for maximum end date find in project.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.EditBase`1.SetColumnDefaultValue">
            <summary>
            When the method is called if set any default value
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.Internal.Keyboard`1">
            <summary>
            Handles keyboard interactions feature of Gantt.
            </summary>
            <typeparam name="TValue">Specifies the type of Keyboard.</typeparam>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.Internal.Selection`1">
            <summary>
            Handles selection feature of Gantt.
            </summary>
            <typeparam name="TValue">Specifies the type of Selection.</typeparam>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.Internal.TaskbarEdit`1">
            <summary>
            Handles Taskbar edit feature of Gantt.
            </summary>
            <typeparam name="TValue">Specifies the type of TaskbarEdit.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.Internal.TaskbarEdit`1.isTooltipRendered">
            <summary>
            This property is used to ensure whether editing tooltip is rendered or not, so that we can avoid unnecessary script call.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.Internal.TaskbarEdit`1.taskbarEditElement">
            <summary>
            To maintain the taskbar editing element for which the tooltip should get render.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Internal.Zooming`1.InitialTimelineSettingsProperties">
            <summary>
            This property is used to store the initial load time timeline settings values.
            </summary>
            <remarks>
            The TimelineSettings property holds the timeline settings values used during the initial loading of the Gantt chart.
            </remarks>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.Internal.ChartBase`1">
            <summary>
            Gantt taskbar Validation.
            </summary>
            <summary>
            Timeline Validation.
            </summary>
            <summary>
            Gantt width left Validation.
            </summary>
            <typeparam name="T">Specifies the type of ChartBase.</typeparam>
            <summary>
            ConnectorLine Design.
            </summary>
            <summary>
            ConnectorLine Editing.
            </summary>
            <summary>
            ConnectorLine Validation.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.Internal.ChartBase`1.timelineCellWidthCollection">
            <summary>
            This collection is used to maintain total width of each timeline cell, in order to update the grid lines with proper left position. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.Internal.ChartBase`1.currentStartDate">
            <summary>
            This property is used to maintain the current timeline start date when timeline virtualization is enabled.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.Internal.ChartBase`1.currentEndDate">
            <summary>
            This property is used to maintain the current timeline end date when timeline virtualization is enabled.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Internal.ChartBase`1.parentRecords">
            <summary>
            To maintain parent records which needs to be updated only once, when dependent child records gets modified. So that we can avoid updating parent item, when each child record gets updated.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Internal.ChartBase`1.parentPredecessor">
            <summary>
            To maintain parent records with predecessor values alone to avoid unnecessary iteration while validating on load time.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Internal.ChartBase`1.loadParentPredecessor">
            <summary>
            To push parent records with predecessor values at load time alone, to avoid unnecessary iteration while validating.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Internal.ChartBase`1.renderDialog">
            <summary>
            To enable/disable dialog rendering in touch mode, on predecessor drawing.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Internal.ChartBase`1.leftConnectorPoint">
            <summary>
            To enable/diable the left button of tooltip in touch mode, on predecessor drawing.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Internal.ChartBase`1.rightConnectorPoint">
            <summary>
            To enable/diable the right button of tooltip in touch mode, on predecessor drawing.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Internal.ChartBase`1.fromItem">
            <summary>
            To store the predecessor's from record in touch mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Internal.ChartBase`1.toItem">
            <summary>
            To store the predecessor's to record in touch mode.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.Internal.GanttChartJSInteropAdaptor`1">
            <summary>
            JSInterop Adaptor for Gantt Chart component.
            </summary>
            <typeparam name="TValue">Accepts generic type parameter.</typeparam>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.GanttChartJSInteropAdaptor`1.#ctor(Syncfusion.Blazor.Gantt.SfGantt{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Gantt.Internal.GanttChartJSInteropAdaptor`1"/> class.
            Constructor for initializing the component adaptor.
            </summary>
            <param name="parent">GanttChart arguments.</param>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.GanttChartJSInteropAdaptor`1.Init">
            <summary>
            Creates DotNet Object reference.
            </summary>
            <returns></returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.GanttResourceView`1.#ctor(Syncfusion.Blazor.Gantt.SfGantt{`0})">
            <summary>
            Gets or sets the <see cref="T:Syncfusion.Blazor.Gantt.Internal.GanttView`1"/> for the <see cref="T:Syncfusion.Blazor.Gantt.SfGantt`1"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.GanttSegment`1.#ctor(Syncfusion.Blazor.Gantt.SfGantt{`0})">
            <summary>
            Gets or sets the <see cref="T:Syncfusion.Blazor.Gantt.Internal.GanttView`1"/> for the <see cref="T:Syncfusion.Blazor.Gantt.SfGantt`1"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.GanttSegment`1.GetSegmentCollection">
            <summary>
            Updates the segments collection based on the data source or data manager in segment fields.
            </summary>
            <returns>
            A dictionary containing segment information. The key is a string representing the task id,
            and the value is a list of dictionaries, where each dictionary represents a segment and contains
            key-value pairs for segment fields and their corresponding values.
            </returns>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.GanttSegment`1.CreateSegmentCollection(Syncfusion.Blazor.TreeGrid.Internal.TreeListItem{`0},System.Collections.Generic.List{System.Collections.Generic.IDictionary{System.String,System.Object}},System.Boolean,System.Boolean)">
            <summary>
            Prepares a valid segments collection based on the provided data, whether during initial loading or when records are updated.
            </summary>
            <param name="data">The data used to generate the segments collection.</param>
            <param name="segmentCollection">The segmentCollection used to process the segments.</param>
            <param name="onLoad">Indicates whether the method is called during initial loading or at runtime.</param>
            <param name="isDynamic">isDynamic used to validate the dynamic segments collections.</param>
            <returns>A list of valid segments.</returns>
            <remarks>
            This method is used to create a collection of valid segments based on the provided data, either during initial loading or when records are updated.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.GanttSegment`1.ProcessSegmentCollection(Syncfusion.Blazor.TreeGrid.Internal.TreeListItem{`0},System.Collections.Generic.List{System.Collections.Generic.IDictionary{System.String,System.Object}},System.Boolean)">
            <summary>
            Prepares a valid segments collection based on the provided data, whether during initial loading or when records are updated.
            </summary>
            <param name="data"></param>
            <param name="segmentCollection"></param>
            <param name="onLoad"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.GanttSegment`1.GetSplitTasksDuration(System.Collections.Generic.List{Syncfusion.Blazor.TreeGrid.Internal.GanttTaskSegmentData})">
            <summary>
            Calculates the total duration based on a list of segments' durations.
            </summary>
            <param name="Segments">The list of segments for which the total duration is calculated.</param>
            <returns>The total duration calculated from the segments.</returns>
            <remarks>
            This method computes the total duration by summing the durations of the provided list of segments.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.GanttSegment`1.UpdateSegmentDates(Syncfusion.Blazor.TreeGrid.Internal.TreeListItem{`0},System.Collections.Generic.List{Syncfusion.Blazor.TreeGrid.Internal.GanttTaskSegmentData},System.Int32,Syncfusion.Blazor.TreeGrid.Internal.GanttTaskItem)">
            <summary>
            Increments the dates in a list of segments when they fall on holidays or weekends.
            </summary>
            <param name="item">The item containing the segments to be incremented.</param>
            <param name="segments">The list of segments to be adjusted.</param>
            <param name="segmentIndex">The index of the segment to start the incrementation.</param>
            <param name="taskItem">The Gantt chart properties containing information about holidays and weekends.</param>
            <remarks>
            This method adjusts the start and end dates of the segments in the list, starting from the specified index,
            to ensure they do not fall on holidays or weekends based on the provided Gantt chart properties.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.GanttSegment`1.GetSplitTaskWidth(System.DateTime,System.Double,Syncfusion.Blazor.TreeGrid.Internal.GanttTaskItem)">
            <summary>
            Calculates the width of a split taskbar based on the provided start date, duration, and Gantt chart properties.
            </summary>
            <param name="sDate">The start date of the split taskbar.</param>
            <param name="duration">The duration of the split taskbar in days.</param>
            <param name="taskItem">The Gantt chart properties containing configuration settings.</param>
            <returns>The width of the split taskbar in pixels.</returns>
            <remarks>
            This method calculates the width of a split taskbar based on the provided start date, duration, and Gantt chart properties.
            The calculated width ensures that the taskbar visually represents the specified duration.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.GanttSegment`1.GetSplitTaskLeft(System.DateTime,System.DateTime)">
            <summary>
            Calculates the left position of a split taskbar based on the provided start date and segment task's start date.
            </summary>
            <param name="sDate">The start date of the split taskbar.</param>
            <param name="segmentTaskStartDate">The start date of the segment task to which the split taskbar belongs.</param>
            <returns>The left position of the split taskbar in pixels.</returns>
            <remarks>
            This method calculates the left position of a split taskbar relative to the start date of its associated segment task.
            It ensures that the split taskbar is visually aligned with the segment task's start date.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.GanttSegment`1.SplitTaskWidthLeft(Syncfusion.Blazor.TreeGrid.Internal.TreeListItem{`0},Syncfusion.Blazor.TreeGrid.Internal.GanttTaskItem)">
            <summary>
            Calculates and sets the width and left position of a split taskbar based on the provided data and Gantt task properties.
            </summary>
            <param name="item">The data item associated with the split taskbar.</param>
            <param name="taskItem">The Gantt task properties used to determine the task's start and end dates.</param>
            <returns>True if the split taskbar width and left position were successfully calculated and set; otherwise, false.</returns>
            <remarks>
            This method calculates the width and left position of a split taskbar based on the provided data and Gantt task properties.
            It ensures that the split taskbar is visually aligned with the task's start and end dates, and that the progress width is set accurately.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.GanttSegment`1.ValidateEndDateWithSegments(Syncfusion.Blazor.TreeGrid.Internal.GanttTaskItem)">
            <summary>
            Validates the end dates of segments for a Gantt task based on the provided Gantt task properties during cell editing.
            </summary>
            <param name="taskItem">The Gantt task properties used to determine the task's end date and segments.</param>
            <returns>A list of validated segment data with corrected end dates.</returns>
            <remarks>
            This method is specifically designed to validate the end dates of segments for a Gantt task when editing the task's data via the cell edit feature.
            It ensures that segment end dates do not exceed the task's end date. If any segments have end dates beyond the task's end date, their end dates are adjusted to match the task's end date.
            The corrected segment data is returned as a list for further processing.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.GanttSegment`1.SplitTaskByDate(System.String,System.Collections.Generic.List{System.DateTime})">
            <summary>
            Splits a task identified by the specified ID based on the provided list of dates.
            </summary>
            <param name="id">The unique identifier of the task to be split.</param>
            <param name="dates">
            Optional. A list of DateTime objects representing the dates on which the task should be split.
            </param>
            <remarks>
            The method divides the specified task into subtasks based on the given dates.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.GanttSegment`1.SplitTaskbar(Syncfusion.Blazor.TreeGrid.Internal.TreeListItem{`0},System.Double)">
            <summary>
            Splits a taskbar associated with a specific task and passes the split data to the SplitSegmentTask method.
            </summary>
            <param name="rowData">The data representing the taskbar to be split.</param>
            <param name="left">Optional. The position at which the taskbar should be split.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.GanttSegment`1.SplitSegmentTask(Syncfusion.Blazor.TreeGrid.Internal.TreeListItem{`0},System.Collections.Generic.List{System.DateTime})">
            <summary>
            Splits a Gantt task's segments into multiple segments based on the specified dates.
            </summary>
            <param name="data">The data representing the Gantt task whose segments should be split.</param>
            <param name="dates">A list of DateTime values representing the split dates.</param>
            <remarks>
            This method is responsible for splitting a Gantt task's segments into multiple segments based on the specified dates. The 'data' parameter should contain the Gantt task's data, and the 'dates' parameter specifies the dates at which the task should be split.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.GanttSegment`1.SplitSegmentedTaskbar(System.DateTime,System.DateTime,System.DateTime,System.Int32,System.Collections.Generic.List{Syncfusion.Blazor.TreeGrid.Internal.GanttTaskSegmentData},Syncfusion.Blazor.TreeGrid.Internal.GanttTaskItem,System.Double,Syncfusion.Blazor.Gantt.Internal.GanttSegmentItem)">
            <summary>
            Splits a segmented Gantt taskbar into multiple segments based on the provided start and end dates, a split date, and other parameters.
            </summary>
            <param name="startDate">The start date of the original taskbar segment.</param>
            <param name="endDate">The end date of the original taskbar segment.</param>
            <param name="splitDate">The date at which the taskbar should be split.</param>
            <param name="segmentIndex">The index of the original segment within the taskbar.</param>
            <param name="segments">The list of existing taskbar segments.</param>
            <param name="taskItem">The Gantt task data associated with the taskbar.</param>
            <param name="segmentDuration">The duration of the original taskbar segment.</param>
            <param name="segmentItem">The update the segments details.</param>
            <returns>A list of GanttSegmentData representing the segmented taskbar after splitting.</returns>
            <remarks>
            This method splits a segmented Gantt taskbar into multiple segments based on the provided start and end dates, a split date, and other parameters. It returns a list of GanttSegmentData representing the segmented taskbar after splitting.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.GanttSegment`1.RefreshChartAfterSegment(Syncfusion.Blazor.TreeGrid.Internal.TreeListItem{`0},System.Boolean)">
            <summary>
            Refreshes the Gantt chart after splitting a taskbar or performing a related action.
            </summary>
            <param name="data">The data associated with the action.</param>
            <param name="isTaskbarEdit">The isTaskbarEdit associated with the taskbar edit action</param>
            <remarks>
            This method is used to refresh the Gantt chart after splitting a taskbar or performing a related action. It takes the action data and the type of action as parameters.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.GanttSegment`1.GetSegmentIndex(System.DateTime,Syncfusion.Blazor.TreeGrid.Internal.TreeListItem{`0})">
            <summary>
            Retrieves the index of a Gantt chart segment based on a split start date and the associated record.
            </summary>
            <param name="splitStartDate">The start date of the split segment.</param>
            <param name="record">The data record associated with the segment.</param>
            <returns>The index of the segment in the Gantt chart.</returns>
            <remarks>
            This method is used to determine the index of a Gantt chart segment based on the provided split start date and the associated data record.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.GanttSegment`1.MergeSplitTask(System.String,System.Collections.Generic.List{System.ValueTuple{System.Int32,System.Int32}})">
            <summary>
            Merges split segments of a Gantt chart task based on the provided indexes.
            </summary>
            <param name="id">The ID of the task to merge split segments.</param>
            <param name="indexes">A list of ValueTuples representing the indexes of the split segments to merge.</param>
            <remarks>
            This method is used to merge split segments of a Gantt chart task based on the provided indexes. It combines the selected split segments into a single segment.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.GanttSegment`1.MergeTaskbar(Syncfusion.Blazor.TreeGrid.Internal.TreeListItem{`0},System.String,System.Int32)">
            <summary>
            Merges a split taskbar segment of a Gantt chart task in a specified direction.
            </summary>
            <param name="data">The data dictionary representing the Gantt chart task.</param>
            <param name="direction">The direction in which to merge the split segment ("left" or "right").</param>
            <param name="segmentIndex">The index of the segment to merge.</param>
            <remarks>
            This method is used to merge a split taskbar segment of a Gantt chart task in the specified direction. It combines the selected split segment with an adjacent segment.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.GanttSegment`1.MergeSegmentTask(Syncfusion.Blazor.TreeGrid.Internal.TreeListItem{`0},System.Collections.Generic.List{System.ValueTuple{System.Int32,System.Int32}})">
            <summary>
            Merges the split taskbar segments of a Gantt chart task based on specified segment indexes.
            </summary>
            <param name="data">The data dictionary representing the Gantt chart task.</param>
            <param name="segmentIndexes">A list of segment indexes to merge. Each tuple represents the start and end indexes of a split segment.</param>
            <remarks>
            This method is used to merge the split taskbar segments of a Gantt chart task based on the specified segment indexes. It combines the selected split segments into a single taskbar segment.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.GanttSegment`1.UpdateEditedSegment(Syncfusion.Blazor.TreeGrid.Internal.TreeListItem{`0},System.String,System.Int32)">
            <summary>
            Updates a Gantt chart task's edited segment based on the specified parameters.
            </summary>
            <param name="data">The data dictionary representing the Gantt chart task containing the segment to edit.</param>
            <param name="taskbarEditAction">A string indicating the type of taskbar editing action, such as "Split" or "Merge".</param>
            <param name="segmentIndex">The index of the segment within the task to edit.</param>
            <remarks>
            This method is used to update an edited segment of a Gantt chart task based on the specified parameters. It allows for modifying segments during taskbar editing actions, such as splitting or merging segments.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.GanttSegment`1.SetSplitTaskDrag(Syncfusion.Blazor.TreeGrid.Internal.TreeListItem{`0},System.Int32)">
            <summary>
            This method used to update the segment start date and after update the end date based on duration.
            </summary>
            <param name="item">The data dictionary representing the Gantt chart task containing the split segment to drag.</param>
            <param name="segmentIndex">The index of the split segment within the task to drag.</param>
            <remarks>
            Move and adjust the position of the split segment within the task.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.GanttSegment`1.UpdateSplitLeftResize(Syncfusion.Blazor.TreeGrid.Internal.TreeListItem{`0},System.Int32)">
            <summary>
            Updates the left resize operation for a split task segment within the Gantt chart and recalculates the segment's start date.
            </summary>
            <param name="item">The data dictionary representing the Gantt chart task containing the split segment to resize.</param>
            <param name="index">The index of the split segment within the task to resize.</param>
            <remarks>
            This method is used to update the left resize operation for a specific split segment within a Gantt chart task. It allows users to interactively adjust the start date of the split segment by resizing its left edge. The method recalculates the new start date of the segment based on the resized position.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.GanttSegment`1.UpdateSplitRightResizing(Syncfusion.Blazor.TreeGrid.Internal.TreeListItem{`0},System.Int32)">
            <summary>
            Updates the right resizing operation for a split task segment within the Gantt chart and recalculates the segment's end date.
            </summary>
            <param name="item">The data dictionary representing the Gantt chart task containing the split segment to resize.</param>
            <param name="index">The index of the split segment within the task to resize.</param>
            <remarks>
            This method is used to update the right resizing operation for a specific split segment within a Gantt chart task. It allows users to interactively adjust the end date of the split segment by resizing its right edge. The method recalculates the new end date of the segment based on the resized position.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.GanttSegment`1.NotifySegmentEvent(System.Collections.Generic.List{Syncfusion.Blazor.TreeGrid.Internal.GanttTaskSegmentData},Syncfusion.Blazor.Gantt.Internal.GanttSegmentItem)">
            <summary>
            Notifies about a Gantt chart segment event, such as the addition, modification, or removal of segments.
            </summary>
            <param name="segments">A list of GanttSegmentData representing the Gantt chart segments.</param>
            <param name="segmentItem">Optional. The specific GanttSegmentItem associated with the event.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.GanttSegment`1.GetSegmentItems(Syncfusion.Blazor.TreeGrid.Internal.GanttTaskItem,System.Int32)">
            <summary>
            Retrieves the segment record for a specific split task segment within a Gantt chart task.
            </summary>
            <param name="taskItem">The <see cref="T:Syncfusion.Blazor.TreeGrid.Internal.GanttTaskItem"/> containing the split task segment to retrieve.</param>
            <param name="index">The index of the split task segment to retrieve.</param>
            <returns>A <see cref="T:Syncfusion.Blazor.Gantt.Internal.SegmentRecord"/> object representing the properties and data of the specified split task segment.</returns>
            <remarks>
            This method is used to obtain the segment record for a particular split task segment within a Gantt chart task. It provides access to the properties and data associated with the specified segment.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.GanttSegment`1.SumOfDuration(System.Collections.Generic.List{Syncfusion.Blazor.TreeGrid.Internal.GanttTaskSegmentData})">
            <summary>
            Calculates the sum of durations for a collection of Gantt chart segments.
            </summary>
            <param name="segments">The collection of <see cref="T:Syncfusion.Blazor.TreeGrid.Internal.GanttTaskSegmentData"/> objects to calculate the sum of durations for.</param>
            <returns>The total sum of durations for the provided segments.</returns>
            <remarks>
            This method is used to compute the total sum of durations for a collection of Gantt chart segments. It adds up the durations of each segment within the given collection.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.GanttSegment`1.ConvertSegmentData(System.Collections.Generic.List{Syncfusion.Blazor.TreeGrid.Internal.GanttTaskSegmentData})">
            <summary>
            This method used to convert the List of GanttTaskSegmentData to List of GanttSegmentData.
            </summary>
            <param name="segments"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.GanttSegment`1.TriggerSegmentEvent(Syncfusion.Blazor.TreeGrid.Internal.TreeListItem{`0},Syncfusion.Blazor.TreeGrid.Internal.GanttTaskItem)">
            <summary>
            Triggers the <see cref="P:Syncfusion.Blazor.Gantt.GanttSegmentFields`2.SegmentChanging"/> event.
            </summary>
            <param name="data">Holds the record details of the event.</param>
            <param name="taskItem">Contains the values of the <see cref="T:Syncfusion.Blazor.TreeGrid.Internal.GanttTaskItem"/>.</param>
            <remarks>
            This method is used to trigger the segment changing event, which handles updates to segment data within the Gantt chart.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.GanttView`1.#ctor(Syncfusion.Blazor.Gantt.SfGantt{`0})">
            <summary>
            Gets or sets the <see cref="T:Syncfusion.Blazor.Gantt.Internal.GanttView`1"/> for the <see cref="T:Syncfusion.Blazor.Gantt.SfGantt`1"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.GanttView`1.GetPrimaryId(System.String)">
            <summary>
            Gets the primary id value based on the provided id.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.GanttView`1.GetParentField">
            <summary>
            Gets the parent field based on the value of the IsResourceViewType property.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.GanttView`1.GetRecord(System.String)">
            <summary>
            Retrieves the record based on the provided id.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.GanttView`1.GetRecordId(Syncfusion.Blazor.TreeGrid.Internal.GanttTaskItem,System.Boolean)">
            <summary>
            Retrieves the record id based on the provided <see cref="T:Syncfusion.Blazor.TreeGrid.Internal.GanttTaskItem"/> and a flag indicating whether it is a parent or a task.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.GanttView`1.GetFlatData">
            <summary>
            Gets the flatdata based on whether the view is in resource view or project view.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.GanttView`1.UpdateGanttItem(Syncfusion.Blazor.TreeGrid.Internal.TreeListItem{`0})">
            <summary>
            Updates the record based on the provided editedData.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.GanttView`1.GetRecordFromDataItem(System.Object,System.Boolean)">
            <summary>
            Fetches a record from the Flat Data collection.
            This method is used when the treegrid event argument's data returns only TValue.
            In the case of the resource view, the DataItem of type TValue may not have a proper ID for parent records(resources).
            In such cases, this method filters records directly by comparing the DataItem from a collection.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.Internal.GanttUtils">
            <summary>
            Util functions for internal usage.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.GanttUtils.CloneGanttData``1(System.Object,System.Type,Syncfusion.Blazor.Gantt.SfGantt{``0})">
            <summary>
            This method will clone "DataItem", "TaskItem", "ResourceItem" alone all other TreeListItem properties will not be cloned 
            </summary>
            <param name="obj">Record that needs to be cloned is sent as parameter</param>
            <param name="type">Type of the record object</param>
            <param name="parent"></param>
            <typeparam name="T"></typeparam>
            <returns>Cloned record but as object should use explicit conversion while invoking this method</returns>    
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.GanttUtils.CloneDataItem``1(System.Object)">
            <summary>
            Method to clone the "DataItem" of the record alone
            </summary>
            <param name="data"></param>
            <typeparam name="T"></typeparam>
            <returns>Cloned "DataItem" is returned as object. Need to use explicit conversion while invoking</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.GanttUtils.CloneGanttResourceItem(Syncfusion.Blazor.TreeGrid.Internal.GanttResourceItem)">
            <summary>
            Method to clone the "ResourceItem" of a record
            </summary>
            <param name="resourceItem">"ResourceItem" that needs to be cloned</param>
            <returns>Cloned "ResourceItem" is returned as object use explicit conversion while invoking</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.Internal.DateValidation`1">
            <summary>
            Gantt Duration Validation.
            </summary>
            <summary>
            Gantt EndDate Validation.
            </summary>
            <summary>
            Gantt NonWorking Validation.
            </summary>
            <typeparam name="T">Specifies the type of DateValidateion.</typeparam>
            <summary>
            Gantt StartDate Validation.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.Internal.EventAggregators">
            <summary>
            Provides internal event mechanism.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.Internal.TooltipObject`1">
            <summary>
            To maintain Tooltip object.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.Internal.ValidateType`1">
            <summary>
            To maintain ValidateType.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.Internal.BaselineRenderer`1">
            <summary>
            Configures Gantt chart base line renderer.
            </summary>
            <typeparam name="TValue">Specifies the type of BaselineRenderer.</typeparam>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.BaselineRenderer`1.OnParametersSetAsync">
            <summary>
            Triggers while dynamically updating the component properties.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.Internal.ChartBodyContent`1">
            <summary>
            Configures Gantt chart body content.
            </summary>
            <typeparam name="TValue">Specifies the type of ChartBodyContent.</typeparam>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Internal.ChartBodyContent`1.lineContainerId">
            <summary>
            lineContainerId variable used for set the Gridline container id
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Internal.ChartBodyContent`1.lineContainerStyle">
            <summary>
            lineContainerStyle variable used for set the Gridline container style
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Internal.ChartBodyContent`1.leftPos">
            <summary>
            leftPos variable used for set the Gridline left position
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Internal.ChartBodyContent`1.thWidth">
            <summary>
            thWidth variable used for get and set the Gridline width
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Internal.ChartBodyContent`1.svgStyle">
            <summary>
            This variable is used to set the SVG container style.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Internal.ChartBodyContent`1.transform">
            <summary>
            This variable is used to set transform property to group element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.Internal.ChartBodyContent`1.predecessorLine">
            <summary>
            This variable is predecessor line reference object.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.ChartBodyContent`1.OnInitializedAsync">
            <summary>
            Triggers while initial rendering of the component.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.ChartBodyContent`1.OnParametersSetAsync">
            <summary>
            Triggers while dynamically updating the component properties.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.Internal.ChartPane`1">
            <summary>
            Configures Gantt Chart pane.
            </summary>
            <typeparam name="TValue">Specifies the type of ChartPane.</typeparam>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.ChartPane`1.OnInitializedAsync">
            <summary>
            Triggers while initial rendering of the component.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.Internal.ChartRow`1">
            <summary>
            Configures Gantt chart row container.
            </summary>
            <typeparam name="TValue">Specifies the type of ChartRow.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.Internal.ChartRow`1.rowClassName">
            <summary>
            rowClassName variable used for define the individual row class name 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.Internal.ChartRow`1.rowStyle">
            <summary>
            rowStyle variable used for define style in individual row
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.Internal.ChartRow`1.TaskItem">
            <summary>
            This variable used for get the gantt properities values
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Internal.ChartRow`1.LeftLabelObj">
            <summary>
            This variable is left label refrence object
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Internal.ChartRow`1.RightLabelObj">
            <summary>
            This variable is right label refrence object
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Gantt.Internal.ChartRow`1.ChartRowObj">
            <summary>
            This variable is drag and drop taskbar refrence object
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.ChartRow`1.OnParametersSetAsync">
            <summary>
            Triggers while dynamically updating the component properties.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.ChartRow`1.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Triggers after the component was rendered.
            </summary>
            <param name="firstRender">true if the component rendered for the first time.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.Internal.ConnectorLineRender`1">
            <summary>
            Configures Gantt chart predecessor lines.
            </summary>   
            <summary>
            Configures Gantt chart FFType.
            </summary>
            <summary>
            Configures Gantt chart FSType.
            </summary>
            <summary>
            Configures Gantt chart SFType.
            </summary>
            <summary>
            Configures Gantt chart SSType.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.ConnectorLineRender`1.OnInitializedAsync">
            <summary>
            Triggers while initial rendering of the component.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.ConnectorLineRender`1.OnParametersSet">
            <summary>
            Triggers while dynamically updating the component properties.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.Internal.DateTimeTemplate`1">
            <summary>
            Configures Gantt chart date time template.
            </summary>
            <typeparam name="TValue">Specifies the type of DateTimeTemplate.</typeparam>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.Internal.SplitterRenderer`1">
            <summary>
            Configures Gantt splitter pane.
            </summary>
            <typeparam name="TValue">Specifies the type of SplitterRenderer.</typeparam>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.Internal.ChildMilestone`1">
            <summary>
            Configures Child MileStone.
            </summary>
            <typeparam name="TValue">Specifies the type of ChildMileStone.</typeparam>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.ChildMilestone`1.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Triggers after the component was rendered.
            </summary>
            <param name="firstRender">true if the component rendered for the first time.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.Internal.ChildTaskbar`1">
            <summary>
            Configures child Taskbar.
            </summary>
            <typeparam name="TValue">Specifies the type of ChildTaskbar.</typeparam>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.Internal.IndicatorRenderer`1">
            <summary>
            Configures Indicator Renderer.
            </summary>
            <typeparam name="TValue">Specifies the type of IndicatorRenderer.</typeparam>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.Internal.ManualParentTaskbar`1">
            <summary>
            Configures Manual Parent Taskbar.
            </summary>
            <typeparam name="TValue">Specifies the type of ManualParentTaskbar.</typeparam>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.Internal.ParentMilestone`1">
            <summary>
            Configures Parent Parent MileStone.
            </summary>
            <typeparam name="TValue">Specifies the type of ParentMileStone.</typeparam>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.ParentMilestone`1.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Triggers after the component was rendered.
            </summary>
            <param name="firstRender">true if the component rendered for the first time.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.Internal.ParentTaskbar`1">
            <summary>
            Configures Parent Taskbar.
            </summary>
            <typeparam name="TValue">Specifies the type of ParentTaskbar.</typeparam>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.ParentTaskbar`1.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Triggers after the component was rendered.
            </summary>
            <param name="firstRender">true if the component rendered for the first time.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.Internal.Taskbar`1">
            <summary>
            Configures Gantt Chart taskbar main container.
            </summary>
            <typeparam name="TValue">Specifies the type of Taskbar.</typeparam>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.Taskbar`1.OnParametersSetAsync">
            <summary>
            Triggers while dynamically updating the component properties.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.Taskbar`1.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Triggers after the component was rendered.
            </summary>
            <param name="firstRender">true if the component rendered for the first time.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.Internal.TimelineCell`1">
            <summary>
            Configures Gantt Timeline cell.
            </summary>
            <typeparam name="TValue">Specifies the type of TimelineCell.</typeparam>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.TimelineCell`1.OnParametersSetAsync">
            <summary>
            Triggers while dynamically updating the component properties.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.Internal.TimelineHeader`1">
            <summary>
            Configures Gantt Timeline header.
            </summary>
            <typeparam name="TValue">Specifies the type of ChildMileStone.</typeparam>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.TimelineHeader`1.OnInitialized">
            <summary>
            Triggers while initial rendering of the component.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Gantt.Internal.TreeGridPane`1">
            <summary>
            Configures Gantt TreeGrid Events.
            </summary>
            <summary>
            Configures Gantt TreeGrid Lifecycle.
            </summary>
            <summary>
            Configures Gantt TreeGrid Members.
            </summary>
            <typeparam name="TValue">Specifies the type of TreeGridPane.</typeparam>
            <summary>
            Configures Gantt TreeGrid Members.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.TreeGridPane`1.GetRemoteData(System.Object)">
            <summary>
            To method is used to update ExpandoData for custom adaptor and when HasChildMapping is mapped.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.TreeGridPane`1.OnDemandExpand(System.Object)">
            <summary>
            To method is used to create gantt record and update necessary collections on expand action.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.TreeGridPane`1.DataManagerCRUD(System.Object)">
            <summary>
            To method is used to update TValue in event argument data on crud operation.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.TreeGridPane`1.ResetCollections(System.Boolean)">
            <summary>
            This method is used to reset the necessary data collections.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.TreeGridPane`1.IsTreeGridDataManager">
            <summary>
            SfDataManager is used for binding data to the treegrid only when custom adaptor is used or HasChildMapping is mapped to the Gantt. 
            For remaining cases, datasource is generated from our end and assigned to the treegrid.
            This method returns true when DataManager is used for binding data to the treegrid.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.TreeGridPane`1.TreeGridPersistProperties(System.String)">
            <summary>
            Update Gantt properties based on persisted values.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Gantt.Internal.TreeGridPane`1.HasChildMapping">
            <summary>
            To specify a record is parent or not for the remote data binding.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Gantt.Internal.ConnectorLineTooltip`1.OnInitializedAsync">
            <summary>
            Triggers while initial rendering of the component.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <exclude/>
        </member>
    </members>
</doc>
