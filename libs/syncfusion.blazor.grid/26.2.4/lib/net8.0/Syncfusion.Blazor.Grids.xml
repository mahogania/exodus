<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Syncfusion.Blazor.Grids</name>
    </assembly>
    <members>
        <member name="T:Syncfusion.Blazor.Grids.ClipMode">
            <summary>
            Defines the cell content's overflow mode. The available modes are.
            <list type="bullet">
            <item>
            <term>Clip</term>
            <description>Truncates the cell content when it overflows its area.</description>
            </item>
            <item>
            <term>Ellipsis</term>
            <description>Displays ellipsis when the cell content overflows its area.</description>
            </item>
            <item>
            <term>EllipsisWithTooltip</term>
            <description>Displays ellipsis when the cell content overflows its area also it will display tooltip while hover on ellipsis applied cell.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.ClipMode.Clip">
            <summary>
             Truncates the cell content when it overflows its area.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.ClipMode.Ellipsis">
            <summary>
             Displays ellipsis when the cell content overflows its area.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.ClipMode.EllipsisWithTooltip">
            <summary>
            Displays ellipsis when the cell content overflows its area
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.ColumnQueryModeType">
            <summary>
            <c>ColumnQueryMode</c> provides options to retrive data from the datasource.
            <list type="bullet">
            <item>
            <term>All</term>
            <description>It retrives whole data source</description>
            </item>
            <item>
            <term>Schema</term>
            <description>Retrives data for all the defined columns in grid from the data source.</description>
            </item>
            <item>
            <term>ExcludeHidden</term>
            <description>Retrives data only for visible columns of grid from the data source.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.ColumnQueryModeType.All">
            <summary>
            Specifies that all columns should be queried from data source.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.ColumnQueryModeType.Schema">
            <summary>
            Specifies that only columns specified in the <c>GridColumns</c> component
            should be queried from data source.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.ColumnQueryModeType.ExcludeHidden">
            <summary>
            Specifies that exclude hidden columns specified in the <c>GridColumns</c> should be queried from data source.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.AdaptiveMode">
            <summary>
            <c>AdaptiveMode</c> Defines the mode of AdaptiveUI layout. The available Adaptive modes are:
            <list type="bullet">
            <item>
            <term>Both</term>
            <description> Default.Render the Adaptive Layout for both mobile and desktop.</description>
            </item>
            <item>
            <term>Mobile</term>
            <description>Render the Adaptive Layouts only on the smaller devices.</description>
            </item>
            <item>
            <term>Desktop</term>
            <description>Render the Adaptive Layouts only on the desktop.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.AdaptiveMode.Both">
            <summary>
            Default. Render the Adaptive Layout for both mobile and desktop.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.AdaptiveMode.Mobile">
            <summary>
            Render the Adaptive Layouts only on the smaller devices. 
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.AdaptiveMode.Desktop">
            <summary>
            Render the Adaptive Layouts only on the Desktop. 
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.GridLine">
            <summary>
            Defines modes of GridLine, They are.
            <list type="bullet">
            <item>
            <term>Both</term>
            <description>Displays both the horizontal and vertical grid lines.</description>
            </item>
            <item>
            <term>None</term>
            <description>No grid lines are displayed.</description>
            </item>
            <item>
            <term>Horizontal</term>
            <description>Displays the horizontal grid lines only.</description>
            </item>
            <item>
            <term>Vertical</term>
            <description>Displays grid lines based on the theme.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.GridLine.Both">
            <summary>
            Displays both the horizontal and vertical grid lines.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.GridLine.None">
            <summary>
            No grid lines are displayed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.GridLine.Horizontal">
            <summary>
            Displays the horizontal grid lines only.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.GridLine.Vertical">
            <summary>
            Displays the vertical grid lines only
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.GridLine.Default">
            <summary>
            Displays grid lines based on the theme.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.HierarchyGridPrintMode">
            <summary>
            Hierarchy Grid Print modes are.
            <list type="bullet">
            <item>
            <term>Expanded</term>
            <description>Prints the master grid with expanded child grids.</description>
            </item>
            <item>
            <term>All</term>
            <description>Prints the master grid with all the child grids.</description>
            </item>
            <item>
            <term>None</term>
            <description>Prints the master grid alone.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.HierarchyGridPrintMode.Expanded">
            <summary>
            Prints the master grid with expanded child grids.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.HierarchyGridPrintMode.All">
            <summary>
            Prints the master grid with all the child grids.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.HierarchyGridPrintMode.None">
            <summary>
            Prints the master grid alone.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.PrintMode">
            <summary>
            Print mode options are.
            <list type="bullet">
            <item>
            <term>AllPages</term>
            <description>Print all pages records of the Grid.</description>
            </item>
            <item>
            <term>CurrentPage</term>
            <description>Print current page records of the Grid.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.PrintMode.AllPages">
            <summary>
            Print all pages records of the Grid
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.PrintMode.CurrentPage">
            <summary>
            Print current page records of the Grid
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.TextAlign">
            <summary>
            Defines alignments of text.
            <list type="bullet">
            <item>
            <term>Left</term>
            <description>Default. Text is left aligned.</description>
            </item>
            <item>
            <term>Right</term>
            <description>Text is right aligned.</description>
            </item>
            <item>
            <term>Center</term>
            <description>Text is centered.</description>
            </item>
            <item>
            <term>Justify</term>
            <description>Text is justified.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.TextAlign.Left">
            <summary>
            Default. Text is left aligned.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.TextAlign.Right">
            <summary>
            Text is right aligned.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.TextAlign.Center">
            <summary>
            Text is centered.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.TextAlign.Justify">
            <summary>
            Text is justified.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.FreezeDirection">
            <summary>
            Defines direction  of freeze column.
            <list type="bullet">
            <item>
            <term>None</term>
            <description>Column will not freeze.</description>
            </item>
            <item>
            <term>Left</term>
            <description>Freeze the column at left side.</description>
            </item>
            <item>
            <term>Right</term>
            <description>Freeze the column at right side.</description>
            </item>
            <item>
            <term>Fixed</term>
            <description>Freeze the column at current position.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.FreezeDirection.Left">
            <summary>
            Freeze the column at left side.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.FreezeDirection.Right">
            <summary>
            Freeze the column at right side.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.FreezeDirection.Fixed">
            <summary>
            Freeze the column at current position.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.RowDirection">
            <summary>
            Defines data row rendering direction of the grid that helps to view the grid in a compact way which is suitable for small screen.
            <list type="bullet">    
            <item>
            <term>Horizontal</term>
            <description>Display the data rows in Horizontal direction.</description>
            </item>
            <item>
            <term>Vertical</term>
            <description>Display the data rows in Vertical direction..</description>
            </item>    
            </list>
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.RowDirection.Horizontal">
            <summary>
            Default. Display the data rows in Horizontal direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.RowDirection.Vertical">
            <summary>
            Display data rows in Vertical direction.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.FreezeTable">
            <summary>
            Defines direction  of freeze table.
            <list type="bullet">
            <item>
            <term>None</term>
            <description>Column will not freeze.</description>
            </item>
            <item>
            <term>Left</term>
            <description>Freeze the column at left side.</description>
            </item>
            <item>
            <term>Right</term>
            <description>Freeze the column at right side.</description>
            </item>
            <item>
            <term>Left-Right</term>
            <description>Freeze the column at left and right side.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.FreezeTable.None">
            <summary>
            I does not freeze the column.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.FreezeTable.Left">
            <summary>
            Freeze the column at left side.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.FreezeTable.Right">
            <summary>
            Freeze the column at right side.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.FreezeTable.LeftRight">
            <summary>
            Freeze the column at left and right side.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.CommandButtonType">
            <summary>
            Defines the Command Buttons type.
            <list type="bullet">
            <item>
            <term>None</term>
            <description>Default. A command button with no default action. Use this for custom command actions.</description>
            </item>
            <item>
            <term>Edit</term>
            <description>A edit command button that edit current record.</description>
            </item>
            <item>
            <term>Delete</term>
            <description>A delete command button that delete current record.</description>
            </item>
            <item>
            <term>Save</term>
            <description>A save command button that saves the current edited record.</description>
            </item>
            <item>
            <term>Cancel</term>
            <description>A cancel command button that cancels the edit state.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.CommandButtonType.None">
            <summary>
            Default. A command button with no default action. Use this for custom command actions.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.CommandButtonType.Edit">
            <summary>
            A edit command button that edit current record.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.CommandButtonType.Delete">
            <summary>
            A delete command button that delete current record.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.CommandButtonType.Save">
            <summary>
            A save command button that saves the current edited record.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.CommandButtonType.Cancel">
            <summary>
            A cancel command button that cancels the edit state.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.FilterBarMode">
            <summary>
            Specified the Filter bar mode.
            <list type="bullet">
            <item>
            <term>OnEnter</term>
            <description>Initiate filter operation after Enter key is pressed.</description>
            </item>
            <item>
            <term>Immediate</term>
            <description>Initiate filter operation after certain time interval. By default time interval is 1500ms.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.FilterBarMode.OnEnter">
            <summary>
            Initiate filter operation after Enter key is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.FilterBarMode.Immediate">
            <summary>
            Initiate filter operation after certain time interval. By default time interval is 1500ms.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.FilterType">
            <summary>
            Defines types of Filter.
            <list type="bullet">
            <item>
            <term>FilterBar</term>
            <description>Default. Specifies the filter type as filter bar.</description>
            </item>
            <item>
            <term>Menu</term>
            <description>Specifies the filter type as menu.</description>
            </item>
            <item>
            <term>CheckBox</term>
            <description>Specifies the filter type as check box.</description>
            </item>
            <item>
            <term>Excel</term>
            <description>Specifies the filter type as excel.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.FilterType.FilterBar">
            <summary>
            Default. Specifies the filter type as filter bar.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.FilterType.Excel">
            <summary>
            Specifies the filter type as excel.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.FilterType.Menu">
            <summary>
            Specifies the filter type as menu.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.FilterType.CheckBox">
            <summary>
            Specifies the filter type as check box.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.SortDirection">
            <summary>
            Defines the sort direction.
            <list type="bullet">
            <item>
            <term>Ascending</term>
            <description>Default. Sorts records in ascending order.</description>
            </item>
            <item>
            <term>Descending</term>
            <description>Sorts records in descending order.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.SortDirection.Ascending">
            <summary>
            Default. Sorts records in ascending order.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.SortDirection.Descending">
            <summary>
            Sorts records in descending order.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.SortDirection.None">
            <summary>
            Records are not sorted.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.EditMode">
            <summary>
            Defines modes of editing.
            <list type="bullet">
            <item>
            <term>Normal</term>
            <description>Default. Editing is done in an inline form. Edit form is rendered inline as one of the table rows.</description>
            </item>
            <item>
            <term>Dialog</term>
            <description>Editing is done in a Dialog/Pop component.</description>
            </item>
            <item>
            <term>Batch</term>
            <description>Enables cell editing. Multiple cells can be edited, added or deleted and saved.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.EditMode.Normal">
            <summary>
            Default. Editing is done in an inline form. Edit form is rendered inline as one of the table rows.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.EditMode.Dialog">
            <summary>
            Editing is done in a Dialog/Pop component.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.EditMode.Batch">
            <summary>
            Enables cell editing. Multiple cells can be edited, added or deleted and saved.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.NewRowPosition">
            <summary>
            Defines add new row position.
            <list type="bullet">
            <item>
            <term>Top</term>
            <description>Default. Add form is placed at the first row of the grid.</description>
            </item>
            <item>
            <term>Bottom</term>
            <description>Add form is placed at the last row of the grid</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.NewRowPosition.Top">
            <summary>
            Default. Add form is placed at the first row of the grid.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.NewRowPosition.Bottom">
            <summary>
            Add form is placed at the last row of the grid
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.CellSelectionMode">
            <summary>
            Defines mode of cell selection.
            <list type="bullet">
            <item>
            <term>Flow</term>
            <description>Default. Selects the range of cells between start index and end index that also includes the other cells of the selected rows..</description>
            </item>
            <item>
            <term>Box</term>
            <description>Selects the range of cells within the start and end column indexes that includes in between cells of rows within the range</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.CellSelectionMode.Flow">
            <summary>
            Default. All the cells between start and end cell will be selected.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.CellSelectionMode.Box">
            <summary>
            Range of cells that match the index of start and end cell will be selected
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.CellSelectionMode.BoxWithBorder">
            <summary>
            Same as <c>Box</c>, but shows border during selection.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.CheckboxSelectionType">
            <summary>
            Defines type of checkbox selection.
            This helps to reset selection when <c>CheckboxOnly</c> property is enabled.
            <list type="bullet">
            <item>
            <term>Default</term>
            <description>Default. In this mode, user can select multiple rows by clicking rows one by one.</description>
            </item>
            <item>
            <term>ResetOnRowClick</term>
            <description>In ResetOnRowClick mode, on clicking a row it will reset previously selected row and also multiple
             rows can be selected by using CTRL or SHIFT key.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.CheckboxSelectionType.Default">
            <summary>
            Default. Clicking row will not clear selection selection of the row.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.CheckboxSelectionType.ResetOnRowClick">
            <summary>
            Clicking row will reset the row selection.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.SelectionMode">
            <summary>
            Defines modes of Selection.
            <list type="bullet">
            <item>
            <term>Row</term>
            <description>Default. Row selection is enabled</description>
            </item>
            <item>
            <term>Cell</term>
            <description>Cell selection is enabled.</description>
            </item>
            <item>
            <term>Both</term>
            <description>Both Row and Cell selection is enabled.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.SelectionMode.Cell">
            <summary>
            Cell selection is enabled.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.SelectionMode.Row">
            <summary>
            Default. Row selection is enabled.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.SelectionMode.Both">
            <summary>
            Both row and cell selection is enabled.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.SelectionType">
            <summary>
            Defines types of Selection.
            <list type="bullet">
            <item>
            <term>Single</term>
            <description>Default. Allows user to select a row or cell.</description>
            </item>
            <item>
            <term>Multiple</term>
            <description>Allows user to select a multiple rows or cells.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.SelectionType.Single">
            <summary>
            Default. Allows user to select a row or cell.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.SelectionType.Multiple">
            <summary>
            Allows user to select a multiple rows or cells.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.WrapMode">
            <summary>
            Defines the wrap mode.
            <list type="bullet">
            <item>
            <term>Both</term>
            <description>Default. Wraps both header and content.</description>
            </item>
            <item>
            <term>Header</term>
            <description>Wraps header alone.</description>
            </item>
            <item>
            <term>Content</term>
            <description>Wraps content alone.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.WrapMode.Both">
            <summary>
            Default. Wraps both header and content.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.WrapMode.Header">
            <summary>
            Wraps header alone.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.WrapMode.Content">
            <summary>
            Wraps content alone.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.Action">
            <summary>
            Defines Actions of the Grid.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.Action.Paging">
            <summary>
            Specifies paging action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.Action.Refresh">
            <summary>
            Specifies grid refresh.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.Action.Sorting">
            <summary>
            Specifies sorting action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.Action.Selection">
            <summary>
            Specifies selection action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.Action.Filtering">
            <summary>
            Specifies filtering action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.Action.ClearFiltering">
            <summary>
            Specifies clear filtering action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.Action.Searching">
            <summary>
            Specifies searching action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.Action.RowDragAndDrop">
            <summary>
            Specifies row drag and drop action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.Action.Reorder">
            <summary>
            Specifies reorder action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.Action.Grouping">
            <summary>
            Specifies grouping action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.Action.UnGrouping">
            <summary>
            Specifies ungrouping action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.Action.BatchSave">
            <summary>
            Specifies batch save action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.Action.VirtualScroll">
            <summary>
            Specifies virtual scrolling.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.Action.Print">
            <summary>
            Specifies print action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.Action.BeginEdit">
            <summary>
            Specifies edit begin action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.Action.BeforeBeginEdit">
            <summary>
            Specifies before edit begin action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.Action.Save">
            <summary>
            Specifies save action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.Action.Delete">
            <summary>
            Specifies delete action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.Action.Cancel">
            <summary>
            Specifies cancel action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.Action.Add">
            <summary>
            Specifies add action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.Action.FilterBeforeOpen">
            <summary>
            Specifies filter pop opening.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.Action.FilterChoiceRequest">
            <summary>
            Specifies filter choice request action is initiated in checkbox and excel filter.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.Action.FilterAfterOpen">
            <summary>
            Specifies filter pop is opened.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.Action.FilterSearchBegin">
            <summary>
            Specifies search action in checkbox and excel filter search textbox.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.Action.ColumnState">
            <summary>
            Specifies column visibility changed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.Action.ExpandAllComplete">
            <summary>
            Specifies expand all action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.Action.CollapseAllComplete">
            <summary>
            Specifies collapse all action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.Action.BeforeOpenColumnChooser">
            <summary>
            Specifies column chooser is opening.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.AggregateType">
            <summary>
            Defines the aggregate types.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.AggregateType.Sum">
            <summary>
            Performs sum aggregation.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.AggregateType.Average">
            <summary>
            Performs average aggregation.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.AggregateType.Max">
            <summary>
            Performs max aggregation.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.AggregateType.Min">
            <summary>
            Performs min aggregation.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.AggregateType.Count">
            <summary>
            Performs count aggregation.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.AggregateType.TrueCount">
            <summary>
            Performs true count aggregation.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.AggregateType.FalseCount">
            <summary>
            Performs false count aggregation.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.AggregateType.Custom">
            <summary>
            Performs custom aggregation.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.BorderLineStyle">
            <summary>
            Defines border line style.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.BorderLineStyle.Thin">
            <summary>
            Border line is thin.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.BorderLineStyle.Thick">
            <summary>
            Border line is thick.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.CheckState">
            <summary>
            Defines the header checkbox state.
            </summary>
            <exclude/>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.CheckState.None">
            <summary>
            Default.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.CheckState.Check">
            <summary>
            Header is checked
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.CheckState.UnCheck">
            <summary>
            Header is unchecked.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.CheckState.Intermediate">
            <summary>
            Header is in intermediate.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.EditAction">
            <summary>
            Defines the EditActions.
            </summary>
            <exclude/>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.EditAction.None">
            <summary>
            Default
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.EditAction.Edited">
            <summary>
            Holds the edited records.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.EditAction.Deleted">
            <summary>
            Holds the deleted records.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.EditAction.Added">
            <summary>
            Holds the Added records.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.ColumnType">
            <summary>
            Specifies the column type of the <see cref="T:Syncfusion.Blazor.Grids.GridColumn"/>, denoting the type of data it displays. 
            <list type="bullet">
            <item>
            <term>String</term>
            <description>A string type column.</description>
            </item>
            <item>
            <term>Number</term>
            <description>A number type column. Primitive types such as int, int?, floar, double, decimal etc. are consider
            as number type column.</description>
            </item>
            <item>
            <term>Integer</term>
            <description>A integer type column.</description>
            </item>
            <item>
            <term>Double</term>
            <description>A double type column.</description>
            </item>
            <item>
            <term>Long</term>
            <description>A Long type column.</description>
            </item>
            <item>
            <term>Decimal</term>
            <description>A Decimal type column.</description>
            </item>
            <item>
            <term>Boolean</term>
            <description>A boolean type column.</description>
            </item>
            <item>
            <term>Date</term>
            <description>A date type column. Primitive types such as datetime and datetimeoffset are consider
            as date type column.</description>
            </item>
            <item>
            <term>DateTime</term>
            <description>A datetime type column. Primitive types such as datetime and datetimeoffset are consider
            as date type column.</description>
            </item>
            <item>
            <term>CheckBox</term>
            <description>Enables checkbox column for selection purpose. No data operation is assosiated with this column.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.ColumnType.None">
            <summary>
            No column type is specified.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.ColumnType.String">
            <summary>
            A string type column.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.ColumnType.Number">
            <summary>
            A number type column. Primitive types such as int, long, double, and decimal are considered number column types.​
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.ColumnType.Integer">
            <summary>
            An integer type column. Displays integer values.
            </summary>
            <value>
            The value representing the "integer" type column.
            </value>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.ColumnType.Double">
            <summary>
            A double type column. Displays double values.
            </summary>
            <value>
            The value representing the "double" type column.
            </value>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.ColumnType.Long">
            <summary>
            A long type column. Displays long integer values.
            </summary>
            <value>
            The value representing the "long" type column.
            </value>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.ColumnType.Decimal">
            <summary>
            A decimal type column. Displays decimal values.
            </summary>
            <value>
            The value representing the "decimal" type column.
            </value>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.ColumnType.Boolean">
            <summary>
            A boolean type column.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.ColumnType.Date">
            <summary>
            A date type column. Primitive types such as datetime and datetimeoffset are consider
            as date type column.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.ColumnType.DateTime">
            <summary>
            A datetime type column. Primitive types such as datetime and datetimeoffset are consider
            as date type column.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.ColumnType.CheckBox">
            <summary>
            Enables checkbox column for selection purpose. No data operation is assosiated with this column.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.ColumnType.DateOnly">
            <summary>
            Specifies that the grid column is used to display and edit values of the <c>System.DateOnly</c> struct. 
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.ColumnType.TimeOnly">
            <summary>
            Specifies that the grid column is used to display and edit values of the <c>System.TimeOnly</c> struct. 
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.ContentType">
            <summary>
            Defines the content type.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.ContentType.Image">
            <summary>
            Content type is image.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.ContentType.Line">
            <summary>
            Content type is line.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.ContentType.PageNumber">
            <summary>
            Content type is page number.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.ContentType.Text">
            <summary>
            Content type is text.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.EditType">
            <summary>
            Specifies the edit type of the <see cref="T:Syncfusion.Blazor.Grids.GridColumn"/>. It is used to render the specified editor component in the grid edit form to edit the corresponding cell value.
            <list type="bullet">
            <item>
            <term>DefaultEdit</term>
            <description>Default. Text box is used for editing.</description>
            </item>
            <item>
            <term>DropDownEdit</term>
            <description>DropDownList is used for editing.</description>
            </item>
            <item>
            <term>BooleanEdit</term>
            <description>Checkbox is used for editing.</description>
            </item>
            <item>
            <term>DatePickerEdit</term>
            <description>Date picker is used for editing.</description>
            </item>
            <item>
            <term>DateTimePickerEdit</term>
            <description>Datetime picker is used for editing.</description>
            </item>
            <item>
            <term>NumericEdit</term>
            <description>Numeric textbox is used for editing.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.EditType.DefaultEdit">
            <summary>
            Default. Text box is used for editing.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.EditType.DropDownEdit">
            <summary>
            DropDownList is used for editing.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.EditType.BooleanEdit">
            <summary>
            Checkbox is used for editing.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.EditType.DatePickerEdit">
            <summary>
            Date picker is used for editing.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.EditType.DateTimePickerEdit">
            <summary>
            Date time picker is used for editing.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.EditType.NumericEdit">
            <summary>
            Numeric textbox is used for editing.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.EditType.TimePickerEdit">
            <summary>
            <see cref="T:Syncfusion.Blazor.Calendars.SfTimePicker`1"/> component will rendered to edit the corresponding cell value.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.ExcelHorizontalAlign">
            <summary>
            Defines Excel horizontal alignment.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.ExcelHorizontalAlign.Left">
            <summary>
            Horizontal align is left
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.ExcelHorizontalAlign.Right">
            <summary>
            Horizontal align is right
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.ExcelHorizontalAlign.Center">
            <summary>
            Horizontal align is center
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.ExcelHorizontalAlign.Fill">
            <summary>
            Horizontal align is fill
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.ExcelVerticalAlign">
            <summary>
            Defines Excel vertical alignment.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.ExcelVerticalAlign.Bottom">
            <summary>
            Vertical align is bottom
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.ExcelVerticalAlign.Top">
            <summary>
            Vertical align is top
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.ExcelVerticalAlign.Center">
            <summary>
            Vertical align is center
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.ExcelVerticalAlign.Justify">
            <summary>
            Vertical align is justify
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.ExportType">
            <summary>
            Defines Export Type.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.ExportType.AllPages">
            <summary>
            Exports all page of the grid.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.ExportType.CurrentPage">
            <summary>
            Exports only the current page records of the grid.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.PdfDetailRowMode">
            <summary>
            Defines the mode for exporting the detail rows to the PDF file format.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.PdfDetailRowMode.Expand">
            <summary>
            Default. Exports the detail row in an expanded state.
            </summary>
            <value>"Expand"</value>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.PdfDetailRowMode.None">
            <summary>
            Exports only the parent rows, excluding detail rows.
            </summary>
            <remarks>
            This option excludes the exporting of detailed rows, exporting only the parent rows.
            </remarks>
            <value>"None"</value>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.ExcelDetailRowMode">
            <summary>
            Defines the mode for exporting the detail rows to Excel file format
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.ExcelDetailRowMode.Expand">
            <summary>
            Default. Exports the detail row in an expanded state.
            </summary>
            <value>"Expand"</value>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.ExcelDetailRowMode.Collapse">
            <summary>
            Exports the detail rows in a collapsed state.
            </summary>   
            <value>"Collapse"</value>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.ExcelDetailRowMode.None">
            <summary>
            Exports only the parent row, excluding detail rows.
            </summary>
            <remarks>
            This option excludes the export of detailed rows, exporting only the parent rows.
            </remarks>
            <value>"None"</value>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.MultipleExportType">
            <summary>
            Defines Multiple Export Type.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.MultipleExportType.AppendToSheet">
            <summary>
            Append exported data as additional sheet.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.MultipleExportType.NewSheet">
            <summary>
            Append exported data in new sheet.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.PageOrientation">
            <summary>
            Defines the PDF page orientation.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.PageOrientation.Portrait">
            <summary>
            Pdf page is oriented in portrait.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.PageOrientation.Landscape">
            <summary>
            Pdf page is oriented in landscape.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.PdfDashStyle">
            <summary>
            Defines the PDF dash style.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.PdfDashStyle.Solid">
            <summary>
            Specifies the PDF dash style as solid.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.PdfDashStyle.Dash">
            <summary>
            Specifies the PDF dash style as dash.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.PdfDashStyle.Dot">
            <summary>
            Specifies the PDF dash style as dot.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.PdfDashStyle.DashDot">
            <summary>
            Specifies the PDF dash style as dashed dot.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.PdfDashStyle.DashDotDot">
            <summary>
            Specifies the PDF dash style as dashed dot dot.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.PdfHorizontalAlign">
            <summary>
            Defines PDF horizontal alignment.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.PdfHorizontalAlign.Left">
            <summary>
            Horizontal align is left
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.PdfHorizontalAlign.Right">
            <summary>
            Horizontal align is right
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.PdfHorizontalAlign.Center">
            <summary>
            Horizontal align is center
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.PdfHorizontalAlign.Justify">
            <summary>
            Horizontal align is justify.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.PdfPageNumberType">
            <summary>
            Defines the pdf page number type.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.PdfPageNumberType.LowerLatin">
            <summary>
            Defines the pdf page number type as lower latin.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.PdfPageNumberType.LowerRoman">
            <summary>
            Defines the pdf page number type as lower roman.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.PdfPageNumberType.UpperLatin">
            <summary>
            Defines the pdf page number type as upper latin.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.PdfPageNumberType.UpperRoman">
            <summary>
            Defines the pdf page number type as upper roman.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.PdfPageNumberType.Numeric">
            <summary>
            Defines the pdf page number type as numeric.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.PdfPageNumberType.Arabic">
            <summary>
            Defines the pdf page number type as arabic.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.PdfPageSize">
            <summary>
            Defined the PDF page size.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.PdfPageSize.Letter">
            <summary>
            Defined the PDF page size as letter.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.PdfPageSize.Note">
            <summary>
            Defined the PDF page size as note.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.PdfPageSize.Legal">
            <summary>
            Defined the PDF page size as legal.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.PdfPageSize.A0">
            <summary>
            Defined the PDF page size as A0.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.PdfPageSize.A1">
            <summary>
            Defined the PDF page size as A1.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.PdfPageSize.A2">
            <summary>
            Defined the PDF page size as A2.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.PdfPageSize.A3">
            <summary>
            Defined the PDF page size as A3.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.PdfPageSize.A4">
            <summary>
            Defined the PDF page size as A4.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.PdfPageSize.A5">
            <summary>
            Defined the PDF page size as A5.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.PdfPageSize.A6">
            <summary>
            Defined the PDF page size as A6.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.PdfPageSize.A7">
            <summary>
            Defined the PDF page size as A7.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.PdfPageSize.A8">
            <summary>
            Defined the PDF page size as A8.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.PdfPageSize.A9">
            <summary>
            Defined the PDF page size as A9.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.PdfPageSize.B0">
            <summary>
            Defined the PDF page size as B0.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.PdfPageSize.B1">
            <summary>
            Defined the PDF page size as B1.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.PdfPageSize.B2">
            <summary>
            Defined the PDF page size as B2.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.PdfPageSize.B3">
            <summary>
            Defined the PDF page size as B3.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.PdfPageSize.B4">
            <summary>
            Defined the PDF page size as B4.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.PdfPageSize.B5">
            <summary>
            Defined the PDF page size as B5.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.PdfPageSize.Archa">
            <summary>
            Defined the PDF page size as Archa.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.PdfPageSize.Archb">
            <summary>
            Defined the PDF page size as Archb.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.PdfPageSize.Archc">
            <summary>
            Defined the PDF page size as Archc.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.PdfPageSize.Archd">
            <summary>
            Defined the PDF page size as Archd.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.PdfPageSize.Arche">
            <summary>
            Defined the PDF page size as Arche.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.PdfPageSize.Flsa">
            <summary>
            Defined the PDF page size as Flsa.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.PdfPageSize.HalfLetter">
            <summary>
            Defined the PDF page size as HalfLetter.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.PdfPageSize.Letter11x17">
            <summary>
            Defined the PDF page size as Letter11*17.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.PdfPageSize.Ledger">
            <summary>
            Defined the PDF page size as Ledger.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.PdfVerticalAlign">
            <summary>
            Defines PDF vertical alignment.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.PdfVerticalAlign.Top">
            <summary>
            Defines PDF vertical alignment as Top.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.PdfVerticalAlign.Bottom">
            <summary>
            Defines PDF vertical alignment as Bottom.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.PdfVerticalAlign.Middle">
            <summary>
            Defines PDF vertical alignment as Middle.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.ValueType">
            <summary>
            Exports types used by Grid.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.ScrollDirection">
            <summary>
            Defines the scroll direction.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.HierarchyExportMode">
            <summary>
            Defines the hierarchy export mode for the pdf and excel.
            </summary>
            <exclude/>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.ContextMenuTarget.None">
            <summary>
            Default.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.ContextMenuTarget.Header">
            <summary>
            Header is clicked.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.ContextMenuTarget.Content">
            <summary>
            Content is clicked.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.ContextMenuTarget.Pager">
            <summary>
            Pager is clicked.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.ContextMenuTarget.EditForm">
            <summary>
            Edit is clicked.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.PredicateModel`1">
            <summary>
            Defines predicate model class for generating filter criteria.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PredicateModel`1.Field">
            <summary>
            Defines the field name of the filter column.
            </summary>        
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PredicateModel`1.IgnoreAccent">
            <summary>
            If IgnoreAccent is set to true, then filter ignores the diacritic characters or accents while filtering.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PredicateModel`1.MatchCase">
            <summary>
            If match case set to true, then filter records with exact match or else
            filter records with case insensitive(uppercase and lowercase letters treated as same).
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PredicateModel`1.Operator">
            <summary>
            Defines the operator to filter records.
            <seealso cref="T:Syncfusion.Blazor.Operator"/>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PredicateModel`1.Predicate">
            <summary>
            Defines the relationship between one filter query and another by using AND or OR predicate.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PredicateModel`1.Uid">
            <summary>
            Defines the UID of filter column.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PredicateModel`1.Value">
            <summary>
            Defines the value used to filter records.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PredicateModel`1.ActualValue">
            <summary>
            Defines the Collection/Original value used to filter records.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.PredicateModel">
            <summary>
            Defines predicate model class for generating filter criteria.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.ExportRowDataBound`1">
            <summary>
            This model used for Tree grid internal event support for Excel export row data bound.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ExportRowDataBound`1.RowData">
            <summary>
            Defines the grid Row data while processing the records.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ExportRowDataBound`1.OutlineLevel">
            <summary>
            Grouping Outline level.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ExportRowDataBound`1.SheetRow">
            <summary>
            export sheet row.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ExportRowDataBound`1.IsHidden">
            <summary>
            Excel Grouping row property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ExportRowDataBound`1.IsCollapsed">
            <summary>
            Collapse/Expand the Grouping row.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.FilterSettings">
            <summary>
            Defines the filter param class which provides column level filter operator and read method to get data
            from Filter bar template.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.FilterSettings.Operator">
            <summary>
            Change the default filter operator for a column.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.FilterSettings.Type">
            <summary>
            Change the filter type for particular column.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.ValidationRules">
            <summary>
            Defines the column validation rules.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.ActionArgs">
            <summary>
            Internal Action args.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.EmptyRecordTemplateContext">
            <summary>
            Class that defines template context detail of EmptyRecordTemplate.
            <seealso cref="P:Syncfusion.Blazor.Grids.GridTemplates.EmptyRecordTemplate"/>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.EmptyRecordTemplateContext.IsDataLoaded">
            <summary>
            Specifies whether data is loaded in the grid.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.AggregateTemplateContext">
            <summary>
            Class that defines template context detail of FooterTemplate, GroupFooterTemplate and GroupCaptionTemplate.
            <seealso cref="P:Syncfusion.Blazor.Grids.GridAggregateColumn.FooterTemplate"/>
            <seealso cref="P:Syncfusion.Blazor.Grids.GridAggregateColumn.GroupCaptionTemplate"/>
            <seealso cref="P:Syncfusion.Blazor.Grids.GridAggregateColumn.GroupFooterTemplate"/>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.AggregateTemplateContext.Average">
            <summary>
            Gets average aggregate value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.AggregateTemplateContext.Count">
            <summary>
            Gets count aggregate value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.AggregateTemplateContext.Custom">
            <summary>
            Gets custom aggregate value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.AggregateTemplateContext.FalseCount">
            <summary>
            Specifies false count aggregate value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.AggregateTemplateContext.Field">
            <summary>
            Gets the current group field name.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.AggregateTemplateContext.ForeignKey">
            <summary>
            Gets corresponding grouped foreign key value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.AggregateTemplateContext.HeaderText">
            <summary>
            Gets header text of the grouped column.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.AggregateTemplateContext.Key">
            <summary>
            Gets grouped data key value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.AggregateTemplateContext.Max">
            <summary>
            Gets maximum aggregate value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.AggregateTemplateContext.Min">
            <summary>
            Gets minimum aggregate value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.AggregateTemplateContext.Sum">
            <summary>
            Gets sum aggregate value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.AggregateTemplateContext.TrueCount">
            <summary>
            Gets true count aggregate value.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.BeforeBatchAddArgs`1">
            <summary>
            Provides information about an <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.OnBatchAdd"/> event.
            </summary>
            <typeparam name="T">TValue of the grid component.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.BeforeBatchAddArgs`1.Cancel">
            <summary>
            Gets or sets a value indicating whether to prevent the rendering of the batch add form in the grid.
            </summary>
            <value>
            If set to <c>true</c>, the batch add form will not be rendered in the grid. The default value is <c>false</c>
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.BeforeBatchAddArgs`1.DefaultData">
            <summary>
            Gets or sets the value for a newly added row.
            </summary>
            <value>
            The default value is <c>null</c>.
            </value>
            <remarks>
            If a custom default value is provided, it will be displayed in the batch add form when a new row is added.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.BeforeBatchAddArgs`1.PrimaryKey">
            <summary>
            Gets the primary key value of the grid for the columns that have <see cref="P:Syncfusion.Blazor.Grids.GridColumn.IsPrimaryKey"/> property set to true.
            </summary>
            <value>
            A string array that represents the primary key value of the grid.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.BeforeBatchAddArgs`1.Index">
            <summary>
            Gets or sets the index of the row to add a new row in the grid.
            </summary>
            <value>
            An integer representing the index of the newly added row. The default value is 0.
            </value>
            <remarks>
            If the index property is set, a batch add form will be generated in the grid based on the specified index.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.BeforeBatchAddArgs`1.EditContext">
            <summary>
            Gets or sets the data related to the editing process, such as flags indicating which fields have been modified and the current set of validation messages.
            </summary>
            <value>
            An instance of the <see cref="T:Microsoft.AspNetCore.Components.Forms.EditContext"/> class that provides data about the editing process.
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.BeforeBatchDeleteArgs`1">
            <summary>
            Provides information about an <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.OnBatchDelete"/> event.
            </summary>
            <typeparam name="T">TValue of the grid component.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.BeforeBatchDeleteArgs`1.Cancel">
            <summary>
            Gets or sets a value indicating whether to cancel the before batch delete action.
            </summary>
            <value>
            The default value is <c>false</c>. If the Cancel property is set to <c>true</c>, then the before batch delete action will be cancelled.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.BeforeBatchDeleteArgs`1.PrimaryKey">
            <summary>
            Gets the primary key value of the grid for the columns that have <see cref="P:Syncfusion.Blazor.Grids.GridColumn.IsPrimaryKey"/> property set to true.
            </summary>
            <value>
            A string array that represents the primary key value of the grid.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.BeforeBatchDeleteArgs`1.Row">
            <summary>
            Defines the row element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.BeforeBatchDeleteArgs`1.RowData">
            <summary>
            Gets the data of the selected row to perform batch delete action.
            </summary>
            <value>
            The data of the selected row. The default value is null.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.BeforeBatchDeleteArgs`1.RowIndex">
            <summary>
            Gets the row index of the selected record to perform batch delete action.
            </summary>
            <value>
            The row index of the selected record.
            </value>
            <remarks>
            When multiple rows are selected and the delete action is performed, the row index property will contain the index of the last selected row that was deleted.
            </remarks>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.BeforeBatchSaveArgs`1">
            <summary>
            Provides information about an <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.OnBatchSave"/> event.
            </summary>
            <typeparam name="T">TValue of the grid component.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.BeforeBatchSaveArgs`1.BatchChanges">
            <summary>
            Gets the collection of <see cref="T:Syncfusion.Blazor.Grids.BatchChanges`1"/> records when save action is performed in the grid.
            </summary>
            <value>
            The collection of <c>Added</c>, <c>Deleted</c>, and <c>Changed</c> records.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.BeforeBatchSaveArgs`1.Cancel">
            <summary>
            Gets or sets a value indicating whether to cancel the batch save action.
            </summary>
            <value>
            The default value is <c>false</c>. If the Cancel property is set to <c>true</c>, then the batch save action will be cancelled.
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.GridPageChangingEventArgs">
            <summary>
            Provides information about the <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.PageChanging"/> event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridPageChangingEventArgs.CurrentPageSize">
            <summary>
            Gets the number of items displaying on the single page of the pager.
            </summary>
            <value>
            The number of items shown on a single page.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridPageChangingEventArgs.TotalPages">
            <summary>
            Gets the total number of pages calculated using <see cref="P:Syncfusion.Blazor.Navigations.SfPager.TotalItemsCount"/> and <see cref="P:Syncfusion.Blazor.Navigations.SfPager.PageSize"/>.
            </summary>
            <value>
            Total number of pages.
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.GridPageChangedEventArgs">
            <summary>
            Provides information about the <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.PageChanged"/> event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridPageChangedEventArgs.CurrentPageSize">
            <summary>
            Gets the number of items displaying on the single page of the pager.
            </summary>
            <value>
            The number of items shown on a single page.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridPageChangedEventArgs.TotalPages">
            <summary>
            Gets the total number of pages calculated using <see cref="P:Syncfusion.Blazor.Navigations.SfPager.TotalItemsCount"/> and <see cref="P:Syncfusion.Blazor.Navigations.SfPager.PageSize"/>.
            </summary>
            <value>
            Total number of pages.
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.BeforeBatchCancelArgs`1">
            <summary>
            Defines the event argument of  batch cancel action.
            Provides information about an <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.OnBatchCancel"/> event.
            </summary>
            <typeparam name="T">TValue of the grid component.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.BeforeBatchCancelArgs`1.BatchChanges">
            <summary>
            Gets the collection of <see cref="T:Syncfusion.Blazor.Grids.BatchChanges`1"/> records when cancel action is performed in the grid.
            </summary>
            <value>
            The collection of <c>Added</c>, <c>Deleted</c>, and <c>Changed</c> records.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.BeforeBatchCancelArgs`1.Cancel">
            <summary>
            Gets or sets a value indicating whether to cancel the batch cancel action.
            </summary>
            <value>
            The default value is <c>false</c>. If the Cancel property is set to <c>true</c>, then the batch cancel action will be cancelled.
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.BeforeDataBoundArgs`1">
            <summary>
            Provides information about an <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.OnDataBound"/> event.
            </summary>
            <typeparam name="T">TValue of the grid component.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.BeforeDataBoundArgs`1.Cancel">
            <summary>
            Gets or sets a value indicating whether to cancel the data binding process before it occurs in the grid.
            </summary>
            <value>
            The default value is <c>false</c>. If the Cancel property is set to <c>true</c>, then the data will not be bound in the grid.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.BeforeDataBoundArgs`1.Count">
            <summary>
            Gets the total number of data items that are bound to the grid.
            </summary>
            <value>
            The total number of data items that are bound to the grid.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.BeforeDataBoundArgs`1.Result">
            <summary>
            Gets the list of <c>CurrentViewData</c> of the grid.
            </summary>
            <value>
            The list of current view data.
            </value>
            <remarks>
            If the <c>AllowPaging</c> property is set to <c>true</c>, the view will display data based on the <see cref="P:Syncfusion.Blazor.Grids.GridPageSettings.PageSize"/> property. If <c>AllowPaging</c> is set to <c>false</c>, then all the items in the grid will be displayed.
            </remarks>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.BeforeCopyPasteEventArgs">
            <summary>
            Provides information about the <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.BeforeCopyPaste"/> event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.BeforeCopyPasteEventArgs.Action">
            <summary>
            Gets the current action whether it is Copy or Paste.
            </summary>
            <value>
            When copy action is performed then the value will be <c>Copy</c> and when paste action is performed then the value will be <c>Paste</c>. 
            </value>
            <remarks>
            If the <b>Copy</b> action is prevented using <c>Cancel</c> argument, then the corresponding <b>Paste</b> events doesn't trigger, since Paste events will be triggered based on clipboard text.  
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.BeforeCopyPasteEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether to cancel the entire copy, paste action in the grid.
            </summary>
            <value>
            The default value is <c>false</c>. If the Cancel property is set to <c>true</c>, then the <c>Copy</c> and <c>Paste</c> action will be cancelled.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.BeforeCopyPasteEventArgs.ClipboardText">
            <summary>
            Gets or sets the copied content of the selected cells or rows.
            </summary>  
            <value>
            A string that represents the copied content of the selected cells or rows. The default value is <c>null</c>.
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.BeforeCellPasteEventArgs`1">
            <summary>
            Provides information about the <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.BeforeCellPaste"/> event.
            </summary>
            <typeparam name="T">TValue of grid component.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.BeforeCellPasteEventArgs`1.Cancel">
            <summary>
            Gets or sets a value indicating whether to cancel the paste action of the cell in grid.
            </summary>
            <value>
            The default value is <c>false</c>. If the Cancel property is set to <c>true</c>, then cell paste action will be cancelled.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.BeforeCellPasteEventArgs`1.CellValue">
            <summary>
            Gets or sets the value being pasted in the cell. You can modify the value using <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.BeforeCellPaste"/> event.
            </summary>    
            <value>
            The string value being pasted in the cell.  The default value is <c>null</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.BeforeCellPasteEventArgs`1.ColumnName">
            <summary>
            Gets the <see cref="P:Syncfusion.Blazor.Grids.GridColumn.Field"/> name associated with the cell being pasted.
            </summary>
            <value>
            The name of the field associated with the cell being pasted.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.BeforeCellPasteEventArgs`1.ColumnIndex">
            <summary>
            Gets the column index of the cell associated with a paste action.
            </summary>    
            <value>
            An integer value that represents the column index of the cell associated with the paste action.
            </value>  
        </member>
        <member name="P:Syncfusion.Blazor.Grids.BeforeCellPasteEventArgs`1.Data">
            <summary>
            Gets the selected row data of the cell associated with a paste action.
            </summary>
            <value>
            The data of the selected row.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.BeforeCellPasteEventArgs`1.RowIndex">
            <summary>
            Gets the row index of the cell associated with a paste action.
            </summary>
            <value>
            The index of the row associated with the paste action.
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.BeginEditArgs`1">
            <summary>
            Provides information about the <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.OnBeginEdit"/> event.
            </summary>
            <typeparam name="T">TValue of grid component.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.BeginEditArgs`1.Cancel">
            <summary>
            Gets or sets a value indicating whether to cancel the edit action in grid.
            </summary>
            <value>
            The default value is <c>false</c>. If the Cancel property is set to <c>true</c>, then edit action will be cancelled.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.BeginEditArgs`1.PrimaryKey">
            <summary>
            Gets the list of <see cref="P:Syncfusion.Blazor.Grids.GridColumn.IsPrimaryKey"/> <b>true</b> field names of the column.
            </summary>
            <value>
            The list of <see cref="P:Syncfusion.Blazor.Grids.GridColumn.Field"/> names of the column with <c>IsPrimaryKey</c> set to <b>true</b>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.BeginEditArgs`1.PrimaryKeyValue">
            <summary>
            Gets the list of primary key values where <see cref="P:Syncfusion.Blazor.Grids.GridColumn.IsPrimaryKey"/> is <b>true</b>.
            </summary>
            <value>
            The list of primary key values associated with the column where <c>IsPrimaryKey</c> is <b>true</b>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.BeginEditArgs`1.Row">
            <summary>
            Defines the current edited row.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.BeginEditArgs`1.RowData">
            <summary>
            Gets the data of the row that is currently selected for editing.
            </summary>
            <value>
            The data of the currently selected row for editing.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.BeginEditArgs`1.RowIndex">
            <summary>
            Gets or sets the index of the row that is currently selected for editing.
            </summary>
            <value>
            The row index of the currently selected row for editing.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.BeginEditArgs`1.Type">
            <summary>
            Gets the name of the event.
            </summary>
            <value>
            The name of the event, by default the value is <c>Edit</c>.
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.Border">
            <summary>
            Class that defines the cell border details.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Border.Color">
            <summary>
            Defines the color of border.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Border.LineStyle">
            <summary>
            Defines the line style of border.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.CaptionTemplateContext">
            <summary>
            Class that defines template context detail of CaptionTemplate.
            <seealso cref="P:Syncfusion.Blazor.Grids.GridGroupSettings.CaptionTemplate"/>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.CaptionTemplateContext.GroupGuid">
            <summary>
            Gets the group GUID.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.CaptionTemplateContext.Count">
            <summary>
            Gets count value which specified the number of records in the group.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.CaptionTemplateContext.Field">
            <summary>
            Gets the current group field name.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.CaptionTemplateContext.ForeignKeyValue">
            <summary>
            Gets the current foreign key value name.
            </summary> 
        </member>
        <member name="P:Syncfusion.Blazor.Grids.CaptionTemplateContext.ForeignKey">
            <summary>
            Gets corresponding grouped foreign key value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.CaptionTemplateContext.HeaderText">
            <summary>
            Gets header text of the grouped column.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.CaptionTemplateContext.Key">
            <summary>
            Gets grouped data key value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.CaptionTemplateContext.Level">
            <summary>
            Gets depth or level in which the group caption is present.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.CellDeselectEventArgs`1">
            <summary>
            Provides information about the <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.CellDeselecting"/> event, and <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.CellDeselected"/> event.
            </summary>
            <typeparam name="T">TValue of the grid component.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.CellDeselectEventArgs`1.Event">
            <summary>
            Gets the <see cref="T:Microsoft.AspNetCore.Components.Web.MouseEventArgs"/> of the currently deselected/deselecting cell.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.CellDeselectEventArgs`1.Cancel">
            <summary>
            Gets or sets a value indicating whether to cancel the deselection of the cell.
            </summary>
            <value>
            The default value is <c>false</c>. If the Cancel property is set to <c>true</c>, then the deselection of the cell will be cancelled.
            </value>
            <remarks>
            The <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.CellDeselected"/> event should not be cancelled since it is triggered after the completion of a selection.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.CellDeselectEventArgs`1.CellIndex">
            <summary>
            Gets the cell index for the currently deselected/deselecting cell.
            </summary>
            <value>
            The index of the cell that is currently being deselected or has been deselected.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.CellDeselectEventArgs`1.IsCtrlPressed">
            <summary>
            Gets a value indicating whether the CTRL key is currently pressed or not.
            </summary>
            <value>
            <c>true</c> if the CTRL key is pressed otherwise, <c>false</c>.
            The default value is <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.CellDeselectEventArgs`1.IsShiftPressed">
            <summary>
            Gets a value indicating whether the SHIFT key is currently pressed or not.
            </summary>
            <value>
            <c>true</c> if the SHIFT key is pressed otherwise, <c>false</c>.
            The default value is <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.CellDeselectEventArgs`1.RowIndex">
            <summary>
            Gets the index of the row for the currently deselecting or deselected cell.
            </summary>
            <value>
            An integer representing the row index of the current deselecting or deselected cell.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.CellDeselectEventArgs`1.Cells">
            <summary>
            Defines the currently selected/deselected cells.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.CellDeselectEventArgs`1.Data">
            <summary>
            Gets the row data associated with the currently deselecting or deselected cell in a grid.
            </summary>
            <value>
            An object of type <typeparamref name="T"/> representing the data associated with the currently deselecting or deselected row in a grid.
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.CellEditArgs`1">
            <summary>
            Provides information about the <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.OnCellEdit"/> event.
            </summary>
            <typeparam name="T">TValue of the grid component.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.CellEditArgs`1.Cancel">
            <summary>
            Gets or sets a value indicating whether to cancel the edit action of the cell
            </summary>
            <value>
            The default value is <c>false</c>. If the Cancel property is set to <c>true</c>, then the edit action of the cell will be cancelled.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.CellEditArgs`1.Cell">
            <summary>
            Defines the cell object.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.CellEditArgs`1.ColumnName">
            <summary>
            Gets the name of the <see cref="P:Syncfusion.Blazor.Grids.GridColumn.Field"/> of the currently selected cell for editing.
            </summary>
            <value>
            A string representing the field name of the currently selected cell for editing.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.CellEditArgs`1.ColumnObject">
            <summary>
            Gets the <see cref="T:Syncfusion.Blazor.Grids.GridColumn"/> associated with the currently selected cell for editing.
            </summary>
            <value>
            A <c>GridColumn</c> object representing the column associated with the currently selected cell for editing.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.CellEditArgs`1.Column">
            <summary>
            Gets the <see cref="T:Syncfusion.Blazor.Grids.GridColumn"/> associated with the currently selected cell for editing.
            </summary>
            <value>
            A <c>GridColumn</c> object representing the column associated with the currently selected cell for editing.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.CellEditArgs`1.ForeignKeyData">
            <summary>
            Gets the foreign key column data of the data grid.
            </summary>
            <value>
            A dictionary that represents the foreign key column data. Each key represents a foreign key column name and the value represents the associated data as an enumerable object.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.CellEditArgs`1.IsForeignKey">
            <summary>
            Gets the boolean property value indicating whether the edited cell is associated with a foreign key column.
            </summary>
            <value>
            The value <c>true</c> if the edited cell is associated with foreign key column, otherwise it is <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.CellEditArgs`1.PrimaryKey">
            <summary>
            Gets the list of <see cref="P:Syncfusion.Blazor.Grids.GridColumn.IsPrimaryKey"/> <b>true</b> field names of the column.
            </summary>
            <value>
            The list of <see cref="P:Syncfusion.Blazor.Grids.GridColumn.Field"/> names of the column with <c>IsPrimaryKey</c> set to <b>true</b>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.CellEditArgs`1.Row">
            <summary>
            Defines the current row.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.CellEditArgs`1.RowData">
            <summary>
            Gets the original data associated with the currently selected cell for editing.
            </summary>
            <value>
            An object of type <typeparamref name="T"/> representing the data associated with the currently selected cell for editing.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.CellEditArgs`1.Data">
            <summary>
            Gets the changed data associated with the currently selected cell for editing.
            </summary>
            <value>
            An object of type <typeparamref name="T"/> representing the changed data associated with the currently selected cell for editing.
            </value>
            <remarks>
            When editing a cell, you can change the cell value either in the edit form or programmatically in the <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.OnCellSave"/> event handler. 
            The new value is updated in the underlying data source and displayed in the edited cell and in the edit form (if open).
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.CellEditArgs`1.Type">
            <summary>
            Defines the name of the event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.CellEditArgs`1.ValidationRules">
            <summary>
            Gets the <see cref="T:Syncfusion.Blazor.Grids.ValidationRules"/> associated with the currently selected cell for editing.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.CellEditArgs`1.Value">
            <summary>
            Gets the cell value associated with the currently selected cell for editing.
            </summary>        
        </member>
        <member name="P:Syncfusion.Blazor.Grids.CellEditArgs`1.EditContext">
            <summary>
            Gets the data related to the editing process, such as flags indicating which fields have been modified and the current set of validation messages.
            </summary>
            <value>
            An instance of the <see cref="T:Microsoft.AspNetCore.Components.Forms.EditContext"/> class that provides data about the editing process.
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.CellSaveArgs`1">
            <summary> 
            Provides information about the <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.OnCellSave"/> event.
            </summary>
            <typeparam name="T">TValue of the grid component.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.CellSaveArgs`1.Cancel">
            <summary>
            Gets or sets a value indicating whether to cancel the save action of the cell.
            </summary>
            <value>
            The default value is <c>false</c>. If the Cancel property is set to <c>true</c>, then the save action of the cell will be cancelled.
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.CellSavedArgs`1">
            <summary>
            Provides information about the <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.CellSaved"/> event.
            </summary>
            <typeparam name="T">TValue of the grid component.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.CellSavedArgs`1.Cell">
            <summary>
            Defines the cell object.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.CellSavedArgs`1.ColumnName">
            <summary>
            Gets the <see cref="P:Syncfusion.Blazor.Grids.GridColumn.Field"/> name of the currently edited cell.
            </summary>
            <value>
            A string value that represents the field name of the currently edited cell.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.CellSavedArgs`1.ColumnObject">
            <summary>
            Gets the corresponding column associated with the edited cell.
            </summary>
            <value>
            A <see cref="T:Syncfusion.Blazor.Grids.GridColumn"/> associated with the edited cell.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.CellSavedArgs`1.Column">
            <summary>
            Gets the corresponding column associated with the edited cell.
            </summary>
            <value>
            A <see cref="T:Syncfusion.Blazor.Grids.GridColumn"/> associated with the edited cell.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.CellSavedArgs`1.IsForeignKey">
            <summary>
            Gets the boolean property value indicating whether the edited cell is associated with a foreign key column.
            </summary>
            <value>
            The value <c>true</c> if the edited cell is associated with foreign key column, otherwise it is <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.CellSavedArgs`1.PreviousValue">
            <summary>
            Gets or sets the previously edited data of the currently edited cell.
            </summary>
            <value>
            The previous value of the currently edited cell.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.CellSavedArgs`1.RowData">
            <summary>
            Gets the original data associated with the currently edited cell for saving.
            </summary>
            <value>
            An object of type <typeparamref name="T"/> representing the original data associated with the currently edited cell for saving.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.CellSavedArgs`1.Data">
            <summary>
            Gets the changed data associated with the currently edited cell.
            </summary>
            <value>
            An object of type <typeparamref name="T"/> representing the changed data associated with the currently edited cell.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.CellSavedArgs`1.Value">
            <summary>
            Gets or sets the currently edited cell value.
            </summary>
            /// <value>
            The value of the currently edited cell. If the cell is empty or has no value, then the property returns null.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.CellSavedArgs`1.CellInfo">
            <summary>
            Gets or sets the CellDOM object associated with the edited cell.
            </summary>
            <value>
            The CellDOM object that represents the edited cell.
            </value>
            <remarks>
            The CellDOM properties include:
            <list type="bullet">
            <item><description>
            <b>HasChanges:</b> A boolean property that indicates whether the Cell object associated with the edited cell has changed.
            </description></item>
            <item><description>
            <b>ClassList:</b> A property that contains the class list of the edited cell.
            </description></item>
            <item><description>
            <b>Styles:</b> A property that contains the styles of the edited cell.
            </description></item>
            <item><description>
            <b>AttributeList:</b> A property that contains the attribute list of the edited cell.
            </description></item>
            <item><description>
            <b>AddClass:</b> A method to add class names to the class list for the current edited cell.
            </description></item>
            <item><description>
            <b>AddStyle:</b> A method to add styles for the current edited cell.
            </description></item>
            <item><description>
            <b>SetAttribute:</b> A method to set an attribute for the current edited cell.
            </description></item>
            </list>
            </remarks>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.CellSelectEventArgs`1">
            <summary>
            Provides information about the <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.CellSelected"/> event.
            </summary>
            <typeparam name="T">TValue of the grid component.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.CellSelectEventArgs`1.Event">
            <summary>
            Gets the <see cref="T:Microsoft.AspNetCore.Components.Web.MouseEventArgs"/> of the currently selected cell.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.CellSelectEventArgs`1.Cancel">
            <summary>
            Gets or sets a value indicating whether to cancel the save action of the cell.
            </summary>
            <value>
            The default value is <c>false</c>. If the Cancel property is set to <c>true</c>, then the save action of the cell will be cancelled.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.CellSelectEventArgs`1.CellIndex">
            <summary>
            Gets the cell index for the currently selected cell.
            </summary>
            <value>
            The index of the cell that is currently selected.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.CellSelectEventArgs`1.RowIndex">
            <summary>
            Gets the index of the row for the currently selected cell.
            </summary>
            <value>
            An integer representing the row index of the currently selected cell.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.CellSelectEventArgs`1.IsCtrlPressed">
            <summary>
            Gets a value indicating whether the CTRL key is currently pressed or not.
            </summary>
            <value>
            <c>true</c> if the CTRL key is pressed otherwise, <c>false</c>.
            The default value is <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.CellSelectEventArgs`1.IsShiftPressed">
            <summary>
            Gets a value indicating whether the SHIFT key is currently pressed or not.
            </summary>
            <value>
            <c>true</c> if the SHIFT key is pressed otherwise, <c>false</c>.
            The default value is <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.CellSelectEventArgs`1.Cells">
            <summary>
            Defines the currently selected/deselected cells.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.CellSelectEventArgs`1.CurrentCell">
            <summary>
            Defines the element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.CellSelectEventArgs`1.Data">
            <summary>
            Gets the row data associated with the currently selected cell.
            </summary>
            <value>
            The row data associated with the currently selected cell.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.CellSelectEventArgs`1.PreviousRowCell">
            <summary>
            Defines the previously selected cell element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.CellSelectEventArgs`1.PreviousRowCellIndex">
            <summary>
            Defines the previously selected cell index.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.CellSelectEventArgs`1.PreviousCellIndex">
            <summary>
            Gets the previously selected cell index.
            </summary>
            <value>
            An integer value representing the previously selected cell index.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.CellSelectEventArgs`1.CurrentValue">
            <summary>
            Gets the value of the selected cell.
            </summary>
            <value>
            Returns the value of the selected cell.
            </value>
            <remarks>
            If the <c>Field</c> property is not set for a GridColumn, such as a template column or checkbox column, then the corresponding cell value will be returned as null when selected.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.CellSelectEventArgs`1.PreviousValue">
            <summary>
            Gets the value of the previously selected cell.
            </summary>
            <value>
            Returns the previously selected cell value.
            </value>
            <remarks>
            If the <c>Field</c> property is not set for a GridColumn, such as a template column or checkbox column, then the corresponding cell value will be returned as null when selected.
            </remarks>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.CellSelectingEventArgs`1">
            <summary>
            Provides information about an <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.CellSelecting"/> event.
            </summary>
            <typeparam name="T">TValue of the grid component.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.CellSelectingEventArgs`1.Event">
            <summary>
            Gets the <see cref="T:Microsoft.AspNetCore.Components.Web.MouseEventArgs"/> of the currently selecting cell.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.CellSelectingEventArgs`1.Cancel">
            <summary>
            Gets or sets a value indicating whether to cancel the selection of the cell.
            </summary>
            <value>
            The default value is <c>false</c>, If the Cancel property is set to true, then the selection of the cell will be cancelled.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.CellSelectingEventArgs`1.CellIndex">
            <summary>
            Gets the index of the currently selecting cell.
            </summary>
            <value>
            The index of the currently selecting cell.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.CellSelectingEventArgs`1.RowIndex">
            <summary>
            Gets the index of the row associated with the currently selecting cell.
            </summary>
            <value>
            The index of the row associated with the currently selecting cell.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.CellSelectingEventArgs`1.Cells">
            <summary>
            Defines the currently selected/deselected cells.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.CellSelectingEventArgs`1.CurrentCell">
            <summary>
            Defines the element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.CellSelectingEventArgs`1.Data">
            <summary>
            Gets the row data associated with the currently selecting cell.
            </summary>
            <value>
            The row data associated with the currently selecting cell.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.CellSelectingEventArgs`1.IsCtrlPressed">
            <summary>
            Gets a boolean value indicating whether the CTRL key is currently pressed.
            </summary>
            <value>
            The default value is <c>false</c>, If thr CTRL key is pressed then the value is <c>true</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.CellSelectingEventArgs`1.IsShiftPressed">
            <summary>
            Gets a boolean value indicating whether the SHIFT key is currently pressed.
            </summary>
            <value>
            The default value is <c>false</c>, If SHIFT key is pressed then the value is <c>true</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.CellSelectingEventArgs`1.PreviousRowCell">
            <summary>
            Defines the previously selected cell element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.CellSelectingEventArgs`1.PreviousRowCellIndex">
            <summary>
            Defines the previously selected cell index.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.CellSelectingEventArgs`1.PreviousCellIndex">
            <summary>
            Gets the previously selected cell index.
            </summary>
            <value>
            An integer value representing the previously selected cell index.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.CellSelectingEventArgs`1.CurrentValue">
            <summary>
            Gets the value of the cell which is going to be selected.
            </summary>
            <value>
            Returns the value of the cell which is going to be selected.
            </value>
            <remarks>
             If the <c>Field</c> property is not set for a GridColumn, such as a template column or checkbox column, then the corresponding cell value will be returned as null while selecting.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.CellSelectingEventArgs`1.PreviousValue">
            <summary>
            Gets the value of the previously selected cell.
            </summary>
            <value>
            Returns the previously selected cell value.
            </value>
            <remarks>
            If the <c>Field</c> property is not set for a GridColumn, such as a template column or checkbox column, then the corresponding cell value will be returned as null while selecting.
            </remarks>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.ColumnChooserTemplateContext">
            <summary>
            Defines members of the column chooser template context.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ColumnChooserTemplateContext.Columns">
            <summary>
            Gets or sets the columns list. If there is any search criteria applied then the columns which matches the search criteria will be provided.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.ColumnChooserFooterTemplateContext">
            <summary>
            Defines members of the ColumnChooser FooterTemplate context.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ColumnChooserFooterTemplateContext.Columns">
            <summary>
            Gets the list of columns from the data source.
            </summary>
            <value>
            A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:Syncfusion.Blazor.Grids.GridColumn"/> objects representing the columns in the data source.
            </value>
            <remarks>
            This property returns a list of columns used by the data source. If no search criteria have been applied, the list will include all columns in the data source. If search criteria have been applied, only columns that match the criteria will be returned.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ColumnChooserFooterTemplateContext.CancelAsync">
            <summary>
            Gets a function that cancels the column chooser operation and closes the dialog.
            </summary>
            <value>
            A <see cref="T:System.Func`1"/> that returns a <see cref="T:System.Threading.Tasks.Task"/> representing the async operation.
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.ColumnChooserEventArgs">
            <summary>
            Provides information about an <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.BeforeOpenColumnChooser"/> event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ColumnChooserEventArgs.RequestType">
            <summary>
            Gets the current <see cref="T:Syncfusion.Blazor.Grids.Action"/> performed when the column chooser is clicked to open.
            </summary>
            <value>
            The action performed when the column chooser is clicked to open. The default value is <see cref="F:Syncfusion.Blazor.Grids.Action.BeforeOpenColumnChooser"/>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ColumnChooserEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether to cancel the column chooser popup open.
            </summary>
            <value>
            The default value is <c>false</c>, If the Cancel property is set to true, then the column chooser popup open will be cancelled.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ColumnChooserEventArgs.Columns">
            <summary>
            Gets the list of <see cref="T:Syncfusion.Blazor.Grids.GridColumn"/> that is being displayed in the column chooser pop up.
            </summary>
            /// <value>
            The list of columns that is being displayed in the column chooser pop up. The default value is null.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ColumnChooserEventArgs.DialogInstance">
            <summary>
            Gets the instance of the column chooser dialog.
            </summary>
            <value>
            A <see cref="T:Syncfusion.Blazor.Popups.SfDialog"/> representing the instance of the column chooser dialog.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ColumnChooserEventArgs.Element">
            <summary>
            Defines the parent element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ColumnChooserEventArgs.SearchOperator">
            <summary>
            Gets or sets the search operator for the column chooser search request.
            </summary>
            <value>
            The string value representing the search operator. By default, the value is <see cref="F:Syncfusion.Blazor.Operator.StartsWith"/>.
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.ColumnMenuClickEventArgs">
            <summary>
            Provides information about an <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.ColumnMenuItemClicked"/> event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ColumnMenuClickEventArgs.Column">
            <summary>
            Gets the <see cref="T:Syncfusion.Blazor.Grids.GridColumn"/> associated with the column menu pop up that is currently opened.
            </summary>
            <value>
            The current grid column associated with the column menu pop up that is currently opened.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ColumnMenuClickEventArgs.Element">
            <summary>
            Gets the current <see cref="T:Microsoft.AspNetCore.Components.ElementReference"/> target.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ColumnMenuClickEventArgs.Event">
            <summary>
            Gets the <see cref="T:System.EventArgs"/> details associated with the column menu pop up that is currently opened.
            </summary>
            <value>
            This property specifies the name of the event args details associated with the column menu pop up that is currently opened. The default value is <c>columnMenuItemclick</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ColumnMenuClickEventArgs.Item">
            <summary>
            Gets or sets the currently clicked <see cref="T:Syncfusion.Blazor.Navigations.MenuItemModel"/>.
            </summary>
            <value>
            The currently clicked menu item represented by the <see cref="T:Syncfusion.Blazor.Navigations.MenuItemModel"/> type.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ColumnMenuClickEventArgs.Name">
            <summary>
            Gets the event name associated with the column menu pop up that is currently opened.
            </summary>
            <value>
            This property specifies the name of the event associated with the column menu pop up that is currently opened. The default value is <c>columnMenuItemclick</c>.
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.ColumnMenuItemModel">
            <summary>
            Class that defines column menu item model.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ColumnMenuItemModel.IconCss">
            <summary>
            Defines class/multiple classes separated by a space for the menu Item that is used to include an icon.
            Menu Item can include font icon and sprite image.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ColumnMenuItemModel.Id">
            <summary>
            Gets or sets the ID of the menu items.
            </summary>
            <value>
            The ID of the menu items as a string. The default value is an empty string.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ColumnMenuItemModel.Items">
            <summary>
            Specifies the sub menu items that is the array of MenuItem model.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ColumnMenuItemModel.Separator">
            <summary>
            Specifies separator between the menu items. Separator are either horizontal or vertical lines used to group menu items.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ColumnMenuItemModel.Text">
            <summary>
            Specifies text for menu item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ColumnMenuItemModel.Url">
            <summary>
            Specifies URL for menu item that creates the anchor link to navigate to the URL provided.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.ColumnMenuOpenEventArgs">
            <summary>
            Provides information about an <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.OnColumnMenuOpen"/> event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ColumnMenuOpenEventArgs.Cancel">
            <summary> 
            Gets or sets a value indicating whether to prevent the column menu in the grid. 
            </summary>
            <value>
            The default value is <c>false</c>. If the <c>Cancel</c> property is set to <c>true</c>, then the column menu will not be shown.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ColumnMenuOpenEventArgs.Column">
            <summary>
            Gets the <see cref="T:Syncfusion.Blazor.Grids.GridColumn"/> where the column menu is currently open in the grid.
            </summary>
            <value>
            The grid column instance where the column menu is currently open.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ColumnMenuOpenEventArgs.Items">
            <summary>
            Gets or sets the list of <see cref="T:Syncfusion.Blazor.Navigations.MenuItem"/> that are displayed in the column menu.
            </summary>
            <value>
            The list of menu items that are displayed in the column menu.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ColumnMenuOpenEventArgs.Left">
            <summary>
            Gets or sets the left position of the column menu relative to the document or container.
            </summary>
            <value>
            The left position of the column menu relative to the document or container.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ColumnMenuOpenEventArgs.ParentItem">
            <summary>
            Gets the parent <see cref="T:Syncfusion.Blazor.Navigations.MenuItem"/> of the currently clicked sub menu item.
            </summary>
            <value>
            The parent menu item of the currently clicked sub menu item.
            </value>
            <remarks>
            If the currently clicked menu item is a sub menu item, then the <c>ParentItem</c> property will return the parent menu item, otherwise the value will be null.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ColumnMenuOpenEventArgs.Top">
            <summary>
            Gets or sets the top position of the column menu relative to the document or container.
            </summary>
            <value>
            The top position of the column menu relative to the document or container.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ColumnMenuOpenEventArgs.ColumnMenuIndex">
            <summary>
            Gets the column menu index indicating the level of the menu item within the menu hierarchy.
            </summary>
            <value>
            An integer value that represents the column menu index of the menu item.
            </value>
            <remarks>
            The <c>ColumnMenuIndex</c> property indicates the level of submenu items. The navigation index for parent menu items starts from 0.
            This index for top-level menu items starts from 0, and it increases as the menu item becomes a sub-menu item.
            </remarks>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.CommandButtonOptions">
            <summary>
            Defines options for command buttons.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.CommandButtonOptions.Content">
            <summary>
            Defines the text content of the Button element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.CommandButtonOptions.CssClass">
            <summary>
            Defines class/multiple classes separated by a space in the Button element.
            The Button types, styles, and size can be defined.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.CommandButtonOptions.Disabled">
            <summary>
            Specifies a value that indicates whether the Button is disabled or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.CommandButtonOptions.EnableRtl">
            <summary>
            Enable or disable rendering component in right to left direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.CommandButtonOptions.IconCss">
            <summary>
            Defines class/multiple classes separated by a space for the Button that is used to include an icon.
            Buttons can also include font icon and sprite image.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.CommandButtonOptions.IconPosition">
            <summary>
            Positions the icon before/after the text content in the Button.
            The possible values are:
             Left: The icon will be positioned to the left of the text content.
             Right: The icon will be positioned to the right of the text content.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.CommandButtonOptions.IsPrimary">
            <summary>
            Allows the appearance of the Button to be enhanced and visually appealing when set to true.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.CommandButtonOptions.IsToggle">
            <summary>
            Makes the Button toggle, when set to true. When you click it, the state changes from normal to active.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.CommandClickEventArgs`1">
            <summary>
            Provides information about an <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.CommandClicked"/> event.
            </summary>
            <typeparam name="T">TValue of the grid component.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.CommandClickEventArgs`1.Cancel">
            <summary>
            Gets or sets a value indicating whether to cancel the CUD("Create", "Update", and "Delet") actions in grid when command column is clicked.
            </summary>
            <value>
            The default value is <c>false</c>, If the Cancel property is set to true, then the CUD actions will be cancelled.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.CommandClickEventArgs`1.CommandColumn">
            <summary>
            Gets the current <see cref="T:Syncfusion.Blazor.Grids.CommandModel"/> of the command column.
            </summary>
            <value>
            The <see cref="T:Syncfusion.Blazor.Grids.CommandModel"/> representing the current command column.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.CommandClickEventArgs`1.RowData">
            <summary>
            Gets the row data of the current command column.
            </summary>
            <value>
            The row data of type T associated with the current command column.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.CommandClickEventArgs`1.EditedData">
            <summary>
            Gets the modified row data associated with the row being updated using a command column.
            </summary>
            <value>
            An object of type T representing the modified data of the row being updated using a command column.
            </value>
            <remarks>
            This property returns null when the Command Column operation is either edited, deleted, or canceled.
            If the user modifies the data but decides to cancel the operation, the modified data will remain accessible through this property.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.CommandClickEventArgs`1.Target">
            <summary>
            Defines the current target element.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.CommandModel">
            <summary>
            Define options for command buttons.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.CommandModel.ButtonOption">
            <summary>
            Define the button model.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.CommandModel.Title">
            <summary>
            Define the command Button tooltip.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.CommandModel.Type">
            <summary>
            Define the command Button type.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.CommandModel.ID">
            <summary>
            Define the command button ID.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.CommandModel.Uid">
            <summary>
             Defines the command button Uid.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.ContextMenuClickEventArgs`1">
            <summary>
            Provides information about an <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.ContextMenuItemClicked"/> event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ContextMenuClickEventArgs`1.Column">
            <summary>
            Gets the current <see cref="T:Syncfusion.Blazor.Grids.GridColumn"/> where the context menu is opened in the grid.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ContextMenuClickEventArgs`1.Element">
            <summary>
            Gets the instance of the <see cref="T:Syncfusion.Blazor.Navigations.SfContextMenu`1"/> component used to display the context menu.
            </summary>
            <value>
            The <see cref="T:Syncfusion.Blazor.Navigations.SfContextMenu`1"/> instance used to display the context menu.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ContextMenuClickEventArgs`1.Event">
            <summary>
            Gets the details about either a <see cref="T:Microsoft.AspNetCore.Components.Web.MouseEventArgs"/> or <see cref="T:Microsoft.AspNetCore.Components.Web.KeyboardEventArgs"/> event.
            </summary>
            <value>
            The event object. It can be either a mouse event or keyboard event.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ContextMenuClickEventArgs`1.Item">
            <summary>
            Gets or sets the <see cref="T:Syncfusion.Blazor.Navigations.MenuItemModel"/> instance representing the details of the currently clicked context menu item.
            </summary>
            <value>
            The menu item model instance representing the currently clicked context menu item.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ContextMenuClickEventArgs`1.Name">
            <summary>
            Gets the name of the event that occurs when the context menu is opened.
            </summary>
            <value>
            The name of the context menu open event as a string.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ContextMenuClickEventArgs`1.RowInfo">
            <summary>
            Gets the Row information where the context menu is opened in grid. 
            </summary>
            <remarks>
            <list type="bullet">
            <item><description><b>Cell:</b> Cell Dom elements of the current cell.</description></item>
            <item><description><b>CellIndex:</b> The cell index value of the current cell.</description></item>
            <item><description><b>Column:</b> The current target column.</description></item>
            <item><description><b>Row:</b> The current traget Row details.</description></item>
            <item><description><b>RowData:</b> The current target row data.</description></item>
            <item><description><b>RowIndex:</b>The current target row index.</description></item>
            </list>
            </remarks>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.ContextMenuItemModel">
            <summary>
            Defines the context menu item model.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ContextMenuItemModel.Target">
            <summary>
            Define the target to show the menu item.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.ContextMenuOpenEventArgs`1">
            <summary>
            Provides information about an <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.ContextMenuOpen"/> event.
            </summary>
            <typeparam name="T">TValue of the grid component.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ContextMenuOpenEventArgs`1.ContextMenuObj">
            <summary>
            Gets the instance of the <see cref="T:Syncfusion.Blazor.Navigations.SfContextMenu`1"/> component used to display the context menu.
            </summary>
            <value>
            The <see cref="T:Syncfusion.Blazor.Navigations.SfContextMenu`1"/> instance used to display the context menu.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ContextMenuOpenEventArgs`1.ContextMenu">
            <summary>
            Gets the instance of the <see cref="T:Syncfusion.Blazor.Navigations.SfContextMenu`1"/> component used to display the context menu.
            </summary>
            <value>
            The <see cref="T:Syncfusion.Blazor.Navigations.SfContextMenu`1"/> instance used to display the context menu.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ContextMenuOpenEventArgs`1.Cancel">
            <summary>
            Gets or sets a value indicating whether to prevent the context menu from rendering in the grid.
            </summary>
            <value>
            The default value is <c>false</c>. If the <c>Cancel</c> property is set to <c>true</c>, then the context menu will not be rendered.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ContextMenuOpenEventArgs`1.Column">
            <summary>
            Gets the <see cref="T:Syncfusion.Blazor.Grids.GridColumn"/> where the context menu is currently open in the grid.
            </summary>
            <value>
            The grid column instance where the context menu is currently open.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ContextMenuOpenEventArgs`1.Element">
            <summary>
            Gets the <see cref="T:Microsoft.AspNetCore.Components.ElementReference"/> of the current target element where the context menu is opened.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ContextMenuOpenEventArgs`1.Event">
            <summary>
            Gets the details about either a <see cref="T:Microsoft.AspNetCore.Components.Web.MouseEventArgs"/> or <see cref="T:Microsoft.AspNetCore.Components.Web.KeyboardEventArgs"/> event.
            </summary>
            <value>
            The event object. It can be either a mouse event or keyboard event.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ContextMenuOpenEventArgs`1.Items">
            <summary>
            Gets or sets the list of <see cref="T:Syncfusion.Blazor.Navigations.MenuItemModel"/> that are displayed in the context menu.
            </summary>
            <value>
            The list of menu items that are displayed in the context menu.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ContextMenuOpenEventArgs`1.Left">
            <summary>
            Gets the left position of the context menu relative to the document or container.
            </summary>
            <value>
            The left position of the context menu relative to the document or container.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ContextMenuOpenEventArgs`1.Name">
            <summary>
            Gets the name of the event that is raised when the context menu is opened.
            </summary>
            <value>
            The name of the event that is raised when the context menu is opened.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ContextMenuOpenEventArgs`1.ParentItem">
            <summary>
            Gets or sets the parent <see cref="T:Syncfusion.Blazor.Navigations.MenuItemModel"/> of the currently clicked sub menu item.
            </summary>
            <value>
            The parent menu item of the currently clicked sub menu item. For items with no parent items, the value will be null.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ContextMenuOpenEventArgs`1.Target">
            <summary>
            Gets the <see cref="T:Syncfusion.Blazor.Grids.ContextMenuTarget"/> when clicking to open context menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ContextMenuOpenEventArgs`1.RowInfo">
            <summary>
            Gets information about the row that was right-clicked to open the context menu, including the row index, cell index, and row data.
            </summary>
            <value>
            Information about the row that was right-clicked to open the context menu, including the row index, cell index, and row data.
            </value>
            <remarks>
            <list type="bullet">
            <item><description><b>Cell:</b> Cell Dom elements of the current cell.</description></item>
            <item><description><b>CellIndex:</b> The cell index value of the current cell.</description></item>
            <item><description><b>Column:</b> The current target column.</description></item>
            <item><description><b>Row:</b> The current traget Row details.</description></item>
            <item><description><b>RowData:</b> The current target row data.</description></item>
            <item><description><b>RowIndex:</b>The current target row index.</description></item>
            </list>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ContextMenuOpenEventArgs`1.Top">
            <summary>
            Gets the top position of the context menu.
            </summary>
            <value>
            The top position of the context menu.
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.DetailDataBoundEventArgs`1">
            <summary>
            Provides information about an <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.DetailDataBound"/> event.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.DetailDataBoundEventArgs`1.Data">
            <summary>
            Gets the data of the currently selected row.
            </summary>
            <value>
            The data of the currently selected row as a type parameter of the class.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.DetailDataBoundEventArgs`1.DetailElement">
            <summary>
            Defines the details row element.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.DetailsExpandingEventArgs`1">
            <summary>
            Provides information about an <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.DetailsExpanding"/> event.
            </summary>
            <typeparam name="T">TValue of grid component.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.DetailsExpandingEventArgs`1.Cancel">
            <summary>
            Gets or sets a value indicating whether to cancel the expanding action.
            </summary>
            <value>
            The default value is <c>false</c>, If the Cancel property is set to <c>true</c>, then the expanding action. will be cancelled.
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.DetailsExpandedEventArgs`1">
            <summary>
            Provides information about an <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.DetailsExpanded"/> event.
            </summary>
            <typeparam name="T">TValue of grid component.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.DetailsExpandedEventArgs`1.Data">
            <summary>
            Gets the expanded row data.
            </summary>
            <value>
            The expanded row data as a type parameter of the class.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.DetailsExpandedEventArgs`1.RowIndex">
            <summary>
            Gets the row index of the expanded row.
            </summary>
            <value>
            The row index of the expanded row as an integer.
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.DetailsCollapsingEventArgs`1">
            <summary>
            Provides information about an <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.DetailsCollapsing"/> event.
            </summary>
            <typeparam name="T">TValue of grid component.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.DetailsCollapsingEventArgs`1.Cancel">
            <summary>
            Gets or sets a value indicating whether to cancel the collapsing action.
            </summary>
            <value>
            The default value is <c>false</c>, If the Cancel property is set to <c>true</c>, then the collapsing action. will be cancelled.
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.DetailsCollapsedEventArgs`1">
            <summary>
            Provides information about an <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.DetailsCollapsed"/> event.
            </summary>
            <typeparam name="T">TValue of grid component.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.DetailsCollapsedEventArgs`1.Data">
            <summary>
            Gets the collapsed row data.
            </summary>
            <value>
            The collapsed row data as a type parameter of the class.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.DetailsCollapsedEventArgs`1.RowIndex">
            <summary>
            Gets the index of the collapsed row.
            </summary>
            <value>
            The index of the collapsed row as an integer.
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.BeforeAutoFillEventArgs">
            <summary>
            Provides information about the <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.BeforeAutoFill"/> event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.BeforeAutoFillEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether to cancel the autofill action.
            </summary>
            <value>
            The default value is <c>false</c>, If the Cancel property is set to <c>true</c>, then the autofill action. will be cancelled.
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.BeforeAutoFillCellEventArgs`1">
            <summary>
            Provides information about the <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.BeforeAutoFillCell"/> event.
            </summary>
            <typeparam name="T">TValue of grid component.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.BeforeAutoFillCellEventArgs`1.Cancel">
            <summary>
            Gets or sets a value indicating whether to cancel the autofill action for a particular cell. You can cancel and handle auto filling. 
            </summary>
            <value>
            The default value is <c>false</c>, If the Cancel property is set to <c>true</c>, then the autofill action in a particular cell. will be cancelled.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.BeforeAutoFillCellEventArgs`1.RowIndex">
            <summary>    
            Gets the row index of the cell associated with autofill action.
            </summary>
            <value>
            An integer representing the row index associated with the autofill action.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.BeforeAutoFillCellEventArgs`1.ColumnIndex">
            <summary>
            Gets the column index of the cell associated with autofill action.
            </summary>
            <value>
            An integer representing the column index associated with the autofill action.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.BeforeAutoFillCellEventArgs`1.ColumnName">
            <summary>
            Gets the column field name of the cell associated with autofill action.
            </summary>
            <value>
            A string representing the column field name associated with the autofill action.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.BeforeAutoFillCellEventArgs`1.Value">
            <summary>
            Gets or sets the value getting filled in the cell. You can change value using <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.BeforeAutoFillCell"/> event.
            </summary>
            <value>
            Returns the cell value based on column value type. The default value is null. 
            </value>    
        </member>
        <member name="P:Syncfusion.Blazor.Grids.BeforeAutoFillCellEventArgs`1.Data">
            <summary>
            Gets the row data of the cell associated with autofill action.
            </summary>
            <value>
            Row data associated with autofill action.
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.ExcelCell">
            <summary>
            Defines the cell of exported excel.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ExcelCell.ColSpan">
            <summary>
            Defines the column span for the cell.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ExcelCell.Hyperlink">
            <summary>
            Defines the hyperlink of the cell.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ExcelCell.Index">
            <summary>
            Defines the index for the cell.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ExcelCell.RowSpan">
            <summary>
            Defines the row span for the cell.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ExcelCell.Style">
            <summary>
            Defines the style of the cell.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ExcelCell.Value">
            <summary>
            Defines the value of the cell.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.ExcelExportProperties">
            <summary>
            Defines the options for customizing the excel document during export.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ExcelExportProperties.Columns">
            <summary>
            Defines the columns which are to be customized for Export alone.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ExcelExportProperties.DataSource">
            <summary>
            Defines the data source dynamically before exporting.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ExcelExportProperties.ExportType">
            <summary>
            Indicates to export current page or all page.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ExcelExportProperties.ExcelDetailRowMode">
            <summary>
            Gets or sets the mode for exporting detail rows to excel file format.
            </summary>
            <remarks>
            This property determines how detail rows are exported in Excel exporting.
            - When set to "Expand", detail rows are exported in their expanded state.
            - When set to “Collapse” details rows are exported in their collapsed state.
            - When set to "None", only parent rows are exported.
            The default mode is <c>Expand</c>.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ExcelExportProperties.FileName">
            <summary>
            Defines the file name for the exported file.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ExcelExportProperties.Footer">
            <summary>
            Defines the footer content for exported document.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ExcelExportProperties.Header">
            <summary>
            Defines the header content for exported document.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ExcelExportProperties.HierarchyExportMode">
            <summary>
            Defines the hierarchy export mode for the pdf grid.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ExcelExportProperties.IncludeHiddenColumn">
            <summary>
            Indicates whether to show the hidden columns in exported excel.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ExcelExportProperties.IncludeCommandColumn">
            <summary>
            Indicates whether to show/hide the command columns in exported excel.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ExcelExportProperties.IncludeTemplateColumn">
            <summary>
            Indicates whether to show/hide the Template columns in exported excel.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ExcelExportProperties.MultipleExport">
            <summary>
            Exports multiple grid into the excel document.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ExcelExportProperties.Theme">
            <summary>
            Defines the theme for exported data.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ExcelExportProperties.Workbook">
            <summary>
            Defines the additional workbook sheets for export.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ExcelExportProperties.GridSheetIndex">
            <summary>
            Defines the Grid sheet index. Based on index Grid sheet will append.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ExcelExportProperties.IncludeHeaderRow">
            <summary>
            Enable/disable the property to export the Grid column header row.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.ExcelFooter">
            <summary>
            Defines the excel footer option class.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ExcelFooter.FooterRows">
            <summary>
            Defines the number of rows between the grid data and footer.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ExcelFooter.Rows">
            <summary>
            Defines the rows in footer content.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.ExcelHeader">
            <summary>
            Defines the excel header options.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ExcelHeader.HeaderRows">
            <summary>
            Defines the number of rows between the header and grid data.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ExcelHeader.Rows">
            <summary>
            Defines the rows in header content.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.ExcelCaptionTemplateArgs">
            <summary>
            Provides information about an <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.ExcelGroupCaptionTemplateInfo"/> event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ExcelCaptionTemplateArgs.Cell">
            <summary>
            Gets the <see cref="T:Syncfusion.ExcelExport.Cell"/> details of the grid cell.
            </summary>
            <value>
            The details of the grid cell as an instance of <see cref="T:Syncfusion.ExcelExport.Cell"/>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ExcelCaptionTemplateArgs.Column">
            <summary>
            Gets the <see cref="T:Syncfusion.Blazor.Grids.GridColumn"/> object that represents the current cell's grouped column.
            </summary>
            <value>
            A gridcolumn object that represents the current cell's grouped column.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ExcelCaptionTemplateArgs.Style">
            <summary>
            Gets the <see cref="T:Syncfusion.ExcelExport.CellStyle"/> of the current cell.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ExcelCaptionTemplateArgs.Value">
            <summary>
            Gets the value of the current grouped cell.
            </summary>
            <value>
            An object that represents the value of the current grouped cell.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ExcelCaptionTemplateArgs.Count">
            <summary>
            Gets the count of the child data items of the grouped record.
            </summary>
            /// <value>
            An integer value that represents the count of the child data items of the grouped record.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ExcelCaptionTemplateArgs.Field">
            <summary>
            Gets the <see cref="P:Syncfusion.Blazor.Grids.GridColumn.Field"/> name that is currently grouped.
            </summary>
            <value>
            A string that represents the name of the field that is currently grouped.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ExcelCaptionTemplateArgs.ForeignKeyValue">
            <summary>
            Gets the foreign key value of the current grouped record.
            </summary>
            <value>
            A string that represents the foreign key value of the current grouped record.
            If the foreign key column is not grouped, the value of this property is null.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ExcelCaptionTemplateArgs.ForeignKey">
            <summary>
            Gets the grouped key value of the current foreign key column.
            </summary>
            <value>
            A string that represents the grouped key value of the current foreign key column record.
            If the foreign key column is not grouped, the value of this property is null.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ExcelCaptionTemplateArgs.HeaderText">
            <summary>
            Gets the <see cref="P:Syncfusion.Blazor.Grids.GridColumn.HeaderText"/> grouped column.
            </summary>
            <value>
            A string that represents the header text of the current grouped column.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ExcelCaptionTemplateArgs.Key">
            <summary>
            Gets the key value of the current grouped record.
            </summary>
            <value>
            A string that represents the key value of the current grouped record.
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.ExcelAggregateEventArgs">
            <summary>
            Provides information about an <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.ExcelAggregateTemplateInfo"/> event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ExcelAggregateEventArgs.Cell">
            <summary>
            Gets the <see cref="T:Syncfusion.ExcelExport.Cell"/> data.
            </summary>
            <value>
            A cell object that represents the cell data.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ExcelAggregateEventArgs.Column">
            <summary>
            Gets the aggregate column of the current cell.
            </summary>
            <value>
            A <see cref="T:Syncfusion.Blazor.Grids.GridAggregateColumn"/> object that represents the aggregate column of the current cell.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ExcelAggregateEventArgs.Style">
            <summary>
            Gets the cell style of the current aggregate cell.
            </summary>
            <value>
            A <see cref="T:Syncfusion.ExcelExport.CellStyle"/> object that represents the style of the current aggregate cell.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ExcelAggregateEventArgs.Value">
            <summary>
            Gets the value of the current aggregate cell.
            </summary>
            <value>
            An object that represents the value of the current aggregate cell.
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.ExcelQueryCellInfoEventArgs`1">
            <summary>
            Provides information about an <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.ExcelQueryCellInfoEvent"/> event.
            </summary>
            <typeparam name="T">TValue of grid component.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ExcelQueryCellInfoEventArgs`1.Data">
            <summary>
            Gets the row data associated with the cell.
            </summary>
            <value>
            The data object associated with the current cell.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ExcelQueryCellInfoEventArgs`1.ColSpan">
            <summary>
            Gets the column span of the current cell.
            </summary>
            <value>
            An integer value that represents the number of columns spanned by the current cell.
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.ExcelHeaderQueryCellInfoEventArgs">
            <summary>
            Provides information about an <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.ExcelHeaderQueryCellInfoEvent"/> event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ExcelHeaderQueryCellInfoEventArgs.Cell">
            <summary>
            Gets or sets the cell details of the grid.
            </summary>
            <value>
            The cell object that represents the cell details, which contains the following properties:
            <list type="bullet">
            <item><description><b>CellStyle</b>: The <see cref="T:Syncfusion.ExcelExport.CellStyle"/> of the cell.</description></item>
            <item><description><b>Value</b>: The value of the cell.</description></item>
            <item><description><b>ColSpan</b>: The number of columns that the cell spans.</description></item>
            <item><description><b>Index</b>: The index of the cell.</description></item>
            </list>
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ExcelHeaderQueryCellInfoEventArgs.Column">
            <summary>
            Gets the <see cref="T:Syncfusion.Blazor.Grids.GridColumn"/> object that represents the column of the current cell.
            </summary>
            <value>
            The grid column that represents the column of the current cell.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ExcelHeaderQueryCellInfoEventArgs.Style">
            <summary>
            Gets or sets the <see cref="T:Syncfusion.ExcelExport.CellStyle"/> object that represents the style of the current cell.
            </summary>
            <value>
            The cell styles of the current cell.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ExcelHeaderQueryCellInfoEventArgs.Colspan">
            <summary>
            Gets the column span of the current cell.
            </summary>
            <value>
            An integer value that represents the number of columns spanned by the current cell.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ExcelHeaderQueryCellInfoEventArgs.Value">
            <summary>
            Gets or sets the value of the current cell.
            </summary>
            <value>
            An object that represents the value of the current cell.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ExcelHeaderQueryCellInfoEventArgs.RowIndex">
            <summary>
            Gets the row index of the current cell in the Excel Grid column.
            </summary>
            <value>
            An integer value that represents the row index of the current cell.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ExcelHeaderQueryCellInfoEventArgs.ColumnIndex">
            <summary>
            Gets the column index of the current cell in the Excel Grid column.
            </summary>
            <value>
            An integer value that represents the column index of the current cell.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfDetailTemplateEventArgs`1.ParentRow">
            <summary>
            Gets details about the parent row.
            </summary>
            <value>
            This property contains information about the parent row index, data, and its corresponding columns.
            </value>
            <remarks>
            Utilizing parent row details, you can customize the detail row.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfDetailTemplateEventArgs`1.RowInfo">
            <summary>
            Gets or sets the value for the detail template.
            </summary>
            <value>
            This property contains information about detail content, such as images, text, hyperlinks, or grids.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfDetailTemplateRowSettings.ColumnCount">
            <summary>
            Gets or sets the total number of columns in the detail rows.
            </summary>
            <value>
            The default value could be null.
            </value>
            <remarks>
            If the column count property is not specified, it will be determined based on the <c>Headers</c> and <c>Rows</c> of the first row's cell count. If the column count is less than the cell count, it will be considered as the row's cell count instead of the column count.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfDetailTemplateRowSettings.Image">
            <summary>
            Gets or sets the image details of the current cell.
            </summary>
            <value>
            An <see cref="T:Syncfusion.PdfExport.PdfImage"/> object represents image details such as ImageStream, width, and height etc.., You can customize and export image using this <c>Image</c> property.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfDetailTemplateRowSettings.Headers">
            <summary>
            Gets or sets the PdfGrid header content of the detail row which includes stacked headers too.
            </summary>
            <value>
            A collection of <see cref="T:Syncfusion.Blazor.Grids.PdfDetailTemplateRow"/> objects representing header content.
            </value>
            <remarks>
            This property is utilized to render the hierarchical grid structure, which includes headers.
            It can render multi-level stacked headers if the detail grid has them; otherwise, there is no need to define value for this property.
            </remarks>        
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfDetailTemplateRowSettings.Rows">
            <summary>
            Gets or sets the collection of PdfGrid content rows for the corresponding detail row.
            </summary>
            <value>
            A list of <c>PdfDetailTemplateRow</c> objects representing content for the detail row.
            </value>
            <remarks>
            This property is utilized to render the hierarchical grid structure; otherwise, there is no need to define value for this property.
            </remarks>   
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfDetailTemplateRow.Cells">
            <summary>
            Represents a list of cells within the header or content rows of a detail row in the PDF document.
            </summary>
            <value>
            A list of <see cref="T:Syncfusion.Blazor.Grids.PdfDetailTemplateCell"/> objects representing cells in the header or content rows of detail rows in the PDF document.
            </value>
            <remarks>
            These cells can contain various types of values, including text, images, hyperlinks, etc.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfDetailTemplateRow.ChildRowInfo">
            <summary>
            Gets or sets the nested level information of detail row, when parent row has nested level hierarchical structure.
            </summary>
            <value>
            An instance of <see cref="T:Syncfusion.Blazor.Grids.PdfDetailTemplateRowSettings"/> containing nested level values.    
            </value>
            <remarks>
            Use this property if a complex level hierarchy structure needs to be rendered; otherwise, it is not needed.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfDetailTemplateCell.Style">
            <summary>
            Gets or sets the style of the PDF cell.
            </summary>
            <value>
            The <see cref="T:Syncfusion.Blazor.Grids.PdfThemeStyle"/> object associated with the theme style for the current cell. Use the <c>Style</c> property to customize the cell's appearance.
            </value>
            <remarks>
            By default, it applies the parent grid header style for <c>Headers</c> and content styles for <c>Rows</c>.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfDetailTemplateCell.Image">
            <summary>
            Gets or sets the image details of the current cell.
            </summary>
            <value>
            An <see cref="T:Syncfusion.PdfExport.PdfImage"/> object represents image details such as ImageStream, width, and height etc.., You can customize and export image using this <c>Image</c> property.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ParentRowInfo`1.Data">
            <summary>
            Gets the row data associated with the parent row.
            </summary>
            <value>
            A <typeparamref name="T"/> instance representing the row data associated with the parent row. This data facilitates the establishment of a parent-child relationship.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ParentRowInfo`1.Index">
            <summary>
            Gets the row index of the parent row.
            </summary>
            <value>
            An index representing the row index of the parent row.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ParentRowInfo`1.Columns">
            <summary>
            Gets the columns of the parent grid.
            </summary>
            <value>
            A list of <see cref="T:Syncfusion.Blazor.Grids.GridColumn"/> objects representing the columns of the parent grid.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.DetailTemplateSettings.Hyperlink">
            <summary>
            Gets or sets the hyperlink associated with the detail cell.
            </summary>
            <value>
            A <see cref="T:Syncfusion.Blazor.Grids.Hyperlink"/> object representing the cell's hyperlink. During exporting the corresponding cell value is rendered with hyperlink.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.DetailTemplateSettings.Text">
            <summary>
            Gets or sets the text content of the detail cell.
            </summary>
            <value>
            The text representing the content of the cell. Here you can specify the value you want to display on the detail cell while exporting.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.DetailTemplateRow.Index">
            <summary>
            Gets or sets the index of the header or content row.
            </summary>
            <value>
            The default value is null. Represents the index of the row that will be exported in the detail row.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.DetailTemplateCell.Hyperlink">
            <summary>
            Gets or sets the hyperlink associated with the current cell.
            </summary>
            <value>
            A <see cref="T:Syncfusion.Blazor.Grids.Hyperlink"/> object representing the cell's hyperlink. During exporting the corresponding cell value is rendered with hyperlink.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.DetailTemplateCell.CellValue">
            <summary>
            Gets or sets the text content of the current cell.
            </summary>
            <value>
            Represents content of the cell. You can specify values such as string, boolean, date, or any desired content to be displayed in the current cell.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.DetailTemplateCell.Index">
            <summary>
            Gets or sets the index for the cell.
            </summary>
            <value>
            Represents the index of the current cell, determining its location in the row.        
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.DetailTemplateCell.ColumnSpan">
            <summary>
            Gets or sets the column span for the cell.
            </summary>
            <value>
            The column span representing the number of columns spanned by the cell.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.DetailTemplateCell.RowSpan">
            <summary>
            Gets or sets the row span for the cell.
            </summary>
            <value>
            The row span representing the number of rows spanned by the cell.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ExcelDetailTemplateEventArgs`1.ParentRow">
            <summary>
            Gets details about the parent row.
            </summary>
            <value>
            This property contains information about the row index, data, and its corresponding columns
            </value>
            <remarks>
            Utilizing parent row details, you can customize the detail row.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ExcelDetailTemplateEventArgs`1.RowInfo">
            <summary>
            Gets or sets the values for the detail template.
            </summary>
            <value>
            This property contains information about detail content, such as images, text, hyperlinks, or grids.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ExcelDetailTemplateRowSettings.Image">
            <summary>
            Gets or sets the image details of the detail cell.
            </summary>
            <value>
            An <see cref="T:Syncfusion.ExcelExport.Image"/> object represents the image details such as image string, width, and height. You can customize and export image in the corresponding cell.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ExcelDetailTemplateRowSettings.Headers">
            <summary>
            Gets or sets the Excel header content of the detail row which includes stacked headers too.
            </summary>
            <value>
            A collection of <see cref="T:Syncfusion.Blazor.Grids.ExcelDetailTemplateRow"/> objects representing the header content.
            </value>
            <remarks>
            This property is utilized to render the hierarchical grid structure, which includes headers.
            It can render multi-level stacked headers  if the detail grid has them; otherwise, there is no need to define value for this property.
            </remarks>               
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ExcelDetailTemplateRowSettings.Rows">
            <summary>
            Gets or sets the collection of Excel content rows for the corresponding detail row.
            </summary>
            <value>
            A list of <see cref="T:Syncfusion.Blazor.Grids.ExcelDetailTemplateRow"/> objects representing the content for the detail row.
            </value>
            <remarks>
            This property is utilized to render the hierarchical grid structure; otherwise, there is no need to define value for this property.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ExcelDetailTemplateRow.Cells">
             <summary>
             Represents a list of cells within the header or content rows of a detail row in the Excel document.
            </summary>
             <value>
             A list of <see cref="T:Syncfusion.Blazor.Grids.ExcelDetailTemplateCell"/> objects representing cells in the header or content rows of detail rows in the Excel document.
             </value>
             <remarks>
             These cells can contain various types of values, including text, images, hyperlinks, etc.
             </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ExcelDetailTemplateRow.Grouping">
            <summary>
            Gets or sets the group of rows to expand and collapse.
            </summary>
            <value>
            A grouping representing groups of detail rows to be expanded or collapsed. You can customize the grouping options for content rows of detail rows in the Excel document.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ExcelDetailTemplateRow.ChildRowInfo">
            <summary>
            Gets or sets the nested level information of detail row, when parent row has nested level hierarchical structure.
            </summary>
            <value>
            An instance of <see cref="T:Syncfusion.Blazor.Grids.ExcelDetailTemplateRowSettings"/> containing nested level values.        
            </value>
            <remarks>
            Use this property if a complex level hierarchy structure needs to be rendered; otherwise, it is not needed.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ExcelDetailTemplateCell.Style">
            <summary>
            Gets or sets the style of the Excel row cell.
            </summary>
            <value>
            The <see cref="T:Syncfusion.Blazor.Grids.ExcelStyle"/> object associated with the theme style for the current cell. Use the <c>Style</c> property to customize the cell's appearance.
            </value>
            <remarks>
            By default, it applies the header style for <c>Headers</c> and content styles for <c>Rows</c>.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ExcelDetailTemplateCell.Image">
            <summary>
            Gets or sets the image details of the detail cell.
            </summary>
            <value>
            An <see cref="T:Syncfusion.ExcelExport.Image"/> object represents the image details such as image string, width, and height. You can customize and export image in the corresponding cell.
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.PdfCaptionTemplateArgs">
            <summary>
            Provides information about an <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.PdfGroupCaptionTemplateInfo"/> event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfCaptionTemplateArgs.Cell">
            <summary>
            Gets the <see cref="T:Syncfusion.PdfExport.PdfGridCell"/> object that represents the current cell.
            </summary>
            <value>
            A <c>PdfGridCell</c> object that represents the current cell.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfCaptionTemplateArgs.Column">
            <summary>
            Gets the <see cref="T:Syncfusion.Blazor.Grids.GridColumn"/> object that represents the current cell's grouped column.
            </summary>
            <value>
            A gridcolumn object that represents the current cell's grouped column.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfCaptionTemplateArgs.Style">
            <summary>
            Gets the <see cref="T:Syncfusion.PdfExport.PdfGridCellStyle"/> object that represents the style of the current cell.
            </summary>
            <value>
            A <c>PdfGridCellStyle</c> object that represents the style of the current cell.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfCaptionTemplateArgs.Value">
            <summary>
            Gets the value of the current grouped cell.
            </summary>
            <value>
            An object that represents the value of the current grouped cell.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfCaptionTemplateArgs.Count">
            <summary>
            Gets the count of the child data items of the grouped record.
            </summary>
            /// <value>
            An integer value that represents the count of the child data items of the grouped record.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfCaptionTemplateArgs.Field">
            <summary>
            Gets the <see cref="P:Syncfusion.Blazor.Grids.GridColumn.Field"/> name that is currently grouped.
            </summary>
            <value>
            A string that represents the name of the field that is currently grouped.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfCaptionTemplateArgs.ForeignKeyValue">
            <summary>
            Gets the foreign key value of the current grouped record.
            </summary>
            <value>
            A string that represents the foreign key value of the current grouped record.
            If the foreign key column is not grouped, the value of this property is null.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfCaptionTemplateArgs.ForeignKey">
            <summary>
            Gets the grouped key value of the current foreign key column.
            </summary>
            <value>
            A string that represents the grouped key value of the current foreign key column record.
            If the foreign key column is not grouped, the value of this property is null.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfCaptionTemplateArgs.HeaderText">
            <summary>
            Gets the <see cref="P:Syncfusion.Blazor.Grids.GridColumn.HeaderText"/> grouped column.
            </summary>
            <value>
            A string that represents the header text of the current grouped column.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfCaptionTemplateArgs.Key">
            <summary>
            Gets the key value of the current grouped record.
            </summary>
            <value>
            A string that represents the key value of the current grouped record.
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.PdfAggregateEventArgs">
            <summary>
            Provides information about an <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.PdfAggregateTemplateInfo"/> event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfAggregateEventArgs.Cell">
            <summary>
            Gets the <see cref="T:Syncfusion.PdfExport.PdfGridCell"/> object that represents the current cell.
            </summary>
            <value>
            A <c>PdfGridCell</c> object that represents the current cell.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfAggregateEventArgs.Column">
            <summary>
            Gets the aggregate column of the current cell.
            </summary>
            <value>
            A <see cref="T:Syncfusion.Blazor.Grids.GridAggregateColumn"/> object that represents the aggregate column of the current cell.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfAggregateEventArgs.Style">
            <summary>
            Gets the <see cref="T:Syncfusion.PdfExport.PdfGridCellStyle"/> object that represents the style of the current cell.
            </summary>
            <value>
            A <c>PdfGridCellStyle</c> object that represents the style of the current cell.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfAggregateEventArgs.Value">
            <summary>
            Gets the value of the current aggregate cell.
            </summary>
            <value>
            An object that represents the value of the current aggregate cell.
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.ExcelRow">
            <summary>
            Defines excel export row of grid.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ExcelRow.Cells">
            <summary>
            Defines the cells in a row.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ExcelRow.Index">
            <summary>
            Defines the index for cells.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.ExcelStyle">
            <summary>
            Defines option for styling excel cell/row.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ExcelStyle.BackColor">
            <summary>
            Defines the background color for cell style.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ExcelStyle.Bold">
            <summary>
            Defines the bold style for fonts.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ExcelStyle.Borders">
            <summary>
            Defines the borders for cell style.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ExcelStyle.FontColor">
            <summary>
            Defines the color of font.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ExcelStyle.FontName">
            <summary>
            Defines the name of font.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ExcelStyle.FontSize">
            <summary>
            Defines the size of font.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ExcelStyle.HAlign">
            <summary>
            Defines the horizontal alignment for cell style.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ExcelStyle.Indent">
            <summary>
            Defines the indent for cell style.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ExcelStyle.Italic">
            <summary>
            Defines the italic style for fonts.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ExcelStyle.NumberFormat">
            <summary>
            Defines the format of the cell.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ExcelStyle.Type">
            <summary>
            Defines the type of the cell.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ExcelStyle.Underline">
            <summary>
            Defines the underline style for fonts.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ExcelStyle.VAlign">
            <summary>
            Defines the vertical alignment for cell style.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ExcelStyle.WrapText">
            <summary>
            Defines the wrapText for cell style.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.ExcelTheme">
            <summary>
            Defines options for customizing theme during excel export.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ExcelTheme.Caption">
            <summary>
            Defines the theme style of caption content.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ExcelTheme.Header">
            <summary>
            Defines the style of header content.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ExcelTheme.Record">
            <summary>
            Defines the theme style of record content.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.FailureEventArgs">
            <summary>
            Provides information about an <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.OnActionFailure"/> event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.FailureEventArgs.Error">
            <summary>
            Gets the error information associated with an action.
            </summary>
            <value>
            An Exception object that provides details about the error that occurred during an action.
            </value>
            <remarks>
            The Error property is typically used in error-handling scenarios to retrieve information about an error that occurred during the execution of an operation or task.
            When an exception occurs, the .NET runtime automatically creates an Exception object to encapsulate information about the error, such as the error message, 
            the type of exception, and the stack trace. 
            You can use the Error property to retrieve this Exception object and access its properties and methods to obtain more detailed information about the error.
            </remarks>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.FilterUI">
            <summary>
            Defines the filter UI option that can be used to get filter menu details.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.FilterUI.Field">
            <summary>
            Defines the field.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.FilterUI.FirstOperator">
            <summary>
            Defines the first operator for excel filter.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.FilterUI.Operator">
            <summary>
            Defines the Operator.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.FilterUI.SecondOperator">
            <summary>
            Defines the second Operator for excel filter.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.HeaderCellInfoEventArgs">
            <summary>
            Provides information about the <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.HeaderCellInfo"/> event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.HeaderCellInfoEventArgs.Cell">
            <summary>
            Gets or sets the CellDOM object associated with the header cell.
            </summary>
            <value>
            The CellDOM object that represents the header cell.
            </value>
            <remarks>
            The CellDom properties include:
            <list type="bullet">
            <item><description>
            <b>HasChanges:</b> A boolean property that indicates whether the Cell object associated with the header cell has changed.
            </description></item>
            <item><description>
            <b>ClassList:</b> A property that contains the class list of the header cell.
            </description></item>
            <item><description>
            <b>Styles:</b> A property that contains the styles of the header cell.
            </description></item>
            <item><description>
            <b>AttributeList:</b> A property that contains the attribute list of the header cell.
            </description></item>
            <item><description>
            <b>AddClass:</b> A method to add class names to the class list for the current header cell.
            </description></item>
            <item><description>
            <b>AddStyle:</b> A method to add styles for the current header cell.
            </description></item>
            <item><description>
            <b>SetAttribute:</b> A method to set an attribute for the current header cell.
            </description></item>
            </list>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.HeaderCellInfoEventArgs.Column">
            <summary>
            Gets the corresponding column associated with the header cell.
            </summary>
            <value>
            A <see cref="T:Syncfusion.Blazor.Grids.GridColumn"/> associated with the header cell.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.HeaderCellInfoEventArgs.Node">
            <summary>
            Defines the cell element.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.Hyperlink">
            <summary>
            Defines hyper link options for exporting.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Hyperlink.DisplayText">
            <summary>
            Defines the display text for hyperlink.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Hyperlink.Target">
            <summary>
            Defines the Url for hyperlink.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.MultipleExport">
            <summary>
            Defines multi-export options.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.MultipleExport.BlankRows">
            <summary>
            Defines the number of blank rows between the multiple grid data.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.MultipleExport.Type">
            <summary>
            Indicates whether to append the multiple grid in same sheet or different sheet.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.PdfBorder">
            <summary>
            Defines pdf cell border options.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfBorder.Color">
            <summary>
            Defines the border color.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfBorder.DashStyle">
            <summary>
            Defines the border dash style.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfBorder.LineStyle">
            <summary>
            Defines the line style of border.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfBorder.Width">
            <summary>
            Defines the border width.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.PdfContentStyle">
            <summary>
            Defines pdf cell style options.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfContentStyle.DashStyle">
            <summary>
            Defines the dash style.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfContentStyle.FontSize">
            <summary>
            Defines the font size.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfContentStyle.HAlign">
            <summary>
            Defines the horizontal alignment.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfContentStyle.PenColor">
            <summary>
            Defines the pen color.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfContentStyle.PenSize">
            <summary>
            Defines the pen size.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfContentStyle.TextBrushColor">
            <summary>
            Defines the text brush color.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfContentStyle.TextPenColor">
            <summary>
            Defines the text pen color.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfContentStyle.VAlign">
            <summary>
            Defines the vertical alignment.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.PdfExportProperties">
            <summary>
            Defines pdf export customization options.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfExportProperties.AllowHorizontalOverflow">
            <summary>
            Defines the overflow of columns for the pdf grid.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfExportProperties.Columns">
            <summary>
            Defines the columns which are to be customized for Export alone.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfExportProperties.DataSource">
            <summary>
            Defines the data source dynamically before exporting.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfExportProperties.ExportType">
            <summary>
            Indicates to export current page or all page.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfExportProperties.PdfDetailRowMode">
            <summary>
            Gets or sets the mode for exporting detail rows to the PDF file format.
            </summary>
            <remarks>
            This property determines how detail rows are exported in PDF format:
            - When set to "Expand", detail rows are exported in their expanded state.
            - When set to "None", only parent rows are exported.
            The default mode is <c>Expand</c>.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfExportProperties.FileName">
            <summary>
            Defines the file name for the exported file.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfExportProperties.IsRepeatHeader">
            <summary>
            Enable/disable the PDF header repeats every page.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfExportProperties.IncludeCommandColumn">
            <summary>
            Indicates whether to show/hide the command columns in exported excel.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfExportProperties.IncludeTemplateColumn">
            <summary>
            Indicates whether to show/hide the Template columns in exported excel.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfExportProperties.Footer">
            <summary>
            Defines the Pdf footer.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfExportProperties.Header">
            <summary>
            Defines the Pdf header.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfExportProperties.IsThemeEnabled">
            <summary>
            Enable/Disable the PDF style. If increasing the performance while using large records then disable this property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfExportProperties.HierarchyExportMode">
            <summary>
            Defines the hierarchy export mode for the pdf grid.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfExportProperties.IncludeHiddenColumn">
            <summary>
            Indicates whether to show the hidden columns in exported Pdf.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfExportProperties.PageOrientation">
            <summary>
            Defines the Pdf orientation.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfExportProperties.PageSize">
            <summary>
            Defines the Pdf page size.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfExportProperties.Theme">
            <summary>
            Defines the theme for exported data.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfExportProperties.DisableAutoFitWidth">
            <summary>
            Defines the Grid's Column width to Pdf Column width. This can be also enables AllowHorizontalOverflow API internally.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfExportProperties.IncludeHeaderRow">
            <summary>
            Enable/disable the property to export the Grid column header row.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfExportProperties.BeginCellLayout">
            <summary>
            Gets or sets the value which is going to apply/customize the PDF Grid cell graphics. This event is raised when laying out a cell on a page.
            <example>
            <code><![CDATA[
            <SfGrid DataSource="@Orders" @ref="DefaultGrid" Toolbar="@(new List<string>() { "PdfExport" })" AllowPdfExport="true" >
             <GridEvents OnToolbarClick="ToolbarClickHandler" TValue="Order"></GridEvents>
              ........
            </SfGrid>
            @code{
             public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
             {
               if (args.Item.Id == "Grid_pdfexport")  //Id is combination of Grid's ID and itemname
               {
                   PdfExportProperties ExportProperties = new PdfExportProperties();
                   ExportProperties.BeginCellLayout = new PdfGridBeginCellLayoutEventHandler(BeginCellEvent);
                   await this.DefaultGrid.PdfExport(ExportProperties);
               }
             } 
             private void BeginCellEvent(object sender, PdfGridBeginCellLayoutEventArgs args)
             {
               ........
             }
            ]]>
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfExportProperties.EndCellLayout">
            <summary>
            Gets or sets the value which is going to apply/customize the PDF Grid cell graphics. This event is raised when you have finished laying out a page.
            <example>
            <code><![CDATA[
            <SfGrid DataSource="@Orders" @ref="DefaultGrid" Toolbar="@(new List<string>() { "PdfExport" })" AllowPdfExport="true" >
             <GridEvents OnToolbarClick="ToolbarClickHandler" TValue="Order"></GridEvents>
            ........
            </SfGrid>
            @code{
             public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
             {
               if (args.Item.Id == "Grid_pdfexport")  //Id is combination of Grid's ID and itemname
               {
                   PdfExportProperties ExportProperties = new PdfExportProperties();
                   ExportProperties.EndCellLayout = new PdfGridEndCellLayoutEventHandler(EndCellEvent);
                   await this.DefaultGrid.PdfExport(ExportProperties);
               }
             } 
             private void EndCellEvent(object sender, PdfGridEndCellLayoutEventArgs args)
             {
               ........
             }
            ]]>
            </code>
            </example>
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.PdfFooter">
            <summary>
            Defines pdf footer options.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfFooter.Contents">
            <summary>
            Defines the footer contents.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfFooter.FromBottom">
            <summary>
            Defines the footer content distance from bottom.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfFooter.Height">
            <summary>
            Defines the height of footer content.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.PdfGridFont">
            <summary>
            Defines pdf grid font options.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfGridFont.FontFamily">
            <summary>
            Defines the font family of font content. Value can be either PdfStandardFont or TrueTypeFont.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfGridFont.FontSize">
            <summary>
            Defines the fontSize of font content.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfGridFont.FontStyle">
            <summary>
            Defines the fontStyle of font content.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfGridFont.IsTrueType">
            <summary>
            Defines the trueTypeFont is enabled or not for font content.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.PdfHeader">
            <summary>
            Defines pdf header options.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfHeader.Contents">
            <summary>
            Defines the header contents.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfHeader.FromTop">
            <summary>
            Defines the header content distance from top.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfHeader.Height">
            <summary>
            Defines the height of header content.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.PdfHeaderFooterContent">
            <summary>
            Defines pdf header footer options.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfHeaderFooterContent.Font">
            <summary>
            Defines the font for the content. Value can be either PdfStandardFont or TrueTypeFont.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfHeaderFooterContent.Format">
            <summary>
            Defines the format for customizing page number.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfHeaderFooterContent.PageNumberType">
            <summary>
            Defines the page number type.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfHeaderFooterContent.Points">
            <summary>
            Defines the pdf points for drawing line.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfHeaderFooterContent.Position">
            <summary>
            Defines the position of the content.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfHeaderFooterContent.Size">
            <summary>
            Defines the size of content.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfHeaderFooterContent.Src">
            <summary>
            Defines the base64 string for image content type.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfHeaderFooterContent.Style">
            <summary>
            Defines the style of content.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfHeaderFooterContent.Type">
            <summary>
            Defines the content type.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfHeaderFooterContent.Value">
            <summary>
            Defines the value for content.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfHeaderFooterContent.IsTrueType">
            <summary>
            Defines the trueTypeFont is enabled or not for font content.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfHeaderFooterContent.TextDirection">
             <summary>
             Gets or sets the tion of the PDF header and footer content. It allows changing the text direction.
             </summary>
             <value>One of the values in the <see cref="T:Syncfusion.PdfExport.PdfTextDirection"/> enumeration that specifies the text direction. The default value is <see cref="F:Syncfusion.PdfExport.PdfTextDirection.None"/>.</value>
             <remarks>
             The <c>PdfTextDirection</c> property can be set to one of the following values:
             <list type="bullet">
             <item><description>None: Content is displayed without any shaping or formatting based on languages. For example, the content <c>Welcome to سينكفيوجن products</c> will be rendered as <c> Welcome to نجويفكنيس products</c></description></item>
             <item><description>LeftToRight: Content is shaping based on language and the reading order of content is from left to right. For example, the content <c>Welcome to سينكفيوجن products</c> will be rendered as <c> Welcome to سينكفيوجن products </c></description></item>
             <item><description>RightToLeft: Content is shaping based on language and the reading order of content is from right to left. For example, the content <c>Welcome to سينكفيوجن products</c> will be rendered as <c> products سينكفيوجن Welcome to</c></description></item>
             </list>
             </remarks>
             <example>
             <code><![CDATA[
             <SfGrid DataSource="@Orders" Toolbar="@(new List<string>() { "PdfExport" })" AllowPdfExport="true">
             <GridEvents OnToolbarClick="ToolbarClickHandler" TValue="Order"></GridEvents>
             </SfGrid>
            @code{
             SfGrid<BusinessObject> Grid;
             public List<PdfHeaderFooterContent> HeaderContent = new List<PdfHeaderFooterContent>
             {
                  new PdfHeaderFooterContent() { TextDirection = Syncfusion.PdfExport.PdfTextDirection.RightToLeft, Type = ContentType.Text, Value = "Welcome to سينكفيوجن products", Position = new PdfPosition() { X = 300, Y = 50 }},
             }
             public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
             {
             if (args.Item.Text == "PDF Export")
             {
                      PdfExportProperties ExportProperties = new PdfExportProperties();
                      PdfHeader Header = new PdfHeader()
                      {
                               Contents = HeaderContent,
                      };
                      ExportProperties.Header = Header;
                      await this.Grid.PdfExport(ExportProperties);
             }
             }
             ]]>
             </code>
             </example>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.PdfHeaderQueryCellInfoEventArgs">
            <summary>
            Provides information about an <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.PdfHeaderQueryCellInfoEvent"/> event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfHeaderQueryCellInfoEventArgs.Cell">
            <summary>
            Gets the <see cref="T:Syncfusion.PdfExport.PdfGridCell"/> object that represents the current cell.
            </summary>
            <value>
            A <c>PdfGridCell</c> object that represents the current cell.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfHeaderQueryCellInfoEventArgs.Column">
            <summary>
            Gets the <see cref="T:Syncfusion.Blazor.Grids.GridColumn"/> that represents the column of the current cell.
            </summary>
            <value>
            The grid column that represents the column of the current cell.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfHeaderQueryCellInfoEventArgs.PdfGridColumn">
            <summary>
            Gets the <see cref="T:Syncfusion.PdfExport.PdfGridColumn"/> details of the current cell.
            </summary>
            <value>
            A  <c>PdfGridColumn</c> that represents the column details of the current cell.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfHeaderQueryCellInfoEventArgs.RowIndex">
            <summary>
            Gets the row index of the current cell in the Pdf Grid column.
            </summary>
            <value>
            An integer value that represents the row index of the current cell.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfHeaderQueryCellInfoEventArgs.ColumnIndex">
            <summary>
            Gets the column index of the current cell in the Pdf Grid column.
            </summary>
            <value>
            An integer value that represents the column index of the current cell.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfHeaderQueryCellInfoEventArgs.Style">
            <summary>
            Gets the <see cref="T:Syncfusion.PdfExport.PdfGridCellStyle"/> object that represents the style of the current cell.
            </summary>
            <value>
            A <c>PdfGridCellStyle</c> object that represents the style of the current cell.
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.PdfPoints">
            <summary>
            Defines pdf points.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfPoints.X1">
            <summary>
            Defines the x1 position.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfPoints.X2">
            <summary>
            Defines the x2 position.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfPoints.Y1">
            <summary>
            Defines the y1 position.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfPoints.Y2">
            <summary>
            Defines the y2 position.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.PdfPosition">
            <summary>
            Defines pdf position.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfPosition.X">
            <summary>
            Defines the x position.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfPosition.Y">
            <summary>
            Defines the y position.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.PdfQueryCellInfoEventArgs`1">
            <summary>
            Provides information about an <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.PdfQueryCellInfoEvent"/> event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfQueryCellInfoEventArgs`1.ColSpan">
            <summary>
            Gets the column span of the current cell.
            </summary>
            <value>
            An integer value that represents the number of columns spanned by the current cell.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfQueryCellInfoEventArgs`1.Data">
            <summary>
            Gets the row data associated with the current cell in the PDF grid column.
            </summary>
            <value>
            A <typeparamref name="T"/> that represents the row data associated with the current cell in the PDF grid column.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfQueryCellInfoEventArgs`1.Value">
            <summary>
            Gets or sets the value of the current cell.
            </summary>
            <value>
            An object that represents the value of the current cell.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfQueryCellInfoEventArgs`1.Row">
            <summary>
            Gets the <see cref="T:Syncfusion.PdfExport.PdfGridRow"/> object that represents the row in the PDF grid column.
            </summary>
            <value>
            A <c>PdfGridRow</c> that represents the row in the PDF grid column.
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.PdfSize">
            <summary>
            Defines pdf size.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfSize.Height">
            <summary>
            Defines the height.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfSize.Width">
            <summary>
            Defines the width.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.PdfTheme">
            <summary>
            Defines pdf export theme.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfTheme.Caption">
            <summary>
            Defines the theme style of caption content.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfTheme.Header">
            <summary>
            Defines the style of header content.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfTheme.Record">
            <summary>
            Defines the theme style of record content.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.PdfThemeStyle">
            <summary>
            Defines pdf export theme.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfThemeStyle.Bold">
            <summary>
            Defines the bold of theme style.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfThemeStyle.Border">
            <summary>
            Defines the borders of theme style.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfThemeStyle.Font">
            <summary>
            Defines the font of the theme.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfThemeStyle.FontColor">
            <summary>
            Defines the font color of theme style.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfThemeStyle.FontName">
            <summary>
            Defines the font name of theme style.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfThemeStyle.FontSize">
            <summary>
            Defines the font size of theme style.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfThemeStyle.Italic">
            <summary>
            Defines the italic of theme style.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfThemeStyle.Strikeout">
            <summary>
            Defines the strikeout of theme style.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.PdfThemeStyle.Underline">
            <summary>
            Defines the underline of theme style.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.QueryCellInfoEventArgs`1">
            <summary>
            Provides information about an <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.QueryCellInfo"/> event.
            </summary>
            <typeparam name="T">TValue of grid component.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.QueryCellInfoEventArgs`1.Cell">
            <summary>
            Gets or sets the CellDOM object associated with the grid content cell.
            </summary>
            <value>
            The CellDOM object that represents the grid content cell.
            </value>
            <remarks>
            The CellDom properties include:
            <list type="bullet">
            <item><description>
            <b>HasChanges:</b> A boolean property that indicates whether the Cell object associated with the grid content cell has changed.
            </description></item>
            <item><description>
            <b>ClassList:</b> A property that contains the class list of the grid content cell.
            </description></item>
            <item><description>
            <b>Styles:</b> A property that contains the styles of the grid content cell.
            </description></item>
            <item><description>
            <b>AttributeList:</b> A property that contains the attribute list of the grid content cell.
            </description></item>
            <item><description>
            <b>AddClass:</b> A method to add class names to the class list for the current grid content cell.
            </description></item>
            <item><description>
            <b>AddStyle:</b> A method to add styles for the current grid content cell.
            </description></item>
            <item><description>
            <b>SetAttribute:</b> A method to set an attribute for the current grid content cell.
            </description></item>
            </list>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.QueryCellInfoEventArgs`1.ColSpan">
            <summary>
            Gets the column span of the current cell.
            </summary>
            <value>
            An integer value that represents the number of columns spanned by the current cell.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.QueryCellInfoEventArgs`1.Column">
            <summary>
            Gets the corresponding <see cref="T:Syncfusion.Blazor.Grids.GridColumn"/> associated with the content of the current cell in the grid.
            </summary>
            <value>
            A <see cref="T:Syncfusion.Blazor.Grids.GridColumn"/> object that represents the corresponding column associated with the content of the current cell in the grid.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.QueryCellInfoEventArgs`1.Data">
            <summary>
            Gets the row data associated with the content of the current cell in the grid.
            </summary>
            <value>
            A <typeparamref name="T"/> object that represents the row data associated with the content of the current cell in the grid.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.QueryCellInfoEventArgs`1.ForeignKeyData">
            <summary>
            Gets the foreign key row data associated with the grid column.
            </summary>
            <value>
            An <see cref="T:System.Collections.Generic.IDictionary`2"/> object that represents the foreign key row data associated with the grid column.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.QueryCellInfoEventArgs`1.RequestType">
            <summary>
            Defines the current action.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.QueryCellInfoEventArgs`1.RowSpan">
            <summary>
            Gets the row span of the current cell.
            </summary>
            <value>
            An integer value that represents the number of row spanned by the current cell.
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.RecordClickEventArgs`1">
            <summary>
            Provides information about an <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.OnRecordClick"/> event.
            </summary>
            <typeparam name="T">TValue of the grid component.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RecordClickEventArgs`1.Cell">
            <summary>
            Defines the cell element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RecordClickEventArgs`1.CellIndex">
            <summary>
            Gets the index of the clicked cell in the grid column.
            </summary>
            <value>
            An integer value that represents the index of the clicked cell in the grid column.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RecordClickEventArgs`1.Column">
            <summary>
            Gets the grid column of the clicked cell.
            </summary>
            <value>
            A <see cref="T:Syncfusion.Blazor.Grids.GridColumn"/> that represents the grid column of the clicked cell.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RecordClickEventArgs`1.ForeignKeyData">
            <summary>
            Gets the foreign key row data associated with the column.
            </summary>
            <value>
            A dictionary of foreign key row data associated with the column. The keys of the dictionary represent the names of the tables, and the values represent the associated rows as a collection of objects.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RecordClickEventArgs`1.Name">
            <summary>
            Defines the name of the event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RecordClickEventArgs`1.Row">
            <summary>
            Defines the row element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RecordClickEventArgs`1.RowData">
            <summary>
            Gets the row data of the clicked row.
            </summary>
            <value>
            The row data of the clicked row as an object of type T.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RecordClickEventArgs`1.RowIndex">
            <summary>
            Gets the index of the clicked row.
            </summary>
            <value>
            The index of the clicked row as an integer.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RecordClickEventArgs`1.Target">
            <summary>
            Defines the target element.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.RecordDoubleClickEventArgs`1">
            <summary>
            Provides information about an <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.OnRecordDoubleClick"/> event.
            </summary>
            <typeparam name="T">TValue of the grid component.</typeparam>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.ResizeArgs">
            <summary>
            Provides information about an <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.OnResizeStart"/> event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ResizeArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether to cancel the resize action.
            </summary>
            <value>
            The default value is <c>false</c>. If the Cancel property is set to <c>true</c>, then the resize action will be cancelled.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ResizeArgs.Column">
            <summary>
            Gets the details of the resizing column.
            </summary>
            <value>
            A <see cref="T:Syncfusion.Blazor.Grids.GridColumn"/> object that represents the details of the resizing column.
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.RowDataBoundEventArgs`1">
            <summary>
            Provides information about an <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.RowDataBound"/> event.
            </summary>
            <typeparam name="T">TValue of the grid component.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RowDataBoundEventArgs`1.Data">
            <summary>
            Gets the current row data.
            </summary>
            <value>
            An object of type T that represents the current row data.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RowDataBoundEventArgs`1.Row">
            <summary>
            Gets or sets the CellDOM object associated with the grid content row.
            </summary>
            <value>
            The CellDOM object that represents the grid content row.
            </value>
            <remarks>
            The CellDom properties include:
            <list type="bullet">
            <item><description>
            <b>HasChanges:</b> A boolean property that indicates whether the Cell object associated with the grid content row has changed.
            </description></item>
            <item><description>
            <b>ClassList:</b> A property that contains the class list of the grid content row.
            </description></item>
            <item><description>
            <b>Styles:</b> A property that contains the styles of the grid content row.
            </description></item>
            <item><description>
            <b>AttributeList:</b> A property that contains the attribute list of the grid content row.
            </description></item>
            <item><description>
            <b>AddClass:</b> A method to add class names to the class list for the current grid content row.
            </description></item>
            <item><description>
            <b>AddStyle:</b> A method to add styles for the current grid content row.
            </description></item>
            <item><description>
            <b>SetAttribute:</b> A method to set an attribute for the current grid content row.
            </description></item>
            </list>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RowDataBoundEventArgs`1.RowHeight">
            <summary>
            Gets or sets the row height of the current row.
            </summary>
            <value>
            A double value that represents the row height of the current row.
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.RowDeselectEventArgs`1">
            <summary>
            Provides information about the <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.RowDeselecting"/> event.
            Also, provides information about the <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.RowDeselected"/> event.
            </summary>
            <typeparam name="T">TValue of the grid component.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RowDeselectEventArgs`1.Event">
            <summary>
            Gets the <see cref="T:Microsoft.AspNetCore.Components.Web.MouseEventArgs"/> of the currently deselected/deselecting row.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RowDeselectEventArgs`1.Cancel">
            <summary>
            Gets or sets a value indicating whether to cancel the deselection of the row.
            </summary>
            <value>
            The default value is <c>false</c>. If the Cancel property is set to <c>true</c>, then the deselection of the row will be cancelled.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RowDeselectEventArgs`1.Data">
            <summary>
            Gets the row data associated with the currently deselecting or deselected row in a grid.
            </summary>
            <value>
            An object of type <typeparamref name="T"/> representing the data associated with the currently deselecting or deselected row in a grid.
            </value>  
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RowDeselectEventArgs`1.Datas">
            <summary>
            Gets the collection of row data while perform the deselecting action.
            </summary>
            <value>
            A collection of row data which is associate with clear the multiple selection.
            </value>
            <remarks>
            When binding remote data, unselect-all action using checkbox returns only the data of rows in the current view.
            When binding list data, if <see cref="P:Syncfusion.Blazor.Grids.GridSelectionSettings.PersistSelection"/> is disabled then unselect-all action using checkbox returns only the data of rows in the current view.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RowDeselectEventArgs`1.ForeignKeyData">
            <summary>
            Gets the foreignkey row data associated with the currently deselecting or deselected row in a grid.
            </summary>
            <value>
            An object representing the foreignkey row data associated with the currently deselecting or deselected row in a grid.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RowDeselectEventArgs`1.IsInteracted">
            <summary>
            Gets a boolean value indicating whether the event was triggered by user interaction or not.
            </summary>
            <value>
            <c>true</c> if the event was triggered by user interaction; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RowDeselectEventArgs`1.IsHeaderCheckboxClicked">
            <summary>
            Gets a boolean value indicating whether the header checkbox was clicked or not.
            </summary>
            <value>
            <c>true</c> if the header checkbox was clicked; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RowDeselectEventArgs`1.Row">
            <summary>
            Defines the selected/deselected row.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RowDeselectEventArgs`1.RowIndex">
            <summary>
            Gets the row index associated with the deselecting action.
            </summary>
            <value>
            The row index that is associated with the deselecting action.
            </value>
            <remarks>
            If multiple rows are selected and an attempt is made to clear the selection, 
            this property will return the index of the last row that was deselected.
            </remarks> 
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RowDeselectEventArgs`1.RowIndexes">
            <summary>
            Gets the collection of row indexes associated with the deselecting action.
            </summary>
            <value>
            A collection of row indexes that are associated with the deselecting action.
            </value>
            <remarks>
            This property returns only the indexes of the rows that are currently visible in the view, 
            even if the user attempts to unselect all rows using a checkbox selection.
            </remarks>    
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RowDeselectEventArgs`1.IsCtrlPressed">
            <summary>
            Gets a boolean value indicating whether the CTRL key is currently pressed.
            </summary>
            <value>
            <c>true</c> if the CTRL key is currently pressed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RowDeselectEventArgs`1.IsShiftPressed">
            <summary>
            Gets a boolean value indicating whether the SHIFT key is currently pressed.
            </summary>
            <value>
            <c>true</c> if the SHIFT key is currently pressed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RowDeselectEventArgs`1.Target">
            <summary>
            Defines the target element for row deselect.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.Dimension">
            <summary>
            Defines the dimension of selected target.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Dimension.Left">
            <summary>
            Defines the left position of the target.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Dimension.Right">
            <summary>
            Defines the right position of the target.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Dimension.Top">
            <summary>
            Defines the top position of the target.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Dimension.Bottom">
            <summary>
            Defines the bottom position of the target.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Dimension.Width">
            <summary>
            Defines the width position of the target.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Dimension.Height">
            <summary>
            Defines the height position of the target.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.RowDragEventArgs`1">
            <summary>
            Provides information about the <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.OnRowDragStart"/> event.
            </summary>
            <typeparam name="T">TValue of the grid component.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RowDragEventArgs`1.Cancel">
            <summary>
            Gets or sets whether to cancel the row drop action. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RowDragEventArgs`1.Data">
            <summary>
            Gets a collection of row data associated with the drag start action.
            </summary>
            <value>
            A collection of row data that are associated with the drag start action.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RowDragEventArgs`1.FromIndex">
            <summary>
            Gets the row index of the row that is associated with the drag start action.
            </summary>
            <value>
            The index of the row that is being dragged from the grid.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RowDragEventArgs`1.OriginalEvent">
            <summary>
            Define the mouse event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RowDragEventArgs`1.Rows">
            <summary>
            Defines the selected row's element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RowDragEventArgs`1.DropIndex">
            <summary>
            Gets the row index of the row that is associated with the drop action.
            </summary>
            <value>
            The index of the row that is associated with the drop action.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RowDragEventArgs`1.Target">
            <summary>
            Gets the target element's ID and its XPath.
            </summary>
            <value>
            <c>ID</c>, returns ID of the target element. If there is no ID for the target element then the value for the ID will be empty string(ID= "")
            <c>XPath</c>, XPath of the target element.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RowDragEventArgs`1.TargetDimension">
            <summary>
            Gets the dimensions of the target element.
            </summary>
            <remarks>
            The dimensions include the following properties:
            <list type="bullet">
                <item><term>Left</term><description>The left position of the target element.</description></item>
                <item><term>Right</term><description>The right position of the target element.</description></item>
                <item><term>Top</term><description>The top position of the target element.</description></item>
                <item><term>Bottom</term><description>The bottom position of the target element.</description></item>
                <item><term>Height</term><description>The height of the target element.</description></item>
                <item><term>Width</term><description>The width of the target element.</description></item>
            </list>
            </remarks>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.RowDragStartingEventArgs`1">
            <summary>
            Provides information about the <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.RowDragStarting"/> event.
            </summary>
            <typeparam name="T">TValue of the grid component.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RowDragStartingEventArgs`1.Data">
            <summary>
            Gets the collection of row data that is going to be dragged.
            </summary>
            <value>
            A list of the row data associated with the drag start action.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RowDragStartingEventArgs`1.FromIndex">
            <summary>
            Gets the row index of the row associated with the drag start action.
            </summary>
            <value>
            The index of the row that is being dragged from the grid.
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.RowDroppingEventArgs`1">
            <summary>
            Provides information about the <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.RowDropping"/> event.
            </summary>
            <typeparam name="T">TValue of the grid component</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RowDroppingEventArgs`1.Cancel">
            <summary>
            Gets or sets a value indicating whether to cancel the row drop action.
            </summary>
            <value>
            <b>true</b>, if the drop action is cancelled; otherwise, <b>false</b>. The default value is <b>false</b>.
            </value>       
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RowDroppingEventArgs`1.Data">
            <summary>
            Gets the collection of row data associated with a dropped action in the grid.
            </summary>
            <value>
            A <see cref="T:System.Collections.Generic.List`1"/> of row data associated with the dropped action.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RowDroppingEventArgs`1.Action">
            <summary>
            Gets the current action, either "Add" or "Delete", when dragging and dropping rows between two grids.
            </summary>
            <value>
            A <see cref="T:System.String"/> value that represents the current action. Possible values are "Add" if the collection of row data was added to the destination grid, and "Delete" if the collection of row data was removed from the source grid.
            </value>
            <remarks>
            The value of the <c>Action</c> property will be null when performing drag and drop operations within the same grid. 
            This property is set and updated when the <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.RowDropping"/> event is triggered.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RowDroppingEventArgs`1.FromIndex">
            <summary>
            Gets the row index of the row associated with the drag start action.
            </summary>
            <value>
            An integer value representing the index of the row associated with the drag start action.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RowDroppingEventArgs`1.DropIndex">
            <summary>
            Gets the row index of the row associated with the drop action.
            </summary>
            <value>
            An integer value representing the index of the row associated with the drop action.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RowDroppingEventArgs`1.Target">
            <summary>
            Gets the target element's ID and its XPath.
            </summary>
            <value>
            <c>ID</c>, returns ID of the target element. If there is no ID for the target element then the value for the ID will be empty string(ID= "")
            <c>XPath</c>, XPath of the target element.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RowDroppingEventArgs`1.TargetDimension">
            <summary>
            Gets the dimensions of the target element.
            </summary>
            <remarks>
            The <see cref="P:Syncfusion.Blazor.Grids.RowDroppingEventArgs`1.TargetDimension"/> contains the following dimensions:
            <list type="bullet">
            <item><term>Left</term><description>The left position of the target element.</description></item>
            <item><term>Right</term><description>The right position of the target element.</description></item>
            <item><term>Top</term><description>The top position of the target element.</description></item>
            <item><term>Bottom</term><description>The bottom position of the target element.</description></item>
            <item><term>Height</term><description>The height of the target element.</description></item>
            <item><term>Width</term><description>The width of the target element.</description></item>
            </list>
            </remarks>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.RowDroppedEventArgs`1">
            <summary>
            Provides information about the <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.RowDropped"/> event.
            </summary>
            <typeparam name="T">TValue of the grid component</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RowDroppedEventArgs`1.Action">
            <summary>
            Gets the current action performed during drag and drop between two grids.
            </summary>
            <value>
            The current action can be one of the following:
            <list type="bullet">
            <item><description><c>Add</c> - The row data is added to the destination grid.</description></item>
            <item><description><c>Delete</c> - The row data is removed from the source grid.</description></item>
            </list>
            </value>
            <remarks>
            The value of the <see cref="P:Syncfusion.Blazor.Grids.RowDroppedEventArgs`1.Action"/> property will be <c>null</c> when the drag and drop operation occurs within the same grid and the <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.RowDropping"/> event is triggered.
            </remarks>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.RowInfo`1">
            <summary>
            Defines the row info such as data, row index and cell index.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RowInfo`1.Cell">
            <summary>
            returns particular cell element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RowInfo`1.CellIndex">
            <summary>
            returns particular cell index.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RowInfo`1.Column">
            <summary>
            return particular column information.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RowInfo`1.Row">
            <summary>
            returns particular row element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RowInfo`1.RowData">
            <summary>
            returns particular row data.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RowInfo`1.RowIndex">
            <summary>
            returns particular rowIndex.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.FilterItemTemplateContext">
            <summary>
            Defines the context details of the FilterItemTemplate of checkbox and excel filter.
            </summary>
            <seealso cref="P:Syncfusion.Blazor.Grids.GridColumn.FilterItemTemplate"/>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.FilterItemTemplateContext.Value">
            <summary>
            Gets the current cell value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.FilterItemTemplateContext.Column">
            <summary>
            Gets the current column.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.FilterItemTemplateContext.Record">
            <summary>
            Gets the current record.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.RowSelectEventArgs`1">
            <summary>
            Provides information about the <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.RowSelected"/> event.
            </summary>
            <typeparam name="T">TValue of the grid component.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RowSelectEventArgs`1.Event">
            <summary>
            Gets the <see cref="T:Microsoft.AspNetCore.Components.Web.MouseEventArgs"/> of the currently selected row.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RowSelectEventArgs`1.Cancel">
            <summary>
            Defines the cancel option value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RowSelectEventArgs`1.Data">
            <summary>
            Gets the row data of the first selected row, when multiple rows are selected.
            </summary>
            <value>
            The row data of the first selected row.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RowSelectEventArgs`1.Datas">
            <summary>
            Gets the collection of row data that is currently selected.
            </summary>
            <value>
            A collection of selected row data.
            </value>
            <remarks>
            When binding remote data, the select all action using checkbox selection only returns the data of rows in the current view.
            When binding list data, if <see cref="P:Syncfusion.Blazor.Grids.GridSelectionSettings.PersistSelection"/> is disabled, the select all action using checkbox selection only returns the data of rows in the current view.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RowSelectEventArgs`1.ForeignKeyData">
            <summary>
            Gets the foreign key row data associated with this column.
            </summary>
            <value>
            A dictionary containing the foreign key column name and a collection of the associated row data for the column.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RowSelectEventArgs`1.IsInteracted">
            <summary>
            Gets a boolean value indicating whether the event was triggered by user interaction or not.
            </summary>
            <value>
            <c>true</c> if the event was triggered by user interaction; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RowSelectEventArgs`1.IsHeaderCheckboxClicked">
            <summary>
            Gets a boolean value indicating whether the header checkbox was clicked or not.
            </summary>
            <value>
            <c>true</c> if the header checkbox was clicked; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RowSelectEventArgs`1.PreviousRow">
            <summary>
            Defines the previously selected row.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RowSelectEventArgs`1.PreviousRowIndex">
            <summary>
            Gets the index of the previously selected row.
            </summary>
            <value>
            An integer value representing the index of the previously selected row.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RowSelectEventArgs`1.Row">
            <summary>
            Defines the selected/deselected row.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RowSelectEventArgs`1.RowIndex">
            <summary>
            Gets the index of the selected row.
            </summary>
            <value>
            An integer value representing the index of the selected row.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RowSelectEventArgs`1.RowIndexes">
            <summary>
            Gets the collection of selected row indexes.
            </summary>
            <value>
            A collection of selected row indexes.
            Returns only the indexes of the rows in current view, even though user select all rows using checkbox selection.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RowSelectEventArgs`1.IsCtrlPressed">
            <summary>
            Gets a boolean value indicating whether the CTRL key is currently pressed.
            </summary>
            <value>
            <c>true</c> if the CTRL key is currently pressed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RowSelectEventArgs`1.IsShiftPressed">
            <summary>
            Gets a boolean value indicating whether the SHIFT key is currently pressed.
            </summary>
            <value>
            <c>true</c> if the SHIFT key is currently pressed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RowSelectEventArgs`1.Target">
            <summary>
            Defines the target element for selection.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.RowSelectingEventArgs`1">
            <summary>
            Provides information about the <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.RowSelecting"/> event.
            </summary>
            <typeparam name="T">TValue of the grid component.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RowSelectingEventArgs`1.Event">
            <summary>
            Gets the <see cref="T:Microsoft.AspNetCore.Components.Web.MouseEventArgs"/> of the currently selected row.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RowSelectingEventArgs`1.Cancel">
            <summary>
            Gets or sets a value indicating whether to cancel the selection action.
            </summary>
            <value>
            The default value is <c>false</c>, If the Cancel property is set to <c>true</c>, the row selection action will be cancelled.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RowSelectingEventArgs`1.Data">
            <summary>
            Gets the data of the row that is going to be selected.
            </summary>
            <value>
            The data of the row associated with the selection action.
            </value>
            <remarks>
            This property returns the data of the row that is going to be selected in a grid. 
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RowSelectingEventArgs`1.Datas">
            <summary>
            Gets the collection of row data going to be selected.
            </summary>
            <value>
            A collection of row data going to be selected.
            </value>
            <remarks>
            When binding remote data, select all action using checkbox selection returns only the data of rows in the current view.
            When binding list data, if <see cref="P:Syncfusion.Blazor.Grids.GridSelectionSettings.PersistSelection"/> is disabled then select all action using checkbox returns only the data of rows in the current view.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RowSelectingEventArgs`1.ForeignKeyData">
            <summary>
            Gets the foreign key row data associated with a grid foreign key column.
            </summary>
            <value>
            A dictionary containing the foreign key row data.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RowSelectingEventArgs`1.IsCtrlPressed">
            <summary>
            Gets a boolean value indicating whether the CTRL key is currently pressed.
            </summary>
            <value>
            <c>true</c> if the CTRL key is currently pressed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RowSelectingEventArgs`1.IsInteracted">
            <summary>
            Gets a boolean value indicating whether the event was triggered by user interaction or not.
            </summary>
            <value>
            <c>true</c> if the event was triggered by user interaction; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RowSelectingEventArgs`1.IsShiftPressed">
            <summary>
            Gets a boolean value indicating whether the SHIFT key is currently pressed.
            </summary>
            <value>
            <c>true</c> if the SHIFT key is currently pressed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RowSelectingEventArgs`1.IsHeaderCheckboxClicked">
            <summary>
            Gets a boolean value indicating whether the header checkbox was clicked or not.
            </summary>
            <value>
            <c>true</c> if the header checkbox was clicked; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RowSelectingEventArgs`1.PreviousRow">
            <summary>
            Defines the previously selected row.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RowSelectingEventArgs`1.PreviousRowIndex">
            <summary>
            Gets the index of the previously selected row.
            </summary>
            <value>
            The index of the previously selected row.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RowSelectingEventArgs`1.Row">
            <summary>
            Defines the selected/deselected row.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RowSelectingEventArgs`1.RowIndex">
            <summary>
            Gets the index of the row that is going to be selected.
            </summary>
            <value>
            The index of the row that is going to be selected.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RowSelectingEventArgs`1.RowIndexes">
            <summary>
            Gets the collection of row indexes going to be selected.
            </summary>
            <value>
            A collection of row indexes going to be selected.
            Returns only the indexes of the rows in current view, even though user selects all the rows using checkbox selection.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RowSelectingEventArgs`1.Target">
            <summary>
            Defines the target element for selection.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.FreezeLineMovingEventArgs">
            <summary>
            Provides information about <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.FreezeLineMoving"/> event callback.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.FreezeLineMovingEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether to cancel the freeze line moving action.
            </summary>
            <value>
            The default value is <c>false</c>, If the Cancel property is set to <c>true</c>, the freeze line moving action will be cancelled.
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.FreezeLineMovedEventArgs">
            <summary>
            Provides information about <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.FreezeLineMoved"/>  event callback.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.FreezeLineMovedEventArgs.StartIndex">
            <summary>
            Gets the index of the starting column while dragging the frozen line.
            </summary>
            <value>
            The index of the starting column while dragging the frozen line.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.FreezeLineMovedEventArgs.EndIndex">
            <summary>
            Gets the index of the ending column while dropping the frozen line.
            </summary>
            <value>
            The index of the ending column while dropping the frozen line.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.FreezeLineMovedEventArgs.FrozenColumns">
            <summary>
            Gets the frozen columns in the grid.
            </summary>
            <value>
            A list of frozen columns in the grid.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.FreezeLineMovedEventArgs.Direction">
            <summary>
            Gets the direction of the column freeze.
            </summary>
            <value>
            The <see cref="T:Syncfusion.Blazor.Grids.FreezeDirection"/> of the columns. Possible values include:
            <list type="bullet">
                <item><term>None:</term><description>Column will not freeze.</description></item>
                <item><term>Left:</term><description>Freeze the column at the left side.</description></item>
                <item><term>Right:</term><description>Freeze the column at the right side.</description></item>
            </list>
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.SortingEventArgs">
            <summary>
            Provides information about the <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.Sorting"/> event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SortingEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether to cancel the sorting action.
            </summary>
            <value>
            The default value is false.
            </value>
            <remarks>
            The <c>Cancel</c> property is used to control the sorting action of the grid. If the <c>Cancel</c> property is set to true, then the sorting action will be Canceled.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SortingEventArgs.IsCtrlKeyPressed">
            <summary>
            Gets a value indicating whether the CTRL key is currently pressed for multi-sorting.
            </summary>
            <value>
            <c>true</c> if the CTRL key is pressed for multi-sorting; otherwise, <c>false</c>.
            The default value is <c>false</c>.
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.SortedEventArgs">
            <summary>
            Provides information about the <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.Sorted"/> event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SortedEventArgs.Action">
            <summary>
            Gets a value indicating the sorting action.
            </summary>
            <value>
            <c>Add</c> sorts the grid data based on the specified column and direction.
            <c>Remove</c> Removes sorting from the specified column.
            <c>Replace</c> when the sort column direction changes from Ascending to Descending or vice versa for the same column.
            <c>Reset</c> Clears sorting from all columns in the grid using <see cref="M:Syncfusion.Blazor.Grids.SfGrid`1.ClearSortingAsync"/> Method.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SortedEventArgs.ColumnName">
            <summary>
            Gets the field name of the column which is associated with sorting.
            </summary>
            <value>
            The string value that represents the field name of column which is associated with sorting.
            </value>
            <remarks>
            This property returns the field name of the column currently associated with sorting,
            even in cases of multi-sorting.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SortedEventArgs.Direction">
            <summary>
            Gets or sets the direction of the sorted column.
            </summary>
            <remarks>
            The available sort directions are:
            <c>SortDirection.None</c>: Default, no sorting is applied or when sorting is removed.
            <c>SortDirection.Ascending</c>: Sorts records in ascending order.
            <c>SortDirection.Descending</c>: Sorts records in descending order.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SortedEventArgs.SortedColumns">
            <summary>
            Gets the list of sorted columns field name and it's sort direction.
            </summary>
            <value>
            The list of <see cref="T:Syncfusion.Blazor.Grids.SortColumn"/> objects. By default, it is null.
            </value>
            <remarks>
            The list of sorted columns field name and it's sort direction will be available when columns are sorted using <see cref="M:Syncfusion.Blazor.Grids.SfGrid`1.SortColumnsAsync(System.Collections.Generic.List{Syncfusion.Blazor.Grids.SortColumn},System.Boolean)"/> method.
            </remarks>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.GroupingEventArgs">
            <summary>
            Provides information about the <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.Grouping"/> event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GroupingEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether to cancel the grouping or un-grouping action.
            </summary>
            <value>
            The default value is false.
            </value>
            <remarks>
            The <c>Cancel</c> property is used to control the grouping action. If the <c>Cancel</c> property is set to true, then the grouping or un-grouping action will be canceled.
            </remarks>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.GroupedEventArgs">
            <summary>
            Provides information about the <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.Grouped"/> event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GroupedEventArgs.Action">
            <summary>
            Gets a value indicating the grouping action.
            </summary>
            <value>
            <c>Add</c> to group the specified column.
            <c>Remove</c> to remove grouping from the specified column.
            <c>Reset</c> to clear grouping from all columns in the grid using the <see cref="M:Syncfusion.Blazor.Grids.SfGrid`1.ClearGroupingAsync"/> method.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GroupedEventArgs.ColumnName">
            <summary>
            Gets the field name of the column which is associated with grouping or un-grouping.
            </summary>
            <value>
            A string value that represents the field name of the column which is associated with grouping or un-grouping.
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.SearchingEventArgs">
            <summary>
            Provides information about the <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.Searching"/> event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SearchingEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether to cancel the search action in the grid.
            </summary>
            <value>
            The default value is <c>false</c>. If the Cancel property is set to <c>true</c>, 
            then the search action will be canceled.
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.SearchedEventArgs">
            <summary>
            Provides information about the <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.Searched"/> event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SearchedEventArgs.SearchText">
            <summary>
            Gets or sets the value to search.
            </summary>
            <value>
            A string representing the value to search. Default value is an empty string.
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.RowCreatingEventArgs`1">
            <summary>
            Provides information about the <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.RowCreating"/> event.
            </summary>
            <typeparam name="T">TValue of the grid component.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RowCreatingEventArgs`1.Cancel">
            <summary>
            Gets or sets a value indicating whether to cancel the adding new record action in the grid.
            </summary>
            <value>
            The default value is <c>false</c>. If the Cancel property is set to <c>true</c>, 
            then the adding new record action will be canceled.
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.RowCreatedEventArgs`1">
            <summary>
            Provides information about the <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.RowCreated"/> event.
            </summary>
            <typeparam name="T">TValue of the grid component.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RowCreatedEventArgs`1.Data">
            <summary>
            Gets or sets the data of the new row associated with the adding action.
            </summary>
            <value>
            A <typeparamref name="T"/> object representing the data of the grid.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RowCreatedEventArgs`1.Index">
            <summary>
            Gets or sets the index of the row associated with the adding action.
            </summary>
            <value>
            An integer representing the index of the newly added row. The default value is 0.
            </value>
            <remarks>
            If the index property is set, then the add form will be generated in the grid based on the specified index.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RowCreatedEventArgs`1.EditContext">
            <summary>
            Gets the current <see cref="P:Syncfusion.Blazor.Grids.RowCreatedEventArgs`1.EditContext"/> instance.
            </summary>
            <value>
            An instance of the <see cref="P:Syncfusion.Blazor.Grids.RowCreatedEventArgs`1.EditContext"/> class that represents the current edit context. By default, the value is null.
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.RowUpdatingEventArgs`1">
            <summary>
            Provides information about the <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.RowUpdating"/> event.
            </summary>
            <typeparam name="T">TValue of the grid component.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RowUpdatingEventArgs`1.Cancel">
            <summary>
            Gets or sets a value indicating whether to cancel the saving action in the grid.
            </summary>
            <value>
            The default value is <c>false</c>. If the Cancel property is set to <c>true</c>, 
            then the saving action will be canceled.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RowUpdatingEventArgs`1.IsShiftKeyPressed">
            <summary>
            Gets a Boolean value indicating whether the Shift key was pressed from the first edited cell to save the edited record in <see cref="F:Syncfusion.Blazor.Grids.EditMode.Normal"/> edit mode.  
            </summary>
            <value>
            <b>true</b> if the SHIFT key is currently pressed; otherwise, <c>false</c>        
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RowUpdatingEventArgs`1.KeyCode">
            <summary>
            Gets the string that identifies the physical key being pressed, while saving the edited record using Enter or Tab keys in <see cref="F:Syncfusion.Blazor.Grids.EditMode.Normal"/> edit mode.
            </summary>
            <value>
            <c>Enter</c>: The Enter key is used to save the edited record.
            <c>Tab</c>: The Tab key is pressed from the last edited cell, or the combination of <c>Shift+Tab</c> keys is pressed from the first edited cell to save the edited record.
            By default, the value is set to null.
            </value>
            <remarks>
            The value of this property is assigned while performing the save operation using Enter or Tab keys or a combination of the Shift+Tab keyboard keys.
            </remarks>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.RowUpdatedEventArgs`1">
            <summary>
            Provides information about the <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.RowUpdated"/> event.
            </summary>
            <typeparam name="T">TValue of the grid component.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RowUpdatedEventArgs`1.Data">
            <summary>
            Gets or sets the data of the row associated with updating in the grid.
            </summary>
            <value>
            A <typeparamref name="T"/> object representing the data of the grid.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RowUpdatedEventArgs`1.Index">
            <summary>
            Gets the row index of the row associated with updating.
            </summary>
            <value>
            The row index of the updating row. By default, the value is 0.
            </value>
            <remarks>
            The value of this property can be used to identify which row in a collection or data source is being saved.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RowUpdatedEventArgs`1.PreviousData">
            <summary>
            Gets the previous data of the row.
            </summary>
            <value>
            An object of type T that contains the previous data of the row. By default, the value is null.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RowUpdatedEventArgs`1.PrimaryKeys">
            <summary>
            Gets the list of the primary key values.
            </summary>
            <value>
            A string array that contains the list of primary key values.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RowUpdatedEventArgs`1.PrimaryKeyValue">
            <summary>
            Gets the primary key value of the <see cref="T:Syncfusion.Blazor.Grids.GridColumn"/>.
            </summary>
            <value>
            An object that defines the primary key value of the column when <see cref="P:Syncfusion.Blazor.Grids.GridColumn.IsPrimaryKey"/> is true, otherwise null.
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.RowDeletingEventArgs`1">
            <summary>
            Provides information about the <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.RowDeleting"/> event.
            </summary>
            <typeparam name="T">TValue of the grid component.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RowDeletingEventArgs`1.Cancel">
            <summary>
            Gets or sets a value indicating whether to cancel the delete action in the grid.
            </summary>
            <value>
            The default value is <c>false</c>. If the Cancel property is set to <c>true</c>, 
            then the delete action will be canceled.
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.RowDeletedEventArgs`1">
            <summary>
            Provides information about the <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.RowDeleted"/> event.
            </summary>
            <typeparam name="T">TValue of the grid component.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RowDeletedEventArgs`1.Datas">
            <summary> 
            Gets the collection of row data intended for deletion. 
            </summary> 
            <value> 
            A collection of row data to be deleted. 
            <typeparamref name="T"/> object representing the data of the grid. 
            </value> 
            <remarks> 
            This collection holds the row data that is marked for deletion, whether it's a single row or multiple rows. 
            Additionally, it holds the deleted row data when the delete operation is performed using the <see cref="M:Syncfusion.Blazor.Grids.SfGrid`1.DeleteRecordAsync(System.String,`0)"/> method. 
            </remarks> 
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RowDeletedEventArgs`1.PrimaryKeys">
            <summary>
            Gets the list of the primary key values.
            </summary>
            <value>
            A string array that contains the list of primary key values.
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.EditCancelingEventArgs`1">
            <summary>
            Provides information about the <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.EditCanceling"/> event.
            </summary>
            <typeparam name="T">TValue of the grid component.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.EditCancelingEventArgs`1.Cancel">
            <summary>
            Gets or sets a value indicating whether to cancel the editing or adding new record actions in the grid.
            </summary>
            <value>
            The default value is <c>false</c>. If the Cancel property is set to <c>true</c>, 
            then the cancel action will be Canceled.
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.EditCanceledEventArgs`1">
            <summary>
            Provides information about the <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.EditCanceled"/> event.
            </summary>
            <typeparam name="T">TValue of the grid component.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.EditCanceledEventArgs`1.Data">
            <summary>
            Gets the data of the grid which is associated with canceling action.
            </summary>
            <value>
            A <typeparamref name="T"/> object representing the data of the grid.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.EditCanceledEventArgs`1.PreviousData">
            <summary>
            Gets the previous data of the row.
            </summary>
            <value>
            An object of type T that contains the previous data of the row. By default, the value is null.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.EditCanceledEventArgs`1.PrimaryKeys">
            <summary>
            Gets the list of the primary key values.
            </summary>
            <value>
            A string array that contains the list of primary key values.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.EditCanceledEventArgs`1.Index">
            <summary>
            Gets the row index of the row associated with canceling action.
            </summary>
            <value>
            The row index of the canceling row. By default, the value is 0.
            </value>
            <remarks>
            The value of this property can be used to identify which row in a collection or data source is being canceled.
            </remarks>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.OnRowEditStartEventArgs">
            <summary>
            Provides information about the <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.OnRowEditStart"/> event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.OnRowEditStartEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether to cancel the editing action in the grid.
            </summary>
            <value>
            The default value is <c>false</c>. If the Cancel property is set to <c>true</c>, 
            then the edit action will be Canceled.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.OnRowEditStartEventArgs.PreventDataClone">
            <summary>
            Gets or sets whether to clone data object during editing. Set the property when the <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.OnRowEditStart"/> event is triggered.
            </summary>
            <value>
            A Boolean value that indicates whether the data object should be cloned or not when editing begins.       
            <c>true</c>: A clone of the data object will not be created, and the original data object is used for editing.        
            <c>false</c>: A clone of the data object will be created and used for editing instead of the original data object.        
            The default value is false.
            </value>
            <remarks>
            If <c>PreventDataClone</c> is set to <c>true</c>, the edited data will be saved even if the user discards the changes using the Cancel button in the toolbar or dialog editing cancel button.
            </remarks>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.RowEditingEventArgs`1">
            <summary>
            Provides information about the <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.RowEditing"/> event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RowEditingEventArgs`1.Cancel">
            <summary>
            Gets or sets a value indicating whether to cancel the edit action in the grid. 
            </summary> 
            <value> 
            The default value is <c>false</c>. If the Cancel property is set to <c>true</c>,  
            then the edit action will be canceled. 
            </value> 
        </member>
        <member name="T:Syncfusion.Blazor.Grids.RowEditedEventArgs`1">
            <summary>
            Provides information about the <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.RowEdited"/> event.
            </summary>
            <typeparam name="T">TValue of the grid component.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RowEditedEventArgs`1.PrimaryKeys">
            <summary>
            Gets the list of the primary key values.
            </summary>
            <value>
            A string array that contains the list of primary key values.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RowEditedEventArgs`1.PrimaryKeyValue">
            <summary>
            Gets the primary key value of the <see cref="T:Syncfusion.Blazor.Grids.GridColumn"/>.
            </summary>
            <value>
            An object that defines the primary key value of the column when <see cref="P:Syncfusion.Blazor.Grids.GridColumn.IsPrimaryKey"/> is true, otherwise null.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RowEditedEventArgs`1.Data">
            <summary>
            Gets or sets the data of the row associated with editing. 
            </summary>
            <value>
            The data of the row associated with editing.
            </value>
            <remarks>
            By default, this property is cloned, which means the original data will be reverted even if the user discards
            the edited data using the Cancel button in the toolbar or dialog editing cancel button.
            To prevent this cloning, you can set the <c>PreventDataClone</c> argument of the <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.OnRowEditStart"/>
            event to true. This event is triggered before the current event.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RowEditedEventArgs`1.Index">
            <summary>
            Gets the row index of the row associated with editing.
            </summary>
            <value>
            The row index of the editing row. By default, the value is 0.
            </value>
            <remarks>
            The value of this property can be used to identify which row in a collection or a data source is being edited.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RowEditedEventArgs`1.EditContext">
            <summary>
            Gets the current <see cref="P:Syncfusion.Blazor.Grids.RowEditedEventArgs`1.EditContext"/> instance.
            </summary>
            <value>
            An instance of the <see cref="P:Syncfusion.Blazor.Grids.RowEditedEventArgs`1.EditContext"/> class that represents the current edit context. By default, the value is null.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.RowEditedEventArgs`1.ForeignKeyData">
            <summary>
            Gets the foreign key column data of the data grid.
            </summary>
            <value>
            A dictionary that represents the foreign key column data. Each key represents a foreign key column name and the value represents the associated data as an enumerable object.
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.FilteringEventArgs">
            <summary>
            Provides information about the <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.Filtering"/> event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.FilteringEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether to cancel the filtering or clear filtering action in the grid.
            </summary>
            <value>
            The default value is <c>false</c>. If the Cancel property is set to <c>true</c>, 
            then the filtering action or clear filtering action will be canceled.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.FilteringEventArgs.PreventFilterQuery">
            <summary>
            Gets or sets whether to prevent the grid column’s default filter query during the API call.
            </summary>
            <value>
            The default value is <c>false</c>.
            </value>
            <remarks>
            By default, when a filter is applied to a grid column, the grid sends a default filter request with the column name and filter value to the server. 
            In some cases, the default filter request may be too long and exceed URL length limitations, resulting in a long URI exception. This property provides an option to generate a custom filter query for a specific grid column and override the default filter request. 
            To utilize this property, set it to true within this event, and then override the <c>ProcessCustomFilterQuery</c> method in the adapter.   
            </remarks>
            <example>
            <code><![CDATA[
            @implements IDisposable
            <SfGrid AllowFiltering="true">
            <GridEvents TValue="Book" CheckboxFilterSearch="CheckboxFilterSearchHandler" Filtering="FilteringHandler"/>
            <GridForeignColumn @nameof(Book.CustomerId)>
            <SfDataManager @ref="DataManagerRef" Url="http://localhost:64956/odata/customers" Adaptor="Adaptors.ODataV4Adaptor"></SfDataManager>
            </GridForeignColumn>
            </SfGrid>
            @code{
            SfGrid<Order> Grid;
            public SfDataManager DataManagerRef { get; set; }
            public static Query CustomQuery = new Query();
            protected override void OnAfterRender(bool firstRender)
            {
               if (firstRender)
               {
                   DataManagerRef.DataAdaptor = new TestOData(DataManagerRef);
               }
               base.OnAfterRender(firstRender);
            }
            void IDisposable.Dispose()
            {        
               CustomQuery = null;
            }
            public class TestOData : ODataV4Adaptor
            {
               public TestOData(DataManager dm) : base(dm)
               {
               }
               public override Query ProcessCustomFilterQuery(Query query)
               {
                   return CustomQuery;
               }
            }
            private void CheckboxFilterSearchHandler(CheckboxFilterSearchEventArgs args)
            {
               if (args.SearchText != string.Empty)
               {
                 args.SearchText = string.Empty;
                 args.CheckboxListData = new List<Book>() { new Book() { Id = Guid.NewGuid(), CustomerId = Guid.NewGuid(), CustomerId1 = Guid.NewGuid(), Active = false, CreditLimit = 20 } };
               }
             }
            private void FilteringHandler(Syncfusion.Blazor.Grids.FilteringEventArgs<Book> args)
            {
              if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.ClearFiltering))
              {
                CustomQuery = new Query();
              }
              if (args.RequestType == Syncfusion.Blazor.Grids.Action.Filtering)
              {
                if (String.Equals(args.ColumnName, null, StringComparison.OrdinalIgnoreCase) && String.Equals(args.FilterPredicate?.Field, "Name", StringComparison.OrdinalIgnoreCase))
                {
                   CustomQuery = new Query();
                }
                if (String.Equals(args.ColumnName, nameof(Book.CustomerId), StringComparison.OrdinalIgnoreCase))
                {
                  args.PreventFilterQuery = true;
                  List<WhereFilter> AndPredicate = new List<WhereFilter>();
                  if (args.FilterPredicates != null)
                  {
                    foreach (var col in args.FilterPredicates)
                    {
                      AndPredicate.Add(new WhereFilter() { Field = "Customer/Name", Operator = col.Operator.ToString().ToLower(), value = col.Value, Condition = col.Predicate });
                    }
                    if (AndPredicate[0].Condition == "and")
                    {
                      CustomQuery = new Query().Where(new WhereFilter() { Condition = "and", IsComplex = true, predicates = AndPredicate });
                    }
                    else
                    {
                      CustomQuery = new Query().Where(new WhereFilter() { Condition = "or", IsComplex = true, predicates = AndPredicate });
                    }
                   }
                   else if (args.FilterPredicates == null)
                   {
                      CustomQuery = new Query().Where("Customer/Name", args.CurrentFilterObject.Operator.ToString().ToLower(), args.CurrentFilterObject.Value, true, true);
                   }
               }
             }
            }
            ]]>
            </code>        
            </example> 
        </member>
        <member name="T:Syncfusion.Blazor.Grids.FilteredEventArgs">
            <summary>
            Provides information about the <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.Filtered"/> event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.FilteredEventArgs.FilterPredicates">
            <summary>
            Gets the list of <see cref="T:Syncfusion.Blazor.Grids.PredicateModel`1"/> objects containing filter predicate model details currently associated with filtering.
            </summary>
            <value>
            A list of <see cref="T:Syncfusion.Blazor.Grids.PredicateModel`1"/> objects representing filter predicate model details currently associated with filtering.
            </value>
            <remarks>
            This property holds a collection of filter predicate values for a column currently undergoing filtering.
            - For filter types such as <see cref="F:Syncfusion.Blazor.Grids.FilterType.Excel"/> or <see cref="F:Syncfusion.Blazor.Grids.FilterType.CheckBox"/>,
              multiple predicate details are included from filtering using checkboxes and custom filters.
            - For filter types like <see cref="F:Syncfusion.Blazor.Grids.FilterType.Menu"/> or <see cref="F:Syncfusion.Blazor.Grids.FilterType.FilterBar"/>,
              only a single filter predicate detail is present.
            In essence, this property contains the current filter predicate details when a single or multiple values are filtered for a column.
            If the filter for a column is removed, the <see cref="P:Syncfusion.Blazor.Grids.FilteredEventArgs.FilterPredicates"/> property becomes null.
            To clear or reset filtering from all columns in the grid, use the <see cref="M:Syncfusion.Blazor.Grids.SfGrid`1.ClearFilteringAsync"/> method,
            which results in both the <see cref="P:Syncfusion.Blazor.Grids.FilteredEventArgs.FilterPredicates"/> and <c>ColumnName</c> properties becoming null.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.FilteredEventArgs.ColumnName">
            <summary>
            Gets the <see cref="P:Syncfusion.Blazor.Grids.GridColumn.Field"/> name of the column that is currently associated with filtering action.
            </summary>
            <value>
            The field name of the column that is currently associated with filtering, otherwise the value is <c>null</c>.
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.FilterDialogOpeningEventArgs">
            <summary>
            Provides information about the <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.FilterDialogOpening"/> event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.FilterDialogOpeningEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether to cancel the filter dialog opening action in the grid.
            </summary>
            <value>
            The default value is <c>false</c>. If the Cancel property is set to <c>true</c>, 
            then the filter dialog does not opened in the grid.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.FilterDialogOpeningEventArgs.ColumnName">
            <summary>
            Gets the <see cref="P:Syncfusion.Blazor.Grids.GridColumn.Field"/> name of the column which is associated with filtering.
            </summary>
            <value>
            The field name of the column which is associated with filtering. 
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.FilterDialogOpeningEventArgs.CheckboxListData">
            <summary>
            Gets or sets the custom data source for <see cref="F:Syncfusion.Blazor.Grids.FilterType.CheckBox"/> and <see cref="F:Syncfusion.Blazor.Grids.FilterType.Excel"/> filter.
            </summary>
            <value>
            An IEnumerable collection of objects that serve as the custom data source for the Checkbox and Excel filter types in grid, By default the value is <c>null</c>
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.FilterDialogOpeningEventArgs.FilterChoiceCount">
            <summary>
            Gets or sets the number of items to be displayed in the filter popup for <see cref="F:Syncfusion.Blazor.Grids.FilterType.CheckBox"/> and <see cref="F:Syncfusion.Blazor.Grids.FilterType.Excel"/> filters.
            </summary>
            <value>
            The number of items to be displayed in the filter popup. The default value is 0.
            </value>
            <remarks>
            If this property value is greater than 0, the filter popup will display the specified number of items. Otherwise, 1000 records will be displayed in the filter popup.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.FilterDialogOpeningEventArgs.FilterOperators">
             <summary>
             Gets or sets the custom filter operators for <see cref="F:Syncfusion.Blazor.Grids.FilterType.Menu"/> filter .
             </summary>
             <value>
             A list of <see cref="T:Syncfusion.Blazor.Grids.IFilterOperator"/> that represent the custom filter operators. By default, the value is null.
             </value>   
             /// <example>
             <code><![CDATA[
             <SfGrid TValue="Order" AllowFiltering="true" AllowPaging="true" DataSource="@Orders">
                <GridEvents FilterDialogOpening="FilterDialogOpeningHandler" TValue="Order"></GridEvents>
               <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
                . . .
            </SfGrid>
             @code {
                private SfGrid<Order> Grid;
                public List<Order> Orders { get; set; }
                public async Task FilterDialogOpeningHandler(FilterDialogOpeningEventArgs args)
                {
                   if (args.ColumnName == "OrderDate")//Specify Field name
                   {
                        args.FilterOperators = CustomerIDOperator;
                    }
                }
                public class Operators: IFilterOperator
                {
                    public Syncfusion.Blazor.Operator Value { get; set; }
                    public string Text { get; set; }
                }
                List<IFilterOperator> CustomerIDOperator = new List<IFilterOperator> {
                new Operators() { Text = "Equal", Value = Syncfusion.Blazor.Operator.Equal },
                new Operators() { Text = "Contains", Value = Syncfusion.Blazor.Operator.Contains },
                new Operators() { Text = "Greater/Equal(Between)", Value = Syncfusion.Blazor.Operator.GreaterThanOrEqual}
                };                
            }
            ]]>
             </code>
             </example>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.FilterDialogOpenedEventArgs">
            <summary>
            Provides information about the <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.FilterDialogOpened"/> event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.FilterDialogOpenedEventArgs.ColumnName">
            <summary>
            Gets the <see cref="P:Syncfusion.Blazor.Grids.GridColumn.Field"/> name of the column which is associated with filtering.
            </summary>
            <value>
            The field name of the column which is associated with filtering. 
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.FilterDialogOpenedEventArgs.CheckboxListData">
            <summary>
            Gets the custom data source for <see cref="F:Syncfusion.Blazor.Grids.FilterType.CheckBox"/> and <see cref="F:Syncfusion.Blazor.Grids.FilterType.Excel"/> filter.
            </summary>
            <value>
            An IEnumerable collection of objects that serve as the custom data source for the Checkbox and Excel filter types in grid, By default the value is <c>null</c>
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.FilterDialogOpenedEventArgs.FilterChoiceCount">
            <summary>
            Gets the number of items to be displayed in the filter popup for <see cref="F:Syncfusion.Blazor.Grids.FilterType.CheckBox"/> and <see cref="F:Syncfusion.Blazor.Grids.FilterType.Excel"/> filters.
            </summary>
            <value>
            The number of items to be displayed in the filter popup. The default value is 0.
            </value>
            <remarks>
            If this property value is greater than 0, the filter popup will display the specified number of items. Otherwise, 1000 records will be displayed in the filter popup.
            </remarks>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.CheckboxFilterSearchingEventArgs">
            <summary>
            Provides information about the <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.CheckboxFilterSearching"/> event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.CheckboxFilterSearchingEventArgs.CheckboxListData">
            <summary>
            Gets or sets the custom data source for <see cref="F:Syncfusion.Blazor.Grids.FilterType.CheckBox"/> and <see cref="F:Syncfusion.Blazor.Grids.FilterType.Excel"/> filter.
            </summary>
            <value>
            An IEnumerable collection of objects that serve as the custom data source for the Checkbox and Excel filter types in grid, by default the value is <c>null</c>
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.CheckboxFilterSearchingEventArgs.ColumnName">
            <summary>
            Gets the <see cref="P:Syncfusion.Blazor.Grids.GridColumn.Field"/> name associated with the current column for filtering.
            </summary>
            <value>
            The field name associated with the current column for filtering. 
            for remaining actions the value will be <c>null</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.CheckboxFilterSearchingEventArgs.SearchText">
            <summary>
            Gets or sets the string value to search in the search bar.
            </summary>
            <value>
            A string representing the value to search. Default value is an empty string.
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.ColumnReorderingEventArgs">
            <summary>
            Provides information about the <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.ColumnReordering"/> event.
            </summary>    
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ColumnReorderingEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether to cancel columns reordering action in the grid.
            </summary>
            <value>
            The default value is <c>false</c>. If the Cancel property is set to <c>true</c>, 
            then the columns reordering action will be Canceled in the grid.
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.ColumnReorderedEventArgs">
            <summary>
            Provides information about the <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.ColumnReordered"/> event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ColumnReorderedEventArgs.ReorderingColumns">
            <summary>
            Gets the list of the column associated with column reordering.
            </summary>
            <value>
            The list of <see cref="T:Syncfusion.Blazor.Grids.GridColumn"/> associated with column reordering.        
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ColumnReorderedEventArgs.ToColumn">
            <summary>
            Gets the destination column for placing the reordered columns during the column reorder action in the grid.
            </summary>
            <value>
            The destination <see cref="T:Syncfusion.Blazor.Grids.GridColumn"/> where the reordered columns will be positioned in the grid after the reorder action.        
            </value>
            <remarks>
            When dragging a column towards the left direction, the reordered columns will be placed before the destination column.
            Conversely, when dragging a column towards the right direction, the reordered columns will be placed after the destination column.
            </remarks>        
        </member>
        <member name="T:Syncfusion.Blazor.Grids.ColumnVisibilityChangingEventArgs">
            <summary>
            Provides information about the <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.ColumnVisibilityChanging"/> event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ColumnVisibilityChangingEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether to cancel a column visibility change in the grid.
            </summary>
            <value>
            The default value is <c>false</c>. If the <c>Cancel</c> property is set to <c>true</c>, 
            the column visibility change will be Canceled in the grid.
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.ColumnVisibilityChangedEventArgs">
            <summary>
            Provides information about the <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.ColumnVisibilityChanged"/> event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ColumnVisibilityChangedEventArgs.VisibleColumns">
            <summary>
            Gets the list of visible columns in the column chooser.
            </summary>
            <value>
            A list of <see cref="T:Syncfusion.Blazor.Grids.GridColumn"/> that represents the visible columns in the grid, By default the value is <c>null</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ColumnVisibilityChangedEventArgs.HiddenColumns">
            <summary>
            Gets the list of hidden <see cref="T:Syncfusion.Blazor.Grids.GridColumn"/> which is selected in column chooser.
            </summary>
            <value>
            A list of columns that represents the hidden columns using the column chooser.
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.ActionEventArgs`1">
            <summary>
            Provides information about the <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.OnActionBegin"/> event when grid action start's.
            Also, provides information about the <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.OnActionComplete"/> event when grid action completed.
            Provides information about the <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.OnActionBegin"/> event when a grid action begins and the
            <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.OnActionComplete"/> event when a grid action is completed.
            </summary>
            <typeparam name="T">TValue of the grid component.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ActionEventArgs`1.Action">
            <summary>
            Gets the CUD (Create, Update, Delete) actions that can be performed when the edit mode is set to <see cref="F:Syncfusion.Blazor.Grids.EditMode.Normal"/> or <see cref="F:Syncfusion.Blazor.Grids.EditMode.Dialog"/>.
            </summary>
            <value>
            <para>
            The possible values for this property are:
            </para>
            <list type="bullet">
            <item>
            <term>Add</term> <description>Indicates that a new record is being added.</description></item>
            <item>
            <term>Edit</term> <description>Indicates that an existing record is being edited and saved.</description></item>
            <item>
            <term>Delete</term> <description>Indicates that an existing record is being deleted.</description></item>
            </list>
            <para>
            The default value of this property is null.
            </para>
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ActionEventArgs`1.Cancel">
            <summary>
            Gets or sets a value indicating whether to cancel the current action.
            </summary>
            <value>
            The default value is <c>false</c>, If the Cancel property is set to <c>true</c>, the current action will be cancelled.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ActionEventArgs`1.PreventDataClone">
            <summary>
            Gets or sets whether to clone data object during editing. Set the property when the <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.OnActionBegin"/> event is triggered with <c>RequestType</c> as <c>BeforeBeginEdit</c>.
            </summary>
            <value>
            A boolean value that indicates whether the data object should be cloned or not when editing begins. The possible values for this property are:
            <list type="bullet">
            <item>
            <term>true</term><description>A clone of the data object will not be created and the original data object is used for editing.</description></item>
            <item>
            <term>false</term><description>A clone of the data object will be created and used for editing instead of the original data object.</description></item>
            </list>
            The default value is false.
            </value>
            <remarks>
            If <c>PreventDataClone</c> is set to <c>true</c>, the edited data will be saved even if the user discards the changes using the Cancel button in the toolbar.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ActionEventArgs`1.ColumnName">
            <summary>
            Gets or sets the <see cref="P:Syncfusion.Blazor.Grids.GridColumn.Field"/> name associated with the current column based on the current actions like <c>Grouping</c>, <c>Sorting</c>, and <c>Filtering</c>.
            </summary>
            <value>
            The field name associated with the current column based on the current actions like <c>Grouping</c>, <c>Sorting</c>, and <c>Filtering</c>,
            for remaining actions the value will be <c>null</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ActionEventArgs`1.FromColumns">
            <summary>
            Gets the list of columns to be moved while the <see cref="F:Syncfusion.Blazor.Grids.Action.Reorder"/> action is performed.
            </summary>
            <value>
            The list of <see cref="T:Syncfusion.Blazor.Grids.GridColumn"/> to be moved in the grid when the columns are reordered.
            If the column is not reordered, then the value of this property will be null.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ActionEventArgs`1.ToColumn">
            <summary>
            Gets the destination columns to place the reordered columns while the <see cref="F:Syncfusion.Blazor.Grids.Action.Reorder"/> action is performed in the grid.
            </summary>
            <value>
            The destination <see cref="T:Syncfusion.Blazor.Grids.GridColumn"/> to place the reordered columns in the grid when the columns are reordered.
            If the column is not reordered, then the value of this property will be null.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ActionEventArgs`1.Columns">
            <summary>
            Gets the <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:Syncfusion.Blazor.Grids.PredicateModel`1"/> of the filtered columns.
            </summary>
            <value>
            A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:Syncfusion.Blazor.Grids.PredicateModel`1"/> objects representing the filtered columns.
            When the filter type is <see cref="F:Syncfusion.Blazor.Grids.FilterType.Excel"/> or <see cref="F:Syncfusion.Blazor.Grids.FilterType.CheckBox"/>, this property will contain the filtered columns. Otherwise, the value of this property will be null.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ActionEventArgs`1.CurrentFilterObject">
            <summary>
            Gets the <see cref="T:Syncfusion.Blazor.Grids.PredicateModel`1"/> that is currently filtered.
            </summary>
            <value>
            When <c>AllowFiltering</c> is true then the value is <see cref="T:Syncfusion.Blazor.Grids.PredicateModel`1"/> representing the current filter object, otherwise the value is <c>null</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ActionEventArgs`1.CurrentFilteringColumn">
            <summary>
            Gets or sets the <see cref="P:Syncfusion.Blazor.Grids.GridColumn.Field"/> name of the column that is currently being filtered.
            </summary>
            <value>
            The field name of the column that is currently being filtered, when <c>Filtering</c> action is perfomed, otherwise the value is <c>null</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ActionEventArgs`1.CurrentPage">
            <summary>
            Gets or sets the current page number.
            </summary>
            <value>
            The current page number, The default value is 0.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ActionEventArgs`1.Data">
            <summary>
            Gets or sets the data of the grid for the current actions like grouping, filtering, sorting etc...
            </summary>
            <value>
            A <typeparamref name="T"/> object representing the data of the grid.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ActionEventArgs`1.Direction">
            <summary>
            Gets the direction of the sorted column.
            </summary>
            <remarks>
            The available sort directions are:
            <list type="bullet">
            <item><description>SortDirection.Ascending: Default, sorts records in ascending order. </description></item>
            <item><description>SortDirection.Desending: Sorts records in descending order. </description></item>
            </list>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ActionEventArgs`1.ExcelSearchOperator">
            <summary>
            Gets or sets the Excel search operator.
            </summary>
            <value>
            The <see cref="T:Syncfusion.Blazor.Operator"/> enum value that represents the selected search operator.
            </value>
            <remarks>
            Use this property to get or set the operator that will be used to filter data based on Excel-style search criteria. The available operators are specified by the <see cref="T:Syncfusion.Blazor.Operator"/> enum. 
            The default value is <see cref="F:Syncfusion.Blazor.Operator.None"/>.
            The available operators are:
            <list type="bullet">
            <item><description>None: No operator is selected. For example, if we set <see cref="F:Syncfusion.Blazor.Operator.None"/></description></item>
            <item><description>Contains: Checks whether the value contains the specified value. For example, if we set <see cref="F:Syncfusion.Blazor.Operator.Contains"/> and the search term is "an", then the item would contains "an", columns to be filtered.</description></item>
            <item><description>StartsWith: Checks whether the value begins with the specified value. For example, if we set <see cref="F:Syncfusion.Blazor.Operator.StartsWith"/> and the search term is "an", then the item would startswith "an", columns to be filtered.</description></item>
            <item><description>EndsWith: Checks whether the value ends with the specified value. For example, if we set <see cref="F:Syncfusion.Blazor.Operator.EndsWith"/> and the search term is "an", then the item would endswith "an", columns to be filtered.</description></item>
            <item><description>Equal: Checks whether the value is equal to the specified value. For example, if we set <see cref="F:Syncfusion.Blazor.Operator.Equal"/> and the search term is "an", then the item would equal to "an", columns to be filtered.</description></item>
            <item><description>NotEqual: Checks for values not equal to the specified value. For example, if we set <see cref="F:Syncfusion.Blazor.Operator.NotEqual"/> and the search term is "an", then the item would notequal to "an", columns to be filtered.</description></item>
            <item><description>GreaterThan: Checks whether the value is greater than the specified value. For example, if we set <see cref="F:Syncfusion.Blazor.Operator.GreaterThan"/> and the search term is "10", then the item would greaterthan to "10", columns to be filtered.</description></item>
            <item><description>GreaterThanOrEqual: Checks whether a value is greater than or equal to the specified value. For example, if we set <see cref="F:Syncfusion.Blazor.Operator.GreaterThanOrEqual"/> and the search term is "10", then the item would greaterthan or equal to "10", columns to be filtered.</description></item>
            <item><description>LesserThan: Checks whether the value is less than the specified value. For example, if we set <see cref="F:Syncfusion.Blazor.Operator.LessThan"/> and the search term is "10", then the item would lessthan to "10", columns to be filtered.</description></item>
            <item><description>LesserThanOrEqual: Checks whether the value is less than or equal to the specified value. For example, if we set <see cref="F:Syncfusion.Blazor.Operator.LessThanOrEqual"/> and the search term is "10", then the item would lessthan or equal to "10", columns to be filtered.</description></item>
            </list>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ActionEventArgs`1.FilterChoiceCount">
            <summary>
            Gets or sets the number of data to take while filtering.
            </summary>
            <value>
            The number of data to take while filtering, By default the value is 0.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ActionEventArgs`1.ForeignKeyData">
            <summary>
            Gets the foreign key column data.
            </summary>
            <value>
            A dictionary that represents the foreign key column data. Each key represents a foreign key column name and the value represents the associated data as an enumerable object.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ActionEventArgs`1.FilterOperators">
            <summary>
            Gets or sets the custom filter operators.
            </summary>
            <value>
            A list of objects that represent the custom filter operators. By default, the value is null.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ActionEventArgs`1.Form">
            <summary>
            Gets or sets the form element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ActionEventArgs`1.HiddenColumns">
            <summary>
            Gets the list of hidden <see cref="T:Syncfusion.Blazor.Grids.GridColumn"/> which is selected in column chooser.
            </summary>
            <value>
            A list of columns that represents the hidden columns using the column chooser.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ActionEventArgs`1.Index">
            <summary>
            Gets or sets the index of the row to be added.
            </summary>
            <value>
            The index at which the row will be added to the grid. By default, the value is 0.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ActionEventArgs`1.MovableForm">
            <summary>
            Define the movable table form element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ActionEventArgs`1.PreviousData">
            <summary>
            Gets the previous data of the row.
            </summary>
            <value>
            An object of type T that contains the previous data of the row. By default, the value is null.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ActionEventArgs`1.PreviousPage">
            <summary>
            Gets or sets the previous page number. The default value is 0.
            </summary>
            <value>
            The page number of the previous page.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ActionEventArgs`1.PrimaryKeyValue">
            <summary>
            Gets the primary key value of the <see cref="T:Syncfusion.Blazor.Grids.GridColumn"/>.
            </summary>
            <value>
            An object that defines the primary key value of the column when <see cref="P:Syncfusion.Blazor.Grids.GridColumn.IsPrimaryKey"/> is true, otherwise null.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ActionEventArgs`1.PrimaryKeys">
            <summary>
            Gets or sets the list of the primary key values.
            </summary>
            <value>
            A string array that contains the list of primary key values.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ActionEventArgs`1.RequestType">
            <summary>
             Gets the current <see cref="T:Syncfusion.Blazor.Grids.Action"/> in the grid like sorting, filtering, grouping, and etc.
            </summary>
            <value>The current action being performed in the grid.</value>
            <remarks>
            The request type assigned to the grid depends on the actions performed. The available request types include:
            <list type="bullet">
            <item><description>Add: When adding a new record in the normal or dialog edit mode enabled DataGrid.</description></item>
            <item><description>BeforeBeginEdit: Before the current record becomes editable state in the normal or dialog edit mode enabled DataGrid (occurs only in <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.OnActionBegin"/> event).</description></item>
            <item><description>BeginEdit: After the current record becomes editable state in the normal or dialog edit mode enabled DataGrid.</description></item>
            <item><description>Save: When saving a record in the normal or dialog edit mode enabled DataGrid.</description></item>
            <item><description>Delete: When deleting a record in the normal or dialog edit mode enabled DataGrid.</description></item>
            <item><description>Cancel: When canceling an edit operation in the normal or dialog edit mode enabled DataGrid.</description></item>
            <item><description>Filtering: When filtering data in the DataGrid.</description></item>
            <item><description>FilterBeforeOpen: Before opening the filter dialog for <see cref="F:Syncfusion.Blazor.Grids.FilterType.Menu"/>, <see cref="F:Syncfusion.Blazor.Grids.FilterType.Excel"/> and <see cref="F:Syncfusion.Blazor.Grids.FilterType.CheckBox"/> filter types (occurs only in <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.OnActionBegin"/> event.).</description></item>
            <item><description>FilterChoiceRequest: While fetching data to render the filtering checkboxes in <see cref="F:Syncfusion.Blazor.Grids.FilterType.Excel"/> or <see cref="F:Syncfusion.Blazor.Grids.FilterType.CheckBox"/> filter type.</description></item>
            <item><description>FilterAfterOpen: After a filter dialog is opened (occurs only in When a filter dialog is opened. It will assigned only in <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.OnActionComplete"/> event).</description></item>
            <item><description>Sorting: When sorting data in the DataGrid.</description></item>
            <item><description>Grouping: When grouping data in the DataGrid.</description></item>
            <item><description>UnGrouping: When ungrouping a column in the DataGrid.</description></item>
            <item><description>Paging: When navigating pages in the DataGrid.</description></item>
            <item><description>Reorder: When reordering a column in the DataGrid.</description></item>
            <item><description>RowDragAndDrop: When dragging and dropping rows in the DataGrid.</description></item>
            </list>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ActionEventArgs`1.Code">
            <summary>
            Gets the string that identifies the physical key being pressed, while saving the edited record using Enter or Tab keys in <see cref="F:Syncfusion.Blazor.Grids.EditMode.Normal"/> edit mode.
            </summary>
            <value>        
            <c>Enter</c>, if the Enter key is used to save the edited record.
            <c>Tab</c>, if the Tab key is pressed from the last edited cell or the <c>'Shift-Tab'</c>, key is pressed from the first edited cell.
            By default, the value is set to null.
            </value> 
            <remarks>
            The value of this property is assigned while performing the save operation using Enter or Tab keyboard keys. In this case, <see cref="P:Syncfusion.Blazor.Grids.ActionEventArgs`1.RequestType" /> will be 'Save', and the <see cref="P:Syncfusion.Blazor.Grids.ActionEventArgs`1.Action" /> will be 'Edit'. If no save operation has been performed, the value of this property will be null.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ActionEventArgs`1.IsShiftKeyPressed">
            <summary>
            Gets the boolean value that identifies whether the `Shift-Tab` key was pressed to save the edited record in <see cref="F:Syncfusion.Blazor.Grids.EditMode.Normal"/> edit mode.
            </summary>
            <value>
            <b>true</b> if the `Shift-Tab` key is pressed from the first edited cell, otherwise <b>false</b>.
            </value>
            <remarks>
            Corresponding value has been assigned while performing the save operation using `Shift-Tab` keyboard keys, also <see cref="P:Syncfusion.Blazor.Grids.ActionEventArgs`1.RequestType" /> will be 'Save' and the <see cref="P:Syncfusion.Blazor.Grids.ActionEventArgs`1.Action" /> will be 'Edit'. Otherwise value is null.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ActionEventArgs`1.Row">
            <summary>
            Defines the added row.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ActionEventArgs`1.RowData">
            <summary>
            Gets the data of the row.
            </summary>
            <value>
            The data of the row.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ActionEventArgs`1.RowIndex">
            <summary>
            Gets the edited rowIndex.
            </summary>
            <value>
            The edited row index. By default, the value is 0.
            </value>
            <remarks>
            The value of this property can be used to identify which row in a collection or a data source has been edited.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ActionEventArgs`1.SearchString">
            <summary>
            Gets or sets the string value to search.
            </summary>
            <value>
            Accepts the string value.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ActionEventArgs`1.PreventFilterQuery">
            <summary>
            Gets or Sets whether to prevent the grid column’s default filter query during the API call.
            </summary>
            <value>
            The default value is <c>false</c>.
            </value>
            <remarks>
            By default, when a filter is applied to a grid column, the grid sends a default filter request with the column name and filter value to the server. 
            In some cases, the default filter request may be too long and exceed URL length limitations, resulting in a long URI exception. This property provides an option to generate a custom filter query for a specific grid column and override the default filter request. 
            To use this property, set it to true in the <c>OnActionBegin</c> event with <c>RequestType</c> as <c>Filtering</c>, and override the <c>ProcessCustomFilterQuery</c> method in the adaptor. 
            </remarks>
            <example>
            <code><![CDATA[
            @implements IDisposable
            <SfGrid AllowFiltering="true">
            <GridEvents TValue="Book" OnActionBegin="OnActionBegin"/>
            <GridForeignColumn @nameof(Book.CustomerId)>
            <SfDataManager @ref="DataManagerRef" Url="http://localhost:64956/odata/customers" Adaptor="Adaptors.ODataV4Adaptor"></SfDataManager>
            </GridForeignColumn>
            </SfGrid>
            @code{
            SfGrid<Order> Grid;
            public SfDataManager DataManagerRef { get; set; }
            public static Query CustomQuery = new Query();
            protected override void OnAfterRender(bool firstRender)
            {
               if (firstRender)
               {
                   DataManagerRef.DataAdaptor = new TestOData(DataManagerRef);
               }
               base.OnAfterRender(firstRender);
            }
            void IDisposable.Dispose()
            {        
               CustomQuery = null;
            }
            public class TestOData : ODataV4Adaptor
            {
               public TestOData(DataManager dm) : base(dm)
               {
               }
               public override Query ProcessCustomFilterQuery(Query query)
               {
                   return CustomQuery;
               }
            }
            private void OnActionBegin(Syncfusion.Blazor.Grids.ActionEventArgs<Book> args)
            {
               if(args.RequestType == Syncfusion.Blazor.Grids.Action.FilterSearchBegin)
               {
                  if(args.SearchString != string.Empty)
                  {
                      args.SearchString = string.Empty;
                      args.CheckboxListData = new List<Book>() { new Book() { Id = Guid.NewGuid(), CustomerId = Guid.NewGuid(), CustomerId1 = Guid.NewGuid(), Active = false, CreditLimit = 20 }};
                   }
                }
                if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.ClearFiltering))
                {
                   CustomQuery = new Query();
                }
                if (args.RequestType == Syncfusion.Blazor.Grids.Action.Filtering)
                {
                   if (String.Equals(args.CurrentFilteringColumn, null, StringComparison.OrdinalIgnoreCase) && String.Equals(args.CurrentFilterObject?.Field, "Name", StringComparison.OrdinalIgnoreCase))
                   {
                       CustomQuery = new Query();
                   }
                   if (String.Equals(args.CurrentFilteringColumn, nameof(Book.CustomerId), StringComparison.OrdinalIgnoreCase))
                   {
                   args.PreventFilterQuery = true;
                   List<WhereFilter> AndPredicate = new List<WhereFilter>();
                   if (args.Columns != null)
                   {
                       foreach (var col in args.Columns)
                       {
                           AndPredicate.Add(new WhereFilter() { Field = "Customer/Name", Operator = col.Operator.ToString().ToLower(), value = col.Value, Condition = col.Predicate });
                       }
                       if (AndPredicate[0].Condition == "and")
                       {
                           CustomQuery = new Query().Where(new WhereFilter() { Condition = "and", IsComplex = true, predicates = AndPredicate });
                       }
                       else
                       {
                           CustomQuery = new Query().Where(new WhereFilter() { Condition = "or", IsComplex = true, predicates = AndPredicate });
                       }
                   }
                   else if (args.Columns == null)
                   {
                       CustomQuery = new Query().Where("Customer/Name", args.CurrentFilterObject.Operator.ToString().ToLower(), args.CurrentFilterObject.Value, true, true);
                   }
                   }
               }
            }
            }
            ]]>
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ActionEventArgs`1.SelectedRow">
            <summary>
            Gets the index of the currently selected row.
            </summary>
            <value>
            The index of the currently selected row. By default, the value is 0.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ActionEventArgs`1.Target">
            <summary>
            Defines the target for dialog.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ActionEventArgs`1.Tr">
            <summary>
            Defines the selected rows for delete.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ActionEventArgs`1.Type">
            <summary>
            Gets the type of the event.
            </summary>
            <value>
            A string value that represents the type of the event.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ActionEventArgs`1.VisibleColumns">
            <summary>
            Gets the list of visible columns in the column chooser.
            </summary>
            <value>
            A list of <see cref="T:Syncfusion.Blazor.Grids.GridColumn"/> that represents the visible columns in the grid, By default the value is <c>null</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ActionEventArgs`1.EditContext">
            <summary>
            Gets or sets the current <see cref="P:Syncfusion.Blazor.Grids.ActionEventArgs`1.EditContext"/> instance.
            </summary>
            <value>
            An instance of the <see cref="P:Syncfusion.Blazor.Grids.ActionEventArgs`1.EditContext"/> class that represents the current edit context. By default, the value is null.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ActionEventArgs`1.CheckboxListData">
            <summary>
            Gets or sets the custom data source for <see cref="F:Syncfusion.Blazor.Grids.FilterType.CheckBox"/> and <see cref="F:Syncfusion.Blazor.Grids.FilterType.Excel"/> filter.
            </summary>
            <value>
            An IEnumerable collection of objects that serve as the custom data source for the CheckBox and Excel filter types in grid, By default the value is <c>null</c>
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.IEditorSettings">
            <summary>
            Interface for editor customization.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.NumericEditCellParams">
            <summary>
            Defines edit params for in-build numerictextbox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.NumericEditCellParams.Params">
            <summary>
            Specifies the params of the numerictextbox editor.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.BooleanEditCellParams">
            <summary>
            Defines edit params for in-built checkbox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.BooleanEditCellParams.Params">
            <summary>
            Specifies the params of the checkbox.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.DropDownEditCellParams">
            <summary>
            Defines edit params for in-built dropdownlist.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.DropDownEditCellParams.Params">
            <summary>
            Specifies the params of the dropdownlist.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.DateEditCellParams">
            <summary>
            Defines edit params for in-built datepicker.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.DateEditCellParams.Params">
            <summary>
            Specifies the params of the datepicker.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.TimeEditCellParams">
            <summary>
             A class which holds edit setting to customize <see cref="T:Syncfusion.Blazor.Calendars.SfTimePicker`1"/> component while editing in grid. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.TimeEditCellParams.Params">
            <summary>
            Gets or sets the edit setting to customize in-built <see cref="T:Syncfusion.Blazor.Calendars.SfTimePicker`1"/> component while editing in grid.
            </summary>
            <value>
            A <see cref="T:Syncfusion.Blazor.Calendars.TimePickerModel`1"/> object that specifies the edit parameters for the time picker.
            </value>
            <remarks>
            This property allows to customize the time picker used in the edit form of the <see cref="T:Syncfusion.Blazor.Grids.SfGrid`1"/> component.
            </remarks>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.StringEditCellParams">
            <summary>
            Defines edit params for in-built textbox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.StringEditCellParams.Params">
            <summary>
            Specifies the params of the textbox.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.DialogSettings">
            <summary>
            Defines model for Dialog.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.DialogSettings.Height">
            <summary>
            Specifies the height of the Dialog.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.DialogSettings.Width">
            <summary>
            Specifies the width of the Dialog.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.DialogSettings.MinHeight">
            <summary>
            Specifies the minheight of the Dialog.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.DialogSettings.AllowDragging">
            <summary>
            Specifies the value whether the dialog component can be dragged by the end-user.
            The dialog allows a user to drag by selecting the header and dragging it for re-positioning the dialog.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.DialogSettings.ShowCloseIcon">
            <summary>
            Specifies the value that represents whether the close icon can be shown in the dialog’s title section.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.DialogSettings.CloseOnEscape">
            <summary>
            Specifies the Boolean value whether the dialog can be closed on pressing the escape (ESC) key
            that is used to control the dialog's closing behavior.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.DialogSettings.EnableResize">
            <summary>
            Specifies the value whether the dialog component can be resized by the end-user.
            If the EnableResize is true, the dialog component creates a grip to resize it in a diagonal direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.DialogSettings.CssClass">
            <summary>
            Specifies the CSS class name that can be appended with the root element of the dialog.
            One or more custom CSS classes can be added to a dialog.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.DialogSettings.Target">
            <summary>
            Specifies the target element in which the dialog should be displayed.
            The default value is null, which refers to the `Document.body` element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.DialogSettings.XValue">
            <summary>
            Specifies the offset left value to position the dialog.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.DialogSettings.YValue">
            <summary>
            Specifies the offset top value to position the dialog.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.DialogSettings.AnimationDelay">
            <summary>
            Specifies the delay in milliseconds to start the animation.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.DialogSettings.AnimationDuration">
            <summary>
            Specifies the duration in milliseconds that the animation takes to open or close the dialog.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.DialogSettings.AnimationEffect">
            <summary>
            Specifies the animation name that should be applied on while opening and closing the dialog.
            If the user sets Fade animation, the dialog will open with the `FadeIn` effect and close with the `FadeOut` effect.
            The following are the list of animation effects available to configure to the dialog:
            1. Fade
            2. FadeZoom
            3. FlipLeftDown
            4. FlipLeftUp
            5. FlipRightDown
            6. FlipRightUp
            7. FlipXDown
            8. FlipXUp
            9. FlipYLeft
            10. FlipYRight
            11. SlideBottom
            12. SlideLeft
            13. SlideRight
            14. SlideTop
            15. Zoom
            16. None.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.BatchChanges`1">
            <summary>
            Defines the batch changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.BatchChanges`1.ChangedRecords">
            <summary>
            Specifies the collection that contains changed records.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.BatchChanges`1.DeletedRecords">
            <summary>
            Specifies the collection that contains deleted records.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.BatchChanges`1.AddedRecords">
            <summary>
            Specifies the collection that contains added records.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.Autofill`1">
            <summary>
            Class that defines argument of the Autofill operation.
            </summary>
            <typeparam name="T">TValue of the grid component.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Autofill`1.IsSelected">
            <summary>
            Defines the Row selection.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Autofill`1.ISBoxSelected">
            <summary>
            Defines the AutofillBox selection.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Autofill`1.ISBorderSelected">
            <summary>
            Defines the AutofillBorder selection.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Autofill`1.IsBorderPositionSelected">
            <summary>
            Defines the AutofillBorder position selection.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Autofill`1.BorderRight">
            <summary>
            Defines the styles of Border's Right alignment.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Autofill`1.BordersWidth">
            <summary>
            Defines the styles of Border's border-Width alignment.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Autofill`1.BorderHeight">
            <summary>
            Defines the styles of border's Height alignment.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Autofill`1.BorderTop">
            <summary>
            Defines the styles of border's Top alignment.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Autofill`1.BorderWidth">
            <summary>
            Defines the styles border's  width alignment.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Autofill`1.BorderLeft">
            <summary>
            Defines the styles border's left alignment..
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Autofill`1.AutofillBoxDisplay">
            <summary>
            Defines the styles Box display.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Autofill`1.AutofillBorderDisplay">
            <summary>
            Defines the styles border display.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Autofill`1.AutofillDisplay">
            <summary>
            Defines the styles of border position display.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Autofill`1.AutofillRight">
            <summary>
            Defines the styles of Autofill's Right alignment.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Autofill`1.AutofillLeft">
            <summary>
            Defines the styles of Autofill's left alignment.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Autofill`1.AutofillTop">
            <summary>
            Defines the styles of Autofill's Top alignment.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Autofill`1.BorderLeftAutofillLeft">
            <summary>
            Defines the styles of border's Left Left alignment.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Autofill`1.BorderLeftAutofillTop">
            <summary>
            Defines the styles of border's Left Top alignment.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Autofill`1.BorderLeftAutofillRight">
            <summary>
            Defines the styles of border's Left Right alignment.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Autofill`1.BorderLeftAutofillHeight">
            <summary>
            Defines the styles of border's Left Height alignment.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Autofill`1.BorderLeftAutofillWidth">
            <summary>
            Defines the styles of border's Left Width alignment.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Autofill`1.BorderRightAutofillLeft">
            <summary>
            Defines the styles of border's Right Left alignment.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Autofill`1.BorderRightAutofillTop">
            <summary>
            Defines the styles of border's Right Top alignment.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Autofill`1.BorderRightAutofillRight">
            <summary>
            Defines the styles of border's Right Right alignment.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Autofill`1.BorderRightAutofillHeight">
            <summary>
            Defines the styles of border's Right Height alignment.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Autofill`1.BorderRightAutofillWidth">
            <summary>
            Defines the styles of border's Right Width alignment.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Autofill`1.BorderTopAutofillLeft">
            <summary>
            Defines the styles of border's Top Left alignment.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Autofill`1.BorderTopAutofillTop">
            <summary>
            Defines the styles of border's Top Top alignment.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Autofill`1.BorderTopAutofillRight">
            <summary>
            Defines the styles of border's Top Right alignment.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Autofill`1.BorderTopAutofillHeight">
            <summary>
            Defines the styles of border's Top Height alignment.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Autofill`1.BorderTopAutofillWidth">
            <summary>
            Defines the styles of border's Top Width alignment.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Autofill`1.BorderBottomAutofillLeft">
            <summary>
            Defines the styles of border's Bottom Left alignment.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Autofill`1.BorderBottomAutofillTop">
            <summary>
            Defines the styles of border's Bottom Top alignment.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Autofill`1.BorderBottomAutofillRight">
            <summary>
            Defines the styles of border's Bottom Right alignment.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Autofill`1.BorderBottomAutofillHeight">
            <summary>
            Defines the styles of border's Bottom Height alignment.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Autofill`1.BorderBottomAutofillWidth">
            <summary>
            Defines the styles of border's Bottom Width alignment.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEventBaseArgs.PreventRender">
            <summary>
            Setting true will override the ShouldRender method of grid to return false.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.ValidatorTemplateContext">
            <summary>
            Defines members of validator template context object.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ValidatorTemplateContext.Data">
            <summary>
            Defines the current edited data.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ValidatorTemplateContext.EditContext">
            <summary>
            Holds EditContext instance of the EditForm used by grid.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.ValidatorTemplateContext.ShowValidationMessage">
            <summary>
            Holds delegate instance to show hide validation message on the given editor.
            </summary>
            <remarks>
            Accepts argument such as Field name(string), valid state(bool) and message(string) to show/hide
            popup validation message on the editor.
            </remarks>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.SortColumn">
            <summary>
            Defines the Sort Column.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SortColumn.Field">
            <summary>
            Specifies the field of the column to be sorted.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SortColumn.Direction">
            <summary>
            Specifies the sort direction.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SortColumn.Equals(System.Object)">
            <summary>
            Compares the specified instance and the current instance of RemoteOptions
                for value equality.
            </summary>
            <param name="obj">The instance to compare.</param>
            <returns>true.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SortColumn.Equals(Syncfusion.Blazor.Grids.SortColumn)">
            <summary>
            Compares the specified instance and the current instance of RemoteOptions
                for value equality.
            </summary>
            <param name="other">The instance to compare.</param>
            <returns>true.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SortColumn.GetHashCode">
            <summary>
            Returns the hash code.
            </summary>
            <returns>int.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SortColumn.op_Equality(Syncfusion.Blazor.Grids.SortColumn,Syncfusion.Blazor.Grids.SortColumn)">
            <summary>
            Handles equal
            </summary>
            <param name="point1">argument one</param>
            <param name="point2">argument two</param>
            <returns>bool</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SortColumn.op_Inequality(Syncfusion.Blazor.Grids.SortColumn,Syncfusion.Blazor.Grids.SortColumn)">
            <summary>
            Handles unequal
            </summary>
            <param name="point1">argument one</param>
            <param name="point2">argument two</param>
            <returns>bool</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.GridAggregate">
            <summary>
            Configures grid aggregate.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridAggregate.MainParent">
            <summary>
            Defines the parent component.
            </summary>
            <exclude />
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridAggregate.ChildContent">
            <summary>
            Defines the child content.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridAggregate.Columns">
            <summary>
            Configures the aggregate columns.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.GridAggregateColumn">
            <summary>
            Configures grid aggregate column.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridAggregateColumn.ChildContent">
            <summary>
            Defines the child content.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridAggregateColumn.ColumnName">
            <summary>
            Defines the column name to display the aggregate value. If ColumnName is not defined,
            then Field name value will be assigned to the ColumnName` property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridAggregateColumn.Field">
            <summary>
            Defines the column name to perform aggregation.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridAggregateColumn.FooterTemplate">
            <summary>
            Defines the cell template for the footer aggregate column.
            The Type name should be used to access aggregate values inside the template.
            </summary>
            <remarks>
            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.
            The context is of type <see cref="T:Syncfusion.Blazor.Grids.AggregateTemplateContext"/>.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridAggregateColumn.Format">
            <summary>
            Format is applied to a calculated value before it is displayed.
            Gets the format from the user, which can be standard or custom formats.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridAggregateColumn.GroupCaptionTemplate">
            <summary>
            Defines the cell template for the group caption aggregate column.
            The Type name should be used to access aggregate values inside the template.
            </summary>
            <remarks>
            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.
            The context is of type <see cref="T:Syncfusion.Blazor.Grids.AggregateTemplateContext"/>.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridAggregateColumn.GroupFooterTemplate">
            <summary>
            Defines the cell template for the group footer aggregate column.
            The Type name should be used to access aggregate values inside the template.
            </summary>
            <remarks>
            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.
            The context is of type <see cref="T:Syncfusion.Blazor.Grids.AggregateTemplateContext"/>.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridAggregateColumn.Type">
            <summary>
            Defines the aggregate type of a particular column.
            Types of aggregate supported in-built are,.
            <list type="bullet">
            <item>
            <term><see cref="F:Syncfusion.Blazor.Grids.AggregateType.Sum"/></term>
            <description>Performes sum aggregation.</description>
            </item>
            <item><term><see cref="F:Syncfusion.Blazor.Grids.AggregateType.Average"/></term>
            <description>Performes average aggregation.</description>
            </item>
            <item><term><see cref="F:Syncfusion.Blazor.Grids.AggregateType.Count"/></term>
            <description>Performes count aggregation.</description>
            </item>
            <item><term><see cref="F:Syncfusion.Blazor.Grids.AggregateType.FalseCount"/></term>
            <description>Performes false count aggregation.</description>
            </item>
            <item><term><see cref="F:Syncfusion.Blazor.Grids.AggregateType.TrueCount"/></term>
            <description>Performes true count aggregation.</description>
            </item>
            <item><term><see cref="F:Syncfusion.Blazor.Grids.AggregateType.Max"/></term>
            <description>Performes max aggregation.</description>
            </item>
            <item><term><see cref="F:Syncfusion.Blazor.Grids.AggregateType.Min"/></term>
            <description>Performes min aggregation.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.GridAggregateColumns">
            <summary>
            Configures grid aggregate columms.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridAggregateColumns.ChildContent">
            <summary>
            Defines the child content.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridAggregateColumns.Columns">
            <summary>
            Defines the aggregate columns.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.GridAggregates">
            <summary>
            Configures grid aggregates.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridAggregates.ChildContent">
            <summary>
            Defines the child content.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridAggregates.Aggregates">
            <summary>
            Gets or sets the aggregate row collection.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.GridColumn">
            <summary>
            Configures grid columm.
            </summary>
            <summary>
            Configures a grid column.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridColumn.MainParent">
            <summary>
            Defines the parent component.
            </summary>
            <exclude />
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridColumn.ChildContent">
            <summary>
            Defines the child content.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridColumn.AllowEditing">
            <summary>
            If AllowEditing set to false, then it disables editing of a particular column.
            By default all columns are editable.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridColumn.AllowAdding">
            <summary>
            If AllowAdding set to false, then it disables add operation of a particular column.
            By default all columns are editable.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridColumn.AllowFiltering">
            <summary>
            If AllowFiltering set to false, then it disables filtering option and filter bar element of a particular column.
            By default all columns are filterable.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridColumn.AllowGrouping">
            <summary>
            If AllowGrouping set to false, then it disables grouping of a particular column.
            By default all columns are groupable.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridColumn.AllowReordering">
            <summary>
            If AllowReordering set to false, then it disables reorder of a particular column.
            By default all columns can be reorder.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridColumn.AllowResizing">
            <summary>
            If AllowResizing set to false, it disables resize option of a particular column.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridColumn.AllowSearching">
            <summary>
            If AllowSearching set to false, then it disables searching of a particular column.
            By default all columns are searchable.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridColumn.AllowSorting">
            <summary>
            If AllowSorting set to false, then it disables sorting option of a particular column.
            By default all columns are sortable.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridColumn.AutoFit">
            <summary>
            If AutoFit set to true, then the particular column content width will be
            adjusted based on its content in the initial rendering itself.
            Setting this property as true is equivalent to calling AutoFitColumns method in the DataBound event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridColumn.ClipMode">
            <summary>
            Defines the cell content's overflow mode. The available modes are.
            <list type="bullet">
            <item>
            <term><see cref="F:Syncfusion.Blazor.Grids.ClipMode.Clip"></see></term>
            <description>Truncates the cell content when it overflows its area.</description>
            </item>
            <item>
            <term><see cref="F:Syncfusion.Blazor.Grids.ClipMode.Ellipsis"></see></term>
            <description>Displays ellipsis when the cell content overflows its area.</description>
            </item>
            <item>
            <term><see cref="F:Syncfusion.Blazor.Grids.ClipMode.EllipsisWithTooltip"></see></term>
            <description>Displays ellipsis when the cell content overflows its area also it will display tooltip while hover on ellipsis applied cell.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridColumn.Columns">
            <summary>
            Used to render multiple header rows(stacked headers) on the Grid header.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridColumn.Commands">
            <summary>
            Commands provides an option to display command buttons in every cell.
            Use <see cref="T:Syncfusion.Blazor.Grids.GridCommandColumn"/> component to declare command columns.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridColumn.CustomAttributes">
            <summary>
            The CSS styles and attributes of the content cells of a particular column can be customized.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridColumn.DefaultValue">
            <summary>
            Defines default values for the component when adding a new record to the Grid.
            </summary>
            <remarks>If no default value is provided then the default value of the model property type will be
            used as initial value.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridColumn.DisableHtmlEncode">
            <summary>
            If DisableHtmlEncode is set to false, it disables the encodes the HTML of the header and content cells.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridColumn.DisplayAsCheckBox">
            <summary>
            If DisplayAsCheckBox is set to true, it displays the column value as a check box instead of Boolean value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridColumn.EditorSettings">
            <summary>
            Defines the object to customize default cell editors. The following types can be used to customize default
            editors.
            <list type="bullet">
            <item>
            <term><see cref="T:Syncfusion.Blazor.Grids.NumericEditCellParams"/></term>
            <description>Customizes the default numerictextbox editor.</description>
            </item>
            <item>
            <term><see cref="T:Syncfusion.Blazor.Grids.DropDownEditCellParams"/></term>
            <description>Customizes the default dropdown editor.</description>
            </item>
            <item>
            <term><see cref="T:Syncfusion.Blazor.Grids.DateEditCellParams"/></term>
            <description>Customizes the default datepicker editor.</description>
            </item>
            <item>
            <term><see cref="T:Syncfusion.Blazor.Grids.BooleanEditCellParams"/></term>
            <description>Customizes the default checkbox editor.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridColumn.EditTemplate">
            <summary>
            Defines the cell edit template that used as editor for a particular column.
            </summary>
            <remarks>
            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.
            The context is of type TValue.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridColumn.EditType">
            <summary>
            Gets or sets the type of editor component to be rendered in the edit form.
            </summary>
            <value>
            One of the <see cref="T:Syncfusion.Blazor.Grids.EditType"/> enumeration that specifies the editor component to be rendered in the edit form.
            If <code>EditType </code> is not provided then the EditType will inferred from the property type of the <c>TValue</c>.
            If <c>TValue</c> is <c>ExpandoObject</c>/ <c>DynamicObject</c>, then the <c>EditType</c> will inferred from the first data row.
            If <code>EditType</code> is not mentioned then the below components will rendered for the corresponding mentioned column types.
            For <c>String</c> type column, <see cref="T:Syncfusion.Blazor.Inputs.SfTextBox"/> will rendered in the edit form.
            For <c>Date</c> and <c>DateTime</c> type columns, <see cref="T:Syncfusion.Blazor.Calendars.SfDatePicker`1"/> will rendered in the edit form.
            For <c>DateOnly</c> type column, <see cref="T:Syncfusion.Blazor.Calendars.SfDatePicker`1"/> will rendered in the edit form.
            For <c>TimeOnly</c> type column, <see cref="T:Syncfusion.Blazor.Calendars.SfTimePicker`1"/> will rendered in the edit form.
            For <c>Boolean</c> type column, <see cref="T:Syncfusion.Blazor.Buttons.SfCheckBox`1"/> will rendered in the edit form.
            For <c>Number</c> type column, <see cref="T:Syncfusion.Blazor.Inputs.SfNumericTextBox`1"/> will rendered in the edit form.
            </value>
            <remarks>
            The <code>EditType</code> property can be set to one of the following values:
            <c>DefaultEdit</c>: <see cref="T:Syncfusion.Blazor.Inputs.SfTextBox"/> will rendered in the edit form
            <c>DropDownEdit</c>: <see cref="T:Syncfusion.Blazor.DropDowns.SfDropDownList`2"/> will rendered in the edit form.
            <c>BooleanEdit</c>: <see cref="T:Syncfusion.Blazor.Buttons.SfCheckBox`1"/> will rendered in the edit form.
            <c>DatePickerEdit</c>: <see cref="T:Syncfusion.Blazor.Calendars.SfDatePicker`1"/> will rendered in the edit form.
            <c>DateTimePickerEdit</c>: <see cref="T:Syncfusion.Blazor.Calendars.SfDateTimePicker`1"/> will rendered in the edit form.
            <c>NumericEdit</c>: <see cref="T:Syncfusion.Blazor.Inputs.SfNumericTextBox`1"/> will rendered in the edit form.
            <c>TimePickerEdit</c>: <see cref="T:Syncfusion.Blazor.Calendars.SfTimePicker`1"/> will rendered in the edit form.
            </remarks>
            <example>
            <code><![CDATA[
            <SfGrid DataSource="@Orders">
             <GridColumns>
            <GridColumn Field=@nameof(Order.Freight) EditType="EditType.NumericEdit" ></GridColumn>
             </GridColumns>
            </SfGrid>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridColumn.EnableGroupByFormat">
            <summary>
            If EnableGroupByFormat set to true, then it groups the particular column by formatted values.
            By default columns are group by format.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridColumn.Field">
            <summary>
            Defines the field name of column which is mapped with mapping name of DataSource.
            The bounded columns can be sort, filter and group etc.,
            If the Field name contains “dot”, then it is considered as complex binding.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridColumn.FilterSettings">
            <summary>
             Defines the filter options to customize filtering for the particular column.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridColumn.FilterTemplate">
            <summary>
            Defines the filter template that used as filter UI for a particular column in FilterBar and Menu.
            </summary>
            <remarks>
            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.
            The context is of type <see cref="T:Syncfusion.Blazor.Grids.PredicateModel"/>.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridColumn.ForeignKeyField">
            <summary>
            Defines the mapping column name of the foreign data source.
            If it is not defined then the Field will be considered as mapping column name.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridColumn.ForeignKeyValue">
            <summary>
            Defines the display column name from the foreign data source which will be obtained from comparing local and foreign data.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridColumn.Format">
            <summary>
            It is used to change display value with the given format and does not affect the original data.
            Gets the format from the user which can be standard or custom formats.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridColumn.HeaderTemplate">
            <summary>
            Defines the column template which is used to add customized element in the column header.
            </summary>
            <remarks>
            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.
            The context is of type <see cref="T:Syncfusion.Blazor.Grids.GridColumn"/>.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridColumn.HeaderText">
            <summary>
            Defines the header text of column which is used to display in column header.
            If HeaderText is not defined, then field name value will be assigned to header text.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridColumn.HeaderTextAlign">
            <summary>
            Define the alignment of column header which is used to align the text of column header.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridColumn.HideAtMedia">
            <summary>
            Column visibility can change based on its Media Queries.
            HideAtMedia accepts only valid Media Queries.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridColumn.Index">
            <summary>
            Gets the unique identifier value of the column. It is used to get the object.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridColumn.OriginalIndex">
            <exclude />
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridColumn.IsPersistAutoFit">
            <exclude />
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridColumn.TableWidth">
            <exclude />
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridColumn.LeftFrozenTableWidth">
            <exclude />
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridColumn.RightFrozenTableWidth">
            <exclude />
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridColumn.TranslateLeftRightValue">
            <exclude />
            <summary>
            You can use this property to update it's freeze right and left column width.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridColumn.IsFrozen">
            <summary>
            You can use this property to freeze selected columns in grid.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridColumn.IsIdentity">
            <summary>
            If IsIdentity is set to true, then this column is considered as identity column.
            This column will be in disabled state in add form.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridColumn.IsPrimaryKey">
            <summary>
            If IsPrimaryKey is set to true, considers this column as the primary key constraint.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridColumn.LockColumn">
            <summary>
            Defines the mapping column name of the foreign data source.
            If it is not defined then the Field will be considered as mapping column name.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridColumn.MaxWidth">
            <summary>
            Defines the maximum width of the column in pixel or percentage, which will restrict resizing beyond this pixel or percentage.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridColumn.MinWidth">
            <summary>
            Defines the minimum width of the column in pixels or percentage.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridColumn.ShowColumnMenu">
            <summary>
            If ShowColumnMenu set to false, then it disable the column menu of a particular column.
            By default column menu will show for all columns.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridColumn.ShowInColumnChooser">
            <summary>
            If ShowInColumnChooser set to false, then hides the particular column in column chooser.
            By default all columns are displayed in column chooser.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridColumn.SortComparer">
            <summary>
            Gets or sets the custom sort comparer function to implement own sort logic for a particular column.
            For foreign key column with local data source a sort comparer will be assigned by default to sort it by text(ForeignKeyValue) instead of the underlying field value.
            </summary>
            <remarks>
            Custom sort comparer cannot be used with remote data and Entity framework data source.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridColumn.Template">
            <summary>
            Defines the column template that renders customized element in each cell of the column.
            </summary>
            <remarks>
            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.
            The context is of type <c>TValue</c>.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridColumn.TextAlign">
            <summary>
            Defines the alignment of the column in both header and content cells.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridColumn.Freeze">
            <summary>
            Defines which side the column need to freeze.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridColumn.Type">
             <summary>
             Gets or sets the column type of the <see cref="T:Syncfusion.Blazor.Grids.GridColumn"/>. 
             It determines how the data in the column will be displayed based on the specified type.
             </summary>
             <value>
             One of the <see cref="T:Syncfusion.Blazor.Grids.ColumnType"/> enumerations that specify the column type. 
             If the column type is not explicitly defined, the <code>Type</code> will be inferred from the property type of <c>TValue</c>.
             If <c>TValue</c> is <c>ExpandoObject</c> or <c>DynamicObject</c>, the <code>Type</code> will be inferred from the first row of the grid data.
             </value>
             <remarks>
             The <code>Type</code> property can be set to one of the following values:
             <c>String</c>: The column will display the string values in the UI. For example “Alfki”, “UK”. 
             <c>Number</c>: The column will display the numeric values such as int, int?, float, double, decimal etc. For example 2, 2.5, 3.33 
             <c>Integer</c>: Displays integer values from <see cref="T:System.Int32"/> struct. Example: 5, 123
             <c>Double</c>: Displays double values from <see cref="T:System.Double"/> struct. Example: 3.33, 45.567
             <c>Long</c>: Displays long integer values from <see cref="T:System.Int64"/> struct. Example: 255486129307
             <c>Decimal</c>: Displays decimal values from <see cref="T:System.Decimal"/> struct. Example: 123.45M
             <c>Boolean</c>: The column will display the boolean values such as true or false.
             <c>Date</c> and <c>DateTime</c>: The column will display the datetime value from the <see cref="T:System.DateTime"/> and <see cref="T:System.DateTimeOffset"/> struct.
             <c>DateOnly</c>: The column will display the date value from <see cref="T:System.DateOnly"/> struct. For example 2/1/2023
             <c>TimeOnly</c>: The column will display the time value from <see cref="T:System.TimeOnly"/> struct. For example 11:15 AM
             <c>CheckBox</c>: Display the checkbox for selection purpose. No data operation is assosiated with this column.
             This <code>Type</code> property is mainly used for <c>ExpandoObject</c> and <c>DynamicObject</c>.
             </remarks>
             <example>
             <code><![CDATA[
             <SfGrid DataSource="@Orders">
              <GridColumns>
             <GridColumn Field=@nameof(Order.OrderDate) Type="ColumnType.DateOnly"></GridColumn>
              </GridColumns>
             </SfGrid>
            @code{
            public class Order
            {
                 public DateOnly? OrderDate { get; set; }
            }
            }
             ]]></code>
             </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridColumn.Uid">
            <summary>
            Gets the unique identifier value of the column. It is used to get the object.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridColumn.ValidationRules">
            <summary>
            Defines rules to validate data before creating and updating. The validation rules can be set
            as instance of <see cref="T:Syncfusion.Blazor.Grids.ValidationRules"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridColumn.Visible">
            <summary>
            If Visible is set to false, hides the particular column. By default, all columns are displayed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridColumn.Width">
            <summary>
            Defines the width of the column in pixels or percentage.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridColumn.FilterItemTemplate">
            <summary>
            Defines the Checkbox Item template that renders customized element/value in each checkbox of the Filter column.
            </summary>
            <remarks>
            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.
            The context is of type <see cref="T:Syncfusion.Blazor.Grids.FilterItemTemplateContext"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.GridColumn.ShouldSerializeChildContent">
            Below codes added to ignore the specified properties while serialization by JSON.net.
            <exclude />
        </member>
        <member name="M:Syncfusion.Blazor.Grids.GridColumn.ShouldSerializeTemplate">
            <exclude />
        </member>
        <member name="M:Syncfusion.Blazor.Grids.GridColumn.ShouldSerializeFilterTemplate">
            <exclude />
        </member>
        <member name="M:Syncfusion.Blazor.Grids.GridColumn.ShouldSerializeEditTemplate">
            <exclude />
        </member>
        <member name="M:Syncfusion.Blazor.Grids.GridColumn.ShouldSerializeHeaderTemplate">
            <exclude />
        </member>
        <member name="M:Syncfusion.Blazor.Grids.GridColumn.ShouldSerializeFilterItemTemplate">
            <exclude />
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridColumn.PreventFilterQuery">
            <summary>
            The value set to the PreventFilterQuery property in OnActionBegin event handler is maintained by using this property.
            This helps to prevent the default filter query generation for previously filtered columns during the multiple column filtering.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridColumn.ColumnData">
            <summary>
            Provides the data for the grid columns.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridColumn.FrozenMovableLabel">
            <summary>
            Gets or sets the text to be displayed whether the column is Left frozen, right frozen and movable column.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridColumn.NullDisplayText">
            <summary>
            Gets or sets the text to be displayed when the value of the property is null.
            This annotation attribute is used for UI display purposes only and does not affect the underlying data source or grid actions.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridColumn.ConvertEmptyStringToNull">
            <summary>
            Gets or sets a value indicating whether empty string values should be converted to null in UI.
            </summary>
            <value>
            <c>true</c> if empty string values should be converted to null; otherwise, <c>false</c>.
            </value>
            <remarks>
            When this property is set to true, if a column has an empty string value, it will be automatically converted to null in the UI.
            This conversion is specific to the UI and does not affect the underlying data source or other operations.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridColumn.Description">
            <summary>
            Gets or sets the text to be displayed for the tooltip.
            </summary>
            <value>
            The text to be used as the tooltip content.
            </value>
            <remarks>
            By default, the header text is used as the tooltip content. However, if a description is specified in the model's annotation, the description value is applied as the tooltip content instead of the header text.
            </remarks>
            <exclude />
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridColumn.ApplyFormatInEditMode">
            <summary>
            Gets or sets a value indicating whether the column format should be applied in edit mode.
            </summary>
            <value>
            <c>true</c> if the format should be applied in edit mode; otherwise, <c>false</c>.
            </value>
            <remarks>
            When this property is set to true, the specified column format will be applied in edit mode. This allows for consistent formatting of the column value during editing.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.GridColumn.IsForeignColumn">
            <summary>
            Returns true if the column is foreign key column.
            </summary>
            <returns>bool.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.GridColumn.IsForeignKeyField">
            <summary>
            Returns true if the Foreignkeyfield and Field property is not same is foreign key column.
            </summary>
            <returns>bool.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.GridColumn.GetData(Syncfusion.Blazor.DataManagerRequest)">
            <summary>
            Performs data operation in the foreign key column based on the given query and returns data.
            </summary>
            <param name="dataManagerRequest">Query value to be used for data fetching.</param>
            <returns>object.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.GridColumn.SetVisibility(System.Boolean)">
            <summary>
            Set column visibility.
            </summary>
            <param name="visibility">Value to be set in the <c>Visible</c> property.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.GridColumn.SetWidth(System.String)">
            <summary>
            Set column width.
            </summary>
            <param name="width">Value to be set in the <c>Width</c> property.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.GridColumn.SetUid(System.String)">
            <summary>
            Set column uid.
            </summary>
            <param name="uid">Value to be set in the <c>Uid</c> property.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.GridColumn.GetForeignData">
            <summary>
            Get Foreign Data.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.GridColumnChooserSettings">
            <summary>
            Configures grid column chooser settings.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridColumnChooserSettings.MainParent">
            <summary>
            Defines the parent component.
            </summary>
            <exclude />
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridColumnChooserSettings.Operator">
            <summary>
            Defines the search operator for Column Chooser.
            By default search operator is <see cref="T:Syncfusion.Blazor.Operator"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridColumnChooserSettings.Template">
            <summary>
            Defines the custom content for the column chooser dialog. This can be used to introduce own UI inside the column chooser dialog content.
            The checkboxes can be rendered using <see cref="T:Syncfusion.Blazor.Grids.GridColumnChooserItem"/> component.
            </summary>
            <remarks>
            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.
            The context is of type <see cref="T:Syncfusion.Blazor.Grids.ColumnChooserTemplateContext"/> of the grid.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridColumnChooserSettings.FooterTemplate">
            <summary>
            Defines the custom footer content for the column chooser.This can be used to introduce own UI inside the column chooser dialog footer content.
            </summary>
            <remarks>
            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.
            The context is of type <see cref="T:Syncfusion.Blazor.Grids.ColumnChooserFooterTemplateContext"/> of the grid.
            </remarks>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.GridColumns">
            <summary>
            Configures grid columns.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridColumns.MainParent">
            <summary>
            Defines the parent component.
            </summary>
            <exclude />
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridColumns.ChildContent">
            <summary>
            Defines the child content.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.GridCommandColumn">
            <summary>
            Configures grid command column.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridCommandColumn.ChildContent">
            <summary>
            Defines the child content.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridCommandColumn.ButtonOption">
            <summary>
            Define the button model.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridCommandColumn.Title">
            <summary>
            Define the command button tooltip.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridCommandColumn.ID">
            <summary>
            Define the command button ID.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridCommandColumn.Type">
            <summary>
            Define the command button type.
            <list type="bullet">
            <item>
            <term>None</term>
            <description>Default. A command button with no default action. Use this for custom command actions.</description>
            </item>
            <item>
            <term>Edit</term>
            <description>A edit command button that edit current record.</description>
            </item>
            <item>
            <term>Delete</term>
            <description>A delete command button that delete current record.</description>
            </item>
            <item>
            <term>Save</term>
            <description>A save command button that saves the current edited record.</description>
            </item>
            <item>
            <term>Cancel</term>
            <description>A cancel command button that cancels the edit state.</description>
            </item>
            </list>
            </summary>
            <remarks>
            To use custom command button, set Type as <see cref="F:Syncfusion.Blazor.Grids.CommandButtonType.None"/> and use
            <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.CommandClicked"/> event to perform custom action.
            </remarks>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.GridCommandColumns">
            <summary>
            Configures grid command columns.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridCommandColumns.ChildContent">
            <summary>
            Defines the child content.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridCommandColumns.Commands">
            <summary>
            Defines the command button collection. Use <see cref="T:Syncfusion.Blazor.Grids.GridCommandColumn"/> component
            to provide command buttons.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.GridEditSettings">
            <summary>
            Configures grid edit settings.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEditSettings.ChildContent">
            <summary>
            Defines the child content.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEditSettings.AllowAdding">
            <summary>
            If AllowAdding is set to true, new records can be added to the Grid.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEditSettings.AllowDeleting">
            <summary>
            If AllowDeleting is set to true, existing record can be deleted from the Grid.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEditSettings.AllowEditOnDblClick">
            <summary>
            If AllowEditOnDblClick is set to false, Grid will not allow editing of a record on double click.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEditSettings.AllowEditing">
            <summary>
            If AllowEditing is set to true, values can be updated in the existing record.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEditSettings.AllowNextRowEdit">
            <summary>
            If allowNextRowEdit is set to true, editing is done to next row. By default allowNextRowEdit is set to false.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEditSettings.Dialog">
            <summary>
            Defines the dialog params to edit.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEditSettings.FooterTemplate">
            <summary>
            Defines the custom footer for the edit dialog.
            </summary>
            <remarks>
            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.
            The context is of type TValue of the grid.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEditSettings.HeaderTemplate">
            <summary>
            Defines the custom header for the edit dialog.
            </summary>
            <remarks>
            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.
            The context is of type TValue of the grid.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEditSettings.Mode">
            <summary>
            Defines the mode to edit. The available editing modes are:
            <list type="bullet">
            <item>
            <term>Normal</term>
            <description>Default. Editing is done in an inline form. Edit form is rendered inline as one of the table rows.</description>
            </item>
            <item>
            <term>Dialog</term>
            <description>Editing is done in a Dialog/Pop component.</description>
            </item>
            <item>
            <term>Batch</term>
            <description>Enables cell editing. Multiple cells can be edited, added or deleted and saved.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEditSettings.NewRowPosition">
            <summary>
            Defines the position of adding a new row. The available position are:
            <list type="bullet">
            <item>
            <term>Top</term>
            <description>Default. Add form is placed at the first row of the grid.</description>
            </item>
            <item>
            <term>Bottom</term>
            <description>Add form is placed at the last row of the grid</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEditSettings.ShowAddNewRow">
            <summary>
            Gets or sets a value indicating whether to display a new blank row during grid initialization, facilitating the addition of new records.
            </summary>
            <value>
            <c>true</c>, a new blank row is displayed on the grid content. The default value is <c>false</c>.
            </value>
            <remarks>    
            By default, the new blank row is displayed at the top of the grid content. A new blank row can be displayed either at the top or bottom of the corresponding page, depending on the setting of the <see cref="P:Syncfusion.Blazor.Grids.GridEditSettings.NewRowPosition"/> property. 
            However, it's important to note that the <c>ShowAddNewRow</c> property solely pertains to the display of a new blank row in the <see cref="F:Syncfusion.Blazor.Grids.EditMode.Normal"/> editing mode. 
            If the <see cref="P:Syncfusion.Blazor.Grids.GridEditSettings.AllowAdding"/> property is set to false, the new blank row will be disabled.
            Additionally, if any of the grid column's <see cref="P:Syncfusion.Blazor.Grids.GridColumn.AllowAdding"/> properties is set to false, the corresponding column cell will also be disabled.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEditSettings.ShowConfirmDialog">
            <summary>
            If ShowConfirmDialog is set to false, confirm dialog does not show when batch changes are saved or discarded.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEditSettings.ShowDeleteConfirmDialog">
            <summary>
            If ShowDeleteConfirmDialog is set to true, confirm dialog will show delete action. You can also cancel delete command.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEditSettings.Template">
            <summary>
            Defines the custom content and edit elements for the edit dialog.
            </summary>
            <remarks>
            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.
            The context is of type TValue of the grid.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEditSettings.Validator">
            <summary>
            Defines the custom validator component for the built-in EditForm. Use this to override built-in
            validation components.
            </summary>
            <remarks>
            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.
            The context is of type <see cref="T:Syncfusion.Blazor.Grids.ValidatorTemplateContext"/>.
            </remarks>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.GridEvents`1">
            <summary>
            Configures grid events.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.PageChanging">
             <summary>
             Gets or sets the event callback that is raised before paging action is performed in the grid.
             </summary>
             <remarks>
             The event handler receives a <see cref="T:Syncfusion.Blazor.Grids.GridPageChangingEventArgs"/> object, which provides details about the before paging action in the grid.
            </remarks>
             <value>
             An event callback function.
             </value>
             <example>
             This example shows how to handle the PageChanging event:
             <code><![CDATA[
             <SfGrid DataSource="@Orders" @ref="DefaultGrid" >
             <GridEvents TValue="Orders" PageChanging="PageChangingHandler"></GridEvents>
             ........
             </SfGrid>
             @code {
             public async Task PageChangingHandler (GridPageChangingEventArgs args)
             {
                  args.CurrentPage = 2; // Sets the current page number.
             }
             ]]>
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.PageChanged">
             <summary>
             Gets or sets the event callback that is raised after paging action is performed in the grid.
             </summary>
             <remarks>
             The event handler receives a  <see cref="T:Syncfusion.Blazor.Grids.GridPageChangedEventArgs"/> object, which provides details about the after paging action in the grid.
            </remarks>
             <value>
             An event callback function.
             </value>
             <example>
             This example shows how to handle the PageChanged event:
             <code><![CDATA[
             <SfGrid DataSource="@Orders" @ref="DefaultGrid" >
             <GridEvents TValue="Orders" PageChanged="PageChangedHandler"></GridEvents>
             ........
             </SfGrid>
             @code{
             public async Task PageChangedHandler (GridPageChangedEventArgs args)
             {
                  int pagenumber = args.CurrentPage; // Gets the current page number.
             }
             ]]>
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.Sorting">
             <summary>
             Gets or sets the event callback that is invoked before a sorting action is performed or a column is removed from sorting in the grid or when the sort column direction changes from Ascending to Descending or vice versa for the same column.
             </summary>
             <remarks>
             The event handler receives a  <see cref="T:Syncfusion.Blazor.Grids.SortingEventArgs"/> object, which provides details about the before sorting action or a column is removed from sorting in the grid or when the sort column direction changes from <c>Ascending</c> to <c>Descending</c> or vice versa for the same column.
            </remarks>
             <value>
             An event callback function.
             </value>
             <example>
             This example shows how to handle the Sorting event:
             <code><![CDATA[
             <SfGrid DataSource="@Orders" @ref="DefaultGrid" >
             <GridEvents TValue="Orders" Sorting="SortingHandler"></GridEvents>
             ........
             </SfGrid>
             @code{
             public async Task SortingHandler(SortingEventArgs args)
             {
                 args.Cancel = true; // To cancel the sorting action.
             }
             ]]>
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.Sorted">
             <summary>
             Gets or sets the event callback that is raised after sorting action is performed in the grid.
             </summary>
             <remarks>
             The event handler receives a <see cref="T:Syncfusion.Blazor.Grids.SortedEventArgs"/> object, which provides details about the after sorting action in the grid.
            </remarks>
             <value>
             An event callback function.
             </value>
             <example>
             This example shows how to handle the Sorted event:
             <code><![CDATA[
             <SfGrid DataSource="@Orders" @ref="DefaultGrid" >
             <GridEvents TValue="Orders" Sorted="SortedHandler"></GridEvents>
             ........
             </SfGrid>
             @code{
             public async Task SortedHandler(SortedEventArgs args)
             {
                var direction = args.Direction; // Gets the current sorting direction.
             }
             ]]>
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.Grouping">
             <summary>
             Gets or sets the event callback that is raised after grouping action or un-grouping action is performed in the grid.
             </summary>
             <remarks>
             The event handler receives a  <see cref="T:Syncfusion.Blazor.Grids.GroupingEventArgs"/> object, which provides details about the before grouping action or un-grouping action in the grid.
            </remarks>
             <value>
             An event callback function.
             </value>
             <example>
             This example shows how to handle the Grouping event:
             <code><![CDATA[
             <SfGrid DataSource="@Orders" @ref="DefaultGrid" >
             <GridEvents TValue="Orders" Grouping="GroupingHandler"></GridEvents>
             ........
             </SfGrid>
             @code{
             public async Task GroupingHandler(GroupingEventArgs args)
             {
                 args.Cancel = true; // To cancel the grouping action.
             }
             ]]>
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.Grouped">
             <summary>
             Gets or sets the event callback that is raised after grouping or ungrouping action is performed in the grid.
             </summary>
             <remarks>
             The event handler receives a  <see cref="T:Syncfusion.Blazor.Grids.GroupedEventArgs"/> object, which provides details about the after grouping or ungrouping action in the grid.
            </remarks>
             <value>
             An event callback function.
             </value>
             <example>
             This example shows how to handle the Grouped event:
             <code><![CDATA[
             <SfGrid DataSource="@Orders" @ref="DefaultGrid" >
             <GridEvents TValue="Orders" Grouped="GroupedHandler"></GridEvents>
             ........
             </SfGrid>
             @code{
             public async Task GroupedHandler(GroupedEventArgs args)
             {
                  var groupedColumns = args.ColumnName; // Gets the grouped columns.
             }
             ]]>
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.Searching">
            <summary>
            Gets or sets the event callback that is raised before the search action is performed in the grid.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.SearchingEventArgs"/> object, 
            which provides details about the search action in the grid.
            </remarks>
            <value>
            An event callback function.
            </value>
            <example>
            This example shows how to handle the Searching event:
            <code><![CDATA[
            <SfGrid DataSource="@Orders" @ref="DefaultGrid" >
            <GridEvents TValue="Orders" Searching ="SearchingHandler"></GridEvents>
            ........
            </SfGrid>
            @code {
            public async Task SearchingHandler (SearchingEventArgs args)
            {
                args.Cancel = true; // To cancel the search begin action.
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.Searched">
             <summary>
             Gets or sets the event callback that is raised after the search action is performed in the grid.
             </summary>
             <remarks>
             The event handler receives a  <see cref="T:Syncfusion.Blazor.Grids.SearchedEventArgs"/> object, 
             which provides details about the after-search action in the grid.
            </remarks>
             <value>
             An event callback function.
             </value>
             <example>
             This example shows how to handle the Searched event:
             <code><![CDATA[
             <SfGrid DataSource="@Orders" @ref="DefaultGrid" >
             <GridEvents TValue="Orders" Searched="SearchedHandler"></GridEvents>
             ........
             </SfGrid>
             @code{
             public async Task SearchedHandler (SearchedEventArgs args)
             {
               var searchResult = args.SearchString; // Gets the search result.
             }
             ]]>
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.RowCreating">
            <summary>
            Gets or sets the event callback that is raised before the add action is performed in the grid.
            </summary>
            <remarks>
            The event handler receives a  <see cref="T:Syncfusion.Blazor.Grids.RowCreatingEventArgs`1"/> object, 
            which provides details about the before add action in the grid.
            </remarks>
            <value>
            An event callback function.
            </value>
            <example>
            This example shows how to handle the RowCreating event:
            <code><![CDATA[
            <SfGrid DataSource="@Orders" @ref="DefaultGrid" >
            <GridEvents TValue="Orders" RowCreating ="RowAddingHandler"></GridEvents>
            ........
            </SfGrid>
            @code{
            public async Task RowAddingHandler (RowCreatingEventArgs<Order> args)
            {
               args.Cancel = true; // To cancel the add action.
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.RowCreated">
            <summary>
            Gets or sets the event callback that is raised after the add action is performed in the grid.
            </summary>
            <remarks>
            The event handler receives a  <see cref="T:Syncfusion.Blazor.Grids.RowCreatedEventArgs`1"/> object, 
            which provides details about the after add action in the grid.
            </remarks>
            <value>
            An event callback function.
            </value>
            <example>
            This example shows how to handle the RowCreated event:
            <code><![CDATA[
            <SfGrid DataSource="@Orders" @ref="DefaultGrid" >
            <GridEvents TValue="Orders" RowCreated ="RowCreatedHandler"></GridEvents>
            ........
            </SfGrid>
            @code{
            public async Task RowCreatedHandler (RowCreatedEventArgs<Order> args)
            {
               var addedRecord = args.Data; // Gets the added record.
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.RowUpdating">
            <summary>
            Gets or sets the event callback that is raised before the save action is performed in the grid.
            </summary>
            <remarks>
            The event handler receives a  <see cref="T:Syncfusion.Blazor.Grids.RowUpdatingEventArgs`1"/> object, 
            which provides details about the before save action in the grid.
            </remarks>
            <value>
            An event callback function.
            </value>
            <example>
            This example shows how to handle the RowUpdating event:
            <code><![CDATA[
            <SfGrid DataSource="@Orders" @ref="DefaultGrid" >
            <GridEvents TValue="Orders" RowUpdating ="RowUpdatingHandler"></GridEvents>
            ........
            </SfGrid>
            @code{
            public async Task RowUpdatingHandler (RowUpdatingEventArgs<Order> args)
            {
               args.Cancel = true; // To cancel the save action.
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.RowUpdated">
            <summary>
            Gets or sets the event callback that is raised after the save action is performed in the grid.
            </summary>
            <remarks>
            The event handler receives a  <see cref="T:Syncfusion.Blazor.Grids.RowUpdatedEventArgs`1"/> object, 
            which provides details about the after save action in the grid.
            </remarks>
            <value>
            An event callback function.
            </value>
            <example>
            This example shows how to handle the RowUpdated event:
            <code><![CDATA[
            <SfGrid DataSource="@Orders" @ref="DefaultGrid" >
            <GridEvents TValue="Orders" RowUpdated ="RowUpdatedHandler"></GridEvents>
            ........
            </SfGrid>
            @code{
            public async Task RowUpdatedHandler (RowUpdatedEventArgs<Order> args)
            {
               var rowIndex = args.Index; // Gets the row index of the saved record.
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.RowDeleting">
            <summary>
            Gets or sets the event callback that is raised before the delete action is performed in the grid.
            </summary>
            <remarks>
            The event handler receives a  <see cref="T:Syncfusion.Blazor.Grids.RowDeletingEventArgs`1"/> object, 
            which provides details about the before delete action in the grid.
            </remarks>
            <value>
            An event callback function.
            </value>
            <example>
            This example shows how to handle the RowDeleting event:
            <code><![CDATA[
            <SfGrid DataSource="@Orders" @ref="DefaultGrid" >
            <GridEvents TValue="Orders" RowDeleting ="RowDeletingHandler"></GridEvents>
            ........
            </SfGrid>
            @code{
            public async Task RowDeletingHandler(RowDeletingEventArgs<Order> args)
            {
               if(args.Data.OrderID == 10248) // To cancel the delete action for a specific record.
               { 
                  args.Cancel = true; 
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.RowDeleted">
            <summary>
            Gets or sets the event callback that is raised after the delete action is performed in the grid.
            </summary>
            <remarks>
            The event handler receives a  <see cref="T:Syncfusion.Blazor.Grids.RowDeletedEventArgs`1"/> object, 
            which provides details about the after delete action in the grid.
            </remarks>
            <value>
            An event callback function.
            </value>
            <example>
            This example shows how to handle the RowDeleted event:
            <code><![CDATA[
            <SfGrid DataSource="@Orders" @ref="DefaultGrid" >
            <GridEvents TValue="Orders" RowDeleted ="RowDeletedHandler"></GridEvents>
            ........
            </SfGrid>
            @code{
            public async Task RowDeletedHandler(RowDeletedEventArgs<Order> args)
            {
               var rowIndex = args.RowIndex; // Gets the row index of the deleted record.
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.EditCanceling">
            <summary>
            Gets or sets the event callback that is invoked before the cancel action is performed in the grid, specifically when using <see cref="F:Syncfusion.Blazor.Grids.EditMode.Normal"/> and <see cref="F:Syncfusion.Blazor.Grids.EditMode.Dialog"/> edit modes.
            </summary>        
            <remarks>
            The event handler receives a  <see cref="T:Syncfusion.Blazor.Grids.EditCancelingEventArgs`1"/> object, 
            which provides details about the before cancel action in the grid.
            </remarks>
            <value>
            An event callback function.
            </value>
            <example>
            This example shows how to handle the EditCanceling event:
            <code><![CDATA[
            <SfGrid DataSource="@Orders" @ref="DefaultGrid" >
            <GridEvents TValue="Orders" EditCanceling ="CancelingHandler"></GridEvents>
            ........
            </SfGrid>
            @code{
            public async Task CancelingHandler(EditCancelingEventArgs<Order> args)
            {
               if(args.PreviousData.OrderID == 10248) 
               {
                  args.Cancel = true; // To cancel the cancel action for a specific record.
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.EditCanceled">
            <summary>
            Gets or sets the event callback that is invoked after the cancel action is performed in the grid, specifically when using <see cref="F:Syncfusion.Blazor.Grids.EditMode.Normal"/> and <see cref="F:Syncfusion.Blazor.Grids.EditMode.Dialog"/> edit modes.
            </summary>  
            <remarks>
            The event handler receives a  <see cref="T:Syncfusion.Blazor.Grids.EditCanceledEventArgs`1"/> object, 
            which provides details about the after cancel action in the grid.
            </remarks>
            <value>
            An event callback function.
            </value>
            <example>
            This example shows how to handle the EditCanceled event:
            <code><![CDATA[
            <SfGrid DataSource="@Orders" @ref="DefaultGrid" >
            <GridEvents TValue="Orders" EditCanceled ="CanceledHandler"></GridEvents>
            ........
            </SfGrid>
            @code{
            public async Task CanceledHandler(EditCanceledEventArgs<Order> args)
            {
               var data = args.Data; // Gets the data of the Canceled record.
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.RowEditing">
            <summary>
            Gets or sets the event callback that is raised before the edit action is performed in the grid.
            </summary>
            <remarks>
            The event handler receives a <see cref="T:Syncfusion.Blazor.Grids.RowEditingEventArgs`1"/> object, which provides details about 
            the before edit action in the grid.
            </remarks>
            <value>
            An event callback function.
            </value>
            <example>
            This example shows how to handle the RowEditing event:
            <code><![CDATA[
            <SfGrid DataSource="@Orders" @ref="DefaultGrid" >
            <GridEvents TValue="Orders" RowEditing ="RowEditingHandler"></GridEvents>
            ........
            </SfGrid>
            @code{
            public async Task RowEditingHandler(RowEditingEventArgs<<Order> args)
            {
               args.Cancel = true ; // To cancel the editing action
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.RowEdited">
            <summary>
            Gets or sets the event callback that is raised after the edit action is performed in the grid.
            </summary>
            <remarks>
            The event handler receives a <see cref="T:Syncfusion.Blazor.Grids.RowEditedEventArgs`1"/> object, which provides details about 
            the after edit action in the grid.
            </remarks>
            <value>
            An event callback function.
            </value>
            <example>
            This example shows how to handle the RowEdited event:
            <code><![CDATA[
            <SfGrid DataSource="@Orders" @ref="DefaultGrid" >
            <GridEvents TValue="Orders" RowEdited ="RowEditedHandler"></GridEvents>
            ........
            </SfGrid>
            @code{
            public async Task RowEditedHandler(RowEditedEventArgs<<Order> args)
            {
               var editedData = args.Data; // Gets the data of the edited record.
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.OnRowEditStart">
            <summary>
            Gets or sets the event callback that is raised before an editing action is performed in the grid.
            This event is primarily used to enable or disable the <c>PreventDataClone</c> argument, which controls
            whether the <c>Data</c> argument belonging to the <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.RowEditing"/> event will be cloned or not.
            </summary>        /// <remarks>
            The event handler receives a <see cref="T:Syncfusion.Blazor.Grids.OnRowEditStartEventArgs"/> object, which provides details about the 
            before the edit action in the grid.
            </remarks>
            <value>
            An event callback function.
            </value>
            <example>
            This example shows how to handle the OnRowEditStart event:
            <code><![CDATA[
            <SfGrid DataSource="@Orders" @ref="DefaultGrid" >
            <GridEvents TValue="Orders" OnRowEditStart ="BeforeRowEditingHandler"></GridEvents>
            ........
            </SfGrid>
            @code{
            public async Task BeforeRowEditingHandler(OnRowEditStartEventArgs<Order> args)
            {
               args.PreventDataClone = true; // To prevent the data from being cloned.
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.Filtering">
            <summary>
            Gets or sets the event callback that is raised before the filtering or clear filtering action is performed in the grid.
            </summary>
            <remarks>
            The event handler receives a <see cref="T:Syncfusion.Blazor.Grids.FilteringEventArgs"/> object,
            which contains details about filtering or clearing the filtering action in the grid.
            </remarks>
            <value>
            An event callback function.
            </value>
            <example>
            This example shows how to handle the Filtering event:
            <code><![CDATA[
            <SfGrid DataSource="@Orders" @ref="DefaultGrid" >
            <GridEvents TValue="Orders" Filtering="FilteringHandler"></GridEvents>
            ........
            </SfGrid>
            @code{
            public async Task FilteringHandler(FilteringEventArgs args)
            {
               
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.Filtered">
            <summary>
            Gets or sets the event callback that is raised after the filtered or clear filtered action is performed in the grid.
            </summary>
            <remarks>
            The event handler receives a <see cref="T:Syncfusion.Blazor.Grids.FilteredEventArgs"/> object,
            which contains details about filtering or clearing the filtering action in the grid.        
            </remarks>
            <value>
            An event callback function.
            </value>
            <example>
            This example shows how to handle the Filtered event:
            <code><![CDATA[
            <SfGrid DataSource="@Orders" @ref="DefaultGrid" >
            <GridEvents TValue="Orders" Filtered ="FilteredHandler"></GridEvents>
            ........
            </SfGrid>
            @code{
            public async Task FilteredHandler(FilteredEventArgs args)
            {
               
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.FilterDialogOpening">
            <summary>
            Gets or sets the event callback that is raised before the filter dialog is opened in the grid.
            </summary>
            <remarks>
            The event handler receives a  <see cref="T:Syncfusion.Blazor.Grids.FilterDialogOpeningEventArgs"/> object, 
            which provides details about the filter dialog opening in the grid.
            </remarks>
            <value>
            An event callback function.
            </value>
            <example>
            This example shows how to handle the FilterDialogOpening event:
            <code><![CDATA[
            <SfGrid DataSource="@Orders" @ref="DefaultGrid" >
            <GridEvents TValue="Orders" FilterDialogOpening ="FilterDialogOpeningHandler"></GridEvents>
            ........
            </SfGrid>
            @code{
            public async Task FilterDialogOpeningHandler(FilterDialogOpeningEventArgs args)
            {
               args.Cancel = true; // To cancel the filter dialog opening action.
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.FilterDialogOpened">
            <summary>
            Gets or sets the event callback that is raised after the filter dialog is opened in the grid.
            </summary>
            <remarks>
            The event handler receives a  <see cref="T:Syncfusion.Blazor.Grids.FilterDialogOpenedEventArgs"/> object, 
            which provides details about the filter dialog opened in the grid.
            </remarks>
            <value>
            An event callback function.
            </value>
            <example>
            This example shows how to handle the FilterDialogOpened event:
            <code><![CDATA[
            <SfGrid DataSource="@Orders" @ref="DefaultGrid" >
            <GridEvents TValue="Orders" FilterDialogOpened="FilterDialogOpenedHandler"></GridEvents>
            ........
            </SfGrid>
            @code{
            public async Task FilterDialogOpenedHandler(FilterDialogOpenedEventArgs args)
            {
               
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.CheckboxFilterSearching">
            <summary>
            Gets or sets the event callback that is raised when values get filtered using search bar in <see cref="F:Syncfusion.Blazor.Grids.FilterType.CheckBox"/> and <see cref="F:Syncfusion.Blazor.Grids.FilterType.Excel"/> filter.
            </summary>
            <remarks>
            The event handler receives a  <see cref="T:Syncfusion.Blazor.Grids.CheckboxFilterSearchingEventArgs"/> object, 
            which provides details about the values get filtered using search bar in checkbox filter and excel filter in the grid.
            </remarks>
            <value>
            An event callback function.
            </value>
            <example>
            This example shows how to handle the CheckboxFilterSearching event:
            <code><![CDATA[
            <SfGrid DataSource="@Orders" @ref="DefaultGrid" >
            <GridEvents TValue="Orders" CheckboxFilterSearching="CheckboxFilterSearchHandler"></GridEvents>
            ........
            </SfGrid>
            @code{
            public async Task CheckboxFilterSearchingHandler(CheckboxFilterSearchEventArgs args)
            {
               
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.ColumnReordering">
            <summary>
            Gets or sets the event callback that is raised when columns reordering action is performed in the grid.
            </summary>
            <remarks>
            The event handler receives a  <see cref="T:Syncfusion.Blazor.Grids.ColumnReorderingEventArgs"/> object, 
            which provides details about the columns reordering action in the grid.
            </remarks>
            <value>
            An event callback function.
            </value>
            <example>
            This example shows how to handle the ColumnReordering event:
            <code><![CDATA[
            <SfGrid DataSource="@Orders" @ref="DefaultGrid" >
            <GridEvents TValue="Orders" ColumnReordering ="ColumnReorderingHandler"></GridEvents>
            ........
            </SfGrid>
            @code{
            public async Task ColumnReorderingHandler(ColumnReorderingEventArgs args)
            {
               var fromColumn = args.FromColumn; // To get the from columns list
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.ColumnReordered">
            <summary>
            Gets or sets the event callback that is raised when columns are reordered in the grid.
            </summary>
            <remarks>
            The event handler receives a  <see cref="T:Syncfusion.Blazor.Grids.ColumnReorderedEventArgs"/> object, 
            which provides details about the columns reordered in the grid.
            </remarks>
            <value>
            An event callback function.
            </value>
            <example>
            This example shows how to handle the ColumnReordered event:
            <code><![CDATA[
            <SfGrid DataSource="@Orders" @ref="DefaultGrid" >
            <GridEvents TValue="Orders" ColumnReordered ="ColumnReorderedHandler"></GridEvents>
            ........
            </SfGrid>
            @code{
            public async Task ColumnReorderedHandler(ColumnReorderedEventArgs args)
            {
               var toColumn = args.ToColumn; // To get the to columns list
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.ColumnVisibilityChanging">
            <summary>
            Gets or sets the event callback that is raised when the grid's column visibility is changing.
            </summary>
            <remarks>
            The event handler receives a <see cref="T:Syncfusion.Blazor.Grids.ColumnVisibilityChangingEventArgs"/> object, 
            which provides details about the columns and the action performed (show or hide) in the grid.
            </remarks>
            <value>
            An event callback function.
            </value>
            <example>
            This example shows how to handle the ColumnVisibilityChanging event:
            <code><![CDATA[
            <SfGrid DataSource="@Orders" @ref="DefaultGrid" >
            <GridEvents TValue="Orders" ColumnVisibilityChanging ="ColumnVisibilityChangingHandler"></GridEvents>
            ........
            </SfGrid>
            @code{
            public async Task ColumnVisibilityChangingHandler(ColumnVisibilityChangingEventArgs args)
            {
               var vivibleColumns = args.VisibleColumns; // To get the visible columns list
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.ColumnVisibilityChanged">
            <summary>
            Gets or sets the event callback that is raised when the grid's column visibility is changed.
            </summary>
            <remarks>
            The event handler receives a <see cref="T:Syncfusion.Blazor.Grids.ColumnVisibilityChangedEventArgs"/> object, 
            which provides details about the columns and the action performed (show or hide) in the grid.
            </remarks>
            <value>
            An event callback function.
            </value>
            <example>
            This example shows how to handle the ColumnVisibilityChanged event:
            <code><![CDATA[
            <SfGrid DataSource="@Orders" @ref="DefaultGrid" >
            <GridEvents TValue="Orders" ColumnVisibilityChanged ="ColumnVisibilityChangedHandler"></GridEvents>
            ........
            </SfGrid>
            @code{
            public async Task ColumnVisibilityChangedHandler(ColumnVisibilityChangedEventArgs args)
            {
               
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.OnActionBegin">
            <summary>
            Gets or sets an event callback that is raised when the grid actions such as sorting, paging, grouping, ungrouping, reorder, rowdraganddrop, filtering, add, edit, delete, save and cancel action begins.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.ActionEventArgs`1"/> object which provides the details of the current grid action.
            You can differentiate the actions using <see cref="!:Syncfusion.Blazor.Grids.ActionEventArgs.RequestType"/>.
            To cancel the current action, set the <see cref="!:Syncfusion.Blazor.Grids.ActionEventArgs.Cancel"/> property to true.
            </remarks>
            <value>
            An event callback function.
            </value>
            <example>
            <code>
            <![CDATA[
            <SfGrid DataSource="@Orders">
                <GridEvents OnActionBegin="ActionBeginHandler" TValue="Order"></GridEvents>
            </SfGrid>
            @code {
                public void ActionBeginHandler(ActionEventArgs<Order> args)
                {
                    args.Cancel = true;
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.OnActionComplete">
            <summary>
            Gets or sets an event callback that is raised when the grid actions such as sorting, paging, grouping, ungrouping, reorder, rowdraganddrop, filtering, add, edit, delete, save and cancel action completed.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.ActionEventArgs`1"/> object that provides details of the current grid action.
            An event triggered after the grid action has completed so you cannot prevent the current grid action using <see cref="P:Syncfusion.Blazor.Grids.ActionEventArgs`1.Cancel"/>.
            </remarks>
            <value>
            An event callback function.
            </value>
            <example>
            <code>
            <![CDATA[
            <SfGrid DataSource="@Orders">
                <GridEvents OnActionComplete="ActionCompletedHandler" TValue="Order"></GridEvents>
            </SfGrid>
            @code {
                public void ActionCompletedHandler(ActionEventArgs<Order> args)
                {
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.OnActionFailure">
            <summary>
            Gets or sets the event callback that is raised when a grid action fails to achieve the desired results. For example, if the provided URL in the dataSource property is incorrect, it will throw an exception in the <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.OnActionFailure"/> event.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.FailureEventArgs"/> object that provides details of the error in the grid, including a stack trace of any exceptions that occurred.
            </remarks>
            <value>
            An event callback function.
            </value>
            <example>
            <code>
            <![CDATA[
            <SfGrid DataSource="@Orders">
                <GridEvents OnActionFailure="ActionFailureHandler" TValue="Order"></GridEvents>
            </SfGrid>
            @code {
                public void ActionFailureHandler(FailureEventArgs args)
                {
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.OnBatchAdd">
            <summary>
            Gets or sets an event callback that is raised before new records are added to the UI when a user clicks the add toolbar item or presses the insert key.
            </summary>
            <remarks>
            This event will be raised only for <see cref="F:Syncfusion.Blazor.Grids.EditMode.Batch"/> mode.
            This event handler receives a <see cref="!:Syncfusion.Blazor.Grids.BeforeBatchAddArgs"/> object which provides access to the added records and allows for cancellation of the batch add operation using the <see cref="!:Syncfusion.Blazor.Grids.BeforeBatchAddArgs.Cancel"/> property.
            Within this event handler, you can customize the default data that is being added to the grid element before it is added.
            </remarks>
            <value>
            An event callback function.
            </value>
            <example>
            <code>
            <![CDATA[
            <SfGrid DataSource="@Orders" Toolbar="@(new List<string>() { "Add", "Delete", "Update", "Cancel" })">
            <GridEvents OnBatchAdd="BatchAddHandler" TValue="Order"></GridEvents>
            <GridEditSettings AllowAdding="true" AllowDeleting="true" AllowEditing="true" Mode="EditMode.Batch"></GridEditSettings>
            </SfGrid>
            @code {
                public void BatchAddHandler(BeforeBatchAddArgs<Order> args)
                {
                  args.Cancel = true;
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.OnBatchDelete">
            <summary>
            Gets or sets an event callback that is raised before records are deleted in the grid element.
            You can perform delete action by click delete toolbar item or pressing the delete key. If no rows have been selected for deletion, a popup will be displayed allowing the user to select the rows they wish to delete before the operation is performed.
            </summary>
            <remarks>
            This event handler receives a <see cref="!:Syncfusion.Blazor.Grids.BeforeBatchDeleteArgs"/> object which provides details of the records to be deleted in Grid.
            You can prevent the batch delete action by setting the <see cref="!:Syncfusion.Blazor.Grids.BeforeBatchDeleteArgs.Cancel"/> property to true.
            </remarks>
            <value>
            An event callback function.
            </value>
            <example>
            <code>
            <![CDATA[
            <SfGrid DataSource="@Orders" Toolbar="@(new List<string>() { "Add", "Delete", "Update", "Cancel" })">
            <GridEvents OnBatchDelete="BatchDeleteHandler" TValue="Order"></GridEvents>
            <GridEditSettings AllowAdding="true" AllowDeleting="true" AllowEditing="true" Mode="EditMode.Batch"></GridEditSettings>
            </SfGrid>
            @code {
                public void BatchDeleteHandler(BeforeBatchDeleteArgs<Order> args)
                {
                  args.Cancel = true;
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.OnBatchSave">
            <summary>
            Gets or sets an event callback that is raised before batch changes(such as added, edited and deleted data) are saved in dataSource. The edited data can be saved by clicking the <C>Update</C> button on the grid toolbar.
            When the Update button on the toolbar is clicked, a confirmation popup is displayed to confirm the save action to be performed in the grid.
            </summary>
            <remarks>
            The <see cref="!:Syncfusion.Blazor.Grids.BeforeBatchSaveArgs.BatchChanges"/> property contains the batch changes so that you can customize them within the event handler..
            You can prevent the batch save action by setting <see cref="!:Syncfusion.Blazor.Grids.BeforeBatchSaveArgs.Cancel"/> to true.
            </remarks>
            <value>
            An event callback function.
            </value>
            <example>
            <code>
            <![CDATA[
            <SfGrid DataSource="@Orders" Toolbar="@(new List<string>() { "Add", "Delete", "Update", "Cancel" })">
            <GridEvents OnBatchSave="BatchSaveHandler" TValue="Order"></GridEvents>
            <GridEditSettings AllowAdding="true" AllowDeleting="true" AllowEditing="true" Mode="EditMode.Batch"></GridEditSettings>
            </SfGrid>
            @code {
                public void BatchSaveHandler(BeforeBatchSaveArgs<Order> args)
                {
                    args.Cancel = true;
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.OnBatchCancel">
            <summary>
            Gets or sets an event callback that is raised before batch changes are canceled from the grid element.
            The edited cell will be highlighted in the grid and it will be removed and returned to its original state after canceling the batch action.
            When the Cancel button on the toolbar is clicked, a confirmation popup is displayed to confirm the cancel action to be performed in the grid.
            </summary>
            <remarks>
            This event handler receives a <see cref="!:Syncfusion.Blazor.Grids.BatchCancelArgs"/> object which provides the details of the batch changes being canceled.
            You can customize the cancel action using this event handler.
            To cancel the this action, set the <see cref="!:Syncfusion.Blazor.Grids.BatchCancelArgs.Cancel"/> property to true.
            </remarks>
            <value>
            An event callback function.
            </value>
            <example>
            <code>
            <![CDATA[
            <SfGrid DataSource="@Orders" Toolbar="@(new List<string>() { "Add", "Delete", "Update", "Cancel" })">
            <GridEvents OnBatchCancel="BatchcancelHandler" TValue="Order"></GridEvents>
            <GridEditSettings AllowAdding="true" AllowDeleting="true" AllowEditing="true" Mode="EditMode.Batch"></GridEditSettings>
            </SfGrid>
            @code {
                public void BatchcancelHandler(BeforeBatchCancelArgs<Order> args)
                {
                  args.Cancel = true;
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.BeforeCopyPaste">
             <summary>
             An event that is raised before copy or paste action in the Grid cells. You can cancel this entire copy or paste action by using this event.
             </summary>
             <remarks>
             This event triggers before <see cref="T:Syncfusion.Blazor.Grids.BeforeCellPasteEventArgs`1"/> event, so you can cancel entire pasting operation by using this event.
             Also, this event handler receives a <see cref="T:Syncfusion.Blazor.Grids.BeforeCopyPasteEventArgs"/> object which provides the details of before paste/copy action.
            </remarks>
             <value>
             An event callback function.
             </value>
             <example>
             <code><![CDATA[
             <SfGrid DataSource="@Orders" @ref="DefaultGrid" >
             <GridEvents TValue="Orders" BeforeCopyPaste="Copy"></GridEvents>
             ........
             </SfGrid>
             @code{
             public async Task Copy(BeforeCopyPasteEventArgs args)
             {
                  //you can cancel the entire copy action here
                   if(args.Action == "Copy"){
                      args.Cancel = true;
                   }
                 // you can cancel the entire paste action here
                   if(args.Action == "Paste"){
                      args.Cancel = true;
                   }
             }
             ]]>
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.BeforeCellPaste">
            <summary>
            An event that is raised before pasting the copied cell value for each cell. You can cancel the pasting action for particular cell or change the value by using this event.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.BeforeCellPasteEventArgs`1"/> object which provides the details of before pasting the copied cell value in the current cell.
            </remarks>
            <value>
            An event callback function.
            </value>
            <example>
            <code><![CDATA[
            <SfGrid DataSource="@Orders" @ref="DefaultGrid" >
            <GridEvents TValue="Orders" BeforeCellPaste="Paste"></GridEvents>
            ........
            </SfGrid>
            @code{
            public async Task Paste(BeforeCellPasteEventArgs<Orders> args)
            {
              if(ColumnIndex == 1 && RowIndex == 4){
                  //you can modified the content to be paste here.
                 args.CellValue = "Modified value"; 
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.OnDataBound">
            <summary>
            Gets or sets an event callback that is raised before data is bound to the grid, allowing you to customize the current view data in this event handler.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.BeforeDataBoundArgs`1"/> object, which contains current view data and total records count.
            </remarks>
            <value>
            An event callback function.
            </value>
            <example>
            <code>
            <![CDATA[
            <SfGrid DataSource="@Orders">
                <GridEvents OnDataBound="DataBoundHandler" TValue="Order"></GridEvents>
            </SfGrid>
            @code {
                public void void DataBoundHandler(BeforeDataBoundArgs<Order> args)
                {
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.OnBeginEdit">
            <summary>
            Gets or sets the event callback that is raised before a row enters edit mode in the UI, such as when a user double-clicks a cell or presses F2 / edit toolbar item to enter edit mode.
            </summary>
            <remarks>
            This event is raised when <see cref="T:Syncfusion.Blazor.Grids.EditMode"/> as Normal or Dialog.
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.BeginEditArgs`1"/> object, that contains information about the record being edited. This allows you to customize the data before it enters into edit mode.
            You can prevent the edit action by setting <see cref="P:Syncfusion.Blazor.Grids.BeginEditArgs`1.Cancel"/> to true.
            </remarks>
            <value>
            An event callback function.
            </value>
            <example>
            <code>
            <![CDATA[
            <SfGrid DataSource="@Orders">
                <GridEvents OnBeginEdit="BeginEditHandler" TValue="Order"></GridEvents>
                <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" Mode="EditMode.Normal"></GridEditSettings>
            </SfGrid>
            @code {
                public void BeginEditHandler(BeginEditArgs<Order> args)
                {
                    args.Cancel = true;
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.OnCellEdit">
            <summary>
            Gets or sets the event callback that is raised before a cell enters edit mode in the UI, such as when a user double-clicks a cell or presses F2 to enter edit mode.
            </summary>
            <remarks>
            This event is raised when <see cref="F:Syncfusion.Blazor.Grids.EditMode.Batch"/> as Batch.
            Use this event to prevent the edit action by setting <see cref="!:Syncfusion.Blazor.Grids.CellEditArgs.Cancel"/> to true.
            </remarks>
            <value>
            An event callback function.
            </value>
            <example>
            <code>
            <![CDATA[
            <SfGrid DataSource="@Orders" Toolbar="@(new List<string>() { "Add", "Delete", "Update", "Cancel" })">
            <GridEvents OnCellEdit="CellEditHandler" TValue="Order"></GridEvents>
            <GridEditSettings AllowAdding="true" AllowDeleting="true" AllowEditing="true" Mode="EditMode.Batch"></GridEditSettings>
            </SfGrid>
            @code {
                public void CellEditHandler(CellEditArgs<Order> args)
                {
                  args.Cancel = true;
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.OnCellSave">
            <summary>
            Gets or sets an event callback that is raised before cell changes are updated in the UI. The save action will happen when the cell is in edit state and the user performs an action such as pressing Enter key, clicking or navigating to a new cell.
            </summary>
            <remarks>
            Within this event handler, you can customize the edited value before update it in grid UI.
            You can prevent the save action using <see cref="!:Syncfusion.Blazor.Grids.CellSaveArgs.Cancel"/>.
            </remarks>
            <value>
            An event callback function.
            </value>
            <example>
            <code>
            <![CDATA[
            <SfGrid DataSource="@Orders" Toolbar="@(new List<string>() { "Add", "Delete", "Update", "Cancel" })">
            <GridEvents OnCellSave="CellSaveHandler" TValue="Order"></GridEvents>
            <GridEditSettings AllowAdding="true" AllowDeleting="true" AllowEditing="true" Mode="EditMode.Batch"></GridEditSettings>
            </SfGrid>
            @code {
                public void CellSaveHandler(CellSaveArgs<Order> args)
                {
                  args.Cancel = true;
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.CellSaved">
            <summary>
            Gets or sets an event callback that is raised after cell changes are updated in the grid user interface and the edited values are highlighted in the grid.
            </summary>
            <remarks>
            The cell save action is prevented using the <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.OnCellSave"/> event, then the <c>CellSaved</c> event will not be raised.
            </remarks>
            <value>
            An event callback function.
            </value>
            <example>
            <code>
            <![CDATA[
            <SfGrid DataSource="@Orders" Toolbar="@(new List<string>() { "Add", "Delete", "Update", "Cancel" })">
            <GridEvents CellSaved="CellSavedHandler" TValue="Order"></GridEvents>
            <GridEditSettings AllowAdding="true" AllowDeleting="true" AllowEditing="true" Mode="EditMode.Batch"></GridEditSettings>
            </SfGrid>
            @code {
                public void CellSavedHandler(CellSavedArgs<Order> args)
                {
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.CellSelected">
            <summary>
            Gets or sets an event callback that is raised after a cell is selected in the grid. Cell selection can be done by click on the cell or pressing arrow keys with/without pressing Shift or Ctrl keys or programmatically.
            </summary>
            <remarks>        
            This event is raised when <see cref="T:Syncfusion.Blazor.Grids.SelectionMode"/> as Cell or Both.
            The selection of a cell is prevented using the <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.CellSelecting"/> event, then the <c>CellSelected</c> event will not be raised.
            </remarks>
            <value>
            An event callback function.
            </value>
            <example>
            <code>
            <![CDATA[
            <SfGrid DataSource="@Orders">
                <GridEvents CellSelected="CellselectHandler" TValue="Order"></GridEvents>
            </SfGrid>
            @code {
                public void CellselectHandler(CellSelectEventArgs<Order> args)
                {
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.CellDeselecting">
            <summary>
            Gets or sets an event callback that is raised before any cell deselection occurs in the grid.
            If a cell is selected and click on to any other cell or pressing Tab or arrow keys without pressing Ctrl or Shift key or programmatically, then the previously selected cell will be deselected.
            </summary>
            <remarks>
            This event is raised when <see cref="T:Syncfusion.Blazor.Grids.SelectionMode"/> is set to Cell or Both.
            You can prevent the cell deselection action by setting <see cref="!:Syncfusion.Blazor.Grids.CellDeselectEventArgs.Cancel"/> to true.
            </remarks>
            <value>
            An event callback function.
            </value>
            <example>
            <code>
            <![CDATA[
            <SfGrid DataSource="@Orders">
                <GridEvents CellDeselecting="CellDeselectingHandler" TValue="Order"></GridEvents>
            </SfGrid>
            @code {
                public void CellDeselectingHandler(CellDeselectEventArgs<Order> args)
                {
                  args.Cancel = true;
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.CellDeselected">
            <summary>
            Gets or sets an event callback that is raised after a selected cell is deselected in the grid. 
            If a cell is selected and click on to any other cell or pressing Tab or arrow keys without pressing Ctrl or Shift key or programmatically, then the previously selected cell will be deselected.
            </summary>
            <remarks>
            This event is raised when <see cref="T:Syncfusion.Blazor.Grids.SelectionMode"/> as Cell or Both.
            The deselection of a cell is prevented using the <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.CellDeselecting"/> event, then the <c>CellDeselected</c> event will not be raised.
            </remarks>
            <value>
            An event callback function.
            </value>
            <example>
            <code>
            <![CDATA[
            <SfGrid DataSource="@Orders">
                <GridEvents CellDeselected="CellDeselectHandler" TValue="Order"></GridEvents>
            </SfGrid>
            @code {
                public void CellDeselectHandler(CellDeselectEventArgs<Order> args)
                {
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.CellSelecting">
            <summary>
            Gets or sets an event callback that is raised before any cell selection occurs in the grid. Cell selection can be done by click on the cell or pressing Shift/Ctrl and click on the cell or pressing arrow keys with or without pressing Shift/Ctrl keys after selecting any cell.
            </summary>
            <remarks>
            This event is raised when <see cref="T:Syncfusion.Blazor.Grids.SelectionMode"/> as Cell and Both.
            You can prevent the cell selection action by setting <see cref="P:Syncfusion.Blazor.Grids.CellSelectingEventArgs`1.Cancel"/> to true.
            </remarks>
            <value>
            An event callback function.
            </value>
            <example>
            <code>
            <![CDATA[
            <SfGrid DataSource="@Orders">
                <GridEvents CellSelecting="CellselectingHandler" TValue="Order"></GridEvents>
            </SfGrid>
            @code {
                public void CellselectingHandler(CellSelectingEventArgs<Order> args)
                {
                   args.Cancel = true;
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.ColumnMenuItemClicked">
            <summary>
            Gets or sets an event callback that is raised after clicking on a column menu item in a grid.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.ColumnMenuClickEventArgs"/> object, which contains corresponding menu item and <see cref="T:Syncfusion.Blazor.Grids.GridColumn"/>.
            You can perform custom actions for column menu items within this event handler.
            </remarks>
            <value>
            An event callback function.
            </value>
            <example>
            <code>
            <![CDATA[
            <SfGrid DataSource="@Orders" AllowGrouping="true" AllowFiltering="true" AllowPaging="true" ShowColumnMenu="true">
                <GridEvents ColumnMenuItemClicked="ColumnMenuItemClickedHandler" TValue="Order"></GridEvents>
            </SfGrid>
            @code {
                public void ColumnMenuItemClickedHandler(ColumnMenuClickEventArgs args)
                {
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.OnColumnMenuOpen">
            <summary>
            Gets or sets an event callback that is raised when the column menu is opened by clicking the column menu icon in the grid column.
            This event is also triggered when opening sub-menu items within the column menu.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.ColumnMenuOpenEventArgs"/> object, which contains the column menu instance. You can customize the column menu item properties within this event handler.
            To prevent the default action, set the <see cref="P:Syncfusion.Blazor.Grids.ColumnMenuOpenEventArgs.Cancel"/> property to true.
            </remarks>
            <value>
            An event callback function.
            </value>
            <example>
            <code>
            <![CDATA[
            <SfGrid DataSource="@Orders" AllowGrouping="true" AllowFiltering="true" AllowPaging="true" ShowColumnMenu="true">
                <GridEvents OnColumnMenuOpen ="ColumnMenuOpenHandler" TValue="Order"></GridEvents>
            </SfGrid>
            @code {
                public void ColumnMenuOpenHandler(ColumnMenuOpenEventArgs args)
                {
                    args.Cancel = true; // Prevents the column menu from opening
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.CommandClicked">
            <summary>
            Gets or sets an event callback that is raised after command column button is clicked in the grid.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.CommandClickEventArgs`1"/> object, which contains corresponding command column and row details.
            With this event handler, you can perform a custom action based on the row and command column details.
            You can prevent the action by setting <see cref="P:Syncfusion.Blazor.Grids.CommandClickEventArgs`1.Cancel"/> as true.
            </remarks>
            <value>
            An event callback function.
            </value>
            <example>
            <code>
            <![CDATA[
            <SfGrid DataSource="@Orders" AllowGrouping="true" AllowFiltering="true" AllowPaging="true" ShowColumnMenu="true">
                <GridEvents CommandClicked="OnCommandClicked" TValue="Order"></GridEvents>
            </SfGrid>
            @code {
                public void OnCommandClicked(CommandClickEventArgs<Order> args)
                {
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.ContextMenuItemClicked">
            <summary>
            Gets or sets an event callback that is raised after clicking an item in context menu of grid. To enable the context menu, you can define either default or custom items in the ContextMenuItems property.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.ContextMenuClickEventArgs`1"/> object, which contains details about the corresponding menu item, column, and row information. 
            You can perform custom actions for context menu items within this event handler.
            </remarks>
            <value>
            An event callback function.
            </value>
            <example>
            <code>
            <![CDATA[
            <SfGrid ContextMenuItems="@(new List<object>() { "AutoFit", "AutoFitAll", "SortAscending", "SortDescending","Copy", "Edit", 
              "Delete", "Save", "Cancel","PdfExport", "ExcelExport", "CsvExport", "FirstPage", "PrevPage","LastPage", "NextPage"})" >
              <GridEvents ContextMenuItemClicked="ContextMenuItemClickedHandler" TValue="Order"></GridEvents>
            </SfGrid>
            @code {
             public void ContextMenuItemClickedHandler(ContextMenuClickEventArgs args)
             {
             }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.ContextMenuOpen">
            <summary>
            Gets or sets an event callback that is raised before the context menu is opened by right-clicking anywhere on the grid. The context menu items displayed will depend on the target of the right-click performs in the grid like "header", "content" or "pager".
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.ContextMenuOpenEventArgs`1"/> object, which contains context menu instance so you can customize the context menu item property, within this event handler.
            If you want to prevent the default action, you can set the <see cref="P:Syncfusion.Blazor.Grids.ContextMenuOpenEventArgs`1.Cancel"/> property as true.
            </remarks>
            <value>
            An event callback function.
            </value>
            <example>
            <code>
            <![CDATA[
            <SfGrid ContextMenuItems="@(new List<object>() { "AutoFit", "AutoFitAll", "SortAscending", "SortDescending","Copy", "Edit", 
              "Delete", "Save", "Cancel","PdfExport", "ExcelExport", "CsvExport", "FirstPage", "PrevPage","LastPage", "NextPage"})" >
              <GridEvents ContextMenuOpen="ContextMenuOpenHandler" TValue="Order"></GridEvents>
            </SfGrid>
            @code {
             public void ContextMenuOpenHandler(ContextMenuOpenEventArgs<Order> args)
             {
             }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.Created">
            <summary>
            An event that is raised when the component is created. Event can be used to perform any necessary initialization logic before the component is rendered.
            </summary>
            <value>
            An event callback function.
            </value>
            <example>
            <code>
            <![CDATA[
            <SfGrid>
              <GridEvents Created="CreatedHandler" TValue="Order"></GridEvents>
            </SfGrid>
            @code {
             public void CreatedHandler()
             {
             }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.DataBound">
            <summary>
            Gets or sets an event callback that is raised after a grid component finished rendering. This event can be used to perform any custom logic after data is populated in grid component.
            </summary>
            <remarks>
            This event is invoked after the <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.OnDataBound"/> event.
            </remarks>
            <value>
            An event callback function.
            </value>
            <example>
            <code>
            <![CDATA[
            <SfGrid>
              <GridEvents DataBound="DataBoundHandler" TValue="Order"></GridEvents>
            </SfGrid>
            @code {
             public void DataBoundHandler()
             {
             }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.Destroyed">
            <summary>
            Gets or sets an event callback that is raised when the grid component is destroyed. This can happen when the component is removed from the DOM or when the page is refreshed.
            </summary>
            <value>
            An event callback function.
            </value>
            <example>
            <code>
            <![CDATA[
            <SfGrid>
              <GridEvents Destroyed="DestroyHandler" TValue="Order"></GridEvents>
            </SfGrid>
            @code {
             public void DestroyHandler()
             {
             }
            }
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.DetailDataBound">
            <summary>
            Get or set an event callback that is raised when a detail row is expanded. The purpose of this event is to bind values or data to the detail template element that will be used to render the contents of the detail row.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.DetailDataBoundEventArgs`1"/> object that provides details about the selected row.
            Based on the selected row information, perform any action and display any template element within the detailed row of grid.
            </remarks>
            <value>
            An event callback function.
            </value>
            <example>
            <code>
            <![CDATA[
            <SfGrid>
              <GridEvents DetailDataBound="DetailDataBoundHandler" TValue="Employee"></GridEvents>
            </SfGrid>
            @code {
             public void DetailDataBoundHandler(DetailDataBoundEventArgs<Employee> args)
             {
             }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.DetailsExpanding">
            <summary>
            Gets or sets an event callback that is raised when detail row is expanding by click on the collapsed icon of the corresponding row or programmatically expanding the detail row.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.DetailsExpandingEventArgs`1"/> object which provides details about the expanding row.
            You can prevent the expand action using the <see cref="P:Syncfusion.Blazor.Grids.DetailsExpandingEventArgs`1.Cancel"/> property.
            </remarks>
            <value>
            An event callback function.
            </value>
            <example>
            <code><![CDATA[
            <SfGrid DataSource="@Orders" @ref="DefaultGrid" >
            <GridEvents TValue="Orders" DetailsExpanding="DetailsExpand"></GridEvents>
            ........
            </SfGrid>
            @code{
            public async Task DetailsExpand(DetailsExpandingEventArgs<Orders> args)
            {
              args.Cancel = true;
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.DetailsExpanded">
            <summary>
            Gets or sets an event callback that is raised after a detail row is expanded by click on the collapsed icon of the corresponding row or programmatically expanding the detail row to display the detail template content.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.DetailsExpandedEventArgs`1"/> object which provides the details of the expanded detail row.
            </remarks>
            <value>
            An event callback function.
            </value>
            <example>
            <code><![CDATA[
            <SfGrid DataSource="@Orders" @ref="DefaultGrid" >
            <GridEvents TValue="Orders" DetailsExpanded="DetailsExpanded"></GridEvents>
            ........
            </SfGrid>
            @code{
            public async Task DetailsExpanded(DetailsExpandedEventArgs<Orders> args)
            {
              ...........
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.DetailsCollapsing">
            <summary>
            Gets or sets an event callback that is raised when the detail template row is collapsing by click on the expanded icon in the grid or programmatically collapsed the detail row.  
            </summary>
            <remarks>
             You can prevent collapse action using <see cref="!:Syncfusion.Blazor.Grids.DetailsCollapsingEventArgs.Cancel"/>
            </remarks>
            <value>
            An event callback function.
            </value>
            <example>
            <code><![CDATA[
            <SfGrid DataSource="@Orders" @ref="DefaultGrid" >
            <GridEvents TValue="Orders" DetailsCollapsing="DetailsCollapse"></GridEvents>
            ........
            </SfGrid>
            @code{
            public async Task DetailsCollapse(DetailsCollapsingEventArgs<Orders> args)
            {
              args.Cancel = true;
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.DetailsCollapsed">
            <summary>
            Gets or sets an event callback that is raised after the detail template row is collapsed by click on the expanded icon in the grid or programmatically collapsed the detail row.  
            </summary>
            <value>
            An event callback function.
            </value>
            <example>
            <code><![CDATA[
            <SfGrid DataSource="@Orders" @ref="DefaultGrid" >
            <GridEvents TValue="Orders" DetailsCollapsed="DetailsCollapsed"></GridEvents>
            ........
            </SfGrid>
            @code{
            public async Task DetailsCollapsed(DetailsCollapsedEventArgs<Orders> args)
            {
              ...........
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.BeforeAutoFill">
            <summary>
            Gets or sets the event callback that is raised before the autofill action. 
            </summary>
            <remarks>
            This event handler receives a <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.BeforeAutoFill"/> object which provides the details of before autofill action.
            Also,this event triggers when you release the dragged fill handle icon. You can cancel the entire cells getting automatically filled in the cell.
            </remarks>
            <value>
            An event callback function.
            </value>
            <example>
            <code><![CDATA[
            <SfGrid DataSource="@Orders" @ref="DefaultGrid" >
            <GridEvents TValue="Orders" BeforeAutoFill="BeforeAutoFillAction"></GridEvents>
            ........
            </SfGrid>
            @code{
            public async Task BeforeAutoFillAction(BeforeAutoFillEventArgs args)
            {     
                  //you can cancel the autofill action here.
                  args.Cancel = true;
              }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.BeforeAutoFillCell">
            <summary>
            Gets or sets the event callback that is raised before the autofill action sets the value for each cell. You can cancel the autofill action for particular cell or change the value by using this event.
            </summary>
            <remarks>
            This event occurs after the <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.BeforeAutoFill"/> event if that event is not canceled.
            This event handler receives a <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.BeforeAutoFillCell"/> object which provides the details of before autofill action.    
            </remarks>
            <value>
            An event callback function.
            </value>
            <example>
            <code><![CDATA[
            <SfGrid DataSource="@Orders" @ref="DefaultGrid" >
            <GridEvents TValue="Orders" BeforeAutoFillCell="BeforeAutoFillCellAction"></GridEvents>
            ........
            </SfGrid>
            @code{
            public async Task BeforeAutoFillCellAction(BeforeAutoFillCellEventArgs<Orders> args)
            {
              if(args.ColumnIndex == 1 && args.RowIndex == 5)
              { 
                  //you can modified the content to be paste here.
                  args.Value = "Modified Value";
              }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.HeaderCellInfo">
            <summary>
            Gets or sets an event callback that is raised before a request is made to access the grid header cell information.
            </summary>
            <remarks>
            This event handler receives a <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.HeaderCellInfo"/> object which provides the details of header cells.
            This event allows you to customize the header cells by adding classes, changing their header text, etc...
            </remarks>
            <value>
            An event callback function.
            </value>
            <example>
            The following example demonstrates how to handle the HeaderCellInfo event to customize the header cells.
            <code><![CDATA[
            <SfGrid DataSource="@Orders" @ref="DefaultGrid" >
              <GridEvents TValue="Orders" HeaderCellInfo="HeaderCell"></GridEvents>
              ........
            </SfGrid>
            
            @code{
              public async Task HeaderCell(HeaderCellInfoEventArgs args)
              {
                if (args.Column.Field == "OrderID")
                {
                  // You can customize the header cell.
                  args.Cell.AddClass(new string[] { "newclass" });
                }
              }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.OnLoad">
            <summary>
            Gets or sets an event callback that is raised before rendering of the grid, and it provides a callback method that you can use to customize the grid properties.
            </summary>
            <value>
            An event callback function.
            </value>
            <example>
            <code>
            <![CDATA[
            <SfGrid>
              <GridEvents TValue="Orders" OnLoad="LoadHandler"></GridEvents>
            </SfGrid>
            @code {
             public void LoadHandler(object args)
             {
             }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.QueryCellInfo">
            <summary>
            Gets or sets an event callback that is raised before the cell element is appended to the grid element. And the event is raised whenever a grid cell is rendered or refreshed.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.QueryCellInfoEventArgs`1"/> object, which provides grid row and cell details. 
            Within this event handler, you can customize the cell element.
            </remarks>
            <value>
            An event callback function.
            </value>
            <example>
            <code>
            <![CDATA[
            <SfGrid>
              <GridEvents QueryCellInfo="QueryCellInfoHandler" TValue="Orders"></GridEvents>
            </SfGrid>
            @code {
             public void QueryCellInfoHandler(QueryCellInfoEventArgs<Orders> args)
             {
             }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.OnRecordClick">
            <summary>
            Gets or sets an event callback that is raised when a cell is clicked in the grid.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.RecordClickEventArgs`1"/> object, which provides the information about the clicked cell and row information.
            </remarks>
            <value>
            An event callback function.
            </value>
            <example>
            <code>
            <![CDATA[
            <SfGrid>
              <GridEvents OnRecordClick="RecordClickHandler" TValue="Order"></GridEvents>
            </SfGrid>
            @code {
             public void RecordClickHandler(RecordClickEventArgs<Order> args)
             {
             }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.OnRecordDoubleClick">
            <summary>
            Gets or sets an event callback that is raised when a cell is double clicked in grid.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.RecordDoubleClickEventArgs`1"/> object, which provides the information about the clicked cell and row information.
            </remarks>
            <value>
            An event callback function.
            </value>
            <example>
            <code>
            <![CDATA[
            <SfGrid>
              <GridEvents OnRecordDoubleClick="RecordDoubleClickHandler" TValue="Order"></GridEvents>
            </SfGrid>
            @code {
             public void RecordDoubleClickHandler(RecordDoubleClickEventArgs<Order> args)
             {
             }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.OnResizeStart">
            <summary>
            Gets or sets an event callback that is raised when column resizing is starts.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.ResizeArgs"/> object which provides the details of the resizing column.
            You can prevent the resize action using <see cref="P:Syncfusion.Blazor.Grids.ResizeArgs.Cancel"/>.
            </remarks>
            <value>
            An event callback function.
            </value>
            <example>
            <code>
            <![CDATA[
            <SfGrid>
              <GridEvents OnResizeStart="OnResizeStartHanlder" TValue="Order"></GridEvents>
            </SfGrid>
            @code {
             public void OnResizeStartHanlder(ResizeArgs args)
             {
                args.Cancel = true;
             }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.ResizeStopped">
            <summary>
            Gets or sets an event callback that is raised when the column resizing is ends.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.ResizeArgs"/> object which provides the details of the resized column.
            You can prevent the resize action using <see cref="P:Syncfusion.Blazor.Grids.ResizeArgs.Cancel"/>.
            </remarks>
            <value>
            An event callback function.
            </value>
            <example>
            <code>
            <![CDATA[
            <SfGrid>
              <GridEvents ResizeStopped="ResizeStoppedHanlder" TValue="Order"></GridEvents>
            </SfGrid>
            @code {
             public void ResizeStoppedHanlder(ResizeArgs args)
             {
                args.Cancel = true;
             }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.RowDataBound">
            <summary>
            Gets or sets an event callback that is raised whenever a request is made to access row information, element, or data.
            This will be triggered before the row element is appended to the grid.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.RowDataBoundEventArgs`1"/> object, which provides information about the corresponding row.
            </remarks>
            <value>
            An event callback function.
            </value>
            <example>
            <code>
            <![CDATA[
            <SfGrid>
              <GridEvents RowDataBound="RowDataBoundHandler" TValue="Order"></GridEvents>
            </SfGrid>
            @code {
             public void RowDataBoundHandler(RowDataBoundEventArgs<Order> args)
             {
             }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.RowDeselected">
            <summary>
            Gets or sets an event callback that is raised after a selected row is deselected in the grid.
            When a row is selected in the grid, if the same row is clicked again or if arrow keys are pressed to move to another row, the previously selected row will be deselected.
            </summary>
            <remarks>
            This event is raised when <see cref="T:Syncfusion.Blazor.Grids.SelectionMode"/> as Row or Both.
            The deselection of a row is prevented using the <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.RowDeselecting"/> event, then the <c>RowDeselected</c> event will not be raised.
            </remarks>
            <value>
            An event callback function.
            </value>
            <example>
            <code>
            <![CDATA[
            <SfGrid DataSource="@Orders">
                <GridEvents RowDeselected="RowDeselectHandler" TValue="Order"></GridEvents>
            </SfGrid>
            @code {
                public void RowDeselectHandler(RowDeselectEventArgs<Order> args)
                {
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.RowDeselecting">
            <summary>
            Gets or sets an event callback that is raised before any row deselection occurs in the grid.
            When a row is selected in the grid, if the same row is clicked again or if arrow keys are pressed to move to another row, the previously selected row will be deselected.
            </summary>
            <remarks>
            You can prevent the row deselection by setting <see cref="P:Syncfusion.Blazor.Grids.RowDeselectEventArgs`1.Cancel"/> as true.
            </remarks>
            <value>
            An event callback function.
            </value>
            <example>
            <code>
            <![CDATA[
            <SfGrid DataSource="@Orders">
                <GridEvents RowDeselecting="RowDeselectingHandler" TValue="Order"></GridEvents>
            </SfGrid>
            @code {
                public void RowDeselectingHandler(RowDeselectEventArgs<Order> args)
                {
                 args.Cancel = true;
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.OnRowDragStart">
            <summary>
            Gets or sets an event callback that is raised when we start dragging the rows to perform row reordering.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.RowDragEventArgs`1"/> object which provides the details of the rows from which it is dragged.
            </remarks>
            <value>
            An event callback function.
            </value>
            <example>
            <code><![CDATA[
            <SfGrid DataSource="@Orders">
            <GridEvents TValue="Orders" OnRowDragStart="OnRowDragStartHandler"></GridEvents>
            ........
            </SfGrid>
            @code{
            public async Task OnRowDragStartHandler(RowDragEventArgs<Orders> args)
            {
                 //you can get the dragged row data's here
                 List<Orders> Data = args.Data;
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.RowDragStarting">
            <summary>
            Gets or sets an event callback that is raised when we start dragging the rows to perform row reordering.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.RowDragStartingEventArgs`1"/> object which provides the details of the rows from which it is dragged.
            </remarks>
            <value>
            An event callback function.
            </value>
            <example>
            <code><![CDATA[
            <SfGrid DataSource="@Orders">
            <GridEvents TValue="Orders" RowDragStarting="RowDragStartingHandler"></GridEvents>
            ........
            </SfGrid>
            @code{
            public async Task RowDragStartingHandler(RowDragStartingEventArgs<Orders> args)
            {
                 //you can get the dragged row data's here
                 List<Orders> Data = args.Data;
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.RowDropping">
            <summary>
            Gets or sets an event callback that is raised when the row elements are dropping on the target element. You can cancel the dropping action using this event.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.RowDroppingEventArgs`1"/> object which provides the details of the rows which are dropping and the target where the rows are dropping.
            If the dropping action is prevented using the <c>Cancel</c> argument, then the RowDropped event doesn't trigger.
            </remarks>
            <value>
            An event callback function.
            </value>
            <example>
            <code><![CDATA[
            <SfGrid DataSource="@Orders">
            <GridEvents TValue="Orders" RowDropping="RowDroppingHandler"></GridEvents>
            ........
            </SfGrid>
            @code{
            public async Task RowDroppingHandler(RowDroppingEventArgs<Orders> args)
            {
                 //you can cancel the dropping action here
                 args.Cancel = true;
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.RowDropped">
            <summary>
            Gets or sets an event callback that is raised when row elements are dropped on the target element.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.RowDroppedEventArgs`1"/> object which provides the details of the rows which are dropped and the target where the rows are dropped.
            </remarks>
            <value>
            An event callback function.
            </value>
            <example>
            <code><![CDATA[
            <SfGrid DataSource="@Orders">
            <GridEvents TValue="Orders" RowDropped="RowDroppedHandler"></GridEvents>
            ........
            </SfGrid>
            @code{
            public async Task RowDroppedHandler(RowDroppedEventArgs<Orders> args)
            {
                 //you can get the dropped row data's here
                 List<Orders> Data = args.Data;
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.RowSelected">
            <summary>
            Gets or sets an event callback that is raised after a row is selected in the grid. Row selection can be done by click on the row or presssing arrow keys with or wihtout Shift or Ctrl keys or doing drag selection or programmatically.
            </summary>
            <remarks>
            This event is raised when <see cref="T:Syncfusion.Blazor.Grids.SelectionMode"/> as Row or Both.
            The selection of a row is prevented using the <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.RowSelecting"/> event, then the <c>RowSelected</c> event will not be raised.
            </remarks>
            <value>
            An event callback function.
            </value>
            <example>
            <code>
            <![CDATA[
            <SfGrid DataSource="@Orders">
                <GridEvents RowSelected="RowselectHandler" TValue="Order"></GridEvents>
            </SfGrid>
            @code {
                public void RowselectHandler(RowSelectEventArgs<Order> args)
                {
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.RowSelecting">
            <summary>
            Gets or sets an event callback that is raised before any row selection occurs in the grid. Row selection can be done by click on the row or presssing arrow keys with or wihtout Shift or Ctrl keys or doing drag selection or programmatically.
            </summary>
            <remarks>
            This event is raised when <see cref="T:Syncfusion.Blazor.Grids.SelectionMode"/> as Row or Both. 
            You can prevent the cell selection action using <see cref="!:Syncfusion.Blazor.Grids.RowSelectingEventArgs.Cancel"/>.
            </remarks>
            <value>
            An event callback function.
            </value>
            <example>
            <code>
            <![CDATA[
            <SfGrid DataSource="@Orders">
                <GridEvents RowSelecting="RowselectingHandler" TValue="Order"></GridEvents>
            </SfGrid>
            @code {
                public void RowselectingHandler(RowSelectingEventArgs<Order> args)
                {
                  args.Cancel = true;
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.FreezeLineMoving">
            <summary>
            Gets or sets an event callback that is raised on moving freeze line.
            </summary>
            <remarks> 
            You can prevent the freeze action using <see cref="P:Syncfusion.Blazor.Grids.FreezeLineMovingEventArgs.Cancel"/>.
            </remarks>
            <value>
            An event callback function.
            </value>
            <example> 
            <code> 
            <![CDATA[ 
            <SfGrid DataSource="@Orders"> 
                <GridEvents FreezeLineMoving="FreezeLineMovingHandler" TValue="Order"></GridEvents> 
            </SfGrid> 
            @code { 
                public void FreezeLineMovingHandler(FreezeLineMoving args) 
                { 
                    args.Cancel = true;
                } 
            } 
            ]]> 
            </code> 
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.FreezeLineMoved">
            <summary>
            Gets or sets an event callback that is raised after moved freeze line.
            </summary>
            <remarks> 
            This event handler receives a  <see cref="T:Syncfusion.Blazor.Grids.FreezeLineMovedEventArgs" /> object which provides frozen columns details.
            </remarks>
            <value>
            An event callback function.
            </value>
            <example> 
            <code> 
            <![CDATA[ 
            <SfGrid DataSource="@Orders"> 
                <GridEvents FreezeLineMoved="FreezeLineMovedHandler" TValue="Order"></GridEvents> 
            </SfGrid> 
            @code { 
                public void FreezeLineMovedHandler(FreezeLineMoving args) 
                { 
                } 
            } 
            ]]> 
            </code> 
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.OnToolbarClick">
            <summary>
            Gets or sets an event callback that is raised when a toolbar item is clicked or the Enter key is pressed after focusing on the toolbar item.
            </summary>
            <remarks>
            This event handler receives a object which provides the details about the toolbar items.
            Within this event handler, you can use custom actions for toolbar items.
            </remarks>
            <value>
            An event callback function.
            </value>
            <example>
            <code>
            <![CDATA[
            <SfGrid DataSource="@Orders" Toolbar="@(new List<string>() { "Add", "Edit", "Delete", "Cancel", "Update" })">
              <GridEvents OnToolbarClick="ToolbarClickHandler" TValue="Order"></GridEvents>
            </SfGrid>
            @code {
             public void ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs Args)
             {
             }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.BeforeOpenColumnChooser">
            <summary>
            Gets or sets an event callback that is raised before the column chooser dialog is open while click the columns icon in the toolbar. The column chooser allows the user to show or hide columns by changing the state of the checkbox.
            </summary>
            <remarks>
            This event handler receives a <see cref="!:Syncfusion.Blazor.Grid.GridEvents.BeforeOpenColumnChooser"/> object which provide details about <see cref="T:Syncfusion.Blazor.Grids.GridColumns"/>.
            You can customize the column chooser dialog elements using this event.
            You can prevent the column chooser action using cref="Syncfusion.Blazor.Grid.GridEvents.ColumnChooserEventArgs.Cancel"/>.
            </remarks>
            <value>
            An event callback function.
            </value>
            <example>
            <code>
            <![CDATA[
            <SfGrid ShowColumnChooser="true" Toolbar="@(new List<string>() { "ColumnChooser" })">
              <GridEvents BeforeOpenColumnChooser="BeforeOpenColumnChooserHandler" TValue="Order"></GridEvents>
            </SfGrid>
            @code {
             public void BeforeOpenColumnChooserHandler(ColumnChooserEventArgs Args)
             {
                args.Cancel = true;
             }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.OnPdfExport">
            <summary>
            Gets or sets an event callback that is raised just before the grid is exported to a PDF document. This event is triggered when the user clicks on the PDF exporting icon in the toolbar.
            </summary>
            <value>
            An event callback function.
            </value>
            <example>
            <code>
            <![CDATA[
            <SfGrid>
              <GridEvents OnPdfExport="PdfExportHandler" OnToolbarClick="ToolbarClickHandler" TValue="Order"></GridEvents>
            </SfGrid>
            @code {
             SfGrid<BusinessObject> Grid;
             public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs Args)
             {
              if (Args.Item.Text == "PDF Export")
              {
               await this.Grid.PdfExport();
              }
             }
             public void PdfExportHandler(object args)
             {
             }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.PdfQueryCellInfoEvent">
            <summary>
            Gets or sets an event callback that is raised whenever a grid data cell is exported into PDF document. This event is triggered when the user clicks on the PDF exporting icon in the toolbar.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.PdfQueryCellInfoEventArgs`1"/> object, which provides corresponding row and cell informations.
            Within this event handler, you can customize the appearance and contents of individual data cells in the exported PDF document.
            </remarks>
            <value>
            An event callback function.
            </value>
            <example>
            <code>
            <![CDATA[
            <SfGrid AllowPdfExport="true" Toolbar="@(new List<string>() { "PdfExport" })">
              <GridEvents PdfQueryCellInfoEvent="PdfQueryCellInfoHandler" OnToolbarClick="ToolbarClickHandler" TValue="BusinessObject"></GridEvents>
            </SfGrid>
            @code {
             SfGrid<BusinessObject> Grid;
             public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs Args)
             {
              if (Args.Item.Text == "PDF Export")
              {
               await this.Grid.PdfExport();
              }
             }
             public void PdfQueryCellInfoHandler(PdfQueryCellInfoEventArgs<BusinessObject> args)
             {
             }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.PdfHeaderQueryCellInfoEvent">
            <summary>
            Gets or sets an event callback that is raised whenever grid header cell is exported into PDF document. This event is triggered when the user clicks on the PDF exporting icon in the toolbar.
            </summary>
            <remarks>
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.PdfHeaderQueryCellInfoEventArgs"/> object, which provides corresponding column and cell informations.
            Within this event handler, you can customize the appearance and contents of individual header cells in the exported PDF document.
            </remarks>
            <value>
            An event callback function.
            </value>
            <example>
            <code>
            <![CDATA[
            <SfGrid AllowPdfExport="true" Toolbar="@(new List<string>() { "PdfExport" })">
              <GridEvents PdfHeaderQueryCellInfoEvent="PdfHeaderQueryCellInfoHandler" OnToolbarClick="ToolbarClickHandler" TValue="BusinessObject"></GridEvents>
            </SfGrid>
            @code {
             SfGrid<BusinessObject> Grid;
             public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs Args)
             {
              if (Args.Item.Text == "PDF Export")
              {
               await this.Grid.PdfExport();
              }
             }
             public void PdfHeaderQueryCellInfoHandler(PdfHeaderQueryCellInfoEventArgs args)
             {
             }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.PdfAggregateTemplateInfo">
            <summary>
            Gets or sets an event callback that is raised whenever a caption, footer, or group footer aggregate row is created on the PDF document. This event is triggered when the user clicks on the PDF exporting icon in the toolbar.
            </summary>
            <remarks>
            Within this event handler, you can customize the appearance and contents of caption, footer, or group footer aggregate rows in the exported PDF document.
            </remarks>
            <value>
            An event callback function.
            </value>
            <example>
            <code>
            <![CDATA[
            <SfGrid AllowPdfExport="true" Toolbar="@(new List<string>() { "PdfExport" })">
              <GridEvents PdfAggregateTemplateInfo="PdfAggregateTemplateInfoHandler" OnToolbarClick="ToolbarClickHandler" TValue="BusinessObject"></GridEvents>
            </SfGrid>
            @code {
             SfGrid<BusinessObject> Grid;
             public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs Args)
             {
              if (Args.Item.Text == "PDF Export")
              {
               await this.Grid.PdfExport();
              }
             }
             public void PdfAggregateTemplateInfoHandler(PdfAggregateEventArgs<Order> args)
             {
             }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.PdfGroupCaptionTemplateInfo">
            <summary>
            Gets or sets an event callback that is raised whenever a group caption template is created on the PDF document. This event is triggered when the user clicks on the PDF exporting icon in the toolbar.
            </summary>
            <remarks>
            Within this event handler, you can customize the appearance and contents of group caption templates in the exported PDF document.
            </remarks>
            <value>
            An event callback function.
            </value>
            <example>
            <code>
            <![CDATA[
            <SfGrid AllowPdfExport="true" Toolbar="@(new List<string>() { "PdfExport" })">
              <GridEvents PdfGroupCaptionTemplateInfo="PdfGroupCaptionHandler" OnToolbarClick="ToolbarClickHandler" TValue="BusinessObject"></GridEvents>
            </SfGrid>
            @code {
             SfGrid<BusinessObject> Grid;
             public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs Args)
             {
              if (Args.Item.Text == "PDF Export")
              {
               await this.Grid.PdfExport();
              }
             }
             public void PdfGroupCaptionHandler(PdfCaptionTemplateArgs Args)
             {
             }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.PdfDetailTemplateExporting">
            <summary>
            Gets or sets an event callback that is raised before a detail template is append to Pdf file format.
            </summary>
            <remarks>
            This event will be triggered only when the <c>PdfDetailRowMode</c> is set to <c>Expand</c> in <see cref="T:Syncfusion.Blazor.Grids.PdfExportProperties"/>.
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.PdfDetailTemplateEventArgs`1"/> object, which provides details about the corresponding parent row, along with additional customization options for the PDF detail template.
            Within this event handler, you can customize the appearance and content of the PDF document before a detail template added. Additionally, this event supports achieving nested grid exporting.
            </remarks>
            <value>
            An event callback function.
            </value>
            <example>
            <code>
            <![CDATA[
            <SfGrid AllowPdfExport="true" Toolbar="@(new List<string>() { "PdfExport" })">
              <GridEvents PdfDetailTemplateExporting="PdfDetailTemplateEventHandler" OnToolbarClick="ToolbarClickHandler" TValue="BusinessObject"></GridEvents>
            </SfGrid>
            @code {
             SfGrid<BusinessObject> Grid;
             public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs Args)
             {
              if (Args.Item.Text == "PDF Export")
              {
               await this.Grid.PdfExport();
              }
             }
             public void PdfDetailTemplateEventHandler(PdfDetailTemplateEventArgs<Order> args)
             {
             }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.OnExcelExport">
            <summary>
            Gets or sets an event callback that is raised before the grid data is exported to an Excel/CSV file. This event is triggered when the user clicks on the Excel exporting icon in the toolbar.
            </summary>
            <value>
            An event callback function.
            </value>
            <example>
            <code>
            <![CDATA[
            <SfGrid>
              <GridEvents OnExcelExport="ExcelExportHandler" OnToolbarClick="ToolbarClickHandler" TValue="BusinessObject"></GridEvents>
            </SfGrid>
            @code {
             SfGrid<BusinessObject> Grid;
             public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs Args)
             {
              if (Args.Item.Text == "Excel Export")
              {
               await this.Grid.ExcelExport();
              }
             }
             public void ExcelExportHandler(object args)
             {
             }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.ExcelAggregateTemplateInfo">
            <summary>
            Gets or sets an event callback that is raised whenever a caption, footer, or group footer aggregate row is created on the excel sheet.  This event is triggered when the user clicks on the Excel exporting icon in the toolbar.
            </summary>
            <remarks>
            Within this event handler, you can customize the appearance and contents of caption, footer, or group footer aggregate rows in the exported Excel file.
            </remarks>
            <value>
            An event callback function.
            </value>
            <example>
            <code>
            <![CDATA[
            <SfGrid>
              <GridEvents ExcelAggregateTemplateInfo="ExcelAggregateTemplateInfoHandler" OnToolbarClick="ToolbarClickHandler" TValue="BusinessObject"></GridEvents>
            </SfGrid>
            @code {
             SfGrid<BusinessObject> Grid;
             public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs Args)
             {
              if (Args.Item.Text == "Excel Export")
              {
               await this.Grid.ExcelExport();
              }
             }
             public void ExcelAggregateTemplateInfoHandler(ExcelAggregateEventArgs args)
             {
             }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.ExcelGroupCaptionTemplateInfo">
            <summary>
            Gets or sets an event callback that is raised whenever a group caption template is created on the excel sheet. This event is triggered when the user clicks on the Excel exporting icon in the toolbar.
            </summary>
            <remarks>
            Within this event handler, you can customize the appearance and contents of group caption templates in the exported Excel file.
            </remarks>
            <value>
            An event callback function.
            </value>
            <example>
            <code>
            <![CDATA[
            <SfGrid>
              <GridEvents ExcelGroupCaptionTemplateInfo="ExcelGroupCaptionHandler" OnToolbarClick="ToolbarClickHandler" TValue="BusinessObject"></GridEvents>
            </SfGrid>
            @code {
             SfGrid<BusinessObject> Grid;
             public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs Args)
             {
              if (Args.Item.Text == "Excel Export")
              {
               await this.Grid.ExcelExport();
              }
             }
             public void ExcelGroupCaptionHandler(ExcelCaptionTemplateArgs Args)
             {
             }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.ExcelQueryCellInfoEvent">
            <summary>
            Gets or sets an event callback that is raised whenever a data is entered into a cell of the Excel sheet. This event is triggered when the user clicks on the Excel exporting icon in the toolbar.
            </summary>
            <remarks>
            Within this event handler, you can customize the appearance and contents of individual data cells in the exported Excel file.
            </remarks>
            <value>
            An event callback function.
            </value>
            <example>
            <code>
            <![CDATA[
            <SfGrid>
              <GridEvents ExcelQueryCellInfoEvent="ExcelQueryCellInfoHandler" OnToolbarClick="ToolbarClickHandler" TValue="BusinessObject"></GridEvents>
            </SfGrid>
            @code {
             SfGrid<BusinessObject> Grid;
             public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs Args)
             {
              if (Args.Item.Text == "Excel Export")
              {
               await this.Grid.ExcelExport();
              }
             }
             public void ExcelQueryCellInfoHandler(ExcelQueryCellInfoEventArgs<Order> args)
             {
             }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.ExcelHeaderQueryCellInfoEvent">
            <summary>
            Gets or sets an event callback that is raised whenever a data entered into a header cell of the excel sheet. This event is triggered when the user clicks on the Excel exporting icon in the toolbar.
            </summary>
            <remarks>
            Within this event handler, you can customize the appearance and contents of individual header cells in the exported Excel file.
            </remarks>
            <value>
            An event callback function.
            </value>
            <example>
            <code>
            <![CDATA[
            <SfGrid>
              <GridEvents ExcelHeaderQueryCellInfoEvent="ExcelHeaderQueryCellInfoHandler" OnToolbarClick="ToolbarClickHandler" TValue="BusinessObject"></GridEvents>
            </SfGrid>
            @code {
             SfGrid<BusinessObject> Grid;
             public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs Args)
             {
              if (Args.Item.Text == "Excel Export")
              {
               await this.Grid.ExcelExport();
              }
             }
             public void ExcelHeaderQueryCellInfoHandler(ExcelHeaderQueryCellInfoEventArgs<Order> args)
             {
             }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.ExcelDetailTemplateExporting">
            <summary>
            Gets or sets an event callback that is raised before a detail template is appended to an Excel sheet.
            </summary>
            <remarks>
            This event will be triggered only when the <see cref="T:Syncfusion.Blazor.Grids.ExcelDetailRowMode"/> is set to <c>Expand</c> or <c>Collapse</c> in <see cref="T:Syncfusion.Blazor.Grids.ExcelExportProperties"/>.
            This event handler receives a <see cref="T:Syncfusion.Blazor.Grids.ExcelDetailTemplateEventArgs`1"/> object, which provides details about the corresponding parent row along with additional customization options for the Excel detail template.
            Within this event handler, you can customize the appearance and content of the exported Excel file before a detail template added. Additionally, this event supports achieving nested grid exporting.
            </remarks>
            <value>
            An event callback function.
            </value>
            <example>
            <code>
            <![CDATA[
            <SfGrid>
              <GridEvents ExcelDetailTemplateExporting="ExcelDetailTemplateEventHandler" OnToolbarClick="ToolbarClickHandler" TValue="BusinessObject"></GridEvents>
            </SfGrid>
            @code {
             SfGrid<BusinessObject> Grid;
             public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs Args)
             {
              if (Args.Item.Text == "Excel Export")
              {
               ExcelExportProperties ExportProperties = new ExcelExportProperties();
               ExportProperties.ExcelDetailRowMode = ExcelDetailRowMode.Expand;
               await this.Grid.ExcelExport(ExportProperties);
              }
             }
             public void ExcelDetailTemplateEventHandler(ExcelDetailTemplateEventArgs<Order> args)
             {
               . . . .
             }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridEvents`1.ExportComplete">
            <summary>
            Gets or sets an event callback that is raised when the export process is completed.
            </summary>
            <value>
            An event callback function.
            </value>
            <example>
            <code>
            <![CDATA[
            <SfGrid>
              <GridEvents ExportComplete="ExportCompleteHandler" OnToolbarClick="ToolbarClickHandler" TValue="BusinessObject"></GridEvents>
            </SfGrid>
            @code {
             SfGrid<BusinessObject> Grid;
             public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs Args)
             {
              if (Args.Item.Text == "Excel Export")
              {
               await this.Grid.ExcelExport();
              }
             }
             public void ExportCompleteHandler(object args)
             {
             }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.GridFilterColumn">
            <summary>
            Configures grid filter column.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridFilterColumn.ChildContent">
            <summary>
            Defines the child content.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridFilterColumn.Field">
            <summary>
            Defines the field name of the filter column.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridFilterColumn.IgnoreAccent">
            <summary>
            If ignoreAccent is set to true, then filter ignores the diacritic characters or accents while filtering.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridFilterColumn.MatchCase">
            <summary>
            If match case set to true, then filter records with exact match or else
            filter records with case insensitive(uppercase and lowercase letters treated as same).
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridFilterColumn.Operator">
            <summary>
            Defines the operator to filter records.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridFilterColumn.RawInputValue">
            <summary>
            Defines the RawInputValue to filter records.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridFilterColumn.Predicate">
            <summary>
            Defines the relationship between one filter query and another by using AND or OR predicate.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridFilterColumn.Uid">
            <summary>
            Defines the UID of filter column.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridFilterColumn.Value">
            <summary>
            Defines the value used to filter records.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridFilterColumn.ActualValue">
            <summary>
            Defines the Actual value used to filter records.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridFilterColumn.PreventFilterQuery">
            <summary>
            The value set to the PreventFilterQuery property in OnActionBegin event handler is maintained by using this property.
            This helps to prevent the default filter query generation for previously filtered columns during the multiple column filtering.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.GridFilterColumns">
            <summary>
            Configures grid filter columns.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridFilterColumns.ChildContent">
            <summary>
            Defines the child content.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridFilterColumns.Columns">
            <summary>
            Defines the filter column collection. Use <see cref="T:Syncfusion.Blazor.Grids.GridFilterColumn"/> component
            to define filter criteria.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.GridFilterSettings">
            <summary>
            Configures grid filtering.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridFilterSettings.MainParent">
            <summary>
            Defines the parent component.
            </summary>
            <exclude />
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridFilterSettings.ChildContent">
            <summary>
            Defines the child content.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridFilterSettings.Columns">
            <summary>
            Specifies the columns to be filtered at initial rendering of the Grid. You can also get the columns that were currently filtered.
            </summary>
            <remarks>
            Use <see cref="T:Syncfusion.Blazor.Grids.GridFilterColumn"/> component
            to define filter criteria.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridFilterSettings.EnableCaseSensitivity">
            <summary>
            If EnableCaseSensitivity is set to true then searches grid records with exact match based on the filter
            operator. It will have no effect on number, boolean and Date fields.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridFilterSettings.IgnoreAccent">
            <summary>
            If ignoreAccent set to true, then filter ignores the diacritic characters or accents while filtering.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridFilterSettings.ImmediateModeDelay">
            <summary>
            Defines the time delay (in milliseconds) in filtering records when the Immediate mode of filter bar is set.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridFilterSettings.Mode">
            <summary>
            Defines the filter bar modes. The available options are.
            <list type="bullet">
            <item>
            <term>OnEnter</term>
            <description>Initiate filter operation after Enter key is pressed.</description>
            </item>
            <item>
            <term>Immediate</term>
            <description>Initiate filter operation after certain time interval. By default time interval is 1500ms.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridFilterSettings.Operators">
            <summary>
            The Operators is used to override the default operators in filter menu. This should be defined by type wise
            (string, number, date and boolean). Based on the column type, this customize operator list will render in filter menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridFilterSettings.ShowFilterBarStatus">
            <summary>
            Shows or hides the filtered status message on the pager.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridFilterSettings.Type">
            <summary>
            Defines options for filtering type. The available options are.
            <list type="bullet">
            <item>
            <term>FilterBar</term>
            <description>Default. Specifies the filter type as filter bar.</description>
            </item>
            <item>
            <term>Menu</term>
            <description>Specifies the filter type as menu.</description>
            </item>
            <item>
            <term>CheckBox</term>
            <description>Specifies the filter type as check box.</description>
            </item>
            <item>
            <term>Excel</term>
            <description>Specifies the filter type as excel.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.GridGroupSettings">
            <summary>
            Configures grid grouping.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridGroupSettings.MainParent">
            <summary>
            Defines the parent component.
            </summary>
            <exclude />
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridGroupSettings.ChildContent">
            <summary>
            Defines the child content.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridGroupSettings.AllowReordering">
            <summary>
            If AllowReordering is set to true, Grid allows the grouped elements to be reordered.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridGroupSettings.CaptionTemplate">
            <summary>
            The Caption Template allows user to display custom group caption.
            </summary>
            <remarks>
            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.
            The context is of type <see cref="T:Syncfusion.Blazor.Grids.CaptionTemplateContext"/> of the grid.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridGroupSettings.Columns">
            <summary>
            Specifies the column names to group at initial rendering of the Grid.
            You can also get the currently grouped columns.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridGroupSettings.DisablePageWiseAggregates">
            <summary>
            If DisablePageWiseAggregates set to true, then the group aggregate value will
            be calculated from the whole data instead of paged data and two requests will be made for each page
            when Grid bound with remote service.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridGroupSettings.ShowDropArea">
            <summary>
            If ShowDropArea is set to true, the group drop area element will be visible at the top of the Grid.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridGroupSettings.ShowGroupedColumn">
            <summary>
            If ShowGroupedColumn is set to false, it hides the grouped column after grouping.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridGroupSettings.ShowToggleButton">
            <summary>
            If ShowToggleButton set to true, then the toggle button will be showed in the column headers which can be used to group
            or ungroup columns by clicking them.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridGroupSettings.ShowUngroupButton">
            <summary>
            If ShowUngroupButton set to false, then ungroup button is hidden in dropped element.
            It can be used to ungroup the grouped column when click on ungroup button.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridGroupSettings.EnableLazyLoading">
            <summary>
            The Lazy load grouping, allows the Grid to render only the initial level caption rows in collapsed state while grouping.
            The child rows of each caption will render only when we expand the captions.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.GridInfiniteScrollSettings">
            <summary>
            Configures grid infinite scrolling.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridInfiniteScrollSettings.ChildContent">
            <summary>
            Defines the child content.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridInfiniteScrollSettings.InitialBlocks">
            <summary>
            Gets or sets the number of blocks to be initially rendered when the Grid is loaded. Each block corresponds to a page size of the Grid, resulting in the rendering of a certain number of <c>tr</c> elements determined by multiplying the initial block size with the page size.
            </summary>
            <value>
            The default value is 3, indicating that the Grid will display three blocks, which translates to a specific number of <c>tr</c> elements, during the initial rendering.
            </value>
            <remarks>
            The <c>InitialBlocks</c> property determines the quantity of blocks, each equivalent to a page size, to display during the first load. Additional blocks will be dynamically loaded as the user scrolls through the Grid. For example, when the bottom of the scrollbar is reached, one block of records will be fetched and loaded to display new set of data's.
            If the <see cref="P:Syncfusion.Blazor.Grids.GridPageSettings.PageSize"/> is not explicitly provided, it will be calculated based on the viewport height to ensure an optimal user experience.
            The <c>InitialBlocks</c> size should be set greater than the viewport height to guarantee a smooth and seamless user experience.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridInfiniteScrollSettings.MaximumBlocks">
            <summary>
            Gets or sets the number of blocks to be rendered in the Grid during scrolling when <c>EnableCache</c> is set to true. 
            This caching mode optimizes performance by storing blocks in a cache for large data sets.
            </summary>
            <value>
            The default value is 3.
            </value>
            <remarks>
            When <c>EnableCache</c> is set to true, the <c>MaximumBlocks</c> property determines the maximum number of blocks to be kept in the cache. Exceeding this limit will remove the oldest blocks from the cache to make space for new ones.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridInfiniteScrollSettings.EnableCache">
            <summary>
            Gets or sets a value indicating whether the Grid will cache visited blocks of data, allowing reuse of previously loaded block data when revisiting the same block. This reduces the frequency of data requests while navigating through the same block.
            </summary>
            <value>
            <c>true</c> to enable data caching for visited blocks; <c>false</c> by default.
            </value>      
            <remarks>
            Enabling this caching mode maintains row elements in the DOM based on the <see cref="P:Syncfusion.Blazor.Grids.GridInfiniteScrollSettings.MaximumBlocks"/> count. If the number of maintained rows exceeds this limit during scrolling, the Grid removes rows from the DOM to accommodate new row elements.
            </remarks>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.GridKeySettings">
            <summary>
            Configures keyboard navigation for grid.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridKeySettings.MoveLeftCell">
            <summary>
            Defines the action keys for the left cell movement.
            <list type="bullet">
            <item>
            <term>ShiftTab</term>
            <description>Moves to left cell on pressing Shift+Tab key</description>
            </item>
            <item>
            <term>ArrowLeft</term>
            <description>Moves to left cell on pressing left arrow key</description>
            </item>
            <item>
            <term>ShiftLeft</term>
            <description>Moves to left cell on pressing shift+left arrow key</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridKeySettings.MoveRightCell">
            <summary>
            Defines the action keys for the right cell movement.
            <list type="bullet">
            <item>
            <term>Tab</term>
            <description>Moves to right cell on pressing Tab key</description>
            </item>
            <item>
            <term>ArrowRight</term>
            <description>Moves to right cell on pressing right arrow key</description>
            </item>
            <item>
            <term>ShiftRight</term>
            <description>Moves to right cell on pressing shift+right arrow key</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridKeySettings.MoveUpCell">
            <summary>
            Defines the action keys for the up cell movement.
            <list type="bullet">
            <item>
            <term>ShiftEnter</term>
            <description>Moves to top cell on pressing Shit+Enter key</description>
            </item>
            <item>
            <term>ArrowUp</term>
            <description>Moves to top cell on pressing up arrow key</description>
            </item>
            <item>
            <term>ShiftUp</term>
            <description>Moves to top cell on pressing shift+up arrow key</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridKeySettings.MoveDownCell">
            <summary>
            Defines the action keys for the down cell movement.
            <list type="bullet">
            <item>
            <term>Enter</term>
            <description>Moves to down cell on pressing Enter key</description>
            </item>
            <item>
            <term>ArrowDown</term>
            <description>Moves to down cell on pressing down arrow key</description>
            </item>
            <item>
            <term>ShiftDown</term>
            <description>Moves to down cell on pressing shift+down arrow key</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.GridPageSettings">
            <summary>
            Configures grid paging.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridPageSettings.MainParent">
            <summary>
            Defines the parent component.
            </summary>
            <exclude />
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridPageSettings.ChildContent">
            <summary>
            Defines the child content.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridPageSettings.CurrentPage">
            <summary>
            Defines the current page number of the pager.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridPageSettings.EnableQueryString">
            <summary>
            If EnableQueryString set to true,
            then it pass current page information as a query string along with the URL while navigating to other page.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridPageSettings.PageCount">
            <summary>
            Defines the number of pages to be displayed in the pager container.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridPageSettings.PageSize">
            <summary>
            Defines the number of records to be displayed per page.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridPageSettings.PageSizes">
            <summary>
            If PageSizes set to true or Array of values,
            It renders DropDownList in the pager which allow us to select pageSize from DropDownList.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridPageSettings.Template">
            <summary>
            Defines the template which renders customized elements in pager instead of default elements.
            <remarks>
            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.
            The context is of type <see cref="T:Syncfusion.Blazor.Navigations.PagerTemplateContext"/> of the grid.
            </remarks>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridPageSettings.EnableExternalMessage">
            <summary>
            Enable or disable the ExternalMessage.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridPageSettings.ExternalMessage">
            <summary>
            Defines the pager External message.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.GridRowDropSettings">
            <summary>
            Configures grid row drag and drop.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridRowDropSettings.TargetID">
            <summary>
            Defines the ID of droppable component on which row drop should occur.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.GridSearchSettings">
            <summary>
            Configures grid searching.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridSearchSettings.MainParent">
            <summary>
            Defines the parent component.
            </summary>
            <exclude />
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridSearchSettings.Fields">
            <summary>
            Specifies the collection of fields included in search operation. By default, bounded columns of the Grid are included.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridSearchSettings.IgnoreAccent">
            <summary>
            If ignoreAccent set to true, then filter ignores the diacritic characters or accents while filtering.
            </summary>
            <remarks>Ignore accent is supported by remote data alone.
            IgnoreAccent key will be sent to server and operation should be handled at user level.</remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridSearchSettings.IgnoreCase">
            <summary>
            If IgnoreCase is set to false, searches records that match exactly, else
            searches records that are case insensitive(uppercase and lowercase letters treated the same).
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridSearchSettings.Key">
            <summary>
            Specifies the key value to search Grid records at initial rendering.
            You can also get the current search key.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridSearchSettings.Operator">
            <summary>
            Defines the operator to search records.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.GridSelectionSettings">
            <summary>
            Configures grid selection.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridSelectionSettings.CellSelectionMode">
            <summary>
            The cell selection modes are flow and box.
            It requires the <see cref="P:Syncfusion.Blazor.Grids.GridSelectionSettings.Mode"/> to be either cell or both.
            <list type="bullet">
            <item>
            <term>Flow</term>
            <description>Default. Selects the range of cells between start index and end index that also includes the other cells of the selected rows..</description>
            </item>
            <item>
            <term>Box</term>
            <description>Selects the range of cells within the start and end column indexes that includes in between cells of rows within the range</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridSelectionSettings.CheckboxMode">
            <summary>
            Defines options for checkbox selection Mode. They are,.
            <list type="bullet">
            <item>
            <term>Default</term>
            <description>Default. In this mode, user can select multiple rows by clicking rows one by one.</description>
            </item>
            <item>
            <term>ResetOnRowClick</term>
            <description>In ResetOnRowClick mode, on clicking a row it will reset previously selected row and also multiple
             rows can be selected by using CTRL or SHIFT key.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridSelectionSettings.CheckboxOnly">
            <summary>
            If CheckboxOnly set to true, then the Grid selection is allowed only through checkbox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridSelectionSettings.EnableSimpleMultiRowSelection">
            <summary>
            If EnableSimpleMultiRowSelection set to true, then the user can able to perform multiple row selection with single clicks.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridSelectionSettings.EnableToggle">
            <summary>
            If EnableToggle set to true, then the user can able to perform toggle for the selected row.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridSelectionSettings.Mode">
            <summary>
            Specifies the selection mode. Available modes are,.
            <list type="bullet">
            <item>
            <term>Row</term>
            <description>Default. Row selection is enabled</description>
            </item>
            <item>
            <term>Cell</term>
            <description>Cell selection is enabled.</description>
            </item>
            <item>
            <term>Both</term>
            <description>Both Row and Cell selection is enabled.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridSelectionSettings.PersistSelection">
            <summary>
            If PersistSelection set to true, then the Grid selection is persisted on all operations.
            For persisting selection in the Grid, any one of the column must be enabled as a primary key.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridSelectionSettings.Type">
            <summary>
            Defines options for selection type. They are.
            <list type="bullet">
            <item>
            <term>Single</term>
            <description>Default. Allows selection of only a row or a cell.</description>
            </item>
            <item>
            <term>Multiple</term>
            <description>Allows user to select a multiple rows or cells.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridSelectionSettings.AllowDragSelection">
            <summary>
            Gets or sets whether to enable selection of multiple rows and cells by dragging mouse.
            </summary>
            <value>
            <c>true</c>, if the row and cell selection enabled when dragging mouse. Otherwise, false.
            </value>
            <remarks>
            To perform drag selection in blazor grid, set <see cref="P:Syncfusion.Blazor.Grids.GridSelectionSettings.Type"/> as should be <c>Multiple</c>.
            </remarks>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.GridSortColumn">
            <summary>
            Configures grid sort column.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridSortColumn.Direction">
            <summary>
            Defines the direction of sort column. Available directions are,.
            <list type="bullet">
            <item>
            <term>Ascending</term>
            <description>Default. Sorts records in ascending order.</description>
            </item>
            <item>
            <term>Descending</term>
            <description>Sorts records in descending order.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridSortColumn.Field">
            <summary>
            Defines the field name of sort column.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridSortColumn.IsFromGroup">
            <summary>
            Defines the sorted column whether or from grouping operation.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.GridSortColumns">
            <summary>
            Configures grid sort columns.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridSortColumns.ChildContent">
            <summary>
            Defines the child content.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridSortColumns.Columns">
            <summary>
            Gets the sorted columns collection, use <see cref="T:Syncfusion.Blazor.Grids.GridSortColumn"/> component
            to set initial sort columns.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.GridSortSettings">
            <summary>
            Configures grid sorting.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridSortSettings.MainParent">
            <summary>
            Defines the parent component.
            </summary>
            <exclude />
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridSortSettings.ChildContent">
            <summary>
            Defines the child content.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridSortSettings.AllowUnsort">
            <summary>
            If AllowUnsort set to false the user can not get the grid in unsorted state by clicking the sorted column header.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridSortSettings.Columns">
            <summary>
            Specifies the columns to sort at initial rendering of Grid.
            Also user can get current sorted columns, use <see cref="T:Syncfusion.Blazor.Grids.GridSortColumn"/> component
            to set initial sort columns.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.GridTemplates">
            <summary>
            Configures grid templates.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridTemplates.ChildContent">
            <summary>
            Defines the child content.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridTemplates.RowTemplate">
            <summary>
            Gets or sets the row template to customize row elements.
            </summary>
            <remarks>
            The RowTemplate content must be TD elements and the number of TD elements must match the number of datagrid columns.
            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.
            The context is of type TValue.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridTemplates.DetailTemplate">
            <summary>
            Gets or sets the template to customize detail row element.
            </summary>
            <remarks>
            Use DetailTemplate to render hierarchy grid. It supports N level of nested grids.
            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.
            The context is of type TValue.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridTemplates.EmptyRecordTemplate">
            <summary>
            Gets or sets the template to customize empty grid row element.
            </summary>
            <remarks>
            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.
            The context is of type <see cref="T:Syncfusion.Blazor.Grids.EmptyRecordTemplateContext"/>.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridTemplates.ToolbarTemplate">
            <summary>
            Render custom toolbar using ToolbarTemplate property. It replaces the in-built toolbar
            and click actions must be handled in custom toolbar itself.
            </summary>
            <remarks>
            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.
            </remarks>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.GridTextWrapSettings">
            <summary>
            Configures grid text wrapping.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridTextWrapSettings.WrapMode">
            <summary>
            Defines the WrapMode` of the Grid. The available modes are:
            <list type="bullet">
            <item>
            <term>Both</term>
            <description>Default. Wraps both header and content.</description>
            </item>
            <item>
            <term>Header</term>
            <description>Wraps header alone.</description>
            </item>
            <item>
            <term>Content</term>
            <description>Wraps content alone.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.IGrid">
            <summary>
            Interface for SfGrid component.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.IGrid.Notify(System.String,System.Object)">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.IFilterOperator">
            <summary>
            Represents a custom filter operator that can be used in the Menu filter.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.IFilterOperator.Text">
            <summary>
            Gets or sets the display text of the custom filter operator.
            </summary>
            <value>The display text of the custom filter operator.</value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.IFilterOperator.Value">
            <summary>
            Gets or sets the operator value that represents the custom filter operator.
            </summary>
            <value>The operator value of the custom filter operator.</value>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.Internal.DataGenerator`1">
            <summary>
            Data module.
            </summary>
            <typeparam name="T">TValue of grid component.</typeparam>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.Internal.DetailRow`1">
            <summary>
            Handles detail row interactions.
            </summary>
            <typeparam name="T">TValue of grid component.</typeparam>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.Internal.Edit`1">
            <summary>
            Handles CRUD operations.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.Internal.Edit`1.ClearSelection">
            <summary>
            It prevents the clear selection when pressing the "Esc" key in the editable state (batch editing) while enabling PersistSelection.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.Internal.Filter`1">
            <summary>
            Handles filter operation.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.Internal.FocusHandler`1">
            <summary>
            Handles focus and keyboard navigation in grid.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.Internal.BeforeCellFocus">
            <summary>
            BeforeCell focus event argument class.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.Internal.CellFocused">
            <summary>
            Cell focus event argument class.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.Internal.ForeignKey`1">
            <summary>
            Handles foreign key column.
            </summary>
            <typeparam name="T">TValue of grid.</typeparam>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.Internal.Grouping`1">
            <summary>
            Handles grouping action.
            </summary>
            <typeparam name="T">TValue of grid component.</typeparam>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.Internal.InfiniteScroll`1">
            <summary>
            Handles infinite scrolling feature.
            </summary>
            <typeparam name="T">TValue of grid component.</typeparam>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.Internal.ReactiveAggregate`1">
            <summary>
            Handles Reactive Aggregation in Grid.
            </summary>
            <typeparam name="T">TValue of grid component.</typeparam>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.Internal.Reorder`1">
            <summary>
            Handles Reordering operation.
            </summary>
            <typeparam name="T">TValue of grid component.</typeparam>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.Internal.RowReorder`1">
            <summary>
            Handles row drag and drop action.
            </summary>
            <typeparam name="T">TValue of grid component.</typeparam>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.Internal.Selection`1">
            <summary>
            Handles selection feature of grid.
            </summary>
            <typeparam name="T">TValue of grid component.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.Selection`1.ClonedSelectedRowRecords">
            <summary>
            Gets the cloned selected row records.
            </summary>
            <remarks>
            This property represents a list of cloned records that correspond to the selected rows. Each record is of type TValue.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.Selection`1.RangeStartIndex">
            <summary>
            Gets or sets the starting index of the range selection.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.Selection`1.RangeEndIndex">
            <summary>
            Gets or sets the ending index of the range selection.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.Internal.Sort`1">
            <summary>
            Handles sort action.
            </summary>
            <typeparam name="T">TValue of grid component.</typeparam>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.Internal.VirtualScroll`1">
            <summary>
            Handles virtual scrolling feature.
            </summary>
            <typeparam name="T">TValue of grid component.</typeparam>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.Internal.DynamicMethodInfo">
            <summary>
            ExpandoObject and DynamicObject PropertyInfo.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.Internal.CellType">
            <summary>
            Specifies the grid`s cell type.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.Internal.CellType.Data">
            <summary>
            Define the cell as Data cell
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.Internal.CellType.Detail">
            <summary>
            Define the cell as detail row`s cell
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.Internal.CellType.DetailIndent">
            <summary>
            Define the cell as detail indent cell
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.Internal.CellType.Indent">
            <summary>
            Define the cell as indent cell
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.Internal.CellType.RowDrag">
            <summary>
            Define the cell as row drag and drop indent cell
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.Internal.CellType.Expand">
            <summary>
            Define the cell as expand cell
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.Internal.CellType.GroupCaption">
            <summary>
            Define the cell as group caption cell
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.Internal.CellType.GroupCaptionEmpty">
            <summary>
            Define the cell as empty group caption cell
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.Internal.CellType.CaptionSummary">
            <summary>
            Define the cell as caption summary cell
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.Internal.CellType.Summary">
            <summary>
            Define the cell as summary/aggregate cell
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.Internal.CellType.CommandColumn">
            <summary>
            Define the cell as command column cell
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.Internal.CellType.StackedHeader">
            <summary>
            Define the cell as stacked header cell
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.Internal.GridUtils">
            <summary>
            Util functions for internal usage.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.EditorCellBase`1.PreventAddForm">
            <summary>
            Used to disable the add form while editing any other row in the grid when the ShowAddNewRow property is set to true.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.Internal.AutoFormat">
            <summary>
            Gets or sets a value that indicates the auto format for an element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.AutoFormat.FontFamily">
            <summary>
            Gets or sets a value that indicates the font-family for an element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.AutoFormat.FontSize">
            <summary>
            Gets or sets a value that indicates the font-size for an element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.AutoFormat.BorderSize">
            <summary>
            Gets or sets a value that indicates the border-size for an element with four values.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.AutoFormat.BorderType">
            <summary>
            Gets or sets a value that indicates the border-type for an element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.AutoFormat.HeaderBackEndColor">
            <summary>
            Gets or sets a value that specifies the background end color for header element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.AutoFormat.HeaderBorderBottomColor">
            <summary>
            Gets or sets a value that specifies the border bottom color for header element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.AutoFormat.HeaderBorderColor">
            <summary>
            Gets or sets a value that specifies the border color for header element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.AutoFormat.HeaderFontColor">
            <summary>
            Gets or sets a value that specifies the font color for header element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.AutoFormat.HeaderFontSize">
            <summary>
            Gets or sets a value that specifies the font size for header element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.AutoFormat.GroupHeaderBackColor">
            <summary>
            Gets or sets a value that specifies the background color for the group header.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.AutoFormat.GHeaderBorderColor">
            <summary>
            Gets or sets a value that specifies the border color for the group header.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.AutoFormat.ContentBackColor">
            <summary>
            Gets or sets a value that specifies the background color for the group header.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.AutoFormat.ContentBorderColor">
            <summary>
            Gets or sets a value that specifies the border color for the content.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.AutoFormat.ContentFontSize">
            <summary>
            Gets or sets a value that specifies the font size for the content.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.AutoFormat.GroupContentFontColor">
            <summary>
            Gets or sets a value that specifies the font color for the groupcontent.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.AutoFormat.GroupCaptionBorderColor">
            <summary>
            Gets or sets a value that specifies the border color for the groupcaption.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.AutoFormat.AltRowBackColor">
            <summary>
            Gets or sets a value that specifies the background color for an alternate row.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.AutoFormat.CaptionBackColor">
            <summary>
            Gets or sets a value that specifies the background color for the caption.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.Internal.ExportHelper`1">
            <summary>
            Export helper.
            </summary>
            <typeparam name="T">TValue of grid.</typeparam>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.Internal.DocumentOption">
            <summary>
            Specifies the document option.
            </summary>
            <exclude/>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.Internal.DocumentOption.AppendAtEnd">
            <summary>
            Append at end
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.Internal.DocumentOption.LastPage">
            <summary>
            Append at last page
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.Internal.FontWeight">
            <summary>
            Specifies font weight.
            </summary>
            <exclude/>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.Internal.FontWeight.Bold">
            <summary>
            Text is bold
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.Internal.FontWeight.Normal">
            <summary>
            Text is normal
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.Internal.SpannedRow">
            <summary>
            spanned row.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.Internal.GridTableCellType">
            <summary>
            Defines cell types.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.Internal.GridTableCellType.GroupCaptionCell">
            <summary>
            Group caption cell.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.Internal.GridTableCellType.FirstRecord">
            <summary>
            Group caption cell.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.Internal.GridTableCellType.GroupHeaderIndentCell">
            <summary>
            Indent cell in group header section.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.Internal.GridTableCellType.SummaryFieldCell">
            <summary>
            Field cell in summary row.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.Internal.GridTableCellType.IndentCell">
            <summary>
            Indent cell in group.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.Internal.GridTableCellType.TopLeftHeaderCell">
            <summary>
            The top-left header cell.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.Internal.GridTableCellType.RowHeaderCell">
            <summary>
            Any row header cell.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.Internal.GridTableCellType.ColumnHeaderCell">
            <summary>
            Column header cell.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.Internal.GridTableCellType.RecordPlusMinusCell">
            <summary>
            PlusMinus cell in a record row.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.Internal.GridTableCellType.RecordFieldCell">
            <summary>
            Field cell in a non-alternate record row.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.Internal.GridTableCellType.AlternateRecordFieldCell">
            <summary>
            Field cell in an alternate record row.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.Internal.GridTableCellType.AlternateRecordRowHeaderCell">
            <summary>
            Any header cell in an alternate record row.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.Internal.GridTableCellType.EmptyCell">
            <summary>
            Empty cell
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.Internal.GridTableCellType.CaptionCell">
            <summary>
            Caption Cell
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.Internal.GridTableCellType.MasterCell">
            <summary>
            Master Cell
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.Internal.GridTableCellType.MasterHeaderCell">
            <summary>
            Master Header Cell
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.Internal.TableOptions">
            <summary>
            Enum for TableOptions   .
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.Internal.TableOptions.ColumnHeaderRowHeight">
            <summary>
            ColumnHeaderRowHeight
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.Internal.TableOptions.RecordRowHeight">
            <summary>
            RecordRowHeight
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.Internal.TableOptions.CaptionRowHeight">
            <summary>
            CaptionRowHeight
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.Internal.TableOptions.IndentCellWidth">
            <summary>
            IndentCellWidth
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.Internal.TableOptions.ContentCellWidth">
            <summary>
            ContentCellWidth
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.Internal.ExportModel">
            <summary>
            Defines the export model.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.Internal.GridExcelExport`1">
            <summary>
            Helper for grid excel export.
            </summary>
            <typeparam name="T">TValue of grid.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.GridExcelExport`1.FileName">
            <summary>
            Gets or sets the name of the file.  .
            </summary>
            <value>The name of the file.</value>
            <remarks></remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.GridExcelExport`1.IsAutoFit">
            <summary>
            Gets or sets the IsAutoFit for grid.    .
            </summary>
            <value>IsAutoFit in file.</value>
            <remarks></remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.GridExcelExport`1.IsAutoFitRows">
            <summary>
            Gets or sets the IsAutoFitRows for grid.    .
            </summary>
            <value>IsAutoFitRows in file.</value>
            <remarks></remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.GridExcelExport`1.Theme">
            <summary>
            Gets or sets the Theme of the file. .
            </summary>
            <value>The Theme of the file.</value>
            <remarks></remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.GridExcelExport`1.FilePath">
            <summary>
            Gets or sets the File Path for saving file. .
            </summary>
            <value>The File Path for saving file in local.</value>
            <remarks></remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.GridExcelExport`1.LocalSave">
            <summary>
            Gets or sets the is file locally saved. .
            </summary>
            <value>The LocalSave option for file.</value>
            <remarks></remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.GridExcelExport`1.EmptyText">
            <summary>
            Gets or sets the Empty record text of the file. .
            </summary>
            <value>The name of the file.</value>
            <remarks></remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.GridExcelExport`1.DataSource">
            <summary>
            Gets or sets the datasource of the grid.    .
            </summary>
            <value>The Datasource of the grid.</value>
            <remarks></remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.GridExcelExport`1.GroupCaptionText">
            <summary>
            Gets or sets the group caption text of the grid.    .
            </summary>
            <value>The group caption text of the grid.</value>
            <remarks></remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.GridExcelExport`1.IsHideColumnInclude">
            <summary>
            Gets or sets the IsHideColumnInclude for grid.  .
            </summary>
            <value>IsHideColumnInclude in file.</value>
            <remarks></remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.GridExcelExport`1.HeaderText">
            <summary>
            Gets or sets the Header Text for multiple export.   .
            </summary>
            <value>HeaderText for multiple export.</value>
            <remarks></remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.GridExcelExport`1.IncludeChildGrid">
            <summary>
            Gets or sets the IncludeChildGrid to either included/exclude the child Grid.    .
            </summary>
            <value>true/false.</value>
            <remarks></remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.GridExcelExport`1.Document">
            <summary>
            Gets or sets the Document.  .
            </summary>
            <value>The Document for exporting.</value>
            <remarks></remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.GridExcelExport`1.ExportType">
            <summary>
            Gets or sets the MultipleExportType for the file.   .
            </summary>
            <value>The MultipleExportType for file.</value>
            <remarks></remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.GridExcelExport`1.WorkBook">
            <summary>
            Gets or sets the excel workbook.    .
            </summary>
            <value>The excel workbook.</value>
            <remarks></remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.Internal.GridExcelExport`1.ExportRecordRow(System.String)">
            <summary>
            Exports the record row. .
            </summary>
            <param name="value">The value.</param>
            <remarks></remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.Internal.GridExcelExport`1.GetNumberFormat(System.String)">
            <summary>
            Number format for currency, Number and decimal standard formats.    .
            </summary>
            <param name="formatString">Column Format string.</param>
            <remarks></remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.Internal.GridExcelExport`1.InitializeExcel(Syncfusion.ExcelExport.Workbook)">
            <summary>
            Initializes the excel.  .
            </summary>
            <param name="book">The book.</param>
            <remarks></remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.Internal.GridExcelExport`1.CopyBorders(Syncfusion.Blazor.Grids.Internal.GridTableCellType,Syncfusion.ExcelExport.Cell)">
            <summary>
            Copies the borders. .
            </summary>
            <param name="style">The style.</param>
            <param name="range">The range.</param>
            <remarks></remarks>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.Internal.GridPdfExport`1">
            <summary>
            Helper for grid pdf export.
            </summary>
            <typeparam name="T">TValue of grid.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.GridPdfExport`1.FileName">
            <summary>
            Gets or sets the name of the file.  .
            </summary>
            <value>The name of the file.</value>
            <remarks></remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.GridPdfExport`1.FontWeight">
            <summary>
            Gets or sets the FontWeight.    .
            </summary>
            <value>FontWeight.</value>
            <remarks></remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.GridPdfExport`1.Theme">
            <summary>
            Gets or sets the Theme of the file. .
            </summary>
            <value>The Theme of the file.</value>
            <remarks></remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.GridPdfExport`1.FilePath">
            <summary>
            Gets or sets the File Path for saving file. .
            </summary>
            <value>The File Path for saving file in local.</value>
            <remarks></remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.GridPdfExport`1.LocalSave">
            <summary>
            Gets or sets the is file locally saved. .
            </summary>
            <value>The LocalSave option for file.</value>
            <remarks></remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.GridPdfExport`1.AutoFormat">
            <summary>
            Gets or sets the AutoFormat of the file.    .
            </summary>
            <value>The AutoFormat of the file.</value>
            <remarks></remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.GridPdfExport`1.EmptyText">
            <summary>
            Gets or sets the Empty record text of the file. .
            </summary>
            <value>The name of the file.</value>
            <remarks></remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.GridPdfExport`1.DataSource">
            <summary>
            Gets or sets the datasource of the grid.    .
            </summary>
            <value>The Datasource of the grid.</value>
            <remarks></remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.GridPdfExport`1.GroupCaptionText">
            <summary>
            Gets or sets the group caption text of the grid.    .
            </summary>
            <value>The group caption text of the grid.</value>
            <remarks></remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.GridPdfExport`1.IsHideColumnInclude">
            <summary>
            Gets or sets the IsHideColumnInclude for grid.  .
            </summary>
            <value>IsHideColumnInclude in file.</value>
            <remarks></remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.GridPdfExport`1.IsAutoFit">
            <summary>
            Gets or sets the IsAutoFit for grid.    .
            </summary>
            <value>IsAutoFit in file.</value>
            <remarks></remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.GridPdfExport`1.IsSummaryRow">
            <summary>
            Gets or sets the IsSummaryRow included in the file. .
            </summary>
            <value>IsSummaryRow in file.</value>
            <remarks></remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.GridPdfExport`1.IncludeChildGrid">
            <summary>
            Gets or sets the IncludeChildGrid to either included/exclude the child Grid.    .
            </summary>
            <value>true/false.</value>
            <remarks></remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.GridPdfExport`1.DocumentOption">
            <summary>
            Gets or sets the documentoption of the file.    .
            </summary>
            <value>The documentoption of the file.</value>
            <remarks></remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.GridPdfExport`1.ExportType">
            <summary>
            Gets or sets the name of the file.  .
            </summary>
            <value>The name of the file.</value>
            <remarks></remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.GridPdfExport`1.Document">
            <summary>
            Gets or sets the name of the file.  .
            </summary>
            <value>The name of the file.</value>
            <remarks></remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.GridPdfExport`1.PdfVersion">
            <summary>
            Gets or sets the Pdf version.   .
            </summary>
            <value>The Pdf version.</value>
            <remarks></remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.GridPdfExport`1.HeaderText">
            <summary>
            Gets or sets the Header Text for multiple export.   .
            </summary>
            <value>HeaderText for multiple export.</value>
            <remarks></remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.GridPdfExport`1.CheckRTLText">
            <summary>
            Gets or sets the RTL check for RTL languages.   .
            </summary>
            <value>CheckRTL boolean value.</value>
            <remarks></remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.Internal.GridPdfExport`1.InitializePdf(Syncfusion.PdfExport.PdfDocument,System.String)">
            <summary>
            Initializes the excel.  .
            </summary>
            <param name="pdfDocument">The Pdf document.</param>
            <param name="headerText">The headerText.</param>
            <remarks></remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.Internal.GridPdfExport`1.RenderGroupedData(System.Collections.Generic.IEnumerable{Syncfusion.Blazor.Data.Group{`0}},System.Int32)">
            <summary>
            Perform Sorting.    .
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.Internal.GridPdfExport`1.SetTableOptions(Syncfusion.Blazor.Grids.Internal.TableOptions,System.Int32,System.Int32,Syncfusion.PdfExport.PdfGridRow)">
            <summary>
            Sets the table options. .
            </summary>
            <param name="tableOptions">The table options.</param>
            <param name="Idx">The idx.</param>
            <param name="value">The value.</param>
            <param name="row"></param>
            <remarks></remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.Internal.GridPdfExport`1.ExportRecordRow(System.String,Syncfusion.PdfExport.PdfGridRow)">
            <summary>
            Exports the record row. .
            </summary>
            <param name="value">The value.</param>
            <param name="row">The record row to be exported.</param>
            <remarks></remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.Internal.GridPdfExport`1.ExportCaptionRow(System.String,Syncfusion.PdfExport.PdfGridRow)">
            <summary>
            Exports the record row. .
            </summary>
            <param name="value">The value.</param>
            <param name="row">The record row to be exported.</param>
            <remarks></remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.Internal.GridPdfExport`1.CopyBorders(Syncfusion.Blazor.Grids.Internal.GridTableCellType,Syncfusion.PdfExport.PdfGridCell)">
            <summary>
            Copies the borders. .
            </summary>
            <param name="style">The style.</param>
            <param name="cell">The cell.</param>
            <remarks></remarks>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.Internal.GroupModelGenerator`1">
            <summary>
            Generates rows based on the grouped data.
            </summary>
            <typeparam name="T">TValue of the grid.</typeparam>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.Internal.PropertyInfoHelper">
            <summary>
            Class performs property access and cache the getter method for better performance.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.Internal.RowModelGenerator`1">
            <summary>
            Generate rows based on the data.
            </summary>
            <typeparam name="T">TValue of the grid.</typeparam>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.Internal.SummaryModelGenerator`1">
            <summary>
            Generate rows based on the aggregates.
            </summary>
            <typeparam name="T">TValue of the grid.</typeparam>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.Internal.Cell`1">
            <summary>
            Defines the cell of the grid.
            </summary>
            <typeparam name="T">TValue of the grid.</typeparam>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.Cell`1.Uid">
            <summary>
            Gets the unique identifier.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.Cell`1.CellType">
            <summary>
            Gets the cell type.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.Cell`1.Visible">
            <summary>
            Gets the visible state.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.Cell`1.IsTemplate">
            <summary>
            Gets the cell template.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.Cell`1.IsDataCell">
            <summary>
            Specifies that cell is data cell.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.Cell`1.IsSelected">
            <summary>
            Specifies that cell is selected.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.Cell`1.DetailRowExpand">
            <summary>
            Specifies that cell is detail row expand.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.Cell`1.IsFrozen">
            <summary>
            Specifies that cell is frozen.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.Cell`1.Freeze">
            <summary>
            Defines which side the column need to freeze.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.Cell`1.Column">
            <summary>
            Gets the column associated with cell.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.Cell`1.RowID">
            <summary>
            Gets the row id.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.Cell`1.Index">
            <summary>
            Gets the cell index.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.Cell`1.ColIndex">
            <summary>
            Gets the cell index,.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.Cell`1.ClassName">
            <summary>
            Gets the class name.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.Cell`1.Attributes">
            <summary>
            Gets the cell attributes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.Cell`1.IsForeignKey">
            <summary>
            Specifies that cell is foreign key column.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.Cell`1.ForeignKeyData">
            <summary>
            Gets the foreign key data.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.Cell`1.ColSpan">
            <summary>
            Get the col span.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.Cell`1.RowSpan">
            <summary>
            Gets the row span.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.Cell`1.AggregateColumn">
            <summary>
            Gets the aggregate column.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.Cell`1.AggregateValue">
            <summary>
            Gets the aggregate value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.Cell`1.IsStacked">
            <summary>
            Specifies that cell is stacked.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.Cell`1.IsFocused">
            <summary>
            Specifies that cell is focused.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.Cell`1.ShowFocusLine">
            <summary>
            Specifies that show outline.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.Cell`1.TabIndex">
            <summary>
            Specifies the cell tabindex.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.Internal.CellContext`1">
            <summary>
            Cell rendering context.
            </summary>
            <typeparam name="T">TValue of the grid.</typeparam>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.Internal.CellComponentService">
            <summary>
            Provides cell register and rendering logic.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.Internal.EventAggregator">
            <summary>
            Provides internal event mechanism.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.Internal.GridMouseDown">
            <summary>
            Defines the grid mouse down details.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.Internal.Row`1">
            <summary>
            Defines the row of the grid.
            </summary>
            <typeparam name="T">TValue of the grid.</typeparam>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.Row`1.Uid">
            <summary>
            Gets or set unique identifier.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.Row`1.Data">
            <summary>
            Gets the data of the row.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.Row`1.EditedData">
            <summary>
            Gets the EditedData of the row.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.Row`1.IsDetailRow">
            <summary>
            Specifies that row is detail row.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.Row`1.IsSelected">
            <summary>
            Specifies that row is selected.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.Row`1.IsAltRow">
            <summary>
            Specifies that row is alternate.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.Row`1.IsDataRow">
            <summary>
            Specifies that row is a data row.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.Row`1.IsTemplate">
            <summary>
            Specifies that row is template row.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.Row`1.IsLastRow">
            <summary>
            Specifies that row is last row.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.Row`1.Visible">
            <summary>
            Specifies that row is visible.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.Row`1.IsExpand">
            <summary>
            Specifies that row is expanded.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.Row`1.Cells">
            <summary>
            Gets cells of the row.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.Row`1.Index">
            <summary>
            Gets the row index.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.Row`1.Indent">
            <summary>
            Gets the row indent.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.Row`1.ForeignKeyData">
            <summary>
            Gets the foreign key data.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.Row`1.ParentId">
            <summary>
            Specifies the parent row id.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.Row`1.ChildId">
            <summary>
            Specifies the child row id.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.Row`1.rowsIndex">
            <summary>
            Specifies the row index.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.Row`1.GroupSummary">
            <summary>
            Specifies the group summary.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.Row`1.IsCaptionRow">
            <summary>
            Specifies that row is caption row.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.Row`1.CssClass">
            <summary>
            Gets the css class.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.Row`1.RowType">
            <summary>
            Gets the row type.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.Row`1.ParentUid">
            <summary>
            Gets the parent row uid.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.Row`1.State">
            <summary>
            Gets the row selected state.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.Row`1.IsEdit">
            <summary>
            Gets the row is in edit state.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.FilterMenuRenderer`1.autoCompleteFilterValue">
            <summary>
            Defined to get the values typed in the Autocomplete input and set it to the variable bounded
            to the Value property of Autocomplete during rendering.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.Internal.GridRowBase`1.Dispose">
            <summary>
            Dispose unmanaged resources in the RowParameters.Row component.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.Internal.GridRowBase`1.Dispose(System.Boolean)">
            <summary>
            Dispose unmanaged resources in the RowParameters.Row component.
            </summary>
            <param name="disposing">Boolean value to dispose the object.</param>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.NormalEdit`1.PreventShowAddForm">
            <summary>
            Used to disable the add form while editing any other row in the grid when the ShowAddNewRow property is set to true.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.NormalEdit`1.IsDisableRow">
            <summary>
            Prevents the value from showing on the add form while editing any other row in the grid when the ShowAddNewRow property is set to true.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.Internal.NormalEdit`1.IsShowNewAddForm">
            <summary>
            Used to identify the add form when generating more than one edit form in the grid.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.SfGrid`1">
            <summary>
            Blazor Grid component displays tabular data and it has in-built support for various data binding, editing,
            sorting and filtering.
            </summary>
            <typeparam name="TValue">A type which provides schema for the grid component.
            </typeparam>
            <remarks><c>TValue</c> is inferred from value of <c>DataSource</c> property if it is bounded with IEnumerable.
            If data is consumed using <c>SfDataManager</c> then TValue must be assigned explicitly.</remarks>
            <seealso cref="T:Syncfusion.Blazor.Data.SfDataManager"/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.AddRecord(`0,System.Nullable{System.Int32})">
            <summary>
            Adds a new record to the Grid. If no data is passed then add form will be showed.       
            </summary>
            <param name="data">New record to be added.</param>
            <param name="index">Specifies index to add the new record.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <remarks>
            GridEditSettings.AllowEditing should be true.
            </remarks>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.AddRecordAsync(`0,System.Nullable{System.Int32})">
            <summary>
            Adds a new record to the Grid at a specific row index.
            </summary>
            <param name="data">New record to be added. The data should be of the same type as the generic type of the grid.</param>
            <param name="index">The index in which the new record is to be added. If no index is provided, the record will be added to the end of the grid.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <remarks>
            This method adds the row only if <see cref="P:Syncfusion.Blazor.Grids.GridEditSettings.AllowAdding"/> is set to <c>true</c>.
            </remarks>
            <example>
            <code><![CDATA[
            <button id="AddRecord" @onclick="AddItem">AddRecord</button>
            <SfGrid @ref="grid" DataSource="@Orders">
             ........
            </SfGrid>
            @code{
               SfGrid<Order> grid;
               private async Task AddItem()
               {
                   var data = new Order() { OrderID = 1000, CustomerID = "ALFKI", OrderDate = new DateTime(1995, 03, 25), Freight = 25.7 * 2) };
                   await grid.AddRecordAsync(data, 1); // pass data and index here.
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.ApplyBatchChangesAsync(Syncfusion.Blazor.Grids.BatchChanges{`0})">
             <summary>
             Updates the Grid component UI with a batch of changes, including new records, edited records, and deleted records.
             </summary>
             <param name="batchChanges">It contains the collection of records to add, edit, and delete.</param>
             <remarks>This method is used to make bulk changes to the grid UI when in <c>EditMode.Batch</c>.
             The edited and newly added records will be visually highlighted in the grid UI, and the highlighting will be cleared once the changes are saved or canceled.
            </remarks>
             <value>
             A task representing the asynchronous operation. The task result can indicate the success or failure of the batch update operation.
             </value>
             <example>
             <code>
             <![CDATA[
             <button id="GetData" @onclick="SetData">Apply Batch Changes</button>
             <SfGrid @ref="grid" DataSource="@Orders">
              <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" Mode="EditMode.Batch"></GridEditSettings>
              ........
             </SfGrid>
             @code{
                SfGrid<Order> grid;
                private async Task SetData()
                {
                  var batchChanges = new BatchChanges<Order>()
                    {
                        AddedRecords = new List<Order>() { new Order() { OrderID = 1, CustomerID = "ANTAR" } }, DeletedRecords = new List<Order>() { new Order() { OrderID = 1002 } }, ChangedRecords = new List<Order>() { new Order() { OrderID = 1001, CustomerID = "VINET" } } 
                    }
                   await grid.ApplyBatchChangesAsync(batchChanges);
                }
             }
             ]]>
             </code>
             </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.AutoFitColumns">
            <summary>
            Changes the column width to automatically fit its content to ensure that the width shows the content without wrapping/hiding.
            This method ignores the hidden columns.
            Use the AutoFitColumns method in the DataBound event to resize at initial rendering or use GridColumn.IsAutoFit to set inital auto fit.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.AutoFitColumnsAsync">
            <summary>
            Changes the column width to automatically fit its content and ensure that the content is not wrapped or hidden. This method will ignore any hidden columns.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <remarks>
            You can use this method in the <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.DataBound"/> event or set the <see cref="P:Syncfusion.Blazor.Grids.GridColumn.AutoFit"/> property to autofit the columns at initial rendering.
            </remarks>   
            <example>
            <code><![CDATA[
            <button id="AutoFit" @onclick="AutoFit">AutoFit Column</button>
            <SfGrid @ref="Grid" DataSource="@Orders">
             ........
            </SfGrid>
            @code{
               SfGrid<Order> Grid;
               private async Task AutoFit()
               {
                  await grid.AutoFitColumnsAsync();
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.AddRecord">
            <summary>
            Adds a new record to the Grid. If no data is passed then add form will be showed.
            GridEditSettings.AllowEditing should be true.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.AddRecordAsync">
            <summary>
            A new row with input fields is rendered in grid content, for user to fill the fields and then to save the new record.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <remarks>
            This method opens a form with input fields to add a new record to the grid.
            The new record will only be added if <see cref="P:Syncfusion.Blazor.Grids.GridEditSettings.AllowAdding"/> is set to <c>true</c>.
            </remarks>
            <example>
            <code><![CDATA[
            <button id="AddRecord" @onclick="AddRecord">AddItem</button>
            <SfGrid @ref="grid" DataSource="@Orders">
             ........
            </SfGrid>
            @code{
               SfGrid<Order> grid;
               private async Task AddRecord()
               {
                 await grid.AddRecordAsync();
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.AutoFitColumns(System.String[])">
            <summary>
            Changes the column width to automatically fit its content to ensure that the width shows the content without wrapping/hiding.
            This method ignores the hidden columns.
            Use the AutoFitColumns method in the DataBound event to resize at initial rendering or use GridColumn.IsAutoFit to set inital auto fit.
            </summary>
            <param name="fieldNames">A collection of field names to be autofitted.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.AutoFitColumnsAsync(System.String[])">
            <summary>
            Automatically adjusts the width of specified columns to fit their content, without wrapping or hiding.       
            </summary>
            <param name="fieldNames">An array of columns to be auto fitted, identified by their <see cref="P:Syncfusion.Blazor.Grids.GridColumn.Field"/> property.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>
            Hidden columns are ignored for this autofit process.
            You can use this method in the <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.DataBound"/> event or set the <see cref="P:Syncfusion.Blazor.Grids.GridColumn.AutoFit"/>  property to autofit the columns at initial rendering.
            If <see cref="P:Syncfusion.Blazor.Grids.SfGrid`1.EnablePersistence"/> is <c>true</c>, the current autofit state of the columns will be persisted across page refreshes.
            </remarks>
            <example>
            <code><![CDATA[
            <button id="AutoFit" @onclick="AutoFit">AutoFit Column</button>
            <SfGrid @ref="Grid" DataSource="@Orders">
             ........
            </SfGrid>
            @code{
               SfGrid<Order> Grid;
               private async Task AutoFit()
               {
                  string[] Columns = { "OrderID", "CustomerID", "Freight" };
                  await grid.AutoFitColumnsAsync(Columns);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.AutoFitColumns(System.String)">
            <summary>
            Changes the column width to automatically fit its content to ensure that
            the width shows the content without wrapping
            This method ignores the hidden columns.
            Use the AutoFitColumns method in the DataBound event to resize at initial rendering or use GridColumn.IsAutoFit to set inital auto fit.
            </summary>
            <param name="fieldNames">A single field name to be autofitted.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.AutoFitColumnAsync(System.String)">
            <summary>
            Automatically adjusts the width of a specified column to fit its content, without wrapping.
            Hidden columns are ignored.
            </summary>
            <param name="fieldName">The name of the column to be auto fitted, identified by its <see cref="P:Syncfusion.Blazor.Grids.GridColumn.Field"/> property.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <remarks>
            You can use this method in the <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.DataBound"/> event or set the <see cref="P:Syncfusion.Blazor.Grids.GridColumn.AutoFit"/>  property to autofit the columns at initial rendering.
            </remarks>
            <example>
            <code><![CDATA[
            <button id="AutoFitColumn" @onclick="AutoFitColumn">AutoFitColumn</button>
            <SfGrid @ref="grid" DataSource="@Orders">
             ........
            </SfGrid>
            @code{
               SfGrid<Order> grid;
               private async Task AutoFitColumn()
               {
                  string columnField = "OrderID";
                  await grid.AutoFitColumnAsync(columnField);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.ClearCellSelection">
            <summary>
            Deselects the currently selected cells.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.ClearCellSelectionAsync">
            <summary>
            Clears the selection of all currently selected cells in the grid.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <remarks>
            This method does not clear the selection if <see cref="P:Syncfusion.Blazor.Grids.GridSelectionSettings.Mode"/> is set as <see cref= "F:Syncfusion.Blazor.Grids.SelectionMode.Row"/>.
            </remarks>
            <example>
            <code><![CDATA[
            <button id="ClearCell" @onclick="ClearCell">Clear</button>
            <SfGrid @ref="grid" DataSource="@Orders">
             ........
            </SfGrid>
            @code{
               SfGrid<Order> grid;
               private async Task ClearCell()
               {
                  await grid.ClearCellSelectionAsync();
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.ClearFiltering">
            <summary>
            Clears all the columns filtering rows of the Grid.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.ClearFilteringAsync">
            <summary>
            Clears all the columns filtering and refreshes the Grid asynchronously.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous clear operation.</returns>
            <remarks>
            This method clears the filtering and refreshes the Grid to show the rows.
            This method will clears filtering for all the columns.
            </remarks>
            <example>
            <code><![CDATA[
            <button id="ClearRecord" @onclick="ClearFilter">Clear</button>
            <SfGrid @ref="grid" DataSource="@Orders" AllowFiltering="true">
             ........
            </SfGrid>
            @code{
               SfGrid<Order> grid;
               private async Task ClearFilter()
               {
                  await grid.ClearFilteringAsync();
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.ClearFiltering(System.Collections.Generic.List{System.String})">
            <summary>
            Clears all the filtered rows of the Grid.
            </summary>
            <param name="fields">Specify the field name to be cleared.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.ClearFilteringAsync(System.Collections.Generic.List{System.String})">
            <summary>
            Clears the filtering for the specificed columns and refreshes the Grid asynchronously.
            </summary>
            <param name="fieldNames">A list of columns to be cleared, identified by their <see cref="P:Syncfusion.Blazor.Grids.GridColumn.Field"/> property.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <remarks>
            This method clears the filtering for the specified columns and refreshes the Grid.
            </remarks>
            <example>
            <code><![CDATA[
            <button id="ClearRecord" @onclick="ClearFilter">Clear</button>
            <SfGrid @ref="grid" DataSource="@Orders">
             ........
            </SfGrid>
            @code{
               SfGrid<Order> grid;
               List<string> listItems = new List<string>();
               private async Task ClearFilter()
               {
                  listItems.Add("OrderID");
                  listItems.Add("CustomerID");
                  await grid.ClearFilteringAsync(listItems);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.ClearFiltering(System.String)">
            <summary>
            Clears all the filtered rows of the Grid.
            </summary>
            <param name="field">Specify the field name to be cleared.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.ClearFilteringAsync(System.String)">
            <summary>
            Clears specific column filtering of the Grid based on the specified field name.
            </summary>
            <param name="fieldName">The name of the column by which the filtering should be cleared, identified by its <see cref="P:Syncfusion.Blazor.Grids.GridColumn.Field"/> property.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <remarks>
            This method clears the filtering for the specified column and refreshes the Grid to show all rows.
            </remarks>
            <example>
            <code><![CDATA[
            <button id="ClearRecord" @onclick="ClearFilter">Clear</button>
            <SfGrid @ref="grid" DataSource="@Orders">
             ........
            </SfGrid>
            @code{
               SfGrid<Order> grid;
               private async Task ClearFilter()
               {
                  string columnField = "OrderID";
                  await grid.ClearFilteringAsync(columnField);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.ClearGrouping">
            <summary>
            Clears all the grouped columns of the Grid.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.ClearGroupingAsync">
            <summary>
            Clears all the grouped columns of the Grid, returning it to its original un-grouped state.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <example>
            <code><![CDATA[
            <button id="ClearGrouping" @onclick="ClearGrouping">ClearGrouping</button>
            <SfGrid @ref="grid" DataSource="@Orders">
             ........
            </SfGrid>
            @code{
               SfGrid<Order> grid;
               private async Task ClearGrouping()
               {
                  await grid.ClearGroupingAsync();
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.ClearRowSelection">
            <summary>
            Deselects the currently selected rows.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.ClearRowSelectionAsync">
            <summary>
            Clears all the currently selected rows in the grid.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <remarks>
            Its removes selection from all the pages too if checkbox selection is enabled.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button id="ClearSelection" @onclick="ClearSelection">ClearSelection</button>
            <SfGrid @ref="grid" DataSource="@Orders">
             ........
            </SfGrid>
            @code{
               SfGrid<Order> grid;
               private async Task ClearSelection()
               {
                  await grid.ClearRowSelectionAsync();
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.ClearSelection">
            <summary>
            Deselects the current selected rows and cells.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.ClearSelectionAsync">
            <summary>
            Clears all the selected rows and cells in the Grid.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <remarks>
            This method first checks the <see cref="P:Syncfusion.Blazor.Grids.GridSelectionSettings.Mode"/>. If the Grid is in <see cref="F:Syncfusion.Blazor.Grids.SelectionMode.Row"/>, it calls the <see cref="M:Syncfusion.Blazor.Grids.SfGrid`1.ClearRowSelection"/> otherwise, it calls the <see cref="M:Syncfusion.Blazor.Grids.SfGrid`1.ClearCellSelection"/> to clear the selection.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button id="ClearSelection" @onclick="ClearSelection">ClearSelection</button>
            <SfGrid @ref="grid" DataSource="@Orders">
             ........
            </SfGrid>
            @code{
               SfGrid<Order> grid;
               private async Task ClearSelection()
               {
                  await grid.ClearSelectionAsync();
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.ClearSorting">
            <summary>
            Clears all the sorted columns of the Grid.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.ClearSortingAsync">
            <summary>
            Clears all the sorted columns of the Grid.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <remarks>
            This method is used to clear all the sorted columns in the Grid. 
            The sorting of grouped columns is not cleared.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button id="ClearSorting" @onclick="ClearSorting">Clear Sorting</button>
            <SfGrid @ref="grid" DataSource="@Orders">
             ........
            </SfGrid>
            @code{
               SfGrid<Order> grid;
               private async Task ClearSorting()
               {
                 await grid.ClearSortingAsync();
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.ClearSorting(System.Collections.Generic.List{System.String})">
            <summary>
            Clears the sorted columns of the Grid based on the fields.
            </summary>
            <param name="fields">Specifies the sorted fields to be cleared.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.ClearSortingAsync(System.Collections.Generic.List{System.String})">
            <summary>
            Clears the sorted columns of the Grid based on the specified field names.
            </summary>
            <param name="fieldNames">The list of sorted columns to be cleared, identified by their <see cref="P:Syncfusion.Blazor.Grids.GridColumn.Field"/> property.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <remarks>
            This method removes the specified columns from the sorted columns of the grid.
            If a column is not in the list of sorted columns, it is ignored.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button id="ClearSorting" @onclick="ClearSorting">Clear Sorting</button>
            <SfGrid @ref="grid" AllowSorting="true" DataSource="@Orders">
             ........
            </SfGrid>
            @code{
               SfGrid<Order> grid;
               List<string> listItems = new List<string>();
               private async Task ClearSorting()
               {
                  listItems.Add("OrderID");
                  listItems.Add("CustomerID");
                  await grid.ClearSortingAsync(listItems);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.CloseEdit">
            <summary>
            Cancels edited state.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/></returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.CloseEditAsync">
            <summary>
            Cancels the edited state of the grid.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <remarks>
            This method cancels the current edit state of the grid and closes the <see cref="T:Syncfusion.Blazor.Grids.EditMode"/>. 
            If <c>EditMode.Batch</c> is used and the user has made <see cref="T:Syncfusion.Blazor.Grids.BatchChanges`1"/> to the data, it will display a confirmation dialog before saving the changes.
            Any unsaved changes will be discarded.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button id="ClearEdit" @onclick="ClearEdit">Clear Edit State</button>
            <SfGrid @ref="grid" DataSource="@Orders">
            <GridEditSettings AllowEditing="true"></GridEditSettings>
             ........
            </SfGrid>
            @code{
               SfGrid<Order> grid;
               private async Task ClearEdit()
               {
                  await grid.CloseEditAsync();
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.Copy(System.Nullable{System.Boolean})">
            <summary>
            Copy the selected rows or cells data into clipboard.
            </summary>
            <param name="withHeader">Copies along with column header names.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.CopyAsync(System.Nullable{System.Boolean})">
            <summary>
            Copies the selected rows or cells data into the clipboard.
            </summary>
            <param name="withHeader">A nullable Boolean value that determines whether to copy the data along with the column header names. The default value is <c>null</c>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <remarks>
            This method is used to copy the selected data in the grid to the clipboard. The data can either include the column header names or not, depending on the value of the <c>withHeader</c> parameter.
            </remarks>
            <example>
            <code><![CDATA[
            <button id="copy" @onclick="Copy">Copy</button>
            <button id="copyWithHeader" @onclick="CopyWithHeader">Copy With Header</button>
            <SfGrid @ref="grid" DataSource="@Orders">
             ........
            </SfGrid>
            @code{
               SfGrid<Order> grid;
               private async Task Copy()
               {
                    await grid.Copy();  // Copies the selected rows or cells
               }
               private async Task CopyWithHeader()
               {
                    await grid.Copy(true); // Copies the selected rows or cells with header
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.CsvExport(Syncfusion.Blazor.Grids.ExcelExportProperties,System.Nullable{System.Boolean},System.Object,System.Nullable{System.Boolean})">
            <summary>
            Export Grid data to CSV file.
            </summary>
            <param name="excelExportProperties">Provides the excel export properties. Use this to provide custom column,
            data source, theme etc.</param>
            <param name="isMultipleExport">Specifies multi-export is enabled.</param>
            <param name="workbook">Workbook instance.</param>
            <param name="isBlob">Export as blob instead of writing response.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.ExportToCsvAsync(Syncfusion.Blazor.Grids.ExcelExportProperties,System.Nullable{System.Boolean},System.Object,System.Nullable{System.Boolean})">
            <summary>
            Exports the grid data to a CSV file.
            </summary>
            <param name="excelExportProperties">An object of type <see cref="T:Syncfusion.Blazor.Grids.ExcelExportProperties"/>, provides properties to customize the column, data source, theme, etc. for the exported CSV file. If not provided, default values will be used.</param>
            <param name="isMultipleExport">A nullable boolean value indicating whether multi-export is enabled or not. This parameter is optional.</param>
            <param name="workbook">An object type that represents the workbook instance. This parameter is optional.</param>
            <param name="isBlob">A nullable boolean value indicating if the CSV should be exported as a blob instead of writing it to the response. This parameter is optional.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <remarks>
            <c>AllowExcelExport</c> property must be <c>true</c> to use this feature.
            <c>excelExportProperties</c> object can be used to customize the appearance of the exported CSV file.
            If not provided, this method will use default values.
            </remarks>
            <example>
            <code><![CDATA[
            <button id="ExportToCsv" @onclick="ExportHandler">ExportToCsv</button>
            <SfGrid @ref="grid" AllowExcelExport="true" DataSource="@Orders">
             ........
            </SfGrid>
            @code{
               SfGrid<Order> grid;
               private async Task ExportHandler()
               {
                   Syncfusion.Blazor.Grids.ExcelExportProperties ExportProperties = new Syncfusion.Blazor.Grids.ExcelExportProperties();
                   ExportProperties.ExportType = Syncfusion.Blazor.Grids.ExportType.CurrentPage; // here we have changed the ExportType from AllPages to CurrentPage, as like same we can change our desire properties.
                   await grid.ExportToCsvAsync(ExportProperties);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.ExportToCsvAsync(System.Boolean,Syncfusion.Blazor.Grids.ExcelExportProperties)">
             <summary>
             Gets the Grid CSV file as a <see cref="T:System.IO.MemoryStream"/>.
             </summary>
             <param name="asMemoryStream">Specifies whether to return the CSV as a memory stream.</param>
             <param name="excelExportProperties">Optional. Provides the Excel export properties such as custom columns, data sources, themes, etc.</param>
             <returns>
             An asynchronous task that provides a <see cref="T:System.IO.MemoryStream"/> containing the exported CSV file when <paramref name="asMemoryStream"/> parameter is true;
             otherwise, it returns null and exports the CSV file in the browser.
             </returns>
             <remarks>
             This method will only export the csv file if the <see cref="P:Syncfusion.Blazor.Grids.SfGrid`1.AllowExcelExport"/> is set to <c>true</c>.
             It exports the Grid sheet to a CSV file (.csv) in the browser by defining <paramref name="asMemoryStream"/> parameter value to false.
            </remarks>
             Also, see <seealso cref="T:Syncfusion.Blazor.Grids.ExcelExportProperties"/> for details on configuring export properties.
             <example>
             <code><![CDATA[
             <button id="ExportToExcel<"@onclick="ExportHandler">ExportToCsv<</button>
             <SfGrid @ref="grid" AllowExcelExport="true" DataSource="@Orders">
              ........
             </SfGrid>
             @code{
                SfGrid<Order> grid;
                private async Task ExportHandler()
                {
                    Syncfusion.Blazor.Grids.ExcelExportProperties ExportProperties = new Syncfusion.Blazor.Grids.ExcelExportProperties();
                    ExportProperties.ExportType = Syncfusion.Blazor.Grids.ExportType.CurrentPage; // here we have changed the ExportType from AllPages to CurrentPage, as like same we can change our desire properties.
                    MemoryStream streamDocument = await grid.ExportToCsvAsync(true, ExportProperties);
                }
             }
             ]]>
             </code>
             </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.DeleteRecord">
            <summary>
            Delete a record with Given options. If fieldname and data is not given then grid will delete the selected record.
            EditSettings.AllowDeleting should be true.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.DeleteRecordAsync">
            <summary>
            Deletes the currently selected record from the grid.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <remarks>
            This method will only delete a record if <see cref="P:Syncfusion.Blazor.Grids.GridEditSettings.AllowDeleting"/> is set to <c>true</c>.
            If no records are selected, it will display an alert message with key <c>DeleteAlert</c>.
            If <see cref="P:Syncfusion.Blazor.Grids.GridEditSettings.ShowDeleteConfirmDialog"/> is set to <c>true</c>, it will display a confirm dialog before deleting the record with key <c>DeleteConfirmAlert</c>.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button id="DeleteRecords" @onclick="DeleteRecords">DeleteRecords</button>
            <SfGrid @ref="grid" DataSource="@Orders">
            <GridEditSettings AllowDeleting="true"></GridEditSettings>
             ........
            </SfGrid>
            @code{
               SfGrid<Order> grid;
               private async Task DeleteRecords()
               {
                  await grid.DeleteRecordAsync();
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.DeleteRecord(System.String,`0)">
            <summary>
            Delete a record with Given options. If fieldname and data is not given then grid will delete the selected record.
            EditSettings.AllowDeleting should be true.
            </summary>
            <param name="fieldname">Primary key field name.</param>
            <param name="data">Data to be deleted.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.DeleteRecordAsync(System.String,`0)">
            <summary>
            Deletes a record in the grid by providing a column name and data.
            </summary>
            <param name="fieldName">The primary key column name of the record to be deleted, identified by its <see cref="P:Syncfusion.Blazor.Grids.GridColumn.Field"/> property.</param>
            <param name="data">The data of the record to be deleted.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <remarks>
            This method will only delete a record if <see cref="P:Syncfusion.Blazor.Grids.GridEditSettings.AllowDeleting"/> is set to <c>true</c>.
            If <c>fieldName</c> and <c>data</c> is not provided and no records are selected, then it will display an alert message with key <c>DeleteAlert</c> while calling this method.
            If <see cref="P:Syncfusion.Blazor.Grids.GridEditSettings.ShowDeleteConfirmDialog"/> is set to <c>true</c>, it will display a confirm dialog before deleting the record with key <c>DeleteConfirmAlert</c>.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button id="DeleteRecords" @onclick="DeleteRecords">DeleteRecords</button>
            <SfGrid @ref="grid" DataSource="@Orders">
            <GridEditSettings AllowDeleting="true"></GridEditSettings>
             ........
            </SfGrid>
            @code{
               SfGrid<Order> grid;
                var data = new Order() { OrderID = 1006, CustomerID = "ALFKI", OrderDate = new DateTime(1995, 05, 15), Freight = 25.7 * 2 };
               private async Task DeleteRecords()
               {
                  await grid.DeleteRecordAsync("OrderID", data);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.DeleteRow(System.Object)">
            <summary>
            Delete any visible row by TR element.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.EditCell(System.Int32,System.String)">
            <summary>
            Changes a particular cell into edited state based on the row index and field name provided in the Batch mode.
            </summary>
            <param name="index">Row index to be edited.</param>
            <param name="field">Column field to be edited.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.EditCellAsync(System.Int32,System.String)">
            <summary>
            Change a particular cell into an edited state by providing the row index and field name in <see cref="F:Syncfusion.Blazor.Grids.EditMode.Batch"/> mode.
            </summary>
            <param name="index">The index of the row to be edited.</param>
            <param name="fieldName">The column name of the cell to be edited, identified by its <see cref="P:Syncfusion.Blazor.Grids.GridColumn.Field"/> property.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <remarks>
            This method will only edit the cell if the <see cref="P:Syncfusion.Blazor.Grids.GridEditSettings.Mode"/> is set to <c>EditMode.Batch</c> and <see cref="P:Syncfusion.Blazor.Grids.GridEditSettings.AllowEditing"/> is set to <c>true</c>.
            It will search for the row and cell based on the provided <c>index</c> and <c>fieldName</c>, and call <c>EditModule.EditCell</c> to edit the cell.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button id="editCell" @onclick="EditCell">EditCell</button>
            <SfGrid @ref="grid" DataSource="@Orders">
            <GridEditSettings AllowEditing="true" Mode="EditMode.Batch"></GridEditSettings>
             ........
            </SfGrid>
            @code{
               SfGrid<Order> grid;
               private async Task EditCell()
               {
                 await grid.EditCellAsync(3, "CustomerID");
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.EnableToolbarItems(System.Collections.Generic.List{System.String},System.Boolean)">
             <summary>
             Enables or disables ToolBar items.
             </summary>
             <param name="items">ID of toolbar items to be enabled or disabled.</param>
             <param name="isEnable">Specifies whether enable or disable.</param>
             <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.EnableToolbarItemsAsync(System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            Enables or disables toolbar items by identified their IDs.
            </summary>
            <param name="items">A list of strings containing the IDs of toolbar items to enable or disable.</param>
            <param name="isEnable">Specifies whether to enable (true) or disable (false) the toolbar items.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <remarks>
            This method enables or disables the specified toolbar items by adding or updating their key-value pairs.
            </remarks>
            <example>
            <code><![CDATA[
            <button id="EnableToolbarItems" @onclick="ToolbarHandler">EnableToolbarItems</button>
            <SfGrid @ref="grid" DataSource="@Orders" Toolbar="@(new List<string>() { "Add", "Edit", "Delete", "Update", "Cancel" })">
            <GridEditSettings AllowEditing="true" AllowAdding="true" AllowDeleting="true"/>
             ........
            </SfGrid>
            @code{
               SfGrid<Order> grid;
               private async Task ToolbarHandler()
               {
            	await grid.EnableToolbarItemsAsync(new List<string>() { "Add" , "Edit"}, false); // here we disabled the Add and Edit toolbar items.
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.EndEdit">
            <summary>
            If Grid is in editable state, you can save a record by invoking endEdit.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.EndEditAsync">
            <summary>
            Saves the modified values when the row or cell is in editing state.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <remarks>
            To close the edit state without saving changes, use the <see cref="M:Syncfusion.Blazor.Grids.SfGrid`1.CloseEditAsync"/> method.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button id="EndEdit" @onclick="EditHandler">EndEdit</button>
            <SfGrid @ref="grid" DataSource="@Orders">
            <GridEditSettings AllowEditing="true"></GridEditSettings>
             ........
            </SfGrid>
            @code{
               SfGrid<Order> grid;
               private async Task EditHandler()
               {
                 await grid.EndEditAsync();
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.ExcelExport(Syncfusion.Blazor.Grids.ExcelExportProperties,System.Nullable{System.Boolean},System.Object,System.Nullable{System.Boolean})">
            <summary>
            Export Grid data to Excel file(.xlsx).
            </summary>
            <param name="excelExportProperties">Provides the excel export properties. Use this to provide custom column,
            data source, theme etc.</param>
            <param name="isMultipleExport">Specifies multi-export is enabled.</param>
            <param name="workbook">Workbook instance.</param>
            <param name="isBlob">Export as blob instead of writing response.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.ExportToExcelAsync(Syncfusion.Blazor.Grids.ExcelExportProperties,System.Nullable{System.Boolean},System.Object,System.Nullable{System.Boolean})">
            <summary>
            Exports Grid data to an Excel file(.xlsx).
            </summary>
            <param name="excelExportProperties">Provides the excel export properties such as custom columns, data sources, themes, etc.</param>
            <param name="isMultipleExport">Specifies whether multi-export is enabled or not. This parameter is optional.</param>
            <param name="workbook">The workbook instance to use for the export. This parameter is optional</param>
            <param name="isBlob">Specifies whether to export as a blob instead of writing the response. This parameter is optional.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <remarks>
            This method exports the data from the current Grid instance to an Excel file. The exported file will be in the .xlsx format.
            </remarks>
            <example>
            <code><![CDATA[
            <button id="ExportToExcel<"@onclick="ExportHandler">ExportToExcel<</button>
            <SfGrid @ref="grid" AllowExcelExport="true" DataSource="@Orders">
             ........
            </SfGrid>
            @code{
               SfGrid<Order> grid;
               private async Task ExportHandler()
               {
                   Syncfusion.Blazor.Grids.ExcelExportProperties ExportProperties = new Syncfusion.Blazor.Grids.ExcelExportProperties();
                   ExportProperties.ExportType = Syncfusion.Blazor.Grids.ExportType.CurrentPage; // here we have changed the ExportType from AllPages to CurrentPage, as like same we can change our desire properties.
                   await grid.ExportToExcel(ExportProperties);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.ExportToExcelAsync(System.Boolean,Syncfusion.Blazor.Grids.ExcelExportProperties)">
             <summary>
             Gets the Grid Excel sheet as a <see cref="T:System.IO.MemoryStream"/>.
             </summary>
             <param name="asMemoryStream">Specifies whether to return the Excel worksheet as a memory stream.</param>
             <param name="excelExportProperties">Optional. Provides the excel export properties such as custom columns, data sources, themes, etc.</param>
             <returns>
             An asynchronous task that provides a <see cref="T:System.IO.MemoryStream"/> containing the exported Excel data when <c>asMemoryStream</c> parameter is true;
             otherwise, it returns null and exports the Excel sheet in browser.
             </returns>
            <remarks>
             It exports the Grid sheet to an Excel file (.xlsx) in the browser by defining <c>asMemoryStream</c> parameter value to false.
            </remarks>
             Also, see <seealso cref="T:Syncfusion.Blazor.Grids.ExcelExportProperties"/> for details on configuring export properties.
             <example>
             <code><![CDATA[
             <button id="ExportToExcel<"@onclick="ExportHandler">ExportToExcel<</button>
             <SfGrid @ref="grid" AllowExcelExport="true" DataSource="@Orders">
              ........
             </SfGrid>
             @code{
                SfGrid<Order> grid;
                private async Task ExportHandler()
                {
                    Syncfusion.Blazor.Grids.ExcelExportProperties ExportProperties = new Syncfusion.Blazor.Grids.ExcelExportProperties();
                    ExportProperties.ExportType = Syncfusion.Blazor.Grids.ExportType.CurrentPage; // here we have changed the ExportType from AllPages to CurrentPage, as like same we can change our desire properties.
                    MemoryStream streamDocument = await grid.ExportToExcel(true, ExportProperties);
                }
             }
             ]]>
             </code>
             </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.FilterByColumn(System.String,System.String,System.Object,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Object,System.Object)">
            <summary>
            Filters grid row by column name with the given options.
            </summary>
            <param name="fieldName">Specifies the field name to be filtered.</param>
            <param name="filterOperator">Sepcifies the filter operator.</param>
            <param name="filterValue">Specifies the filter value.</param>
            <param name="predicate">Specifies predicate/condition such as AND/OR while filtering multiple value.</param>
            <param name="matchCase">Specifies the match case.</param>
            <param name="ignoreAccent">Specifies the ignore accent.</param>
            <param name="actualFilterValue">Specifies the actual value.</param>
            <param name="actualOperator">Specifies the actual type.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.FilterByColumnAsync(System.String,System.String,System.Object,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Object,System.Object,System.String)">
            <summary>
            Filters the grid row by a specified column with the given options.
            </summary>
            <param name="fieldName">The name of the column to be filtered, identified by its <see cref="P:Syncfusion.Blazor.Grids.GridColumn.Field"/> property.</param>
            <param name="filterOperator">The operator to apply to the filter, refer to the operator list in <see cref="T:Syncfusion.Blazor.Operator"/>.</param>
            <param name="filterValue">The value to use for filtering.</param>
            <param name="predicate">The predicate is used to generate the filter query to meet the multiple filtering requests. This parameter is optional.</param>
            <param name="matchCase">A Boolean value that indicates whether the filter should be case-sensitive. This parameter is optional.</param>
            <param name="ignoreAccent">A Boolean value that indicates whether the filter should ignore accents when comparing values. This parameter is optional.</param>
            <param name="actualFilterValue">Specifies the actual filter value as defined in the corresponding data type. This parameter is optional.</param>
            <param name="actualOperator">Specifies the actual operator to apply to the filter, as defined in the corresponding data type. This parameter is optional.</param>
            <param name="columnUid">Selects the appropriate column when multiple foreign key columns have the same <c>fieldName</c>. This parameter is optional.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous filtering operation.</returns>
            <example>
            <code><![CDATA[
            <button id="FilterByColumn" @onclick="FilterHandler">FilterByColumn</button>
            <SfGrid @ref="grid" AllowFiltering="true" DataSource="@Orders">
             ........
            </SfGrid>
            @code{
                 SfGrid<Order> grid;
                 private async Task FilterHandler()
                 {
            	await grid.FilterByColumnAsync("CustomerID", "equal", "ANANTR");
                 }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.GetBatchChanges">
            <summary>
            Gets the added, edited,and deleted data before bulk save to the DataSource in batch mode.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task`1"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.GetBatchChangesAsync">
             <summary>
             Gets the added, edited, and deleted data before bulk save to the data Source in <see cref="F:Syncfusion.Blazor.Grids.EditMode.Batch"/> mode.
             </summary>
             <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> representing the asynchronous operation.</returns>
             <remarks>This method should be used when making bulk changes to the data source in <c>EditMode.Batch</c>
             to allow for review and modification of the changes before they are committed to the data source.
             The edited and new added records are highlighted in grid UI. It will cleared once we saved the updated changes in the grid.
            </remarks>
             <example>
             <code>
             <![CDATA[
             <button id="GetData" @onclick="GetData">Get Data</button>
             <SfGrid @ref="grid" DataSource="@Orders">
              <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" Mode="EditMode.Batch"></GridEditSettings>
              ........
             </SfGrid>
             @code{
                SfGrid<Order> grid;
                private async Task GetData()
                {
                  var Data = await grid.GetBatchChangesAsync();
                }
             }
             ]]>
             </code>
             </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.GetColumnByField(System.String)">
            <summary>
            Gets a Column details based on the specific column field name.
            </summary>
            <param name="field">Specifies the field name.</param>
            <returns><see cref="T:System.Threading.Tasks.Task`1"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.GetColumnByFieldAsync(System.String)">
            <summary>
            Gets a Column details based on the specific column field name.
            </summary>
            <param name="fieldName">The field name of the column to retrieve, identified by its <see cref="P:Syncfusion.Blazor.Grids.GridColumn.Field"/> property.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> representing the asynchronous operation that returns the <see cref="T:Syncfusion.Blazor.Grids.GridColumn"/> with the specified <c>fieldName</c>.</returns>
            <remarks>
            This method searches through all columns in the grid and returns the first column whose field name matches the specified <c>fieldName</c> parameter.
            If no column is found with the specified <c>fieldName</c>, this method returns <c>null</c>. Case-insensitive search is used while comparing the field name.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button id="getColumns" @onclick="GetColumn">Get Column</button>
            <SfGrid @ref="grid" DataSource="@Orders">
             ........
            </SfGrid>
            @code{
               SfGrid<Order> grid;
               List<string> listItems = new List<string>();
               private async Task GetColumn()
               {
                    var Column = await grid.GetColumnByFieldAsync("CustomerID");
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.GetColumnByUid(System.String)">
            <summary>
            Gets a column by UID.
            </summary>
            <param name="uid">Specifies the uid name.</param>
            <returns><see cref="T:System.Threading.Tasks.Task`1"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.GetColumnByUidAsync(System.String)">
            <summary>
            Gets a column by its unique identifier (UID) value.
            </summary>
            <param name="uid">The unique identifier of the column to retrieve the corresponding column details.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> representing the asynchronous operation that yields the <see cref="T:Syncfusion.Blazor.Grids.GridColumn"/> with the specified <c>uid</c>, or <c>null</c> if no such column exists.</returns>
            <example>
            <code>
            <![CDATA[
            <button id="getColumns" @onclick="GetColumn">Get Column</button>
            <SfGrid @ref="grid" DataSource="@Orders">
             ........
            </SfGrid>
            @code{
               SfGrid<Order> grid;
               private async Task GetColumn()
               {
                    var Column = await grid.GetColumnByUidAsync("grid-column18");
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.GetColumnFieldNames">
            <summary>
            Gets the collection of column fields.
            </summary>
            <returns>System.Threading.Tasks.Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.GetColumnFieldNamesAsync">
            <summary>
            Gets the collection of column field names which are bound in the grid.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation that returns a list of strings representing the names of the column fields.</returns>
            <remarks>
            This method use the <see cref="M:Syncfusion.Blazor.Grids.Internal.GridUtils.GetColumns(Syncfusion.Blazor.Grids.IGrid,System.Collections.Generic.List{Syncfusion.Blazor.Grids.GridColumn})"/> method to retrieve a list of column objects, and then extract the <see cref="P:Syncfusion.Blazor.Grids.GridColumn.Field"/> property of each column object and return it as a list of strings.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button id="getColumns" @onclick="GetColumns">GetColumnFieldNames</button>
            <SfGrid @ref="grid" DataSource="@Orders">
             ........
            </SfGrid>
            @code{
               SfGrid<Order> grid;
               private async Task GetColumns()
               {
                    var columns = await grid.GetColumnFieldNamesAsync();
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.GetColumnIndexByField(System.String)">
            <summary>
            Gets a column index by column name.
            </summary>
            <param name="field">Specifies the column name.</param>
            <returns><see cref="T:System.Threading.Tasks.Task`1"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.GetColumnIndexByFieldAsync(System.String)">
            <summary>
            Gets the index of a column by its field name.
            </summary>
            <param name="fieldName">A string value representing the field name of the column whose index is to be returned, identified by its <see cref="P:Syncfusion.Blazor.Grids.GridColumn.Field"/> property.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> representing the asynchronous operation.</returns>
            <remarks>
            This method retrieves the list of columns from the grid using <see cref="M:Syncfusion.Blazor.Grids.Internal.GridUtils.GetColumns(Syncfusion.Blazor.Grids.IGrid,System.Collections.Generic.List{Syncfusion.Blazor.Grids.GridColumn})"/>,
            and searches for the first column whose name matches the <c>GridColumn.Field</c> property of the grid and return its index.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button id="GetColumnIndex" @onclick="GetColumnIndex">Get ColumnIndex</button>
            <SfGrid @ref="grid" DataSource="@Orders">
             ........
            </SfGrid>
            @code{
               SfGrid<Order> grid;
               private async Task GetColumnIndex()
               {
                    var ColumnIndex = await grid.GetColumnIndexByFieldAsync("CustomerID");
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.GetColumnIndexByUid(System.String)">
            <summary>
            Gets a column index by UID.
            </summary>
            <param name="uid">Specifies the column uid.</param>
            <returns><see cref="T:System.Threading.Tasks.Task`1"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.GetColumnIndexByUidAsync(System.String)">
            <summary>
            Gets the index of a column by its unique identifier (UID).
            </summary>
            <param name="uid">The unique identifier (UID) of the column whose index is to be returned.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> representing the asynchronous operation that returns the index of the column with the specified UID.</returns>
            <remarks>
            The method searches for the column by comparing the provided UID to the <see cref="P:Syncfusion.Blazor.Grids.GridColumn.Uid"/> property of each column in the grid using an ordinal comparison.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button id="GetColumnIndex" @onclick="GetColumnIndex">Get ColumnIndex</button>
            <SfGrid @ref="grid" DataSource="@Orders">
             ........
            </SfGrid>
            @code{
               SfGrid<Order> grid;
               private async Task GetColumnIndex()
               {
                    var ColumnIndex = await grid.GetColumnIndexByUidAsync("grid-column18");
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.GetColumns(System.Nullable{System.Boolean})">
            <summary>
            Gets the columns from the Grid.
            </summary>
            <returns>System.Threading.Tasks.Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.GetColumnsAsync(System.Nullable{System.Boolean})">
            <summary>
            Gets the list of columns details which are bound in the Grid.
            </summary>
            <param name="isRefresh">An optional boolean value indicating whether to refresh the grid columns.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> representing the asynchronous operation that returns the <see cref="T:Syncfusion.Blazor.Grids.GridColumn"/>.</returns>
            <example>
            <code>
            <![CDATA[
            <button id="getColumns" @onclick="GetColumns">Get Columns</button>
            <SfGrid @ref="grid" DataSource="@Orders">
             ........
            </SfGrid>
            @code{
               SfGrid<Order> grid;
               private async Task GetColumns()
               {
                    var Columns = await grid.GetColumnsAsync();
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.GetCurrentViewRecords">
            <summary>
            Get current visible data of grid.
            </summary>
            <returns>System.Threading.Tasks.Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.GetCurrentViewRecordsAsync">
            <summary>
            Gets the records which are currently visible in the grid.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <example>
            <code>
            <![CDATA[
            <button id="GetCurrentViewRecords" @onclick="GetDataHandler">Get CurrentViewRecords</button>
            <SfGrid @ref="grid" DataSource="@Orders">
             ........
            </SfGrid>
            @code{
               SfGrid<Order> grid;
               private async Task GetDataHandler()
               {
                    var records = await grid.GetCurrentViewRecordsAsync();
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.GetFilterUIInfo">
            <summary>
            Get the current Filter operator and field.
            </summary>
            <returns>System.Threading.Tasks.Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.GetFilteredRecords">
            <summary>
            Get all filtered records from the Grid and it returns array of objects for the local dataSource, returns a promise object if the Grid has remote data.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.GetFilteredRecordsAsync">
            <summary>
            Get the filtered records details of the Grid.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation that returns an array of objects for the local dataSource. If the Grid has remote data, it returns a promise object.</returns>
            <example>
            <remarks>
            Any one of the column must be filtered to get the filtered record details while using this method.
            </remarks>
            <code>
            <![CDATA[
            <button id="GetFilteredRecords" @onclick="FilterHandler ">Get Filtered Records</button>
            <SfGrid @ref="grid" DataSource="@Orders">
             ........
            </SfGrid>
            @code{
               SfGrid<Order> grid;
               private async Task FilterHandler()
               {
                    var data = await grid.GetFilteredRecordsAsync();
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.GetForeignKeyColumns">
            <summary>
            Gets the foreign columns from Grid.
            </summary>
            <returns>System.Threading.Tasks.Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.GetForeignKeyColumnsAsync">
            <summary>
            Gets the foreign columns detail from the Grid.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation that returns a list of <see cref="T:Syncfusion.Blazor.Grids.GridColumn"/> objects.</returns>
            <remarks>
            A foreign key column must be specified using the <c>ForeignKeyValue</c> property and <c>ForeignKeyField</c> property.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button id="GetForeignKeyColumns" @onclick="GetColumnHandler ">Get ForeignKeyColumns</button>
            <SfGrid @ref="grid" DataSource="@Orders">
             ........
            </SfGrid>
            @code{
               SfGrid<Order> grid;
               private async Task GetColumnHandler()
               {
                    var Columns = await grid.GetForeignKeyColumnsAsync();
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.GetHiddenColumns">
            <summary>
            Gets the hidden columns from the Grid.
            </summary>
            <returns>System.Threading.Tasks.Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.GetHiddenColumnsAsync">
            <summary>
            Gets the hidden columns from the Grid.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation that returns a list of <see cref="T:Syncfusion.Blazor.Grids.GridColumn"/> objects.</returns>
            <remarks>
            This method retrieves all the columns from the Grid using the <see cref="M:Syncfusion.Blazor.Grids.Internal.GridUtils.GetColumns(Syncfusion.Blazor.Grids.IGrid,System.Collections.Generic.List{Syncfusion.Blazor.Grids.GridColumn})"/> and filters the list that are not visible using the <see cref="P:Syncfusion.Blazor.Grids.GridColumn.Visible"/> property.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button id="GetHiddenColumns" @onclick="GetColumnHandler ">Get HiddenColumns</button>
            <SfGrid @ref="grid" DataSource="@Orders">
             ........
            </SfGrid>
            @code{
               SfGrid<Order> grid;
               private async Task GetColumnHandler()
               {
                    var Columns = await grid.GetHiddenColumnsAsync();
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.GetPersistData">
            <summary>
            Get the properties to be maintained in the persisted state.
            </summary>
            <returns>System.Threading.Tasks.Task.</returns>
            <remarks>
            Returns the state of the grid as string value which can be saved and loaded into grid later using
            <c>SetPersistData</c> method.
            </remarks>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.GetPersistDataAsync">
            <summary>
            Get the grid properties which are maintained in the persisted state.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <remarks>
            Returns the state of the grid as string value which can be saved and loaded into grid later using
            <c>SetPersistData</c> method.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button id="GetPersistData" @onclick="GetPersistData">Get PersistData</button>
            <SfGrid @ref="grid" DataSource="@Orders">
             ........
            </SfGrid>
            @code{
               SfGrid<Order> grid;
               private async Task GetPersistData()
               {
                    var data = await grid.GetPersistDataAsync();
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.GetPrimaryKeyFieldNames">
            <summary>
            Get the names of the primary key columns of the Grid.
            </summary>
            <returns>System.Threading.Tasks.Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.GetPrimaryKeyFieldNamesAsync">
            <summary>
            Get the names of the primary key columns of the Grid.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation that returns a list of strings representing the names of the primary key columns.</returns>
            <remarks>
            This method retrieves all the columns from the Grid using the <see cref="M:Syncfusion.Blazor.Grids.Internal.GridUtils.GetColumns(Syncfusion.Blazor.Grids.IGrid,System.Collections.Generic.List{Syncfusion.Blazor.Grids.GridColumn})"/> and filters the list of columns based on the <see cref="P:Syncfusion.Blazor.Grids.GridColumn.IsPrimaryKey"/> property. 
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button id="GetPrimaryKeyFieldNames" @onclick="GetDataHandler">Get PrimaryKeyFieldNames</button>
            <SfGrid @ref="grid" DataSource="@Orders">
             ........
            </SfGrid>
            @code{
               SfGrid<Order> grid;
               private async Task GetDataHandler()
               {
                    var fieldNames = await grid.GetPrimaryKeyFieldNamesAsync();
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.GetRowIndexByPrimaryKey(System.Object)">
            <summary>
            Get row index by primary key.
            </summary>
            <param name="value">Primary key value.</param>
            <returns>System.Threading.Tasks.Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.GetRowIndexByPrimaryKeyAsync(System.Object)">
            <summary>
            Gets the index of a row in the grid using a specified primary key value.
            </summary>
            <param name="value">The value of the primary key column, for the row whose index is to be returned.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation that result contains the index of the row, or -1 if the row cannot be found.</returns>
            <remarks>
            A primary key column must be specified using the <see cref="P:Syncfusion.Blazor.Grids.GridColumn.IsPrimaryKey"/> property.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button id="GetRowIndexByPrimaryKey" @onclick="GetDataHandler">GetRowIndexByPrimaryKey</button>
            <SfGrid @ref="grid" DataSource="@Orders">
             ........
            </SfGrid>
            @code{
               SfGrid<Order> grid;
               private async Task GetDataHandler()
               {
                    var rowIndex  = await grid.GetRowIndexByPrimaryKeyAsync(1);  // pass primary key value here.
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.GetSelectedRecords">
            <summary>
            Gets the collection of selected records.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.GetSelectedRecordsAsync">
            <summary>
            Gets the collection of selected records.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation that result contains a list of the currently selected records.</returns>
            <remarks>
            While using this method, you can get the collection of record details which are currently selected in the grid.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button id="Get SelectedRecords" @onclick="GetDataHandler">GetSelectedRecords</button>
            <SfGrid @ref="grid" DataSource="@Orders">
             ........
            </SfGrid>
            @code{
               SfGrid<Order> grid;
               private async Task GetDataHandler()
               {
                    var selectedRecords  = await grid.GetSelectedRecordsAsync();  
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.GetSelectedRowCellIndexes">
            <summary>
            Gets the collection of selected row and cell indexes.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.GetSelectedRowCellIndexesAsync">
            <summary>
            Gets the collection of cell indexes from the selected row.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation that result contains a list of ValueTuple instances representing the selected row and cell indexes.</returns>
            <remarks>
            If there are no rows or the <see cref="P:Syncfusion.Blazor.Grids.SfGrid`1.AllowSelection"/> is set to <c>false</c> or selection mode is set to <see cref= "F:Syncfusion.Blazor.Grids.SelectionMode.Row"/>, an empty list is returned.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button id="Get selectedRowcellIndexes " @onclick="GetDataHandler ">GetSelectedRowcellIndexes </button>
            <SfGrid @ref="grid" DataSource="@Orders">
             ........
            </SfGrid>
            @code{
               SfGrid<Order> grid;
               private async Task GetDataHandler()
               {
                    var selectedRowcellIndexes = await grid.GetSelectedRowCellIndexesAsync();  
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.GetSelectedRowIndexes">
            <summary>
            Gets the collection of selected row indexes.
            </summary>
            <returns>System.Threading.Tasks.Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.GetSelectedRowIndexesAsync">
            <summary>
            Gets the collection of selected row indexes.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation that result contains a list of integer representing the indexes of the selected rows.</returns>
            <example>
            <remarks>
            This method does not retrieve the row indexes if <see cref="P:Syncfusion.Blazor.Grids.GridSelectionSettings.Mode"/> is set to <see cref= "F:Syncfusion.Blazor.Grids.SelectionMode.Cell"/>.
            </remarks>
            <code>
            <![CDATA[
            <button id="GetSelectedRowIndexes " @onclick="GetDataHandler">GetSelectedRowIndexes </button>
            <SfGrid @ref="grid" DataSource="@Orders">
             ........
            </SfGrid>
            @code{
               SfGrid<Order> grid;
               private async Task GetDataHandler()
               {
                    var SelectedRowIndexes = await grid.GetSelectedRowIndexesAsync();  
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.GetUidByColumnField(System.String)">
            <summary>
            Gets UID by column name.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.GetUidByColumnFieldAsync(System.String)">
            <summary>
            Gets the unique identifier (UID) by its column field name.
            </summary>
            <param name="fieldName">The field name of the column whose unique identifier (UID) is to be retrieved, identified by its <see cref="P:Syncfusion.Blazor.Grids.GridColumn.Field"/> property.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <remarks>
            This method searches through all columns in the grid and returns the UID of the first column whose field name matches the specified <c>fieldName</c> parameter.
            If no column is found, this method returns <c>null</c>. Case-insensitive search is used while comparing the field name.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button id="GetUidByColumnField" @onclick="GetDataHandler">GetUidByColumnField</button>
            <SfGrid @ref="grid" DataSource="@Orders">
             ........
            </SfGrid>
            @code{
               SfGrid<Order> grid;
               private async Task GetDataHandler()
               {
                    var Uid = await grid.GetUidByColumnFieldAsync("CustomerID");  //pass column name here
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.GetVisibleColumns">
            <summary>
            Gets the visible columns from the Grid.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.GetVisibleColumnsAsync">
            <summary>
            Gets a list of all visible columns in the grid.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <remarks>
            This method uses the <see cref="M:Syncfusion.Blazor.Grids.Internal.GridUtils.GetColumns(Syncfusion.Blazor.Grids.IGrid,System.Collections.Generic.List{Syncfusion.Blazor.Grids.GridColumn})"/> method to retrieve all columns in the grid and returns a list of columns where <see cref="P:Syncfusion.Blazor.Grids.GridColumn.Visible"/> property is true.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button id="GetVisibleColumns" @onclick="GetDataHandler">GetVisibleColumns</button>
            <SfGrid @ref="grid" DataSource="@Orders">
             ........
            </SfGrid>
            @code{
               SfGrid<Order> grid;
               private async Task GetDataHandler()
               {
                    var Columns = await grid.GetVisibleColumnsAsync();
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.GoToPage(System.Int32)">
            <summary>
            Navigates to the specified target page.
            </summary>
            <param name="pageNo">Specifies the page number.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.GoToPageAsync(System.Int32)">
            <summary>
            Navigate to the specified target page number asynchronously.
            </summary>
            <param name="pageNo">Specifies the page number you want to navigate.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <remarks>
            <see cref="P:Syncfusion.Blazor.Grids.SfGrid`1.AllowPaging"/> should be set to <c>true</c> in order to use this method.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button id="GoToPage" @onclick="PagingHandler">GoToPage</button>
            <SfGrid @ref="grid" AllowPaging="true" DataSource="@Orders">
             ........
            </SfGrid>
            @code{
               SfGrid<Order> grid;
               private async Task PagingHandler()
               {
                    await grid.GoToPageAsync(4); // pass desire page number here.
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.GroupCollapseAll">
            <summary>
            Collapses all the grouped rows of the Grid.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.CollapseAllGroupAsync">
            <summary>
            Collapses all the currently expanded grouped rows in the Grid.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <remarks>
            This method will only Collapse all the grouped rows if <see cref="P:Syncfusion.Blazor.Grids.SfGrid`1.AllowGrouping"/> is set to <c>true</c>.
            If the <see cref="P:Syncfusion.Blazor.Grids.GridGroupSettings.EnableLazyLoading"/> property is <c>true</c>, this method collapses all groups and refreshes the grid data.
            If the <see cref="P:Syncfusion.Blazor.Grids.SfGrid`1.EnableVirtualization"/> property is <c>true</c>, this method sets the <c>VirtualScrollModule.GeneratedGroupedRows</c> property to an empty list and call the <c>DataProcess</c> method.
            If the <see cref="P:Syncfusion.Blazor.Grids.SfGrid`1.AllowPaging"/> property is <c>true</c>, this method resets the current page to the first page using the <see cref="M:Syncfusion.Blazor.Grids.GridPageSettings.UpdateProperties(System.String,System.Object)"/> and call the <c>DataProcess</c> method.
            If the <see cref="P:Syncfusion.Blazor.Grids.GridGroupSettings.EnableLazyLoading"/> property is <c>false</c>, this method collapses all groups by setting their visibility to <c>false</c> and setting their <c>IsExpand</c> property to <c>false</c>.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button id="Collapse" @onclick="CollapseGroup">CollapseGroup</button>
            <SfGrid @ref="grid" DataSource="@Orders" AllowGrouping="true">
             ........
            </SfGrid>
            @code{
               SfGrid<Order> grid;
               private async Task CollapseGroup()
               {
                 await grid.CollapseAllGroupAsync();
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.GroupColumn(System.String)">
            <summary>
            Groups a column by column name.
            </summary>
            <param name="columnName">Specifies the column name to be grouped.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.GroupColumnAsync(System.String)">
            <summary>
            Group a column based on the specified field name of the column.
            </summary>
            <param name="columnName">Specifies the column field name to be grouped.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <remarks>
            <see cref="P:Syncfusion.Blazor.Grids.SfGrid`1.AllowGrouping"/> must be <c>true</c> to use this method.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button id="GroupColumn" @onclick="GroupColumn">GroupColumn</button>
            <SfGrid @ref="grid" DataSource="@Orders" AllowGrouping="true">
             ........
            </SfGrid>
            @code{
               SfGrid<Order> grid;
               private async Task GroupColumn()
               {
                 await grid.GroupColumnAsync();
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.GroupExpandAll">
            <summary>
            Expands all the grouped rows of the Grid.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.ExpandAllGroupAsync">
            <summary>
            Expand all grouped rows in the Grid.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <remarks>
            This method will only expand grouped rows if <see cref="P:Syncfusion.Blazor.Grids.SfGrid`1.AllowGrouping"/> is set to <c>true</c>.
            If <c>GroupSettings.EnableLazyLoading</c> is set to <c>true</c>, it will set <c>IsLazyExpandAll</c> to true and call <c>DataProcess</c> method.
            Otherwise, it will set <c>IsExpand</c> property to <c>true</c> for all grouped rows and update the grid accordingly.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button id="ExpandAll" @onclick="ExpandAll">ExpandAll</button>
            <SfGrid @ref="grid" DataSource="@Orders" AllowGrouping="true">
             ........
            </SfGrid>
            @code{
               SfGrid<Order> grid;
               private async Task ExpandAll()
               {
                 await grid.ExpandAllGroupAsync();
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.HideSpinner">
            <summary>
            Manually showed spinner needs to hide by HideSpinnner.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.HideSpinnerAsync">
            <summary>
            Hide the spinner which is shown while performing any grid action or grid loading time.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation of hiding the spinner element.</returns>
            <remarks>
            This method checks if <c>_hasSpinner</c> is <c>true</c> and if <c>SpinnerRef</c> is not null before hiding the spinner.
            </remarks>
            <example>        
            <code><![CDATA[
            <button id="HideSpinner" @onclick="SpinnerHandler">HideSpinner</button>
            <SfGrid @ref="grid" DataSource="@Orders">
                  .................
            </SfGrid>
            @code{
                 SfGrid<Order> grid;
                 private async Task SpinnerHandler()
                 {
            	await grid.HideSpinnerAsync(); // Hides the spinner.
                 }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.IsDirtyAsync">
            <summary>
            Determines whether the grid has any batch changes before updating it.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> representing the asynchronous operation.
            It returns <c>true</c> if the grid has any batch changes, such as adding new records, edited records, and deleted records; otherwise, returns <c>false</c>.
            </returns>
            <remarks>
            This method will only work if the edit <see cref="P:Syncfusion.Blazor.Grids.GridEditSettings.Mode"/> is set to <see cref="F:Syncfusion.Blazor.Grids.EditMode.Batch"/>.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button id="UpdateData" @onclick="UpdateData">UpdateData</button>
            <SfGrid @ref="grid" DataSource="@Orders">
             <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" Mode="EditMode.Batch"></GridEditSettings>
             ........
            </SfGrid>
            @code{
               SfGrid<Order> grid;
               private async Task UpdateData()
               {
                    bool isDirty = await grid.IsDirtyAsync(); // if the grid has any batch changes, it returns true; otherwise, false.
                    if(isDirty)
                    {
                        // You can customized code here.
                    }
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.OpenColumnChooser(System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Column chooser can be displayed on screen by given position(X and Y axis).
            </summary>
            <param name="x">Specifies the X position.</param>
            <param name="y">Specifies the Y position.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.OpenColumnChooserAsync(System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Opens the column chooser pop up anywhere in the screen by given position(X and Y axis).
            </summary>
            <param name="x">Specifies the X axis position.</param>
            <param name="y">Specifies the Y axis position.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <remarks>
            You can manually open the column chooser at any position of screen at any desired time if <see cref="P:Syncfusion.Blazor.Grids.SfGrid`1.ShowColumnChooser"/> property is set to <c>true</c>
            </remarks>
            <example>
            <code><![CDATA[
            <button id="OpenColumnChooser" @onclick="ColumnHandler">OpenColumnChooser</button>
            <SfGrid @ref="grid" ShowColumnChooser="true" DataSource="@Orders">
                  .................
            </SfGrid>
            @code{
                 SfGrid<Order> grid;
                 private async Task ColumnHandler()
                 {
            	await grid.OpenColumnChooserAsync(200,50); // pass desire X and Y value
                 }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.PdfExport(Syncfusion.Blazor.Grids.PdfExportProperties,System.Nullable{System.Boolean},System.Object,System.Nullable{System.Boolean})">
            <summary>
            Export Grid data to PDF document.
            </summary>
            <param name="pdfExportProperties">Provides the pdf export properties. Use this to provide custom column,
            data source, theme etc.</param>
            <param name="isMultipleExport">Specifies multi-export is enabled.</param>
            <param name="pdfDoc">PDF document instance.</param>
            <param name="isBlob">Export as blob instead of writing response.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.ExportToPdfAsync(Syncfusion.Blazor.Grids.PdfExportProperties,System.Nullable{System.Boolean},System.Object,System.Nullable{System.Boolean})">
            <summary>
            Export Grid data to PDF document.
            </summary>
            <param name="pdfExportProperties">Provides the pdf export properties such as custom columns, data sources, themes, etc.</param>
            <param name="isMultipleExport">Specifies whether multi-export is enabled or not. This parameter is optional.</param>
            <param name="pdfDoc">PDF document instance to use for the export. This parameter is optional.</param>
            <param name="isBlob">Specifies whether to export as a blob instead of writing the response. This parameter is optional.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation</returns>
            <example>
            <code><![CDATA[
            <button id="ExportToPdf<"@onclick="ExportHandler">ExportToPdf<</button>
            <SfGrid @ref="grid" AllowPdfExport="true" DataSource="@Orders">
             ........
            </SfGrid>
            @code{
               SfGrid<Order> grid;
               private async Task ExportHandler()
               {
                   Syncfusion.Blazor.Grids.PdfExportProperties ExportProperties = new Syncfusion.Blazor.Grids.PdfExportProperties();
                   ExportProperties.ExportType = Syncfusion.Blazor.Grids.ExportType.CurrentPage; // here we have changed the ExportType from AllPages to CurrentPage, as like same we can change our desire properties.
                   await grid.ExportToPdfAsync(ExportProperties);
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.ExportToPdfAsync(System.Boolean,Syncfusion.Blazor.Grids.PdfExportProperties)">
            <summary>
            Gets the Grid PDF document as a <see cref="T:System.IO.MemoryStream"/>.
            </summary>
            <param name="asMemoryStream">Specifies whether to return the PDF document as a memory stream.</param>
            <param name="pdfExportProperties">Optional. Provides the pdf export properties such as custom columns, data sources, themes, etc.</param>
            <returns>
            An asynchronous task that provides a <see cref="T:System.IO.MemoryStream"/> containing the exported PDF document when <c>asMemoryStream</c> parameter is true;
            otherwise, it returns null and exports the PDF document in browser.
            </returns>
            Also, see <seealso cref="T:Syncfusion.Blazor.Grids.PdfExportProperties"/> for details on configuring pdf properties.
            <remarks>
            It exports the Grid data to a PDF document in the browser by defining <c>asMemoryStream</c> parameter value to false.
            </remarks>
            <example>
            <code><![CDATA[
            <button id="ExportToPdf<"@onclick="ExportHandler">ExportToPdf<</button>
            <SfGrid @ref="grid" AllowPdfExport="true" DataSource="@Orders">
             ........
            </SfGrid>
            @code{
               SfGrid<Order> grid;
               private async Task ExportHandler()
               {
                   Syncfusion.Blazor.Grids.PdfExportProperties ExportProperties = new Syncfusion.Blazor.Grids.PdfExportProperties();
                   ExportProperties.ExportType = Syncfusion.Blazor.Grids.ExportType.CurrentPage; // here we have changed the ExportType from AllPages to CurrentPage, as like same we can change our desire properties.
                   MemoryStream streamDocument = await grid.ExportToPdfAsync(true, ExportProperties);
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.Print">
            <summary>
            By default, prints all the pages of the Grid and hides the pager.
            You can customize print options using the <see cref="T:Syncfusion.Blazor.Grids.PrintMode"/>.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.PrintAsync">
            <summary>
            Print all pages of the Grid and it hides the pager.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <remarks>
            You can customize the print options by using the <see cref="T:Syncfusion.Blazor.Grids.PrintMode"/> property of the Grid component.
            </remarks>
            <example>        
            <code><![CDATA[
            <button id="Print" @onclick="PrintHandler">Print</button>
            <SfGrid @ref="grid" DataSource="@Orders">
            ............
            </SfGrid>
            @code{
                 SfGrid<Order> grid;
                 private async Task PrintHandler()
                 {
            	await grid.PrintAsync(); 
                 }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.RefreshColumns">
            <summary>
            Refreshes the Grid column changes.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.RefreshColumnsAsync">
            <summary>
            Refreshes the Grid with column changes.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous refresh operation.</returns>
            <remarks>
            Refresh the Grid columns when column property values are updated externally.
            This method sets the <see cref="P:Syncfusion.Blazor.Grids.SfGrid`1.ForceUpdate"/> property to <c>true</c> and calls the <see cref="M:Syncfusion.Blazor.Grids.SfGrid`1.CallStateHasChangedAsync"/> method asynchronously.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button id="RefreshColumns" @onclick="RefreshHandler">RefreshColumns</button>
            <SfGrid @ref="grid" DataSource="@Orders">
             ........
            </SfGrid>
            @code{
               SfGrid<Order> grid;
               private async Task RefreshHandler()
               {
                 await grid.RefreshColumnsAsync();
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.RefreshHeader">
            <summary>
            Refreshes the Grid header.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.RefreshHeaderAsync">
            <summary>
            Refreshes the Grid header.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous refresh operation.</returns>
            <remarks>
            This method should be called whenever the header of the component needs to be refreshed.
            This method sets the <see cref="P:Syncfusion.Blazor.Grids.SfGrid`1.RefreshColumnHeader"/> and  <see cref="P:Syncfusion.Blazor.Grids.SfGrid`1.ForceUpdate"/> properties to <c>true</c> and calls the <see cref="M:Syncfusion.Blazor.Grids.SfGrid`1.CallStateHasChangedAsync"/> method asynchronously.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button id="RefreshHeader" @onclick="RefreshHandler">RefreshHeader</button>
            <SfGrid @ref="grid" DataSource="@Orders">
             ........
            </SfGrid>
            @code{
               SfGrid<Order> grid;
               private async Task RefreshHandler()
               {
                 await grid.RefreshHeaderAsync();
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.ReorderColumnByIndex(System.Int32,System.Int32)">
            <summary>
            Changes the Grid column positions by field index. If you invoke ReorderColumnByIndex multiple times,
            then you won't get the same results every time.
            </summary>
            <param name="fromIndex">Specifies the source index to be moved.</param>
            <param name="toIndex">Specifies the destination or drop index.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.ReorderColumnByIndexAsync(System.Int32,System.Int32)">
            <summary>
            Moves the Grid column positions in the UI from one column index to another based on field index. 
            </summary>
            <param name="fromIndex">Specifies the current index of the column.</param>
            <param name="toIndex">Specifies the destination or drop column index.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <remarks> 
            If you invoke <see cref="M:Syncfusion.Blazor.Grids.SfGrid`1.ReorderColumnByIndexAsync(System.Int32,System.Int32)"/> multiple times, then you won't get the same results every time.
            <see cref="P:Syncfusion.Blazor.Grids.SfGrid`1.AllowReordering"/> should be set to <c>true</c> in order to use this method.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button id="ReorderColumnByIndex" @onclick="ReorderColumn">ReorderColumnByIndex</button>
            <SfGrid @ref="grid" AllowReordering="true" DataSource="@Orders">
             ........
            </SfGrid>
            @code{
               SfGrid<Order> grid;
               private async Task ReorderColumn()
               {
                    await grid.ReorderColumnByIndexAsync(0,3);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.ReorderColumnByTargetIndex(System.String,System.Int32)">
            <summary>
            Changes the Grid column positions by field index. If you invoke ReorderColumnByTargetIndex multiple times,
            then you will get the same results every time.
            </summary>
            <param name="fieldName">Specifies the field name to be moved.</param>
            <param name="toIndex">Specifies the destination or drop index.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.ReorderColumnByTargetIndexAsync(System.String,System.Int32)">
            <summary>
            Moves a column in the Grid UI from one position to another, based on its field name and destination index.
            </summary>
            <param name="fieldName">The name of the column to be moved, identified by its <see cref="P:Syncfusion.Blazor.Grids.GridColumn.Field"/> property.</param>
            <param name="toIndex">The destination or drop index of the column in the Grid UI.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <remarks> 
            <see cref="P:Syncfusion.Blazor.Grids.SfGrid`1.AllowReordering"/> should be set to <c>true</c> in order to use this method.
            If you invoke <see cref="M:Syncfusion.Blazor.Grids.SfGrid`1.ReorderColumnByTargetIndexAsync(System.String,System.Int32)"/> method multiple times, then you will get the same results every time.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button id="ReorderColumnByIndex" @onclick="ReorderColumn">ReorderColumnByIndex</button>
            <SfGrid @ref="grid" AllowReordering="true" DataSource="@Orders">
             ........
            </SfGrid>
            @code{
               SfGrid<Order> grid;
               private async Task ReorderColumn()
               {
                    await grid.ReorderColumnByTargetIndexAsync("OrderID",3);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.ReorderColumns(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Changes the Grid column positions by field names.
            </summary>
            <param name="fromFieldNames">Specifies the list of field names to be moved.</param>
            <param name="toFieldName">Specifies the field name of the destination location.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.ReorderColumnsAsync(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Changes the Grid column positions based on column field names.
            </summary>
            <param name="fromFieldNames">The list of columns to be moved.</param>
            <param name="toFieldName">The destination of the column where the column should be moved.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <remarks>
            <see cref="P:Syncfusion.Blazor.Grids.SfGrid`1.AllowReordering"/> should be set to <c>true</c> in order to use this method.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button id="ReorderColumns" @onclick="ReorderColumn">ReorderColumns</button>
            <SfGrid @ref="grid" AllowReordering="true" DataSource="@Orders">
             ........
            </SfGrid>
            @code{
               SfGrid<Order> grid;
               private async Task ReorderColumn()
               {
                    await grid.ReorderColumnsAsync(new List<string> { "OrderID", "CustomerID" }, "ShipCountry");
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.ReorderColumns(System.String[],System.String)">
            <summary>
            Changes the Grid column positions by field names.
            </summary>
            <param name="fromFieldNames">Specifies the list of field names to be moved.</param>
            <param name="toFieldName">Specifies the field name of the destination location.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.ReorderColumnsAsync(System.String[],System.String)">
            <summary>
            Changes the Grid column positions based on column field names.
            </summary>
            <param name="fromFieldNames">An array of strings that specifies the list of columns to be moved.</param>
            <param name="toFieldName">The destination of the column where the column should be moved.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <remarks>
            <see cref="P:Syncfusion.Blazor.Grids.SfGrid`1.AllowReordering"/> should be set to <c>true</c> in order to use this method.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button id="ReorderColumns" @onclick="ReorderColumn">ReorderColumns</button>
            <SfGrid @ref="grid" AllowReordering="true" DataSource="@Orders">
             ........
            </SfGrid>
            @code{
               SfGrid<Order> grid;
               private async Task ReorderColumn()
               {
                    string[] Columns={"OrderID", "CustomerID"};
                    await grid.ReorderColumnsAsync(columns, "ShipCountry");
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.ReorderColumns(System.String,System.String)">
            <summary>
            Changes the Grid column positions by field names.
            </summary>
            <param name="fromFieldName">Specifies the field names to be moved.</param>
            <param name="toFieldName">Specifies the field name of the destination location.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.ReorderColumnAsync(System.String,System.String)">
            <summary>
            Changes the position of a column in the Grid by its field name.
            </summary>
            <param name="fromFieldName">The name of the column to be moved.</param>
            <param name="toFieldName">The destination of the column where the column should be moved.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <remarks>
            <see cref="P:Syncfusion.Blazor.Grids.SfGrid`1.AllowReordering"/> should be set to <c>true</c> in order to use this method.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button id="ReorderColumns" @onclick="ReorderColumn">ReorderColumns</button>
            <SfGrid @ref="grid" AllowReordering="true" DataSource="@Orders">
             ........
            </SfGrid>
            @code{
               SfGrid<Order> grid;
               private async Task ReorderColumn()
               {
                    await grid.ReorderColumnAsync("OrderID", "ShipCountry");
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.ReorderRows(System.Int32,System.Int32)">
            <summary>
            Changes the Grid Row position with given indexes.
            </summary>
            <param name="fromIndex">Specifies the start row index.</param>
            <param name="toIndex">Specifies the to row index.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.ReorderRowAsync(System.Int32,System.Int32)">
            <summary>
            Changes the Grid row position with given indexes.
            </summary>
            <param name="fromIndex">The current row index from which the row needs to be moved.</param>
            <param name="toIndex">The new row index to which the row needs to be moved.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <example>
            <code>
            <![CDATA[
            <button id="ReorderRow" @onclick="ReorderRow">ReorderRow</button>
            <SfGrid @ref="grid" DataSource="@Orders">
             ........
            </SfGrid>
            @code{
               SfGrid<Order> grid;
               private async Task ReorderRow()
               {
                    await grid.ReorderRowAsync(0,5);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.SaveCell">
            <summary>
            Saves the cell that is currently edited. It does not save the value to the DataSource.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.SaveCellAsync">
            <summary>
            Saves the cell that is currently being edited.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.
            </returns>
            <remarks>
            This method will only save the cell if the <see cref="P:Syncfusion.Blazor.Grids.GridEditSettings.Mode"/> is set as <see cref= "F:Syncfusion.Blazor.Grids.EditMode.Batch"/> and <see cref="P:Syncfusion.Blazor.Grids.GridEditSettings.AllowEditing"/> is set to <c>true</c>.
            This method does not save the value to the data source. Updated the value in Grid UI level only.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button id="SaveCell" @onclick="CellHandler">SaveCell</button>
            <SfGrid @ref="grid" DataSource="@Orders">
            <GridEditSettings AllowEditing="true" Mode="EditMode.Batch"/>
             ........
            </SfGrid>
            @code{
               SfGrid<Order> grid;
               private async Task CellHandler()
               {
                    await grid.SaveCellAsync();
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.SelectCell(System.ValueTuple{System.Int32,System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Selects a cell by the given index.
            </summary>
            <param name="cellIndex">Specifies the ValueTuple of row and cell index. Example: (0, 1).</param>
            <param name="isToggle">Toggles the selection.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.SelectCellAsync(System.ValueTuple{System.Int32,System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Selects a cell by the given index.
            </summary>
            <param name="cellIndex">The row and cell index of the cell to be selected. For example (0, 1).</param>
            <param name="isToggle">Determines whether to toggle the selection of the cell or not. Default value is <c>false</c>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.
            </returns>
            <remarks>
            This method will only select the cell if the<see cref="P:Syncfusion.Blazor.Grids.GridSelectionSettings.Mode"/> is set as <see cref= "F:Syncfusion.Blazor.Grids.SelectionMode.Cell"/> and <see cref="P:Syncfusion.Blazor.Grids.SfGrid`1.AllowSelection"/> is set to <c>true</c>.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button id="SelectCell" @onclick="CellHandler">SelectCell</button>
            <SfGrid @ref="grid" AllowSelection="true" DataSource="@Orders">
            <GridSelectionSettings Mode="SelectionMode.Cell">
             ........
            </SfGrid>
            @code{
               SfGrid<Order> grid;
               private async Task CellHandler()
               {
                    await grid.SelectCellAsync((1,3)); // pass row and cell index
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.SelectCells(System.ValueTuple{System.Int32,System.Int32}[])">
            <summary>
            Selects a collection of cells by row and column indexes.
            </summary>
            <param name="rowCellIndexes">Specifies the array of ValueTuple of row and cell index.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.SelectCellsAsync(System.ValueTuple{System.Int32,System.Int32}[])">
            <summary>
            Selects a collection of cells by row and column indexes.
            </summary>
            <param name="rowCellIndexes">An array of row and cell indexes that specifies the cells to be selected.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <remarks>
            This method will only select the cell if the<see cref="P:Syncfusion.Blazor.Grids.GridSelectionSettings.Mode"/> is set as <see cref= "F:Syncfusion.Blazor.Grids.SelectionMode.Cell"/> and <see cref="P:Syncfusion.Blazor.Grids.SfGrid`1.AllowSelection"/> is set to <c>true</c>.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button id="SelectCells" @onclick="CellHandler">SelectCells</button>
            <SfGrid @ref="grid" AllowSelection="true" DataSource="@Orders">
            <GridSelectionSettings Mode="SelectionMode.Cell">
             ........
            </SfGrid>
            @code{
               SfGrid<Order> grid;
               private async Task CellHandler()
               {
                    var rowCellIndexes = new (int Row, int Cell)[]{(1, 3),(2, 2),(3, 1),(4, 2)};
                    await grid.SelectCellsAsync(rowCellIndexes);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.SelectCellsByRange(System.ValueTuple{System.Int32,System.Int32},System.Nullable{System.ValueTuple{System.Int32,System.Int32}})">
            <summary>
            Selects a range of cells from start and end indexes.
            </summary>
            <param name="endIndex">Specifies the value tuple of end row cell index.</param>
            <param name="startIndex">Specifies the value tuple of start index.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.SelectCellsByRangeAsync(System.ValueTuple{System.Int32,System.Int32},System.Nullable{System.ValueTuple{System.Int32,System.Int32}})">
            <summary>
            Selects a range of cells starting from the specified start index and ending at the specified end index.
            </summary>
            <param name="startIndex">Specifies the value tuple of start index.</param>
            <param name="endIndex">Specifies the value tuple of end row cell index.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <remarks>
            This method will only select the cell if the <see cref="P:Syncfusion.Blazor.Grids.GridSelectionSettings.Mode"/> is set as <see cref= "F:Syncfusion.Blazor.Grids.SelectionMode.Cell"/> and <see cref="P:Syncfusion.Blazor.Grids.SfGrid`1.AllowSelection"/> is set to <c>true</c>.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button id="SelectCellsByRange" @onclick="CellHandler">SelectCellsByRange</button>
            <SfGrid @ref="grid" AllowSelection="true" DataSource="@Orders">
            <GridSelectionSettings Mode="SelectionMode.Cell">
             ........
            </SfGrid>
            @code{
               SfGrid<Order> grid;
               private async Task CellHandler()
               {
                    await grid.SelectCellsByRangeAsync((0, 3), (3, 2));
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.SelectRow(System.Int32,System.Nullable{System.Boolean})">
            <summary>
            Selects a row by given index.
            </summary>
            <param name="index">Specifies the row index to select.</param>
            <param name="isToggle">Toggles the selection.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.SelectRowAsync(System.Int32,System.Nullable{System.Boolean})">
            <summary>
            Selects a row by given index.
            </summary>
            <param name="index">Specifies the row index to select.</param>
            <param name="isToggle">Determines whether to toggle the selection of the row or not.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <remarks>
            This method will only select the row if the <see cref="P:Syncfusion.Blazor.Grids.SfGrid`1.AllowSelection"/> is set to <c>true</c>.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button id="SelectRow" @onclick="SelectionHandler">SelectRow</button>
            <SfGrid @ref="grid" AllowSelection="true" DataSource="@Orders">
             ........
            </SfGrid>
            @code{
               SfGrid<Order> grid;
               private async Task SelectionHandler()
               {
                    await grid.SelectRowAsync(5);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.SelectRows(System.Int32[])">
            <summary>
            Selects a collection of rows by indexes.
            </summary>
            <param name="rowIndexes">Specifies the indexes of rows to be selected.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.SelectRowsAsync(System.Int32[])">
            <summary>
            Selects a collection of rows by their indexes.
            </summary>
            <param name="rowIndexes">An arrray of the row indexes to be selected.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <remarks>
            This method will only select the row if the <see cref="P:Syncfusion.Blazor.Grids.SfGrid`1.AllowSelection"/> is set to <c>true</c>.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button id="SelectRows" @onclick="SelectionHandler">SelectRows</button>
            <SfGrid @ref="grid" AllowSelection="true" DataSource="@Orders">
             ........
            </SfGrid>
            @code{
               SfGrid<Order> grid;
               private async Task SelectionHandler()
               {
                    await grid.SelectRowsAsync(new int[] { 1, 2, 3 });
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.SelectRowsByRange(System.Int32,System.Nullable{System.Int32})">
            <summary>
            Selects a range of rows from start and end row indexes.
            </summary>
            <param name="startIndex">Specifies the start row index.</param>
            <param name="endIndex">Specifies the end row index.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.SelectRowsByRangeAsync(System.Int32,System.Nullable{System.Int32})">
            <summary>
            Selects a range of rows within the specified range.
            </summary>
            <param name="startIndex">The starting index of the row to be selected.</param>
            <param name="endIndex">The ending index of the row to be selected.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <remarks>
            This method selects a range of rows between startIndex and endIndex within a specified range. 
            This method will only select the row if the <see cref="P:Syncfusion.Blazor.Grids.SfGrid`1.AllowSelection"/> is set to <c>true</c>.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button id="SelectRowsByRange" @onclick="SelectionHandler">SelectRowsByRange</button>
            <SfGrid @ref="grid" AllowSelection="true" DataSource="@Orders">
             ........
            </SfGrid>
            @code{
               SfGrid<Order> grid;
               private async Task SelectionHandler()
               {
                    await grid.SelectRowsByRangeAsync(3,7);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.SetCellValue(System.Object,System.String,System.Object)">
            <summary>
            Updates particular cell value based on the given primary key value.
            Primary key column must be specified using Columns.IsPrimaryKey property.
            </summary>
            <param name="field">Specifies the key field name.</param>
            <param name="key">Specifies the primary key value.</param>
            <param name="value">Specifies the new value.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.SetCellValueAsync(System.Object,System.String,System.Object)">
            <summary>
            Updates the value of a particular cell based on the given primary key value.
            </summary>
            <param name="key">The primary key value of the row.</param>
            <param name="fieldName">The name of the column, identified by its <see cref="P:Syncfusion.Blazor.Grids.GridColumn.Field"/> property.</param>
            <param name="value">The new value for the cell.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <remarks>
            This method updates the value of the cell in the row with the specified primary key and column value.
            The primary key column should be using <see cref="P:Syncfusion.Blazor.Grids.GridColumn.IsPrimaryKey"/> property.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button id="SetCellValue" @onclick="DataHandler">SetCellValue</button>
            <SfGrid @ref="grid" DataSource="@Orders">
             ........
            </SfGrid>
            @code{
               SfGrid<Order> grid;
               private async Task DataHandler()
               {
                    await grid.SetCellValueAsync(1005,"CustomerID","ANTON");
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.UpdateBatchRow(`0)">
            <summary>
            Shows the Edited fields in the batch mode while editing.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.UpdateBatchRowAsync(`0)">
            <summary>
            Updates the edited fields in batch mode while editing.
            </summary>
            <param name="Data">The data to be updated in the <c>batch</c> mode.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous update operation.</returns>
            <remarks>
            This method updates the cell if the <see cref="P:Syncfusion.Blazor.Grids.GridEditSettings.Mode"/> is set to <see cref="F:Syncfusion.Blazor.Grids.EditMode.Batch"/>.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button id="UpdateBatchRow" @onclick="DataHandler">UpdateBatchRow</button>
            <SfGrid @ref="grid" DataSource="@Orders">
            <GridEditSettings AllowAdding="true" AllowEditing="true" Mode="EditMode.Batch"></GridEditSettings>
             ........
            </SfGrid>
            @code{
               SfGrid<Order> grid;
               private async Task DataHandler()
               {
                    var BatchEdit = await this.grid.GetBatchChangesAsync();
                    List<Order> ChangedRecord = BatchEdit.ChangedRecords.ToList();
                    ChangedRecord[0].Freight = 100;
                    await grid.UpdateBatchRowAsync(ChangedRecord[0]);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.SetRowData(System.Object,`0)">
            <summary>
            Updates and refresh the particular row values based on the given primary key value.
            Primary key column must be specified using Columns.IsPrimaryKey property.
            </summary>
            <param name="primaryKeyValue">Specifies the PrimaryKey value of dataSource.</param>
            <param name="rowData">To update new data for the particular row.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.SetRowDataAsync(System.Object,`0)">
            <summary>
            Updates and refresh the particular row values based on the given primary key value.
            </summary>
            <param name="primaryKeyValue">The primary key value of the row to be updated.</param>
            <param name="rowData">The new data to be used to update the row.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <remarks>
            A primary key column must be specified using the <see cref="P:Syncfusion.Blazor.Grids.GridColumn.IsPrimaryKey"/> property.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button id="SetRowData" @onclick="DataHandler">SetRowData</button>
            <SfGrid @ref="grid" DataSource="@Orders">
             ........
            </SfGrid>
            @code{
               SfGrid<Order> grid;
               private async Task DataHandler()
               {
                    var rowData = new Order() { OrderID = 1006, CustomerID = "ALFKI", OrderDate = new DateTime(1995, 03, 25), Freight = 25.7 * 2 };
                    await grid.SetRowDataAsync(1006,rowData);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.SetRowDataAsync(System.Object,`0,System.Boolean)">
            <summary>
            Updates and refresh the particular row values based on the given primary key value.
            </summary>
            <param name="primaryKeyValue">The primary key value of the row to be updated.</param>
            <param name="rowData">The new data to be used to update the row.</param>
            <param name="preventDataUpdate">Determines whether to update the data source or only refresh the UI.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <remarks>
            A primary key column must be specified using the <see cref="P:Syncfusion.Blazor.Grids.GridColumn.IsPrimaryKey"/> property.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button id="SetRowData" @onclick="DataHandler">SetRowData</button>
            <SfGrid @ref="grid" DataSource="@Orders">
             ........
            </SfGrid>
            @code{
               SfGrid<Order> grid;
               private async Task DataHandler()
               {
                    var rowData = new Order() { OrderID = 1006, CustomerID = "ALFKI", OrderDate = new DateTime(1995, 03, 25), Freight = 25.7 * 2 };
                    await grid.SetRowDataAsync(1006,rowData,true);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.ShowHideColumnsOperations(System.Boolean)">
            <summary>
            Handle the common show and hide operations.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.ShowColumns(System.String[],System.String)">
            <summary>
            Shows one or more columns by its column name.
            </summary>
            <param name="columnNames">Specifies the column names.</param>
            <param name="showBy">Specifies the column getting criteria.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.ShowColumnsAsync(System.String[],System.String)">
            <summary>
            Show one or more columns in the grid by their <see cref="P:Syncfusion.Blazor.Grids.GridColumn.Field"/> or <see cref="P:Syncfusion.Blazor.Grids.GridColumn.HeaderText"/>.
            </summary>
            <param name="columnNames">The list of name of the columns to be shown in the grid.</param>
            <param name="showBy">Specifies whether the column name is shown by its <c>Field</c> or <c>HeaderText</c>. Default value is <c>HeaderText</c>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation of showing the specified columns in the grid.</returns>
            <remarks>
            You can dynamically show hidden columns in the grid.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button id="ShowColumns" @onclick="ColumnHandler">ShowColumns</button>
            <button id="ShowColumnsByField" @onclick="ColumnFieldHandler">ShowColumnsByField</button>
            <SfGrid @ref="grid" DataSource="@Orders">
             ........
            </SfGrid>
            @code{
               SfGrid<Order> grid;
               private async Task ColumnHandler()
               {
                    var columns = new List<string>() { "Freight", "Ship Country" };
                    await grid.ShowColumnsAsync(columns.ToArray());
               }
               private async Task ColumnFieldHandler()
               {
                    var columns = new List<string>() { "Freight", "ShipCountry" };
                    await grid.ShowColumnsAsync(columns.ToArray(),"Field");   //pass second param as "Field" to show using field name.
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.ShowColumns(System.String,System.String)">
            <summary>
            Shows a columns b its column name.
            </summary>
            <param name="columnName">Specifies the column names.</param>
            <param name="showBy">Specifies the column getting criteria.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.ShowColumnAsync(System.String,System.String)">
            <summary>
            Show a column in the grid by its <see cref="P:Syncfusion.Blazor.Grids.GridColumn.Field"/> or <see cref="P:Syncfusion.Blazor.Grids.GridColumn.HeaderText"/> property.
            </summary>
            <param name="columnName">The name of the column to be shown in the grid.</param>
            <param name="showBy">Specifies whether the column name is shown by its <c>Field</c> or <c>HeaderText</c>. Default value is <c>HeaderText</c>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation of showing specified column in the grid.</returns>
            <remarks>
            You can dynamically show hidden column in the grid.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button id="ShowColumn" @onclick="ColumnHandler">ShowColumn</button>
            <button id="ShowColumnByField" @onclick="ColumnFieldHandler">ShowColumnByField</button>
            <SfGrid @ref="grid" DataSource="@Orders">
             ........
            </SfGrid>
            @code{
               SfGrid<Order> grid;
               private async Task ColumnHandler()
               {
                    await grid.ShowColumnAsync("Ship Country");
               }
               private async Task ColumnFieldHandler()
               {
                    await grid.ShowColumnAsync("ShipCountry","Field");   //pass second param as "Field" to show using field name.
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.HideColumns(System.String[],System.String)">
            <summary>
            Hides one or more columns by its column name.
            </summary>
            <param name="columnNames">Specifies the column names.</param>
            <param name="hideBy">Specifies the column getting criteria.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.HideColumnsAsync(System.String[],System.String)">
            <summary>
            Hide one or more columns in the grid by their <see cref="P:Syncfusion.Blazor.Grids.GridColumn.Field"/> or <see cref="P:Syncfusion.Blazor.Grids.GridColumn.HeaderText"/>.
            </summary>
            <param name="columnNames">An array of column names to be hidden in the grid.</param>
            <param name="hideBy">Specifies whether the column name is hide by its <c>Field</c> or <c>HeaderText</c>. Default value is <c>HeaderText</c>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation of hiding the specified columns in the grid</returns>
            <remarks>
            You can dynamically hide showing columns in the grid.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button id="HideColumns" @onclick="ColumnHandler">HideColumns</button>
            <button id="HideColumnsByField" @onclick="ColumnFieldHandler">HideColumnsByField</button>
            <SfGrid @ref="grid" DataSource="@Orders">
             ........
            </SfGrid>
            @code{
               SfGrid<Order> grid;
               private async Task ColumnHandler()
               {
                    var columns = new List<string>() { "Freight", "Ship Country" };
                    await grid.HideColumnsAsync(columns.ToArray());
               }
               private async Task ColumnFieldHandler()
               {
                    var columns = new List<string>() { "Freight", "ShipCountry" };
                    await grid.HideColumnsAsync(columns.ToArray(),"Field");   //pass second param as "Field" to hide using field name.
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.HideColumns(System.String,System.String)">
            <summary>
            Hide a columns by its column name.
            </summary>
            <param name="columnName">Specifies the column names.</param>
            <param name="hideBy">Specifies the column getting criteria.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.HideColumnAsync(System.String,System.String)">
            <summary>
            Hides a column in the grid by its <see cref="P:Syncfusion.Blazor.Grids.GridColumn.Field"/> or <see cref="P:Syncfusion.Blazor.Grids.GridColumn.HeaderText"/>.
            </summary>
            <param name="columnName">The name of the column to hide.</param>
            <param name="hideBy">Specifies whether the column name is hide by its <c>Field</c> or <c>HeaderText</c>. Default value is <c>HeaderText</c>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation of hiding the specified column in the grid</returns>
            <remarks>
            You can dynamically hide showing columns in the grid.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button id="HideColumn" @onclick="ColumnHandler">HideColumn</button>
            <button id="HideColumnByField" @onclick="ColumnFieldHandler">HideColumnByField</button>
            <SfGrid @ref="grid" DataSource="@Orders">
             ........
            </SfGrid>
            @code{
               SfGrid<Order> grid;
               private async Task ColumnHandler()
               {
                    await grid.HideColumnAsync("Ship Country");
               }
               private async Task ColumnFieldHandler()
               {
                    await grid.HideColumnAsync("ShipCountry","Field");   //pass second param as "Field" to hide using field name.
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.ShowSpinner">
            <summary>
            By default, grid shows the spinner for all its actions. You can use this method to show spinner at your needed time.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.ShowSpinnerAsync">
            <summary>
            Shows a spinner on the grid.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <remarks>
            By default, the grid shows the spinner for all its actions. You can use <see cref="M:Syncfusion.Blazor.Grids.SfGrid`1.ShowSpinnerAsync"/> method to show the spinner at your desired time.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button id="ShowSpinner" @onclick="ShowSpinner">ShowSpinner</button>
            <SfGrid @ref="grid" DataSource="@Orders">
             ........
            </SfGrid>
            @code{
               SfGrid<Order> grid;
               private async Task ShowSpinner()
               {
                    await grid.ShowSpinnerAsync();
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.SortColumn(System.String,Syncfusion.Blazor.Grids.SortDirection,System.Nullable{System.Boolean})">
            <summary>
            Sorts a column with the given options.
            </summary>
            <param name="columnName">Specifies the sort column name.</param>
            <param name="direction">Specifies the sort direction.</param>
            <param name="isMultiSort">Specifies whether its multi-sorting.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.SortColumnAsync(System.String,Syncfusion.Blazor.Grids.SortDirection,System.Nullable{System.Boolean})">
            <summary>
            Sorts a column with the given options.
            </summary>
            <param name="columnName">The field name of the column to sort.</param>
            <param name="direction">The direction of the sort which is <see cref="F:Syncfusion.Blazor.Grids.SortDirection.Ascending"/> to sort in ascending order, or <see cref="F:Syncfusion.Blazor.Grids.SortDirection.Descending"/> to sort in descending order.</param>
            <param name="isMultiSort">Specifies whether it is a multi-sorting operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation of sorting the column.</returns>
            <remarks>
            This method will only sort the column if the <see cref="P:Syncfusion.Blazor.Grids.SfGrid`1.AllowSorting"/> is set to <c>true</c>.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button id="SortColumn" @onclick="SortHandler">SortColumn</button>
            <SfGrid @ref="grid" AllowSorting="true" DataSource="@Orders">
             ........
            </SfGrid>
            @code{
               SfGrid<Order> grid;
               private async Task SortHandler()
               {
                    await grid.SortColumnAsync("CustomerID", SortDirection.Descending);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.SortColumns(System.Collections.Generic.List{Syncfusion.Blazor.Grids.SortColumn},System.Boolean)">
            <summary>
            Clears previous Sorted Columns and Sorts a list of columns with the given options.
            </summary>
            <param name="columns">Specifies the columns to be sorted.</param>
            <param name="clearPreviousSort">Specifies whether to clear previous sort.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.SortColumnsAsync(System.Collections.Generic.List{Syncfusion.Blazor.Grids.SortColumn},System.Boolean)">
            <summary>
            Clears the previous sorted columns and sorts a list of columns with the given options.
            </summary>
            <param name="columns">A list of the columns to be sorted.</param>
            <param name="clearPreviousSort">A boolean value that specifies whether to clear the previous sort.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation of sorting the columns.</returns>
            <remarks>
            This method will only sort the columns if the <see cref="P:Syncfusion.Blazor.Grids.SfGrid`1.AllowSorting"/> is set to <c>true</c>.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button id="SortColumns" @onclick="SortHandler">SortColumns</button>
            <SfGrid @ref="grid" AllowSorting="true" DataSource="@Orders">
             ........
            </SfGrid>
            @code{
               SfGrid<Order> grid;
               public List<SortColumn> sortColumns { get; set; } = new List<SortColumn>();
               private async Task SortHandler()
               {
                    sortColumns.Add(new() { Field = nameof(Order.Freight), Direction = SortDirection.Descending });
                    sortColumns.Add(new() { Field = nameof(Order.ShipCountry), Direction = SortDirection.Ascending});
                    await grid.SortColumnsAsync(sortColumns,true);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.SortColumns(System.Collections.Generic.List{Syncfusion.Blazor.Grids.SortColumn})">
            <summary>
            Sorts a list of columns with the given options.
            </summary>
            <param name="columns">Specifies the columns to be sorted.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.SortColumnsAsync(System.Collections.Generic.List{Syncfusion.Blazor.Grids.SortColumn})">
            <summary>
            Sorts a list of columns with the given options.
            </summary>
            <param name="columns">A list of the columns to be sorted.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation of sorting the column.</returns>
            <remarks>
            This method will only sort the column if the <see cref="P:Syncfusion.Blazor.Grids.SfGrid`1.AllowSorting"/> is set to <c>true</c>.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button id="SortColumns" @onclick="SortHandler">SortColumns</button>
            <SfGrid @ref="grid" AllowSorting="true" DataSource="@Orders">
             ........
            </SfGrid>
            @code{
               SfGrid<Order> grid;
               public List<SortColumn> sortColumns { get; set; } = new List<SortColumn>();
               private async Task SortHandler()
               {
                    sortColumns.Add(new() { Field = nameof(Order.Freight), Direction = SortDirection.Descending });
                    sortColumns.Add(new() { Field = nameof(Order.ShipCountry), Direction = SortDirection.Ascending});
                    await grid.SortColumnsAsync(sortColumns);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.StartEdit">
            <summary>
            Starts edit the selected row. At least one row must be selected before invoking this method.
            EditSettings.AllowEditing should be true.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.StartEditAsync">
            <summary>
            Starts editing of the currently selected row in the grid.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <remarks>
            This method can only be invoked if the <see cref="P:Syncfusion.Blazor.Grids.GridEditSettings.AllowEditing"/> is set to true and the <see cref="P:Syncfusion.Blazor.Grids.GridEditSettings.Mode"/> is not set to <see cref="F:Syncfusion.Blazor.Grids.EditMode.Batch"/>. 
            At least one row must be selected before invoking this method. If no rows are selected, an alert message is displayed.  
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button id="BeginEdit" @onclick="EditHandler">BeginEdit</button>
            <SfGrid @ref="grid" DataSource="@Orders">
            <GridEditSettings AllowEditing="true"/>
             ........
            </SfGrid>
            @code{
               SfGrid<Order> grid;
               private async Task EditHandler()
               {
                    await grid.StartEditAsync();  
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.UngroupColumn(System.String)">
            <summary>
            Ungroups a column by column name.
            </summary>
            <param name="columnName">Specifies the ungroup column name.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.UngroupColumnAsync(System.String)">
            <summary>
            Ungroups a previously grouped column by column name.
            </summary>
            <param name="columnName">The name of the column to ungroup.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous ungrouping operation.</returns>
            <remarks>
            If the specified <c>columnName</c> is not currently grouped, this method will not do anything.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button id="UngroupColumn" @onclick="UnGrouping">UngroupColumn</button>
            <SfGrid @ref="grid" AllowGrouping="true" DataSource="@Orders">
             ........
            </SfGrid>
            @code{
               SfGrid<Order> grid;
               private async Task UnGrouping()
               {
                    await grid.UngroupColumnAsync("ShipCountry");  
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.UpdateCell(System.Int32,System.String,System.Object)">
            <summary>
            To update the specified cell by given value without changing into edited state.
            </summary>
            <param name="rowIndex">Specifies the row index.</param>
            <param name="value">Specifies the new value.</param>
            <param name="field">Specifies the column name.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.UpdateCellAsync(System.Int32,System.String,System.Object)">
            <summary>
            Updates the specified cell with the given value without changing it into edited state.
            </summary>
            <param name="rowIndex">The index of the row containing the cell to update.</param>
            <param name="field">The name of the column containing the cell to update.</param>
            <param name="value">The new value for the cell.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>representing the cell updation operation.</returns>
            <remarks>
            This method will only update the cell if the <see cref="P:Syncfusion.Blazor.Grids.GridEditSettings.Mode"/> is set as <see cref= "F:Syncfusion.Blazor.Grids.EditMode.Batch"/>
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button id="UpdateCell" @onclick="CellHandler">UpdateCell</button>
            <SfGrid @ref="grid" DataSource="@Orders">
            <GridEditSettings  Mode="EditMode.Batch"></GridEditSettings>
             ........
            </SfGrid>
            @code{
               SfGrid<Order> grid;
               private async Task CellHandler()
               {
                    await grid.UpdateCellAsync(1, "Freight", 25.6);  
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.UpdateExternalMessage(System.String)">
            <summary>
            Defines the text of external message.
            </summary>
            <param name="message">Specifies the externam message.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.UpdateExternalMessageAsync(System.String)">
            <summary>
            Defines the text of external message.
            </summary>
            <param name="message">Specifies the externam message.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.UpdateRow(System.Int32,`0)">
            <summary>
            To update the specified row by given values without changing into edited state.
            </summary>
            <param name="data">Specifies the updated data.</param>
            <param name="index">Specifies the row index.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <remarks>The given updated data will replaces the target record completely.
            Property value comparison will not be performed to see changed values.</remarks>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.UpdateRowAsync(System.Int32,`0)">
            <summary>
            Updates the specified row by given values without changing into an edited state.
            </summary>
            <param name="index">The index of the row to be updated.</param>
            <param name="data">The updated data for the specified row.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous updation operation.</returns>
            <remarks>The given updated data will replace the target record completely. 
            Property value comparison will not be performed to see changed values.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button id="UpdateRow" @onclick="RowHandler">UpdateRow</button>
            <SfGrid @ref="grid" DataSource="@Orders">
             ........
            </SfGrid>
            @code{
               SfGrid<Order> grid;
               private async Task RowHandler()
               {
                    var data = new Order() { OrderID=1007, CustomerID = "BOLID", OrderDate = new DateTime(1995, 05, 15), Freight = 25.7 * 2 };
                    await grid.UpdateRowAsync(6, data);  
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.DetailExpandCollapseRow(`0)">
            <summary>
            Expands/Collapses specific detail row of the Grid.
            </summary>
            <param name="data">Sepcifies the row data by which its detail row will be expanded/collapsed.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <remarks>The given data will be compared against the <see cref="P:Syncfusion.Blazor.Grids.SfGrid`1.CurrentViewData"/> and
            the matched row will be expanded/collapsed. If input data and current view didn`t have same reference then
            use <see cref="M:Syncfusion.Blazor.Grids.SfGrid`1.DetailExpandCollapseRow(System.String,System.Object)"/> method.</remarks>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.ExpandCollapseDetailRowAsync(`0)">
            <summary>
            Expands or collapses the detail row of the Grid with the specified row data.
            </summary>
            <param name="data">The data of the row by which the detail row will be expanded or collapsed.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous expand or collapse operation.</returns>
            <remarks>
            The given <c>data</c> will be compared against the <see cref="P:Syncfusion.Blazor.Grids.SfGrid`1.CurrentViewData"/> and if a matching row is found, its detail row will be expanded or collapsed. 
            If the input data and current view data do not have the same reference, use the <see cref="M:Syncfusion.Blazor.Grids.SfGrid`1.DetailExpandCollapseRow(System.String,System.Object)"/> method.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button id="ExpandOrCollapse" @onclick="RowHandler">ExpandOrCollapse</button>
            <SfGrid @ref="grid" DataSource="@Orders">
             ........
            </SfGrid>
            @code{
               SfGrid<Order> grid;
               private async Task RowHandler()
               {
                    var data = new EmployeeData() { EmployeeID = 1, FirstName = "Nancy", LastName = "Davolio", Title = "Sales Representative", HireDate = new DateTime(1995, 05, 15), City = "Seattle", Country = "USA" };
                    await grid.ExpandCollapseDetailRowAsync(data);  
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.DetailExpandCollapseRow(System.String,System.Object)">
            <summary>
            Expands/Collapses specific detail row of the Grid.
            </summary>
            <param name="field">Sepcifies the field name.</param>
            <param name="value">Sepcifies the row data value by which its detail row will be expanded/collapsed.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.ExpandCollapseDetailRowAsync(System.String,System.Object)">
            <summary>
            Expands or collapses the detail row of the Grid with the specified field name and row data value..
            </summary>
            <param name="fieldName">The name of the column by which the detail row will be expanded or collapsed, identified by its <see cref="P:Syncfusion.Blazor.Grids.GridColumn.Field"/> property.</param>
            <param name="value">The value of the row by which the detail row will be expanded or collapsed</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/>representing the asynchronous expand or collapse operation.</returns>
            <remarks>
            The specified row data <c>value</c> will be compared against the <see cref="P:Syncfusion.Blazor.Grids.SfGrid`1.CurrentViewData"/> and
            if a matching row is found, its detail row will be expanded or collapsed. 
            </remarks>
            <example>
            <code>
            <![CDATA[
            <button id="ExpandOrCollapse" @onclick="RowHandler">ExpandOrCollapse</button>
            <SfGrid @ref="grid" DataSource="@Orders">
             ........
            </SfGrid>
            @code{
               SfGrid<Order> grid;
               private async Task RowHandler()
               {
                    await grid.ExpandCollapseDetailRowAsync("FirstName", "Nancy");  
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.DetailExpandAll">
            <summary>
            Expands all the detail rows of the Grid.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.ExpandAllDetailRowAsync">
            <summary>
            Expands all the detail rows of the Grid including those are currently collapsed.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/>representing the asynchronous expand operation.</returns>
            <remarks>
            You can use this method in the <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.DataBound"/> event to expand all the rows at initial rendering.
            </remarks>
            <example>
            <code><![CDATA[
            <button id="Expand" @onclick="Expand">ExpandAll</button>
            <SfGrid @ref="grid" DataSource="@Orders">
             ........
            </SfGrid>
            @code{
               SfGrid<Order> grid;
               private async Task Expand()
               {
                   await grid.ExpandAllDetailRowAsync();
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.DetailCollapseAll">
            <summary>
            Collapses all the detail rows of the Grid.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.CollapseAllDetailRowAsync">
            <summary>
            Collapses all the detail rows of the Grid including those are currently expanded.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/>representing the asynchronous collapse operation.</returns>
            <example>
            <code><![CDATA[
            <button id="Collapse" @onclick="Collapse">CollapseAll</button>
            <SfGrid @ref="grid" DataSource="@Orders">
             ........
            </SfGrid>
            @code{
               SfGrid<Order> grid;
               private async Task Collapse()
               {
                   await grid.CollapseAllDetailRowAsync();
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.Search(System.String)">
            <summary>
            Searches Grid records using the given key.
            </summary>
            <param name="searchString">Specifies the search key.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <remarks>Passing empty key or null will clear the searching.</remarks>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.SearchAsync(System.String)">
            <summary>
            Searches the Grid records using the given search key.
            </summary>
            <param name="searchString">Specifies the search key to be used for searching.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous searching operation.</returns>
            <remarks>Passing an empty search key or null will clear the searching.</remarks>
            <example>
            <code><![CDATA[
            <button id="Search" @onclick="Searching">Search</button>
            <button id="ClearSearch" @onclick="ClearSearching">ClearSearch</button>
            <SfGrid @ref="Grid" DataSource="@Orders">
             ........
            </SfGrid>
            @code{
               SfGrid<Order> Grid;
               private async Task Searching()
               {
                   await Grid.SearchAsync("ALFKI");
               }
               private async Task ClearSearching()
               {
                   await Grid.SearchAsync(""); // pass empty string or null to clear the searching
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.Refresh">
            <summary>
            Refreshes the grid header and content.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous refresh operation.</returns>
            <remarks>
            This method can be used to refresh the Grid header and content after any external changes or updates.
            </remarks>
            <example>
            <code><![CDATA[
            <button id="Refresh" @onclick="Refresh">Refresh</button>
            <SfGrid @ref="Grid" DataSource="@Orders">
             ........
            </SfGrid>
            @code{
               SfGrid<Order> Grid;
               private async Task Refresh()
               {
                   await Grid.Refresh();
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.FocusAsync">
            <summary>
            Focuses the grid element.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous focus operation.</returns>
            <remarks>
            This method focuses on the grid element. If the grid element is not rendered yet, the method does nothing.
            </remarks>
            <example>
            <code><![CDATA[
            <button id="Focus" @onclick="Focus">Focus</button>
            <SfGrid @ref="grid" DataSource="@Orders">
             ........
            </SfGrid>
            @code{
               SfGrid<Order> grid;
               private async Task Focus()
               {
                   await grid.FocusAsync();
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.UpdatePageSizeAsync(System.Int32,System.Int32)">
            <summary>
            Updates the <c>PageSize</c> dynamically with the given height and refreshes the virtualization enabled grid based on the updated page size.
            </summary>
            <param name="height">The height of the parent or grid container.</param>
            <param name="rowHeight">The height of the grid row used to calculate the page size.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous upadte pagsize operation.</returns>
            <remarks>
            The <see cref="P:Syncfusion.Blazor.Grids.SfGrid`1.EnableVirtualization"/> must be set to <c>true</c> to refresh the grid content based on the given height.
            </remarks>
            <example>
            <code><![CDATA[
            <button id="UpdatePageSize" @onclick="UpdatePageSize">UpdatePageSize</button>
            <SfGrid @ref="grid" DataSource="@Orders">
             ........
            </SfGrid>
            @code{
               SfGrid<Order> grid;
               private async Task UpdatePageSize()
               {
                   await grid.UpdatePageSizeAsync(600,30);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.RefreshVirtualGrid(System.String)">
            <summary>
            Update the <c>Width</c> dynamically with given width and refresh the column virtualization enabled grid based on that updated width of the column.
            </summary>
            <param name="width">Specifies the parent/grid container width.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/></returns>
            <remarks><see cref="P:Syncfusion.Blazor.Grids.SfGrid`1.EnableColumnVirtualization"/>must be true to refresh the grid content based on the given width.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.RefreshScrollLeftPosition">
            <summary>
            Update the <c>scrollLeft</c> value dynamically and refresh the column virtualization enabled grid based on that updated scrollleft value.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <remarks>
            This method is mainly used for while resizing a splitter pane when the grid's width is set to <c>auto</c> and <see cref="P:Syncfusion.Blazor.Grids.SfGrid`1.EnableColumnVirtualization"/> is set as true, empty space issue occurs. To prevent this issue, this method updates the scroll left value and refreshes the grid.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.ScrollIntoViewAsync(System.Int32,System.Int32,System.Int32)">
            <summary>
            Scroll to specific row or column into view based on the row and column indexes.
            </summary>
            <param name="columnIndex">The index of the column to be scrolled.</param>
            <param name="rowIndex">The index of the row to be scrolled.</param>
            <param name="rowHeight">The height of the row that specfies the row <c>offsetHeight</c> and used to calculate the scroll offset values. This parameter is applicable only when row virtualization enabled.</param>
            <remarks>
            To scroll the grid content horizontally based on the specified column index, set <see cref="P:Syncfusion.Blazor.Grids.SfGrid`1.EnableColumnVirtualization"/> property in the Blazor Grid.
            To scroll the grid content vertically based on the specified row index, set <see cref="P:Syncfusion.Blazor.Grids.SfGrid`1.EnableVirtualization"/> property in the Blazor Grid. 
            </remarks>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous scroll operation.</returns>
            <example>
            <code><![CDATA[
            <button id="ScrollIntoView" @onclick="Scroll">ScrollIntoView</button>
            <SfGrid @ref="grid" DataSource="@Orders">
             ........
            </SfGrid>
            @code{
               SfGrid<Order> grid;
               private async Task Scroll()
               {
                   await grid.ScrollIntoViewAsync(2,3);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.GetCellValueByIndexAsync(System.Int32,System.Int32)">
             <summary>
             Gets the value of a cell in the grid based on row and column indices.
             </summary>
             <param name="rowIndex">The index of the row from which to retrieve the cell value.</param>
             <param name="columnIndex">The index of the column from which to retrieve the cell value.</param>
             <returns>
             A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation that returns the cell value as an object for the specified row and column indices.
             </returns>
             <remarks>
             This method retrieves the formatted value of a cell from the current view data.
             When performing grid actions such as sorting, filtering, and grouping, this method returns the current visible data based on the provided indexes
             When binding a Foreignkey column in the grid, this method returns the Foreignkey value and not the Foreignkey field.
             The column index represents the index of the column in the Grid UI, not the column order defined in the columns.
             If the provided row or column index is not valid, null is returned.
             </remarks>
            <example>
            <code>
            <![CDATA[ 
            <button @onclick="GetCellValue">GetCellValue</button>
            <SfGrid @ref="grid" DataSource="@Orders">
             ........
            </SfGrid>
            @code{
                  SfGrid<Order> grid;        
                  private async Task GetCellValue()        
                  {        
                     await grid.GetCellValueByIndexAsync(2,3);    
                  }      
                }        
            ]]>   
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SfGrid`1.Syncfusion#Blazor#Grids#IGrid#GridTemplates">
            <summary>
            Specifies the grid templates.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SfGrid`1.ID">
            <summary>
            Gets or sets the unique ID of the grid element.
            </summary>
            <value>
            Accepts the string value.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SfGrid`1.ChildContent">
            <summary>
            Defines the child content.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SfGrid`1.Aggregates">
            <summary>
            Gets or sets the list of <see cref="T:Syncfusion.Blazor.Grids.GridAggregate"/> instances that control the rendering of aggregate rows displayed in the grid content.
            </summary>
            <value>
            A list of <see cref="T:Syncfusion.Blazor.Grids.GridAggregate"/> instances.
            </value>
            <remarks>
            The <see cref="T:Syncfusion.Blazor.Grids.GridAggregates"/> class provides various properties to customize aggregate operations.
            You can use the <see cref="T:Syncfusion.Blazor.Grids.GridAggregate"/> class to configure specific aggregate operations for individual columns in the grid.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SfGrid`1.AllowExcelExport">
            <summary>
            Gets or sets a value indicating whether the user is allowed to export the grid to an Excel file.
            </summary>
            <value>
            <c>true</c>, User will export the grid to an Excel file.
            The default value is <c>false</c>
            </value>
            <remarks>
            To perform excel export, bind <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.OnToolbarClick"/> event and
            invoke <see cref="M:Syncfusion.Blazor.Grids.SfGrid`1.ExcelExport(Syncfusion.Blazor.Grids.ExcelExportProperties,System.Nullable{System.Boolean},System.Object,System.Nullable{System.Boolean})"/> method
            in its toolbar item click handler.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SfGrid`1.AllowFiltering">
            <summary>
            Gets or sets a value indicating whether to display the filter bar for all columns in the Syncfusion Blazor DataGrid.
            </summary>
            <value>
            <c>true</c>, Filter bar will be displayed for all columns and allows the user to filter grid records with required criteria.
            The default value is <c>false</c>
            </value>
            <remarks>
            Filter bar is disabled for template and command column, which means the columns is not having Field property.
            Filter type can be changed from <c>Filterbar</c> using the <see cref="P:Syncfusion.Blazor.Grids.GridFilterSettings.Type"/> property.
            Filter can be disabled for a particular column by using the <see cref="P:Syncfusion.Blazor.Grids.GridColumn.AllowFiltering"/> property.
            See <see cref="T:Syncfusion.Blazor.Grids.FilterType"/> for more details.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SfGrid`1.AllowGrouping">
            <summary>
            Gets or sets a value that specifies whether the user can dynamically group or ungroup columns.
            </summary>
            <value>
            <c>true</c>, The user can group columns by drag and drop columns from the column header to the group drop area.
            The default value is <c>false</c>
            </value>
            <remarks>
            To disable grouping for a particular column, set the <see cref="P:Syncfusion.Blazor.Grids.GridColumn.AllowGrouping"/> property to false for that column.
            To programmatically group or ungroup columns, use the <see cref="M:Syncfusion.Blazor.Grids.SfGrid`1.GroupColumn(System.String)"/> and <see cref="M:Syncfusion.Blazor.Grids.SfGrid`1.UngroupColumn(System.String)"/> methods.
            Grouping can be further customized using the <see cref="T:Syncfusion.Blazor.Grids.GridGroupSettings"/> component.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SfGrid`1.AllowMultiSorting">
            <summary>
            Gets or sets a value that specifies whether to allow the user to sort multiple columns in the grid.
            </summary>
            <value>
            <c>true</c>, the user can do the multi sort by clicking on the column header while holding the Shift or Ctrl key.
            The default value is <c>true</c>.
            </value>
            <remarks>
            Note that <see cref="P:Syncfusion.Blazor.Grids.SfGrid`1.AllowSorting"/> must be set to true in order to use this property.
            Sorting can be further configured using the <see cref="T:Syncfusion.Blazor.Grids.GridSortSettings"/> component.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SfGrid`1.AllowPaging">
            <summary>
            Gets or sets a value that indicates whether paging is enabled for the <see cref="T:Syncfusion.Blazor.Grids.SfGrid`1"/> component.
            </summary>
            <value>
            <c>true</c>, a pager is rendered at the footer of the grid. The pager can be used to handle page navigation in the grid.
            The default value is <c>false</c>
            </value>
            <remarks>
            Paging can be further configured using <see cref="T:Syncfusion.Blazor.Grids.GridPageSettings"/> component.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SfGrid`1.AllowPdfExport">
            <summary>
            Gets or sets a value specifies whether the grid allow users to export grid to PDF document.
            </summary>
            <value>
            <c>true</c>, The user can export the grid to a PDF document. The default value is <c>false</c>.
            </value>
            <remarks>
            To perform pdf export, bind the <see cref="P:Syncfusion.Blazor.Grids.GridEvents`1.OnToolbarClick"/> event and
            In the toolbar item click handler, invoke the <see cref="M:Syncfusion.Blazor.Grids.SfGrid`1.PdfExport(Syncfusion.Blazor.Grids.PdfExportProperties,System.Nullable{System.Boolean},System.Object,System.Nullable{System.Boolean})"/> method with required export properties.
            The export properties can be further customized using the <see cref="T:Syncfusion.Blazor.Grids.PdfExportProperties"/> class.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SfGrid`1.AllowReordering">
            <summary>
            Gets or sets a value indicating whether users can reorder the columns in the grid by dragging and dropping them.
            </summary>
            <value>
            <c>true</c>, if the grid columns can be reordered. The default value is <c>false</c>
            </value>
            <remarks>
            If Grid is rendered with stacked headers, reordering is allowed only at the same level as the column headers.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SfGrid`1.AllowResizing">
            <summary>
            Gets or sets a value that indicates whether the user is allowed to resize the columns of the Grid.
            </summary>
            <value>
            <c>true</c>, Grid columns can be resized by dragging the right edge of the column header.
            The default value is <c>false</c>.
            </value>
            <remarks>
            Resizing can be disabled for a particular column by setting the <see cref="P:Syncfusion.Blazor.Grids.GridColumn.AllowResizing"/> property to false.
            In RTL mode, Grid columns can be resized by clicking and dragging the left edge of the header cell.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SfGrid`1.AllowRowDragAndDrop">
            <summary>
            Gets or sets a value that indicates whether to allow the user to drag and drop grid rows.
            </summary>
            <value>
            <c>true</c>, Users can drag and drop grid rows at another or within grid. The default value is <c>false</c>.
            </value>
            <remarks>
            To drag and drop rows between grids or to another component, you should provide the ID of the target grid or component to the <see cref="P:Syncfusion.Blazor.Grids.GridRowDropSettings.TargetID"/> property.
            Selection feature must be enabled for row drag and drop within grids.
            Multiple rows can be selected by clicking and dragging inside the grid. For multiple row selection, the <see cref="P:Syncfusion.Blazor.Grids.GridSelectionSettings.Type"/> property must be set to multiple.
            For performing row drag and drop action on the data grid, any one of the columns should be defined as a primary key using the <see cref="P:Syncfusion.Blazor.Grids.GridColumn.IsPrimaryKey"/>  property
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SfGrid`1.AllowSelection">
            <summary>
            Gets or sets a value that indicates whether the Grid records can be selected by clicking on it.
            </summary>
            <value>
            <c>true</c>, The Grid records can be selected by clicking on it. The default value is <c>true</c>.
            </value>
            <remarks>
            Selection can be further configured using <see cref="T:Syncfusion.Blazor.Grids.GridSelectionSettings"/> component.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SfGrid`1.AllowSorting">
            <summary>
            Gets or sets a value that determines whether the grid records are allowed to sort while clicking on the column header.
            </summary>
            <value>
            <c>true</c>, Grid records can be sorted by clicking on the column header. The default value is <c>false</c>.
            </value>
            <remarks>
            Columns in the DataGrid are sorted in ascending order when clicked. Clicking on an already sorted column will toggle the sort direction between ascending and descending.
            To disable sorting for a particular column, set the <see cref="P:Syncfusion.Blazor.Grids.GridColumn.AllowSorting"/> property to <c>false</c>.
            Sorting can be further configured using <see cref="T:Syncfusion.Blazor.Grids.GridSortSettings"/> component.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SfGrid`1.AllowTextWrap">
            <summary>
            Gets or sets a value that indicates whether the text content in the column cells wraps to the next line when it exceeds the width of the column.
            </summary>
            <value>
            <c>true</c>, If the text content of the column cells will wrap to the next line when it exceeds the width of the column.
            The default value is <c>false</c>.
            </value>
            <remarks>
            When a column width is not specified, the text wrapping of columns will automatically adjust based on the width of the DataGrid.
            To further customize text wrapping for specific columns, use the <see cref="!:Syncfusion.Blazor.Grids.GridColumn.WrapMode"/> property.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SfGrid`1.ClipMode">
            <summary>
            Gets or sets the clip mode to handle content overflow of the Grid cell.
            </summary>
            <value>
            One of the <see cref="P:Syncfusion.Blazor.Grids.SfGrid`1.ClipMode"/> enumeration that specifies the Clip Mode.
            The default value is <see cref="F:Syncfusion.Blazor.Grids.ClipMode.Ellipsis"/> which displays an ellipsis when the content overflows the cell area.
            </value>
            <remarks>
            The <c>ClipMode</c> property can be set to one of the following values:
            <list type="bullet">
            <item>
            <term>Clip</term>
            <description>Truncates the cell content when it overflows the cell area.</description>
            </item>
            <item>
            <term>Ellipsis</term>
            <description>Displays an ellipsis when the cell content overflows its area.</description>
            </item>
            <item>
            <term>EllipsisWithTooltip</term>
            <description>Displays an ellipsis when the cell content overflows its area and displays a tooltip while hovering on the cell.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SfGrid`1.ColumnChooserSettings">
            <summary>
            Gets or sets the <see cref="T:Syncfusion.Blazor.Grids.GridColumnChooserSettings"/> instance that configures the behavior of the column chooser in the grid.
            </summary>
            <value>
            An instance of <see cref="T:Syncfusion.Blazor.Grids.GridColumnChooserSettings"/>.
            </value>
            <remarks> 
            The <see cref="T:Syncfusion.Blazor.Grids.GridColumnChooserSettings"/> class provides various properties to customize column chooser operations, 
            such as enabling or disabling the column chooser, specifying the column chooser button's text, and setting the position of the column chooser dialog.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SfGrid`1.KeySettings">
            <summary>
            Gets or sets instance of <see cref="T:Syncfusion.Blazor.Grids.GridKeySettings"/> which configures the cell movement keys in the grid.
            </summary>
            <value>
            An instance of <see cref="T:Syncfusion.Blazor.Grids.GridKeySettings"/>.
            </value>
            <remarks> 
            <see cref="T:Syncfusion.Blazor.Grids.GridKeySettings"/> class provides various properties to customize key operations. 
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SfGrid`1.ColumnMenuItems">
            <summary>
            Gets or sets the column menu items that define both built-in and custom items.
            </summary>
            <value>
            The available built-in items are:
            <list type="bullet">
            <item>
            <term>AutoFitAll</term>
            <description>Auto fit the size of all columns.</description>
            </item>
            <item>
            <term>AutoFit</term>
            <description>Auto fit the current column.</description>
            </item>
            <item>
            <term>Group</term>
            <description>Group by current column.</description>
            </item>
            <item>
            <term>Ungroup</term>
            <description>Ungroup by current column.</description>
            </item>
            <item>
            <term>SortAscending</term>
            <description>Sort the current column in ascending order.</description>
            </item>
            <item>
            <term>SortDescending</term>
            <description>Sort the current column in descending order.</description>
            </item>
            <item>
            <term>Filter</term>
            <description>Filter options will show based on <c>FilterSettings</c> property like checkbox filter, excel filter, menu filter.</description>
            </item>
            </list>
            </value>
            <remarks>
            To disable column menu for a particular column by defining the <see cref="P:Syncfusion.Blazor.Grids.GridColumn.ShowColumnMenu"/> property as <c>false</c>.
            To customize the default menu items, define the <see cref="P:Syncfusion.Blazor.Grids.SfGrid`1.ColumnMenuItems"/> property with the required items.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SfGrid`1.ColumnQueryMode">
            <summary>
            Gets or sets the column query mode for retrieving data from the data source.
            </summary>
            <value>
            The default value is <see cref="F:Syncfusion.Blazor.Grids.ColumnQueryModeType.All"/>.
            </value>
            <remarks>
            The available options are:
            <list type="bullet">
            <item>
            <term>All</term>
            <description>Retrieves the entire data source.</description>
            </item>
            <item>
            <term>Schema</term>
            <description>Retrieves data for all the defined columns in the grid from the data source.</description>
            </item>
            <item>
            <term>ExcludeHidden</term>
            <description>Retrieves data only for visible columns of the grid from the data source.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SfGrid`1.Columns">
            <summary>
            Defines the schema of the data source for the grid and allows you to add, customize, and remove columns in the grid.
            </summary>
            <value>
            A list of <see cref="T:Syncfusion.Blazor.Grids.GridColumn"/> instances that define the columns in the grid.
            </value>
            <remarks>
            The <see cref="T:Syncfusion.Blazor.Grids.GridColumn"/> class provides various properties to customize the grid columns, such as setting the column header text,
            specifying the data field to bind the column to, and formatting the cell values in the column. If the Columns declaration is empty or undefined,
            the columns are automatically generated from the data source.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SfGrid`1.ContextMenuItems">
            <summary>
            Gets or sets a collection of item to be displayed in the context menu when you right-click on a row or cell in the Grid.
            </summary>
            <value>
            The context menu items can be both built-in and custom. The available built-in items are:
            <list type="bullet">
            <item>
            <term>AutoFitAll</term>
            <description>Autofit the size of all columns width.</description>
            </item>
            <item>
            <term>AutoFit</term>
            <description>Autofit the current column width.</description>
            </item>
            <item>
            <term>Group</term>
            <description>Group by current column.</description>
            </item>
            <item>
            <term>Ungroup</term>
            <description>Ungroup by current column.</description>
            </item>
            <item>
            <term>Edit</term>
            <description>Edit the current record.</description>
            </item>
            <item>
            <term>Delete</term>
            <description>Delete the current record.</description>
            </item>
            <item>
            <term>Save</term>
            <description>Save the edited record.</description>
            </item>
            <item>
            <term>Cancel</term>
            <description>Cancel the edited state.</description>
            </item>
            <item>
            <term>Copy</term>
            <description>Copy the selected records.</description>
            </item>
            <item>
            <term>PdfExport</term>
            <description>Export the grid as PDF format.</description>
            </item>
            <item>
            <term>ExcelExport</term>
            <description>Export the grid as Excel format.</description>
            </item>
            <item>
            <term>CsvExport</term>
            <description>Export the grid as CSV format.</description>
            </item>
            <item>
            <term>SortAscending</term>
            <description>Sort the current column in ascending order.</description>
            </item>
            <item>
            <term>SortDescending</term>
            <description>Sort the current column in descending order.</description>
            </item>
            <item>
            <term>FirstPage</term>
            <description>Go to the first page.</description>
            </item>
            <item>
            <term>PrevPage</term>
            <description>Go to the previous page.</description>
            </item>
            <item>
            <term>LastPage</term>
            <description>Go to the last page.</description>
            </item>
            <item>
            <term>NextPage</term>
            <description>Go to the next page.</description>
            </item>
            </list>
            </value>
            <remarks>
            You can customize the context menu by providing a template for it using the <see cref="!:Syncfusion.Blazor.Grids.GridContextMenuItems"/> component.
            The context menu can also be disabled for specific columns using the <see cref="!:Syncfusion.Blazor.Grids.GridColumn.AllowContextMenu"/> property.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SfGrid`1.CurrentAction">
            <summary>
            Gets or sets the current action details.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SfGrid`1.DataSource">
            <summary>
            Gets or sets the data source for the grid rows.
            </summary>
            <remarks>
            Use this property to set the data source for the grid. This property expects an IEnumerable of TValue, where TValue represents the type of the data object.
            To consume data from a remote service or custom adaptor, use the <see cref="T:Syncfusion.Blazor.Data.SfDataManager"/> component.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SfGrid`1.DataSourceChanged">
            <summary>
            Gets or sets the event that occurs when the data source changes.
            </summary>
            <remarks>
            Use this event to handle changes to the data source in the grid.This event is raised when the data source is updated or changed. 
            The event handler receives an IEnumerable of TValue, where TValue represents the type of the data object.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SfGrid`1.EnableAdaptiveUI">
            <summary>
            Gets or sets a value that indicates whether the Grid is rendered with a full-screen adaptive UI layout for some grid actions, such as filtering, sorting, and CRUD operations.
            </summary>
            <value>
            <c>true</c>, The grid is render adaptive dialogs such that they will fit the full screen to provide a better user experience on smaller screen devices.
            The default value is <c>false</c>.
            </value>
            <remarks>
            For rendering the adaptive UI layout in grid only for mobile devices then need to set the <see cref="P:Syncfusion.Blazor.Grids.SfGrid`1.AdaptiveUIMode"/> property value as "Mobile".
            Also to view the the rows vertically with headers positioned in the same row instead of at the top then need to set the <see cref="P:Syncfusion.Blazor.Grids.SfGrid`1.RowRenderingMode"/> property value as "Vertical".
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SfGrid`1.AdaptiveUIMode">
            <summary>
            Gets or sets the Adaptive mode which used to render Grid component with adaptive UI layout in the specified mode.
            </summary>
            <value>
            One of the <see cref="T:Syncfusion.Blazor.Grids.AdaptiveMode"/> enumeration that specifies the Adaptive Mode. The default value is <see cref="F:Syncfusion.Blazor.Grids.AdaptiveMode.Both"/>.
            </value>
            <remarks>
            The <c>AdaptiveMode</c> property can be set to one of the following values:
            <list type="bullet">
            <item>
            <term>Both</term>
            <description>Renders adaptive layout for both mobile and desktop devices.</description>
            </item>
            <item>
            <term>Mobile</term>
            <description>Renders adaptive layout only for smaller devices.</description>
            </item>
            <item>
            <term>Desktop</term>
            <description>Renders adaptive layout only for desktop devices.</description>
            </item>
            </list>
            When set to <c>true</c> the Grid is rendered with a full-screen adaptive UI layout for some grid actions, such as filtering, sorting, and CRUD operations.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SfGrid`1.EditSettings">
            <summary>
            Gets or sets the instance of <see cref="T:Syncfusion.Blazor.Grids.GridEditSettings"/> that configures the editing behavior of the grid.
            </summary>
            <value>
            An instance of <see cref="T:Syncfusion.Blazor.Grids.GridEditSettings"/>.
            </value>
            <remarks>
             Customize the editing behavior of grid by <see cref="T:Syncfusion.Blazor.Grids.GridEditSettings"/> class provides various properties to configure editing operations, such as allowing or disallowing editing for specific columns, enabling inline or dialog editing, and setting validation rules for edited data.  
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SfGrid`1.EnableAltRow">
            <summary>
            Gets or sets a value indicating whether the grid will render with alternative row styling for improved readability.
            </summary>
            <value>
            <c>false</c> the grid rows are rendered without any alternative row styling.
            The default value is <c>true</c>.
            </value>
            <remarks>
            When set to <c>true</c>, the grid will apply the <c>e-altrow</c> CSS class to alternative tr element of grid rows. This can be useful for styling alternating rows differently for improved readability.
            The alternative row styling is customized by simply overriding the <c>e-altrow</c> class in application end.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SfGrid`1.EnableAutoFill">
            <summary>
            Gets or sets a value indicating whether the AutoFill feature is enabled, which allows copying and pasting data from selected cells to other cells by dragging the AutoFill icon. 
            </summary>
            <value>
            <c>true</c>, The auto fill icon will be displayed on cell selection for copying and pasting the data to other cells while dragging the icon.
            The default value is <c>false</c>.
            </value>
            <remarks>
            To use the AutoFill feature, the <see cref="P:Syncfusion.Blazor.Grids.GridSelectionSettings.Mode"/> property must be set to "Cell",
            the <see cref="P:Syncfusion.Blazor.Grids.GridSelectionSettings.CellSelectionMode"/> property must be set to "Box", and <see cref="P:Syncfusion.Blazor.Grids.GridEditSettings.Mode"/> property must be set as "Batch".
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SfGrid`1.EnableColumnVirtualization">
             <summary>
            Gets or sets a value indicating whether the Grid will render with the columns which are visible within the view-port and load the subsequent columns on horizontal scrolling.
             </summary>
             <value>
             <c>true</c>, It helps to load large amount of columns in Grid by rendering only the columns that are visible within the view-port and loading subsequent columns on horizontal scrolling.
             The default value is <c>false</c>.
             </value>
             <remarks>
             <see cref="P:Syncfusion.Blazor.Grids.GridColumn.Width"/> is required for column virtualization. If <see cref="P:Syncfusion.Blazor.Grids.GridColumn.Width"/> is not defined for any of the column then by default 200px is considered for that column.
             The collapsed or expanded state will persist only for local dataSource while scrolling.
             </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SfGrid`1.EnableHeaderFocus">
            <summary>
            Gets or sets a value indicating whether the first visible header cell will be focused when focus moves to the grid.
            </summary>
            <value>
            <c>true</c>, The header element will be focused when focus moves to grid.
            The default value is <c>false</c>.
            </value>
            <remarks>
            <para>
            This property is marked as deprecated, since the first visible header cell will get focused by default.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SfGrid`1.EnableVirtualMaskRow">
            <summary>
            Gets or sets a value indicating whether to show the masked row or placeholder until the data's are loaded in the grid during virtualization.
            </summary>
            <value>
            <c>true</c> the DataGrid will display a masked row when the data is not readily available to show in the grid.
            The default value is <c>false</c>.
            </value>
            <remarks>
            It is must to set <c>EnableVirtualization</c> or <c>EnableColumnVirtualization</c> property value as true to use this mask row feature.
            The Virtual mask row is supported for column virtualization too.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SfGrid`1.OverscanCount">
            <summary>
            Gets or sets the number of additional items to be render in the DOM before and after the visible items (based on <see cref="P:Syncfusion.Blazor.Grids.GridPageSettings.PageSize"/>) during virtual scrolling and initial rendering.
            </summary>
            <value>
            The number of additional items to pre-render before and after the visible items (based on <c>PageSize</c>).
            The default value is 0, indicating no overscan.
            </value>
            <remarks>
            Adjusting this property can enhance scrolling performance and optimize rendering, especially for large datasets in a virtualized grid.
            By pre-rendering a buffer of extra items that are not yet visible, the component minimizes the need for frequent re-rendering while scrolling.
            This optimization results in a smoother and more responsive user experience.
            If the <c>PageSize</c> is not explicitly provided, it will be calculated based on the viewport height to ensure an optimal user experience.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SfGrid`1.EnableHover">
            <summary>
            Gets or sets a value indicating whether the hovering effect is enabled while hover on the grid rows.
            </summary>
            <value>
            <c>false</c>, the rows are not highlighted while hover on the grid rows.
            The default value is <c>true</c>.
            </value>
            <remarks>
            When it is set to true, the CSS class "e-hover" will be applied to the row when it is hovered over. This can be used to style the row differently and provide visual feedback to the user.
            The row hovering style is customized by simply overriding the "e-hover" class in the application end.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SfGrid`1.EnablePersistence">
            <summary>
            Gets or sets a value indicates whether enables or disables the persistence of component's state while page reloads.
            </summary>
            <value>
            <c>true</c>, The grid state such as column order, column width, sort information etc. is stored in the <c>window.localStorage</c> when the component is disposed.
            The default value is <c>false</c>.
            </value>
            <remarks>
            If the <see cref="P:Syncfusion.Blazor.Grids.SfGrid`1.ID"/> property is set for the Grid, then the state will be persisted based on this ID. Otherwise, it will use a default ID.
            Users can also store grid state in a database instead of the browser's local storage by using the <see cref="M:Syncfusion.Blazor.Grids.SfGrid`1.GetPersistData"/> method.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SfGrid`1.EnableRtl">
            <summary>
            Gets or sets a value indicating whether to render the component in right to left (RTL) direction.
            </summary>
            <value>
            <c>true</c>, the component should rendered in RTL direction.
            The default value is <c>false</c>.
            </value>
            <remarks>
            When the <c>true</c> value is set, the component content will be aligned to the right of the page and the sorting, filtering, and paging icons will be rendered in the right-to-left (RTL) direction.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SfGrid`1.EnableStickyHeader">
            <summary>
            Gets or sets a value that indicates whether the grid header should remain fixed while scrolling the grid content vertically.
            </summary>
            <value>
            <c>true</c> to make the column headers sticky while scrolling the grid content vertically.
            The default value is <c>false</c>.
            </value>
            <remarks>
            It is suitable only for single headers.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SfGrid`1.EnableVirtualization">
            <summary>
            Gets or sets a value indicating whether virtualization is enabled in the DataGrid which means loads the data in on-demand basis while scrolling the grid vertically.
            </summary>
            <value>
            <c>true</c> to enable virtualization in the DataGrid. The default value is <c>false</c>.
            </value>
            <remarks>
            When set to <c>true</c>, virtualization is enabled, and the DataGrid will load only the rows that are currently visible in the viewport, which can significantly improve the performance and responsiveness of the DataGrid when dealing with large datasets. 
            Subsequent rows will be loaded dynamically as the user scrolls vertically through the DataGrid. 
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SfGrid`1.FilterSettings">
            <summary>
            Gets or sets instance of <see cref="T:Syncfusion.Blazor.Grids.GridFilterSettings"/> which configures the filtering behavior of grid.
            </summary>
            <value>
            An instance of <see cref="T:Syncfusion.Blazor.Grids.GridFilterSettings"/>.
            </value>
            <remarks> 
            <see cref="T:Syncfusion.Blazor.Grids.GridFilterSettings"/> class provides 
            various properties to customize filtering operations. 
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SfGrid`1.FrozenColumns">
             <summary>
             Gets or sets the number of columns to be frozen in the DataGrid.
             </summary>
             <value>
             The number of columns that need to be frozen in the DataGrid. The default value is 0.
             </value>
             <remarks>
             Use this property to freeze a specific number of columns in the DataGrid, so that they remain fixed on the left side of the grid when the user scrolls horizontally through the grid. Note that the frozen columns must be within the view port of the DataGrid in order to be visible.
             For example, to freeze the first two columns of the grid, you can set the <c>FrozenColumns</c> property to 2. 
            To freeze a specific column, set its <see cref="P:Syncfusion.Blazor.Grids.GridColumn.IsFrozen"/> property to <c>true</c> and also use the <see cref="!:Syncfusion.Blazor.Grids.GridColumn.FreezeDirection"/> property to set the direction of frozen columns.
             </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SfGrid`1.AllowFreezeLineMoving">
            <summary>
            Gets or sets a value that indicates whether the user can move the frozen line by dragging and dropping it in the Syncfusion Blazor DataGrid columns.
            </summary>
            <value>
            <c>true</c>, User can adjust the freeze line. The default value is <c>false</c>.
            </value>
            <remarks>
            When this property is enabled, the user can adjust the number of frozen columns by dragging and dropping the freeze bar between columns.
            If frozen columns are not specified, the frozen column separator will be displayed at the left and right edges of the Grid, and the user can dynamically adjust the number of frozen columns by dragging the separator.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SfGrid`1.FrozenRows">
            <summary>
            Gets or sets the number of rows need to be frozen in the DataGrid.
            </summary>
            <value>
            The number of rows that needs to be frozen DataGrid. The default value is 0.
            </value>
            <remarks>
            The frozen rows will always be displayed at the top of the grid content, and will not move when the user scrolls vertically.
            Note that the frozen rows must be within the view port of the DataGrid.
            For example, to freeze the first two rows of the grid, you can set the <c>FrozenRows</c> property to 2.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SfGrid`1.GridLines">
            <summary>
            Gets or sets the visibility of border lines of rows and columns in the grid. 
            </summary>
            <value>
            The default value is <see cref="F:Syncfusion.Blazor.Grids.GridLine.Default"/>.
            </value>
            <remarks>
            The available modes are,
            <list type="bullet">
            <item>
            <term>Both</term>
            <description>Displays both the horizontal and vertical grid lines.</description>
            </item>
            <item>
            <term>None</term>
            <description>No grid lines are displayed.</description>
            </item>
            <item>
            <term>Horizontal</term>
            <description>Displays the horizontal grid lines only.</description>
            </item>
            <item>
            <term>Vertical</term>
            <description>Displays the vertical grid lines only.</description>
            </item>
            <item>
            <term>Default</term>
            <description>Displays DataGrid lines based on the theme.</description>
            </item>
            </list>    
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SfGrid`1.GroupSettings">
            <summary>
            Gets or sets instance of <see cref="T:Syncfusion.Blazor.Grids.GridGroupSettings"/> which configures the grouping behavior of grid.
            </summary>
            <value>
            An instance of <see cref="T:Syncfusion.Blazor.Grids.GridGroupSettings"/>.
            </value>
            <remarks> 
            <see cref="T:Syncfusion.Blazor.Grids.GridGroupSettings"/> class provides various properties to customize grouping operations. 
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SfGrid`1.Height">
            <summary>
            Gets or sets the scrollable height of the grid content.
            </summary>
            <value>
            The default value is "auto".
            </value>
            <remarks>
            You can assign the height using pixel and percentage values such as 100px, 100%, etc. 
            If the height is set to "auto", the grid height will be automatically adjusted based on the number of rows displayed.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SfGrid`1.HierarchyPrintMode">
            <summary>
            Gets or sets the hierarchy grid print mode, which defines how the grid and child grids are printed based on this specific mode.
            </summary>
            <value>
            The default value is <see cref="F:Syncfusion.Blazor.Grids.HierarchyGridPrintMode.Expanded"/>.
            </value>
            <remarks>
            The available modes are:
            <list type="bullet">
            <item>
            <term>Expanded</term>
            <description>Prints the master grid with expanded child grids.</description>
            </item>
            <item>
            <term>All</term>
            <description>Prints the master grid with all the child grids.</description>
            </item>
            <item>
            <term>None</term>
            <description>Prints the master grid alone without any child grids.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SfGrid`1.PageSettings">
            <summary>
            Gets or sets instance of <see cref="T:Syncfusion.Blazor.Grids.GridPageSettings"/> which configures the pager behavior of grid.
            </summary>
            <value>
            An instance of the <see cref="T:Syncfusion.Blazor.Grids.GridPageSettings"/> class.
            </value>
            <remarks> 
            The <see cref="T:Syncfusion.Blazor.Grids.GridPageSettings"/> class provides various properties to customize paging operations, such as the number of pages, page size, and current page number. 
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SfGrid`1.PrintMode">
            <summary>
            Gets or sets the hierarchy grid print mode, which defines how the grid and child grids are printed.
            </summary>
            <value>
            The default value is <see cref="F:Syncfusion.Blazor.Grids.HierarchyGridPrintMode.Expanded"/>.
            </value>
            <remarks>
            The available modes are:
            * Expanded: Prints the master grid with expanded child grids.
            * All: Prints the master grid with all the child grids.
            * None: Prints the master grid alone without any child grids.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SfGrid`1.Query">
            <summary>
            Gets or sets the external query that will be executed along with data processing.
            </summary>
            <value>
            An instance of <see cref="T:Syncfusion.Blazor.Data.Query"/> class that represents the query parameters that will be sent to the server.
            The default value is null.
            </value>
            <remarks>
            This property can be used to add additional parameters to the data request by using the <see cref="M:Syncfusion.Blazor.Data.Query.AddParams(System.String,System.Object)"/> method.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SfGrid`1.RowDropSettings">
            <summary>
            Gets or sets instance of <see cref="T:Syncfusion.Blazor.Grids.GridRowDropSettings"/> which configures the row drop behavior of grid.
            </summary>
            <value>
            An instance of <see cref="T:Syncfusion.Blazor.Grids.GridRowDropSettings"/>.
            </value>
            <remarks> 
            <see cref="T:Syncfusion.Blazor.Grids.GridRowDropSettings"/> class provides various properties to customize row drop operations. 
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SfGrid`1.RowHeight">
            <summary>
            Gets or sets the height of grid rows.
            </summary>
            <value>
            The default value is differ based on the theme.
            </value>
            <remarks>
            The row height can be specified in pixels or as a percentage of the Grid's overall height. 
            For example, to set the row height to 50 pixels, you can set <c>RowHeight</c> property to 50. 
            To set the row height to 10% of the Grid's overall height, you can set <c>RowHeight</c> property to "10%". 
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SfGrid`1.RowRenderingMode">
            <summary>
            Gets or sets the row rendering mode in the grid.
            </summary>
            <value>
            The default value is <see cref="F:Syncfusion.Blazor.Grids.RowDirection.Horizontal"/>.
            </value>
            <remarks>
            The available modes are:
            <list type="bullet">
            <item>
            <term>Horizontal</term>
            <description>Displays the data rows in horizontal direction.</description>
            </item>
            <item>
            <term>Vertical</term>
            <description>Displays the data rows in vertical direction.</description>
            </item>
            </list>
            The <see cref="P:Syncfusion.Blazor.Grids.SfGrid`1.RowRenderingMode"/> property is rendered on the adaptive layout based on the <see cref="P:Syncfusion.Blazor.Grids.SfGrid`1.AdaptiveUIMode"/> property.
            Setting this property value as "Vertical" rows are rendered vertically with headers in the same row which suits better to view grid in small screens.
            In vertical row rendering mode, limited features are supported like filtering, sorting, dialog editing, selection, searching and row virtualization.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SfGrid`1.SearchSettings">
            <summary>
            Gets or sets instance of <see cref="T:Syncfusion.Blazor.Grids.GridSearchSettings"/> which configures the search behavior of grid.
            </summary>
            <value>
            An instance of <see cref="T:Syncfusion.Blazor.Grids.GridSearchSettings"/>.
            </value>
            <remarks> 
            <see cref="T:Syncfusion.Blazor.Grids.GridSearchSettings"/> class provides various properties to customize searching operations. 
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SfGrid`1.SelectedRowIndex">
            <summary>
            Gets or sets the index of the row that is selected initially while rendering the grid component.
            </summary>
            <value>
            The default value is <c>-1</c>. Initially, no rows are selected in the data grid. 
            </value>
            <remarks>
            This property allows you to select a row at initial rendering. It can also be used to programmatically select a row.
            You can select a row initially by setting the value of this property to the index of the row to be selected.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SfGrid`1.SelectionSettings">
            <summary>
            Gets or sets instance of <see cref="T:Syncfusion.Blazor.Grids.GridSelectionSettings"/> which configures the selection behavior of the grid.
            </summary>
            <value>
            An instance of <see cref="T:Syncfusion.Blazor.Grids.GridSelectionSettings"/>.
            </value>
            <remarks> 
            The <see cref="T:Syncfusion.Blazor.Grids.GridSelectionSettings"/> class provides various properties to customize the selection operations of the grid, such as mode, type, persistSelection, and more.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SfGrid`1.ShowColumnChooser">
            <summary>
            Gets or sets a value indicating whether to enable the column chooser feature to dynamically show or hide the grid columns.
            </summary>
            <value>
            <c>true</c>, allows users to show or hide columns dynamically by using the column chooser feature.
            The default value is <c>false</c>.
            </value>
            <remarks>
            You can hide the column names in column chooser by defining the <see cref="P:Syncfusion.Blazor.Grids.GridColumn.ShowInColumnChooser"/>  property as <c>false</c>.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SfGrid`1.ShowColumnMenu">
            <summary>
            Gets or sets a value indicating whether to enable the column menu options in each columns.
            </summary>
            <value>
            <c>true</c>, then it will enable the column menu options in each columns.
            The default value is <c>false</c>.
            </value>
            <remarks>
            To disable column menu for a particular column by defining the <see cref="P:Syncfusion.Blazor.Grids.GridColumn.ShowColumnMenu"/> property as false.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SfGrid`1.SortSettings">
            <summary>
            Gets or sets instance of <see cref="T:Syncfusion.Blazor.Grids.GridSortSettings"/> which configures the sorting behavior of grid.
            </summary>
            <value>
            An instance of <see cref="T:Syncfusion.Blazor.Grids.GridSortSettings"/>.
            </value>
            <remarks> 
            <see cref="T:Syncfusion.Blazor.Grids.GridSortSettings"/> class provides various properties to customize sort operations. 
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SfGrid`1.TextWrapSettings">
            <summary>
            Gets or sets instance of <see cref="T:Syncfusion.Blazor.Grids.GridTextWrapSettings"/> which configures the text wrap behavior of grid.
            </summary>
            <value>
            An instance of <see cref="T:Syncfusion.Blazor.Grids.GridTextWrapSettings"/>.
            </value>
            <remarks> 
            <see cref="T:Syncfusion.Blazor.Grids.GridTextWrapSettings"/> class provides various properties to customize text wrap operations. 
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SfGrid`1.Toolbar">
            <summary>
            Gets or sets the ToolBar items of the Grid.
            </summary>
            <value>
            The available built-in items are:
            <list type="bullet">
            <item>
            <term>Add</term>
            <description>Adds a new record.</description>
            </item>
            <item>
            <term>Add</term>
            <description>Adds a new record.</description>
            </item> 
            <item>
            <term>Edit</term>
            <description>Edits the selected record.</description>
            </item> 
            <item>
            <term>Update</term>
            <description>Updates the edited record.</description>
            </item> 
            <item>
            <term>Delete</term>
            <description>Deletes the selected record.</description>
            </item> 
            <item>
            <term>Cancel</term>
            <description>Cancels the edit state.</description>
            </item> 
            <item>
            <term>Search</term>
            <description>Searches the records by the given key.</description>
            </item> 
            <item>
            <term>Print</term>
            <description>Prints the datagrid.</description>
            </item> 
            <item>
            <term>ExcelExport</term>
            <description>Exports the datagrid to Excel file format.</description>
            </item> 
            <item>
            <term>PdfExport</term>
            <description>Exports the datagrid to PDF file format.</description>
            </item> 
            <item>
            <term>CsvExport</term>
            <description>Exports the datagrid to CSV file format.</description>
            </item>       
            </list>
            </value>
            <remarks>
            In some cases, you may want to use a custom toolbar instead of the default one. In such cases, you can use the
            <see cref="P:Syncfusion.Blazor.Grids.GridTemplates.ToolbarTemplate"/> property to provide a custom toolbar template
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SfGrid`1.Width">
            <summary>
            Gets or sets the width of the Grid.
            </summary>
            <value>
            The default value is "auto".
            </value>
            <remarks>
            The <see cref="P:Syncfusion.Blazor.Grids.SfGrid`1.Width"/> property can be assigned with pixel and percentage values such as 100px, 100% etc.
            When the total column width exceeds the specified value, a horizontal scrollbar will be displayed to allow the user to scroll through the data.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SfGrid`1.EnableInfiniteScrolling">
            <summary>
            Gets or sets a value indicating whether the Grid loads the next set of data's on-demand, when the vertical scrollbar reaches the end of the scroller. This feature enables loading large datasets into the Grid without the need of traditional pagination.
            </summary>
            <value>
            Set <c>true</c> to enable infinite scroll by loading data when vertical scroll bar reaches the end of scrollbar.
            The default value is <c>false</c>.        
            </value>
            <remarks>
            During the initial rendering, the grid loads a block of data based on the <see cref="P:Syncfusion.Blazor.Grids.GridInfiniteScrollSettings.InitialBlocks"/> property.  The default value of <c>InitialBlocks</c> is 3.
            After that the buffering data's are loaded based on the page size or rows which are rendered within the provided height.
            Subsequently, as the user scrolls to the end of the grid, additional blocks of data will be loaded in on-demand.
            In the default Infinite Scrolling mode, a block of data accumulates every time the scrollbar reaches the end. However, in the cache mode, blocks of data are rendered based on the <c>MaximumBlocks</c> setting. If the number of blocks exceeds this limit during scrolling, the Grid removes rows from the DOM to accommodate the new block of data.
            <c>EnableCache</c> and <c>MaximumBlocks</c> can be configured through the properties of the <see cref="T:Syncfusion.Blazor.Grids.GridInfiniteScrollSettings"/> class.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SfGrid`1.InfiniteScrollSettings">
            <summary>
            Gets or sets an instance of <see cref="T:Syncfusion.Blazor.Grids.GridInfiniteScrollSettings"/> which configures the infinite scrolling behavior of the grid.
            </summary>
            <value>
            An instance of <see cref="T:Syncfusion.Blazor.Grids.GridInfiniteScrollSettings"/>.
            </value>
            <remarks>
            The <see cref="T:Syncfusion.Blazor.Grids.GridInfiniteScrollSettings"/> class provides various properties to customize the infinite scrolling operation of the grid. 
            </remarks>
        </member>
        <member name="F:Syncfusion.Blazor.Grids.SfGrid`1.SkipLocalStorageSet">
            <summary>
            When set as true then localstorage will not be set. This helps avoiding local storage setting after
            foreign key rendering.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SfGrid`1.IsAutoGeneratedColumns">
            <summary>
             Specifies whether gridcolumn is autogenerated or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SfGrid`1.FilteredColumns">
            <summary>
            FilterSettings.Columns is set to FilteredColumns property before removing the columns from FilterSettings.Columns for preventing the default query generation.
            After processing the filter request, the FilteredColumns is set back to the FilterSettings.Columns to update the filter icons etc..
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SfGrid`1.IsCollectionChanged">
            <summary>
            If IsCollectionChanged is set to true then it will allow observableCollection data to make change in GridContent.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SfGrid`1.HasFreezeDirection">
            <summary>
            Specifies whether the Grid is frozen only by using freeze direction .
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SfGrid`1.IsPersist">
            <summary>
            Specifies whether the frozen Grid is persisted.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SfGrid`1.IsStackedHeader">
            <summary>
            Specifies whether the Grid header is stacked.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SfGrid`1.IsFirstEventRender">
            <summary>
            Specifies refresh without data process and new row generation.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SfGrid`1.UnMatchedAttributes">
            <summary>
            Gets or sets the unmatched attributes for the Grid component.
            </summary>
            <remarks>
            The <see cref="P:Syncfusion.Blazor.Grids.SfGrid`1.UnMatchedAttributes"/> property can be used to specify custom attributes, styles, and classes
            for the Grid component that are not explicitly defined as properties in the component.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SfGrid`1.CurrentViewData">
            <summary>
            Gets or sets the current data details displayed in the grid.
            </summary>
            <remarks>
            This property returns an IEnumerable object that represents the current data displayed in the grid. You can use this property to access or modify the data in the grid.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SfGrid`1.TotalItemCount">
            <summary>
            Gets or sets the total number of records in the Grid's data source.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SfGrid`1.IsEdit">
            <summary>
            Gets or sets a value indicating whether the grid is currently in edit mode.
            </summary>
            <value>
            <c>true</c> if a row is being edited in the grid.The default value is <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SfGrid`1.GridEvents">
            <summary>
            Gets or sets the grid events that are triggered on various actions in the grid.
            </summary>
            <remarks>
            The events can be used to customize the grid's behavior, perform custom actions on data, and handle user interactions with the grid.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SfGrid`1.SelectedRecords">
            <summary>
            Gets the selected records of the grid.
            </summary>
            <remarks>
            If the selection persistence feature is enabled through the <see cref="P:Syncfusion.Blazor.Grids.GridSelectionSettings.PersistSelection"/> property,
            this property returns the selected records across all pages. Otherwise, it only returns the selected records in the current page.
            <seealso cref="P:Syncfusion.Blazor.Grids.GridSelectionSettings.PersistSelection"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SfGrid`1.SelectedRowIndexes">
            <summary>
            Gets the indexes of the currently selected rows in the Grid.
            </summary>
            <remarks>
            When one or more rows are selected in the Grid, the corresponding row index values are added to this list. 
            You can use this property to programmatically access the index values of the currently selected rows in the Grid.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SfGrid`1.ForceUpdate">
            <summary>
            Gets or sets a value indicating whether to force the immediate re-rendering of the grid component.
            </summary>
            <value>
            <c>true</c> to force the grid component to re-render immediately. The default value is <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SfGrid`1.SoftRefresh">
            <summary>
            Specifies refresh without data process and new row generation.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SfGrid`1.RefreshColumnHeader">
            <summary>
            Specifies refresh column header.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SfGrid`1.HasColumnChanges">
            <summary>
            Specifies new column added.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SfGrid`1.HasAggregateChanges">
            <summary>
            Specifies new aggregate column added.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SfGrid`1.HasSortColumnChanges">
            <summary>
            Specifies new sort column added.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SfGrid`1.HasFilterColumnChanges">
            <summary>
            Specifies new filter column added.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SfGrid`1.IsServerRendered">
            <summary>
            Specifies grid is following server rendered.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SfGrid`1.IsExpanded">
            <summary>
            Specifies group expand/collapse state should persist.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.SfGrid`1.ColumnIndex">
            <summary>
            Specifies new column added index.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.GetClass">
            <summary>
            Returns the class name to be added to the container element.
            </summary>
            <returns>string.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.PreventRender(System.Boolean)">
            <summary>
            Prevents the grid render. This method will internally sets value to be returned from ShouldRender method.
            </summary>
            <param name="preventRender">Default value is true. Toggles the ShouldRender method value.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.OnObservableChange(System.String,System.Object,System.Boolean,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.SetPersistData(System.String)">
            <summary>
            Load the previously saved state of the Grid.
            </summary>
            <param name="properties">Contains the saved properties as string value.</param>
            <returns>Task.</returns>
            <remarks>
            This method is primarly used to load and refresh the grid with already saved state.
            The state can be served from any source such as window.localStorage, DB etc.
            </remarks>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.SetPersistDataAsync(System.String)">
            <summary>
            Load the previously saved state of the Grid.
            </summary>
            <param name="properties">Contains the saved properties as string value.</param>
            <returns>Task.</returns>
            <remarks>
            This method is primarly used to load and refresh the grid with already saved state.
            The state can be served from any source such as window.localStorage, DB etc.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.ResetPersistData">
            <summary>
            Resets the state of the Grid.
            </summary>
            <returns>void.</returns>
            <remarks>This method will clear the current state and refreshes the grid with original state given
            delcaratively. If EnablePersistence is used then this will clear the state which is stored in window.localStorage too.</remarks>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.ResetPersistDataAsync">
            <summary>
            Resets the state of the Grid.
            </summary>
            <returns>void.</returns>
            <remarks>This method will clear the current state and refreshes the grid with original state given
            delcaratively. If EnablePersistence is used then this will clear the state which is stored in window.localStorage too.</remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.PersistProperties(System.String,System.Boolean)">
            <summary>
            Defines the properties of persisting component’s state between page reloads.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.PropertyChanged">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.Notify(System.String,System.Object)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.UpdateForeignData">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.AnnotateColumn(Syncfusion.Blazor.Grids.GridColumn)">
            <summary>
            Add data annotation to given column.
            </summary>
            <param name="column">Grid column component.</param>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.CallStateHasChanged">
            <summary>
            Invoke state change.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.CallStateHasChangedAsync">
            <summary>
            Invoke state change.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.AddSortColumn(System.String)">
            <summary>
            Add sort column while grouping.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.SetValue``1(``0,System.String)">
            <summary>
            Set value while editing using column field.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.SfGrid`1.ComponentDispose">
            <summary>
            Handles dispose component.
            </summary>
            <remarks>
            Destroyed event will be invoked if any. Set current state of grid in window.localStorage if EnablePersistence is set as true.
            </remarks>
        </member>
        <member name="T:Syncfusion.Blazor.Grids.CellDOM">
            <summary>
            Handles cell and row customization.
            </summary>
            <remarks>
            An instance of this class is passed in QueryCellInfo and RowDataBound events as argument
            through which the conditional class and styles can be added to cell/row.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.CellDOM.AddClass(System.String[])">
            <summary>
            Add multiple class names to the specific cell.
            </summary>
            <param name="classList">List of class names.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.CellDOM.AddStyle(System.String[])">
            <summary>
            Add multiple style rules to the specific cell.
            </summary>
            <param name="styles">List of style rules.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.CellDOM.SetAttribute(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Add attributes to the given DOM element.
            </summary>
            <param name="attributes"> List of key and values to be added.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.CellDOM.AddItem(System.Collections.Generic.List{System.String},System.String[])">
            <summary>
            Add array of values to the list.
            </summary>
            <param name="AddTo">Source list to be added.</param>
            <param name="values">Array values to be added to the list. </param>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridColumnChooserItem.Title">
            <summary>
            Specifies the label value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridColumnChooserItem.Column">
            <summary>
            Specifies the grid column
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridColumnChooserItem.IsSelectAll">
            <summary>
            Specifies that the checkbox is select all.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridColumnChooserItemGroup.Title">
            <summary>
            Gets or sets the group title for the checkbox collections. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Grids.GridForeignColumn`1.ForeignDataSource">
            <summary>
            Defines the column data source  which will act as foreign data source.
            </summary>
            <remarks>List or any IEnumerable type value is accepted as foreign data source.
            For custom binding or using remote service as foreign data source use
            <see cref="T:Syncfusion.Blazor.Grids.GridForeignColumn`1"/> component and configure data source using
            <see cref="T:Syncfusion.Blazor.Data.SfDataManager"/>.</remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Grids.GridForeignColumn`1.GetForeignData">
            <summary>
            Get Foreign Data
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Metadata.Order">
            <summary>
            Gets or sets the order weight of the column.
            </summary>
            <remarks>
            Columns are sorted in increasing order based on the order value. 
            Columns without this attribute have an order value of 0. 
            Negative values are valid and can be used to position a column before all non-negative columns. 
            If an order is not specified, presentation layers should consider using the value 10000. 
            This value lets explicitly-ordered fields be displayed before and after the fields that do not have a specified order.
            </remarks>
        </member>
    </members>
</doc>
