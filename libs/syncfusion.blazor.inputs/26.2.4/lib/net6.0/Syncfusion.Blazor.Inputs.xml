<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Syncfusion.Blazor.Inputs</name>
    </assembly>
    <members>
        <member name="T:Syncfusion.Blazor.Inputs.FloatLabelType">
            <summary>
            Defines floating label type of the input and decides how the label should float on the input.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.FloatLabelType.Never">
            <summary>
            The placeholder text should not be float ever.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.FloatLabelType.Always">
            <summary>
            The placeholder text floats above the input always.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.FloatLabelType.Auto">
            <summary>
            The placeholder text floats above the input while focusing or enter a value in input.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.AutoComplete">
            <summary>
            Defines whether the browser is allow to automatically enter or select a value for the textbox.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.AutoComplete.On">
            <summary>
            Represents the text field autocomplete is enabled.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.AutoComplete.Off">
            <summary>
            Represents the text field autocomplete is disabled.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.InputType">
            <summary>
            Represents the type of input that the TextBox component can accept.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.InputType.Text">
            <summary>
            Represents the text field is a single-line text.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.InputType.Email">
            <summary>
            Represents an email input for email addresses.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.InputType.Password">
            <summary>
            Represents a password input where characters are masked.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.InputType.Number">
            <summary>
            Represents a numeric input for numbers.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.InputType.Search">
            <summary>
            Represents a search input for search queries.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.InputType.Tel">
            <summary>
            Represents a telephone number input.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.InputType.URL">
            <summary>
            Represents a URL input for website URLs.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.Resize">
            <summary>
            Defines Reszie Mode of the TextArea Component can accept.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.Resize.None">
            <summary>
            The TextArea component should not be resizable ever.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.Resize.Vertical">
            <summary>
            The TextArea component is resizable horizontally always.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.Resize.Horizontal">
            <summary>
            The TextArea component is resizable horizontally always.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.Resize.Both">
            <summary>
            The TextArea component is resizable both vertically and horizontally always.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.Internal.IInputBase">
            <summary>
            Common properties for input base component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.IInputBase.OnInput">
            <summary>
            Triggers each time when the value of input has changed.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.Internal.IInputBase.UpdateParentClass(System.String,System.String)">
            <summary>
            Update the parent component root class and container element class.
            </summary>
            <param name="rootClass">Specifies the root class of the InputBase.</param>
            <param name="containerClass">Specifies the container class of the InputBase.</param>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.Internal.IconHandlerArgs">
            <summary>
            Specifies the icon handler arguments.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.IconHandlerArgs.eventArgs">
            <summary>
            Specifies the <see cref="T:System.EventArgs"/> arguments.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.IconHandlerArgs.IconName">
            <summary>
            Specifies the name of the icon.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.Internal.SfInputBase">
            <summary>
            The SfInputBase is an input element that allows to get input from the user. It allows the user to edit or display the text value.
            </summary>
            <summary>
            The SfInputBase is an input element that allows to get input from the user. It allows the user to edit or display the text value.
            </summary>
            <summary>
            The SfInputBase is an input element that allows to get input from the user. It allows the user to edit or display the text value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.OnChange">
            <summary>
            Triggers when the content of input has changed and gets focus-out.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.OnInput">
            <summary>
            Triggers each time when the value of input has changed.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.OnPaste">
            <summary>
            Triggers when the content is paste into an input.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.OnBlur">
            <summary>
            Triggers when the input has focus-out.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.OnFocus">
            <summary>
            Triggers when the input gets focus.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.BindClearBtnEvents">
            <summary>
            Triggers when the clear gets clicked.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.BindClearBtnTouchEvents">
            <summary>
            Triggers when the clear icon gets touch.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.MouseDownOnSpinner">
            <summary>
            Triggers when the spin down gets click.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.TouchDownOnSpinner">
            <summary>
            Triggers when the spin down icon gets touch.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.MouseUpOnSpinner">
            <summary>
            Triggers when the spin up gets clicked.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.TouchUpOnSpinner">
            <summary>
            Triggers when the spin up icon gets touch.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.MouseIconHandler">
            <summary>
            Triggers when the icon gets click.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.TouchIconHandler">
            <summary>
            Triggers when the icon get touch.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.MouseContainerHandler">
            <summary>
            Triggers when the container gets click.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.OnContainerBlur">
            <summary>
            Triggers when the container gets focus out.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.OnContainerFocus">
            <summary>
            Triggers when the container gets focused.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.ContainerKeypress">
            <summary>
            Triggers when the container key pressed.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.ID">
            <summary>
            Gets or sets the ID of the component.
            </summary>
            <value>
            Accepts the string value.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.ChildContent">
            <summary>
            Specifies the content that has to be passed.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.ValueExpression">
            <summary>
            Gets or sets the expression for defining the value of the bound.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.InputEditContext">
            <summary>
            Specifies the edit context of the Input.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.Autocomplete">
            <summary>
            Gets or sets whether the browser is allowed to automatically enter or select a value for the TextBox.
            <para>By default, autocomplete is enabled for TextBox.</para>
            <para>Possible values are:</para>
            <list type="bullet">
            <item>
            <term>On</term>
            <description>Specifies that autocomplete is enabled</description>
            </item>
            <item>
            <term>Off</term>
            <description>Specifies that autocomplete is disabled.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.CssClass">
            <summary>
            Gets or sets a CSS class string to customize the appearance of the component.
            </summary>
            <value>
            Accepts a CSS class string separated by space to customize the appearance. The default value is <c>String.Empty</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.EnablePersistence">
            <summary>
            Gets or sets whether to persist component's state between page reloads. When set to <c>true</c>, the <see cref="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.Value" /> property is persisted.
            </summary>
            <value>
            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>.
            </value>
            <remarks>
            Component's <see cref="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.Value"/> property will be stored in browser local storage to persist component's state when page reloads.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.EnableRtl">
            <summary>
            Gets or sets whether the right-to-left direction is enabled or not for the component.
            </summary>
            <value>
            <c>true</c>, if the right to left direction is enabled for component. The default value is <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.Enabled">
            <summary>
             Gets or sets a value that indicates whether to enable or disable the component. 
            </summary>
            <value>
            <c>true</c>, if the component is enabled; otherwise, it is disabled. The default value is <c>true</c>. 
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.FloatLabelType">
            <summary>
            Gets or sets the floating label behavior of the <see cref="T:Syncfusion.Blazor.Inputs.SfTextBox"/>. The <see cref="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.Placeholder"/> text act as a lable.
            </summary>
            <value>
            One of the <see cref="T:Syncfusion.Blazor.Inputs.FloatLabelType"/> enumeration. The default value is <see cref="F:Syncfusion.Blazor.Inputs.FloatLabelType.Never"/>
            </value>
            <remarks>
            If the <c>FloatLabelType</c> is <c>Never</c>, the placeholder text does not float as a label.
            If the <c>FloatLabelType</c> is <c>Auto</c>, the placeholder text will float above the TextBox component as a label after focusing it.
            If the <c>FloatLabelType</c> is <c>Always</c>, the placeholder text is displayed as a label above the TextBox component.
            </remarks>
            <example>
            In the following code example, set the float lable as <c>Auto</c>.
            <code><![CDATA[
              <SfTextBox FloatLabelType="FloatLabelType.Auto" Placeholder="Enter a value"></SfTextBox>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.HtmlAttributes">
            <summary>
            Gets or sets a collection of additional attributes such as styles, class, and more that will be applied to the TextBox component.
            </summary>
            <value>
            The value as dictionary collection.The default value is <c>null</c>
            </value>
            <remarks>
            If you configured both property and equivalent html attributes, then the component considers the property value.
            </remarks>
            <example>
            <code><![CDATA[
            <SfTextBox HtmlAttributes="@CustomAttribute">
            </SfTextBox>
            @code{
                Dictionary<string, object> CustomAttribute = new Dictionary<string, object>()
                {
                    { "title", "Enter your name" }
                };
            }
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.InputAttributes">
            <summary>
            Gets or sets a collection of additional inputs attributes such as disabled, value, and more that will be applied to the TextBox component.        /// </summary>
            <value>
            The value as dictionary collection.The default value is <c>null</c>
            </value>
            <remarks>
            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive.
            If you configured both property and equivalent html attributes, then the component considers the property value.
            </remarks>
            <example>
            <code><![CDATA[
            <SfTextBox Placeholder="Enter the PIN" @attributes="@CustomAttribute">
            </SfTextBox>
            @code{
                Dictionary<string, object> CustomAttribute = new Dictionary<string, object>()
                {
                    { "maxlength", "4" }
                };
            }
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.Multiline">
            <summary>
            Specifies a boolean value that enables or disables the multiline on the TextBox.
            The TextBox changes from a single line to multiline when enabling this multiline mode.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.Placeholder">
            <summary>
            Specifies the boolean value whether the TextBox allows user to change the text.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.Readonly">
            <summary>
            Specifies the boolean value whether the TextBox allows user to change the text.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.IsReadOnlyInput">
            <summary>
            Specifies the boolean value for dropdownlist default readonly property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.ShowClearButton">
            <summary>
            Specifies a boolean value that indicates whether the clear button is displayed in TextBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.Type">
            <summary>
            Specifies the behavior of the TextBox such as text, password, email, and more.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.Value">
            <summary>
            Sets the content of the TextBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.ValueChanged">
            <summary>
            Specifies the callback to trigger when the value changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.Width">
            <summary>
            Specifies the width of the TextBox component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.TabIndex">
            <summary>
            Specifies the tab order of the TextBox component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.ContainerAttr">
            <summary>
            Specifies the container attrubute of Input.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.Buttons">
            <summary>
            Specifies the icon of the TextBox component.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.PrependButtons">
            <summary>
            Specifies the prepend icon of the TextBox component.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.SpinButton">
            <summary>
            Specifies a boolean value that enable or disable the spin button on the component.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.ContainerClass">
            <summary>
            Specifies the class value that is appended to container of TextBox.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.ValueTemplate">
            <summary>
            Accepts the template design and assigns it to the selected list item in the input element of the component.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.IsValueTemplate">
            <summary>
            Specifies a boolean value that indicates whether the value template is displayed in TextBox.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.RootClass">
            <summary>
            Gets or Set the component class to element.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.ClickStopPropagation">
            <summary>
            Specifies the prevents the click actions.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.MouseDowSpinnerPrevent">
            <summary>
            Specifies the prevents the mouse actions.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.PreventIconHandler">
            <summary>
            Specifies the prevents the icon actions.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.PreventTouchIconHandler">
            <summary>
            Specifies whether to prevent the touch action in icon.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.MousePreventContainer">
            <summary>
            Specifies the prevents the container actions.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.IsShowSpinnerOnClear">
            <summary>
            Specifies the spinner show on clear icon.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.IsShowSpinnerOnIcon">
            <summary>
            Specifies the spinner show on dropdown icon.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.Parent">
            <exclude/>
            <summary>
            Gets or sets the Parent.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.Internal.SfInputBase.OnInitializedAsync">
            <summary>
            Triggers while initial rendering of the component.
            </summary>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.Internal.SfInputBase.OnParametersSetAsync">
            <summary>
            Triggers when dynamically changing the component property.
            </summary>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.Internal.SfInputBase.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Triggers after the component get rendered.
            </summary>
            <param name="firstRender">True if the component rendered for the first time.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.Internal.SfInputBase.SetReadOnly">
            <summary>
            The setReadOnly.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.Internal.SfInputBase.CreateFloatingLabel">
            <summary>
            The createFloatingLabel.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.Internal.SfInputBase.SetEnabled">
            <summary>
            The setEnabled.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.Internal.SfInputBase.UpdateFieldSetStatus(System.Boolean)">
            <summary>
            Sets the Enabled value to false if the closest <fieldset></fieldset> value is set to disabled.
            </summary>
            <param name="isEnabled">A boolean value indicating whether the component should be enabled or disabled.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.Internal.SfInputBase.BlurHandler">
            <summary>
            triggers while the component get focused out.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.Internal.SfInputBase.UpdateParentClass(System.String,System.String)">
            <summary>
            Update the parent component class to the element.
            </summary>
            <param name="rootClass">The rootClass<see cref="T:System.String"/>.</param>
            <param name="containerClass">The containerClass<see cref="T:System.String"/>.</param>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.Internal.UploaderStreamReader.UploadData">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.Internal.UploadFileDetails">
            <summary>
            Specifies the upload file status.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.UploadFileDetails.chunksize">
            <summary>
            Specifies the chunk size.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.UploadFileDetails.totalChunksize">
            <summary>
            Specifies the total chunk size.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.ColorPickerMode">
            <summary>
            ColorPicker Mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.ColorPickerMode.Picker">
            <summary>
            To set the color picker mode as picker.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.ColorPickerMode.Palette">
            <summary>
            To set the color picker mode as palette.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.ColorValueType">
            <summary>
            Color value types.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.ColorValueType.Hex">
            <summary>
            Specifies the hex code value without opacity.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.ColorValueType.Hexa">
            <summary>
            Specifies the hex code value with opacity.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.ColorValueType.Rgb">
            <summary>
            Specifies the red green blue value without opacity.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.ColorValueType.Rgba">
            <summary>
            Specifies the red green blue value with opacity.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.ColorValueType.Hsv">
            <summary>
            Specifies the hue saturation value without opacity.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.ColorValueType.Hsva">
            <summary>
            Specifies the hue saturation value with opacity.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.ColorValueType.Opacity">
            <summary>
            Specifies the opacity value.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.BeforeOpenCloseEventArgs">
            <summary>
            Provides information about the in <c>OnOpen</c> and <c>OnClose</c> event callback.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.BeforeOpenCloseEventArgs.Cancel">
            <summary>
            Gets or sets a value that indicates whether to allow or prevent the popup open in color picker.
            </summary>
            <value>
            <c>true</c>, if the popup open in color picker is prevented. Otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.BeforeOpenCloseEventArgs.Element">
            <summary>
            Gets or sets a value that indicates the color picker popup element.
            </summary>
            <value>
            An <see cref="T:Microsoft.AspNetCore.Components.ElementReference"/> that represents the color picker popup element.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.BeforeOpenCloseEventArgs.Name">
            <summary>
            Gets or sets a value that indicates the name of the event.
            </summary>
            <value>
            Accepts the string value.
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.ColorPickerEventArgs">
            <summary>
            Provides information about the in <c>ValueChange</c> and <c>Selected</c> event callback.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ColorPickerEventArgs.CurrentValue">
            <summary>
            Gets or sets a value that indicates the the current color value details.
            </summary>
            <value>
            A <see cref="T:Syncfusion.Blazor.Inputs.ColorPickerValue"/> object that represents the current color value details.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ColorPickerEventArgs.Name">
            <summary>
            Gets or sets a value that indicates the name of the event.
            </summary>
            <value>
            Accepts the string value.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ColorPickerEventArgs.PreviousValue">
            <summary>
            Gets or sets a value that indicates the previous color value details.
            </summary>
            <value>
            A <see cref="T:Syncfusion.Blazor.Inputs.ColorPickerValue"/> object that represents the previous color value details.
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.ColorPickerValue">
            <summary>
            Provides information about the model passes in <c>ValueChange</c> and <c>Selected</c> event callback..
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ColorPickerValue.Hex">
            <summary>
            Gets or sets a value that indicates the color value as HEX format without opacity.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ColorPickerValue.Rgba">
            <summary>
            Gets or sets a value that indicates the color value as RGBA format.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.ModeSwitchEventArgs">
            <summary>
            Provides information about the in <c>ModeSwitch</c> event callback.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ModeSwitchEventArgs.Mode">
            <summary>
            Gets or sets a value that indicates the color picker mode.
            </summary>
            <value>
            One of the <see cref="T:Syncfusion.Blazor.Inputs.ColorPickerMode"/> enumeration values that represents the color picker mode.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ModeSwitchEventArgs.Name">
            <summary>
            Gets or sets a value that indicates the name of the event.
            </summary>
            <value>
            Accepts the string value.
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.OpenEventArgs">
            <summary>
            Provides information about the in <c>Opened</c> event callback.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.OpenEventArgs.Element">
            <summary>
            Gets or sets a value that indicates the color picker popup element.
            </summary>
            <value>
            An instance of the <see cref="T:Microsoft.AspNetCore.Components.ElementReference"/> class that represents the color picker popup element.
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.PaletteTileEventArgs">
            <summary>
            Provides information about the in <c>OnTileRender</c> event callback.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.PaletteTileEventArgs.PresetName">
            <summary>
            Gets or sets a value that indicates the preset name.
            </summary>
            <value>
            Accepts the string value.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.PaletteTileEventArgs.Value">
            <summary>
            Gets or sets a value that indicates the color value.
            </summary>
            <value>
            Accepts the string value.
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.Offset">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.SfColorPicker">
            <summary> 
            ColorPicker component is a user interface to select and adjust color values. 
            It provides supports for various color specification like Red Green Blue, Hue Saturation Value and Hex codes. 
            </summary> 
            <example> 
            In the below code example, showcases a basic ColorPicker component. 
            <code><![CDATA[ 
            <SfColorPicker> 
            </SfColorPicker> 
            ]]></code> 
            </example>
            <summary>
            ColorPicker component is a user interface to select and adjust color values.
            It provides supports for various color specification like Red Green Blue, Hue Saturation Value and Hex codes.
            </summary>
            <summary>
            ColorPicker is a user interface to select and adjust color values.
            It provides supports for various color specification like Red Green Blue, Hue Saturation Value and Hex codes.
            </summary>
            <summary>
            ColorPicker is a user interface to select and adjust color values.
            It provides supports for various color specification like Red Green Blue, Hue Saturation Value and Hex codes.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfColorPicker.SetOffset(Syncfusion.Blazor.Inputs.Offset)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfColorPicker.Click(System.String)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfColorPicker.Close">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfColorPicker.Focus">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfColorPicker.ChildContent">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfColorPicker.HtmlAttributes">
            <exclude/>
            <summary> 
            Gets or sets a a value that indicates the collection of additional attributes that will applied to the color picker container element. 
            </summary> 
            <remarks> 
            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive. 
            </remarks> 
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfColorPicker.Columns">
            <summary> 
            Gets or sets a value that indicates the columns to be rendered in palette mode. 
            </summary> 
            <value> 
            Accepts a double value. The default value is <c>10</c>. 
            </value> 
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfColorPicker.CssClass">
            <summary> 
            Gets or sets a value that indicates CSS class string to customize the appearance of color picker. 
            </summary> 
            <value> 
            Accepts a CSS class string separated by space to customize the appearance of color picker. The default value is <c>String.Empty</c>. 
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfColorPicker.Disabled">
            <summary> 
            Gets or sets a value that indicates whether to enable or disable the color picker. 
            </summary> 
            <value> 
            <c>true</c>, if the button component is disabled. The default value is <c>false</c>. 
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfColorPicker.EnableOpacity">
            <summary> 
            Gets or sets a value that indicates whether to enable or disable the opacity slider. 
            </summary> 
            <value> 
            <c>true</c>, if the opacity slider is enabled. The default value is <c>true</c>. 
            </value> 
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfColorPicker.EnablePersistence">
            <summary> 
            Gets or sets a value that indicates whether to persist component's state between page reloads. When set to <c>true</c>, the <see cref="P:Syncfusion.Blazor.Inputs.SfColorPicker.Value" /> property is persisted. 
            </summary> 
            <value> 
            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>. 
            </value> 
            <remarks> 
            Component's <see cref="P:Syncfusion.Blazor.Inputs.SfColorPicker.Value"/> property will be stored in browser local storage to persist component's state when page reloads. 
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfColorPicker.EnableRtl">
            <summary> 
            Gets or sets a value that indicates whether to enable or disable the right to left direction. 
            </summary> 
            <value> 
            <c>true</c>, if the right to left direction is enabled for the component. The default value is <c>false</c>. 
            </value> 
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfColorPicker.Inline">
            <summary> 
            Gets or sets a value that indicates whether to enable to disable the inlide mode color picker. 
            </summary> 
            <value> 
            <c>true</c>, if the color picker component is rendered as inline. The default value is <c>false</c>. 
            </value> 
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfColorPicker.Mode">
            <summary> 
            Gets or sets a value that indicates the mode of color picker to be rendered. 
            </summary> 
            <value> 
            One of the <see cref="T:Syncfusion.Blazor.Inputs.ColorPickerMode"/> enumeration. The default value is <see cref="F:Syncfusion.Blazor.Inputs.ColorPickerMode.Picker"/> 
            </value> 
            <remarks> 
            If the <c>ColorPickerMode</c> is <c>Picker</c>, the color picker is rendered as a picker. 
            If the <c>ColorPickerMode</c> is <c>Palette</c>, the color picker is rendered as a palette. 
            </remarks> 
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfColorPicker.ModeSwitcher">
            <summary> 
            Gets or sets a value that indicates whether to enable or disable the mode switcher option. 
            </summary> 
            <value> 
            <c>true</c>, if the mode switcher option is enabled. The default value is <c>true</c>. 
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfColorPicker.NoColor">
            <summary> 
            Gets or sets a value that indicates whether to enable or disable the no color option. 
            </summary> 
            <value> 
            <c>true</c>, if the no color option is enabled. The default value is <c>false</c>. 
            </value> 
            <remarks> 
            No color option is only available in palette mode. 
            </remarks> 
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfColorPicker.PresetColors">
            <summary> 
            Gets or sets a value that indicates the collection of custom color values that will be rendered as color picker element. 
            </summary> 
            <remarks> 
            Preset colors option is only available in palette mode. 
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfColorPicker.ShowButtons">
            <summary> 
            Gets or sets a value that indicates whether to enable or disable the apply/cancel buttons. 
            </summary> 
            <value> 
            <c>true</c>, if the apply/cancel buttons were enabled. The default value is <c>true</c>. 
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfColorPicker.Value">
            <summary> 
            Gets or sets the color value for color picker. It should be specified as Hex code. 
            </summary> 
            <value> 
            Accepts a string value. The default value is <c>#008000ff</c>. 
            </value> 
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfColorPicker.ValueChanged">
            <summary> 
            Gets or sets an event callback that is raised when the <see cref="T:Syncfusion.Blazor.Inputs.SfColorPicker"/> color value changed.  
            </summary> 
            <value>
            An event callback function.
            </value>
            <remarks> 
            You can access the Color Picker item related values using <see cref="T:Syncfusion.Blazor.Inputs.ColorPickerEventArgs"/>. 
            </remarks> 
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfColorPicker.ValueExpression">
            <summary>
            Specifies the expression for defining the value of the bound.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfColorPicker.OnOpen">
            <summary> 
            Gets or sets an event callback that is raised when the <see cref="T:Syncfusion.Blazor.Inputs.SfColorPicker"/> popup is opening.  
            </summary> 
            <value>
            An event callback function.
            </value>
            <remarks> 
            you can access the ColorPicker popup related values using <see cref="T:Syncfusion.Blazor.Inputs.BeforeOpenCloseEventArgs"/>. 
            </remarks> 
            <example> 
            <code><![CDATA[ 
            <SfColorPicker OnOpen="@OnOpen"> 
            </SfColorPicker> 
            @code { 
                private void OnOpen(BeforeOpenCloseEventArgs args) { 
                    // Write your code here. 
                } 
            } 
            ]]></code> 
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfColorPicker.Opened">
            <summary> 
            Gets or sets an event callback that is raised when the <see cref="T:Syncfusion.Blazor.Inputs.SfColorPicker"/> popup is opened.  
            </summary> 
            <value>
            An event callback function.
            </value>
            <remarks> 
            You can access the SplitButton popup related values using <see cref="T:Syncfusion.Blazor.Inputs.OpenEventArgs"/>. 
            </remarks>
            <example> 
            <code><![CDATA[ 
            <SfColorPicker Opened="@Opened"> 
            </SfColorPicker> 
            @code { 
                private void Opened(OpenEventArgs args) { 
                    // Write your code here. 
                } 
            } 
            ]]></code> 
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfColorPicker.OnClose">
            <summary> 
            Gets or sets an event callback that is raised when the <see cref="T:Syncfusion.Blazor.Inputs.SfColorPicker"/> popup is closing.  
            </summary> 
            <value>
            An event callback function.
            </value>
            <remarks> 
            You can access the color picker popup related values using <see cref="T:Syncfusion.Blazor.Inputs.BeforeOpenCloseEventArgs"/>. 
            </remarks> 
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfColorPicker.OnModeSwitch">
            <summary> 
            Gets or sets an event callback that is raised before the <see cref="T:Syncfusion.Blazor.Inputs.SfColorPicker"/> mode switching is performed.  
            </summary> 
            <value>
            An event callback function.
            </value>
            <remarks> 
            You can access the Color Picker item related values using <see cref="T:Syncfusion.Blazor.Inputs.ModeSwitchEventArgs"/>. 
            </remarks> 
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfColorPicker.ModeSwitched">
            <summary> 
            Gets or sets an event callback that is raised when the <see cref="T:Syncfusion.Blazor.Inputs.SfColorPicker"/> mode switch performed.  
            </summary> 
            <remarks> 
            You can access the Color Picker item related values using <see cref="T:Syncfusion.Blazor.Inputs.ModeSwitchEventArgs"/>. 
            </remarks> 
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfColorPicker.OnTileRender">
            <summary> 
            Gets or sets an event callback that is raised when the <see cref="T:Syncfusion.Blazor.Inputs.SfColorPicker"/> tile rendering is completed.  
            </summary> 
            <value>
            An event callback function.
            </value>
            <remarks> 
            You can customize the color picker tile rendering using <see cref="T:Syncfusion.Blazor.Inputs.PaletteTileEventArgs"/>. 
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfColorPicker.ValueChange">
            <summary>
            Gets or sets an event callback that is raised  while changing the colors.
            </summary>
            <value>
            An event callback function.
            </value>
            <remarks>
            It will be triggered based on the <see cref="P:Syncfusion.Blazor.Inputs.SfColorPicker.ShowButtons"/> property.
            If the property is false, this event will be triggered while selecting the colors.
            If the property is true, this event will be triggered while apply the selected color.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfColorPicker.Selected">
            <summary> 
            Gets or sets an event callback that is raised when the <see cref="T:Syncfusion.Blazor.Inputs.SfColorPicker"/> palette or picker element is clicked.  
            </summary> 
            <value>
            An event callback function.
            </value>
            <remarks> 
            You can access the Color Picker item related values using <see cref="T:Syncfusion.Blazor.Inputs.ColorPickerEventArgs"/>. 
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfColorPicker.Created">
            <summary> 
            Gets or sets an event callback that is raised when the <see cref="T:Syncfusion.Blazor.Inputs.SfColorPicker"/> rendering is completed.  
            </summary>
            <value>
            An event callback function.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfColorPicker.ColorPickerParent">
            <summary>
            Parent component of ColorPicker.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfColorPicker.GetValue(System.String,Syncfusion.Blazor.Inputs.ColorValueType)">
            <summary>
            Gets color value in specified type.
            </summary>
            <param name = "value">Specify the color value.</param>
            <param name = "type">Specify the type to which the specified color needs to be converted.</param>
            <returns>The color value in a specific type.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfColorPicker.Toggle">
            <summary>
             Show/hide color picker popup based on current state of the split button.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfColorPicker.FocusAsync">
            <summary>
            Focuses the color picker.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.SfInputTextBase`1">
            <summary>
            The SfInputBase is an input element that allows to get input from the user. It allows the user to edit or display the text value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.OnChange">
            <summary>
            Triggers when the content of input has changed and gets focus-out.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.OnInput">
            <summary>
            Triggers each time when the value of input has changed.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.OnPaste">
            <summary>
            Triggers when the content is paste into an input.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.OnBlur">
            <summary>
            Triggers when the input has focus-out.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.OnFocus">
            <summary>
            Triggers when the input gets focus.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.ID">
            <summary>
            Gets or sets the ID of the component.
            </summary>
            <value>
            A string representing the identifier of the component.
            </value>
            <remarks>
            The ID property allows you to uniquely identify the component in the rendered HTML markup.
            If you don't set a custom ID, the component's ID will be auto-generated, and it
            may not be as descriptive as you require.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.Value">
            <summary>
            Gets or sets the value of the component.
            </summary>
            <value>
            The current value of the component.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.ValueChanged">
            <summary>
            Gets or sets the callback to trigger when the value changes.
            </summary>
            <value>
            Event callback
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.ValueExpression">
            <summary>
            Gets or sets the expression for defining the value of the bound.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.InputEditContext">
            <summary>
            Specifies the edit context of the Input.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.CssClass">
            <summary>
            Gets or sets a CSS class string to customize the appearance of the component.
            </summary>
            <value>
            Accepts a CSS class string separated by space to customize the appearance. The default value is <c>String.Empty</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.EnablePersistence">
            <summary>
            Gets or sets whether to persist component's state between page reloads. When set to <c>true</c>, the <see cref="P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.Value" /> property is persisted.
            </summary>
            <value>
            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>.
            </value>
            <remarks>
            Component's <see cref="P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.Value"/> property will be stored in browser local storage to persist component's state when page reloads.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.EnableRtl">
            <summary>
            Gets or sets whether the right-to-left direction is enabled or not for the component.
            </summary>
            <value>
            <c>true</c>, if the right to left direction is enabled for component. The default value is <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.Enabled">
            <summary>
             Gets or sets a value that indicates whether to enable or disable the component. 
            </summary>
            <value>
            <c>true</c>, if the component is enabled; otherwise, it is disabled. The default value is <c>true</c>. 
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.BaseFloatLabelType">
            <summary>
            Specifies the floating label behavior of the TextBox that the placeholder text floats above the TextBox based on the following values.
            <para>Possible values are:</para>
            <list type="bullet">
            <item>
            <term>Never</term>
            <description>Never floats the label in the TextBox when the placeholder is available.</description>
            </item>
            <item>
            <term>Always</term>
            <description>The floating label always floats above the TextBox.</description>
            </item>
            <item>
            <term>Auto</term>
            <description>The floating label floats above the TextBox after focusing it or when enters the value in it.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.ValidateOnInput">
            <summary>
            Gets or sets a value indicating whether validation should be performed on each input.
            </summary>
            <value>
            <c>true</c> if validation should be performed on each input; otherwise, <c>false</c>.The default value is <c>false</c>.
            </value>
            <remarks>
            This property is used to validate the form on typing into the input and updating the model value. The <c>ValueChange</c> event will be fired after the component lost its focus.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.ContainerAttr">
            <summary>
            Specifies the container attrubute of Input.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.SpinButton">
            <summary>
            Specifies a boolean value that enable or disable the spin button on the component.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.ValueTemplate">
            <summary>
            Accepts the template design and assigns it to the selected list item in the input element of the component.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.IsValueTemplate">
            <summary>
            Specifies a boolean value that indicates whether the value template is displayed in TextBox.
            </summary>
            <exclude/> 
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.ClickStopPropagation">
            <summary>
            Specifies the prevents the click actions.
            </summary>
            <exclude/> 
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.MouseDowSpinnerPrevent">
            <summary>
            Specifies the prevents the mouse actions.
            </summary>
            <exclude/> 
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.PreventIconHandler">
            <summary>
            Specifies the prevents the icon actions.
            </summary>
            <exclude/> 
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.MousePreventContainer">
            <summary>
            Specifies the prevents the container actions.
            </summary>
            <exclude/> 
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.ContainerClass">
            <summary>
            Specifies the class value that is appended to container of TextBox.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.RootClass">
            <summary>
            Gets or Set the component class to element.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfInputTextBase`1.OnInitializedAsync">
            <summary>
            Triggers while initial rendering of the component.
            </summary>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfInputTextBase`1.OnParametersSetAsync">
            <summary>
            Triggers when dynamically changing the component property.
            </summary>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfInputTextBase`1.SetReadOnly">
            <summary>
            The setReadOnly.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfInputTextBase`1.CreateFloatingLabel">
            <summary>
            The createFloatingLabel.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfInputTextBase`1.SetEnabled">
            <summary>
            The setEnabled.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfInputTextBase`1.BlurHandler">
            <summary>
            triggers while the component get focused out.
            </summary>
            <returns>Task.</returns>
            <exclude />
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.FormEventArgs">
            <summary>
            SPecifies the form event arguments.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FormEventArgs.Element">
            <summary>
            Returns the input element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FormEventArgs.ErrorElement">
            <summary>
            Returns the error element for corresponding input.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FormEventArgs.InputName">
            <summary>
            Returns the name of the input element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FormEventArgs.Message">
            <summary>
            Returns the error message.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FormEventArgs.Status">
            <summary>
            Returns the status input element.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.BlurEventArgs">
            <summary>
            Defines the argument for the blur event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.BlurEventArgs.Model">
            <summary>
            returns the model class.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.FocusEventArgs">
            <summary>
            Defines the argument for the focus event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FocusEventArgs.Model">
            <summary>
            returns the model class.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.IInput">
            <summary>
            Default required properties for input components.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.IInput.Change">
            <summary>
             Sets the change event mapping function to input.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.IInput.CssClass">
            <summary>
             Sets the css class value to input.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.IInput.EnableRtl">
            <summary>
             Sets the enable rtl value to input.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.IInput.Enabled">
            <summary>
             Sets the enabled value to input.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.IInput.FloatLabelType">
            <summary>
            Specifies how the floating label works.
            Possible values are:
             Never - Never float the label in the input when the placeholder is available.
             Always - The floating label will always float above the input.
             Auto - The floating label will float above the input after focusing or entering a value in the input.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.IInput.Placeholder">
            <summary>
             Sets the placeholder value to input.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.IInput.Readonly">
            <summary>
             Sets the readonly value to input.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.IInput.ShowClearButton">
            <summary>
             Specifies whether to display the Clear button in the input.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.ActionCompleteEventArgs">
            <summary>
            Provides information about the <see cref="P:Syncfusion.Blazor.Inputs.UploaderEvents.OnActionComplete"/> event callback.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ActionCompleteEventArgs.FileData">
            <summary>
            Gets the list of selected files' details from the <see cref="T:Syncfusion.Blazor.Inputs.SfUploader"/> component.
            </summary>
            <value>
            <see cref="T:Syncfusion.Blazor.Inputs.FileInfo"/>
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.BeforeRemoveEventArgs">
            <summary>
            Provides information about the <see cref="P:Syncfusion.Blazor.Inputs.UploaderEvents.BeforeRemove"/> event callback.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.BeforeRemoveEventArgs.Cancel">
            <summary>
            Gets or sets whether the file removal action has been canceled or not.
            </summary>
            <value>
            <see cref="T:System.Boolean"/>
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.BeforeRemoveEventArgs.CurrentRequest">
            <summary>
            Gets the XMLHttpRequest instance that is associated with the remove action.
            </summary>
            <value>
            Details of an XMLHttpRequest object.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.BeforeRemoveEventArgs.FilesData">
            <summary>
            Gets the list of file details that will be removed.
            </summary>
            <value>
            <see cref="T:Syncfusion.Blazor.Inputs.FileInfo"/>
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.BeforeRemoveEventArgs.CustomFormData">
            <summary>
            Gets or sets the additional data with key and value pair format to be submitted to the remove action.
            </summary>
            <value>
            Key and value pair object.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.BeforeRemoveEventArgs.PostRawFile">
            <summary>
            Gets or sets whether the selected raw file is sent to the server or not.
            </summary>
            <value>
            <see cref="T:System.Boolean"/>
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.BeforeUploadEventArgs">
            <summary>
            Provides information about the <see cref="P:Syncfusion.Blazor.Inputs.UploaderEvents.BeforeRemove"/> event callback.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.BeforeUploadEventArgs.Cancel">
            <summary>
            Gets or sets whether the file upload action has been canceled or not.
            </summary>
            <value>
            <see cref="T:System.Boolean"/>
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.BeforeUploadEventArgs.WithCredentials">
            <summary>
            Gets or sets the value that indicates requests should be made using credentials such as cookies and authorization headers for cross-site requests. The default is <c>false</c>.
            </summary>
            <value>
            <see cref="T:System.Boolean"/>
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.BeforeUploadEventArgs.CurrentRequest">
            <summary>
            Gets the XMLHttpRequest instance that is associated with the upload action.
            </summary>
            <value>
            Details of an XMLHttpRequest object.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.BeforeUploadEventArgs.FilesData">
            <summary>
            Gets the list of the selected file details.
            </summary>
            <value>
            <see cref="T:Syncfusion.Blazor.Inputs.FileInfo"/>
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.BeforeUploadEventArgs.CustomFormData">
            <summary>
            Gets or sets the additional data in key and value pair format to be sent to the file uploading request.
            </summary>
            <value>
            Key and value pair object.
            </value>
            <example>
            <code><![CDATA[
            <SfUploader>
                <UploaderEvents BeforeUpload="@BeforeUploadHandler"/>
            </SfUploader>
            @code {
            public void BeforeUploadHandler(BeforeUploadEventArgs args) {
               var accessToken = "Authorization_token";
               args.CurrentRequest = new List<object> { new { Authorization = accessToken } };
            }
            }
            ]]></code>
            </example>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.CancelEventArgs">
            <summary>
            Provides information about the <see cref="P:Syncfusion.Blazor.Inputs.UploaderEvents.OnCancel"/> event callback.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.CancelEventArgs.Cancel">
            <summary>
            Gets or sets whether the chunk file upload cancel action has been canceled or not.
            </summary>
            <value>
            <see cref="T:System.Boolean"/>
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.CancelEventArgs.Event">
            <summary>
            Returns the original event arguments.
            </summary>
            <value>
            The original event arguments for the current event.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.CancelEventArgs.FileData">
            <summary>
            Gets the canceled file details.
            </summary>
            <value>
            <see cref="T:Syncfusion.Blazor.Inputs.FileInfo"/>
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.ClearingEventArgs">
            <summary>
            Provides information about the <see cref="P:Syncfusion.Blazor.Inputs.UploaderEvents.OnClear"/> event callback.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ClearingEventArgs.Cancel">
            <summary>
            Gets or sets whether the file list clear action has been canceled or not.
            </summary>
            <value>
            <see cref="T:System.Boolean"/>
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ClearingEventArgs.FilesData">
            <summary>
            Gets the list of the file details that will be cleared from the file list.
            </summary>
            <value>
            <see cref="T:System.Collections.Generic.List`1"/>
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.FailureEventArgs">
            <summary>
            Provides information about the <see cref="P:Syncfusion.Blazor.Inputs.UploaderEvents.OnChunkFailure"/> and <see cref="P:Syncfusion.Blazor.Inputs.UploaderEvents.OnFailure"/> events callback.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FailureEventArgs.RetryFiles">
            <summary>
            Gets the details about retrying the upload files.
            </summary>
            <value>
            <see cref="T:Syncfusion.Blazor.Inputs.FileInfo"/>
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.FileInfo">
            <summary>
            Provides information about the selected files' details in the <see cref="T:Syncfusion.Blazor.Inputs.SfUploader"/> component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FileInfo.FileSource">
            <summary>
            Gets the file path of the selected file as specified by the browser.
            </summary>
            <value>
            <see cref="T:System.String"/>
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FileInfo.Id">
            <summary>
            Gets the unique ID of the file as specified by the browser.
            </summary>
            <value>
            <see cref="T:System.String"/>
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FileInfo.Input">
            <summary>
            Returns the input element mapped with file list item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FileInfo.List">
            <summary>
            Returns the respective file list item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FileInfo.Name">
            <summary>
            Gets the name of the file as specified by the browser.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FileInfo.RawFile">
            <summary>
            Gets the selected file details in the <see cref="T:Syncfusion.Blazor.Inputs.SfUploader"/> component.
            </summary>
            <value>
            <see cref="T:System.Object"/>
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FileInfo.Size">
            <summary>
            Gets the size of the file in bytes as specified by the browser.
            </summary>
            <see cref="T:System.Double"/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FileInfo.Status">
            <summary>
            Gets the status of the file as specified by the browser.
            </summary>
            <value>
            <see cref="T:System.String"/>
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FileInfo.StatusCode">
            <summary>
            Gets the current state of the file such as <c>Failed</c>, <c>Canceled</c>, <c>Selected</c>, <c>Uploaded</c>, or <c>Uploading</c>.
            </summary>
            <value>
            <see cref="T:System.String"/>
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FileInfo.Type">
            <summary>
            Gets the MIME type of the file as specified by the browser; If the file's type cannot be determined, an empty string is returned.
            </summary>
            <value>
            <see cref="T:System.String"/>
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FileInfo.MimeContentType">
            <summary>
            Gets the MIME type of the file as specified by the browser.
            </summary>
            <value>
            <see cref="T:System.String"/>
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FileInfo.LastModifiedDate">
            <summary>
            Gets the last modified date of the file as specified by the browser.
            </summary>
            <value>
            <see cref="T:System.DateTime"/>
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FileInfo.ValidationMessages">
            <summary>
            Gets the file size validation errors messages.
            </summary>
            <value>
            <see cref="T:Syncfusion.Blazor.Inputs.ValidationMessages"/>
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.FileListRenderingEventArgs">
            <summary>
            Provides information about the <see cref="P:Syncfusion.Blazor.Inputs.UploaderEvents.OnFileListRender"/> event callback.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FileListRenderingEventArgs.Element">
            <summary>
            Gets the current file item element.
            </summary>
            <value>
            The DOM element representing the current file item.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FileListRenderingEventArgs.FileInfo">
            <summary>
            Gets the current rendering file details.
            </summary>
            <value>
            <see cref="T:Syncfusion.Blazor.Inputs.FileInfo"/>
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FileListRenderingEventArgs.Index">
            <summary>
            Gets the index of the file item in the file list.
            </summary>
            <value>
            <see cref="T:System.Double"/>
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FileListRenderingEventArgs.IsPreload">
            <summary>
            Gets the information on whether the file is preloaded or not.
            </summary>
            <value>
            <see cref="T:System.Boolean"/>
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.PauseResumeEventArgs">
            <summary>
            Provides information about the <see cref="P:Syncfusion.Blazor.Inputs.UploaderEvents.Paused"/> and <see cref="P:Syncfusion.Blazor.Inputs.UploaderEvents.OnResume"/> events callback.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.PauseResumeEventArgs.ChunkCount">
            <summary>
            Gets the total number of chunks count.
            </summary>
            <value>
            <see cref="T:System.Double"/>
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.PauseResumeEventArgs.ChunkIndex">
            <summary>
            Get the index of the file chunk that is paused or resumed.
            </summary>
            <value>
            <see cref="T:System.Double"/>
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.PauseResumeEventArgs.ChunkSize">
            <summary>
            Gets the chunk size of the uploaded file in bytes.
            </summary>
            <value>
            <see cref="T:System.Double"/>
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.PauseResumeEventArgs.Event">
            <summary>
            Gets the original event arguments.
            </summary>
            <value>
            The original event arguments for the current event.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.PauseResumeEventArgs.File">
            <summary>
            Gets the passed or resumed file details.
            </summary>
            <value>
            <see cref="T:Syncfusion.Blazor.Inputs.FileInfo"/>
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.ProgressEventArgs">
            <summary>
            Provides information about the <see cref="P:Syncfusion.Blazor.Inputs.UploaderEvents.Progressing"/> event callback.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ProgressEventArgs.E">
            <summary>
            Gets the original event arguments.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ProgressEventArgs.LengthComputable">
            <summary>
            Gets or sets whether the file progress is computable or not.
            </summary>
            <value>
            <see cref="T:System.Boolean"/>
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ProgressEventArgs.Loaded">
            <summary>
            Gets or sets the file progressed size.
            </summary>
            <value>
            <see cref="T:System.Decimal"/>
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ProgressEventArgs.Total">
            <summary>
            Gets the total size of the uploading file.
            </summary>
            <value>
            <see cref="T:System.Decimal"/>
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ProgressEventArgs.File">
            <summary>
            Gets the details about the uploaded file.
            </summary>
            <value>
            <see cref="T:Syncfusion.Blazor.Inputs.FileInfo"/>
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ProgressEventArgs.Stream">
            <summary>
            Gets the stream of the uploaded file.
            </summary>
            <value>
            <see cref="T:System.IO.Stream"/>
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ProgressEventArgs.Operation">
            <summary>
            Gets the upload event operation.
            </summary>
            <value>
            <see cref="T:System.String"/>
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.RemovingEventArgs">
            <summary>
            Provides information about the <see cref="P:Syncfusion.Blazor.Inputs.UploaderEvents.OnRemove"/> event callback.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.RemovingEventArgs.Cancel">
            <summary>
            Gets or sets whether the file remove action has been canceled or not.
            </summary>
            <value>
            <see cref="T:System.Boolean"/>
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.RemovingEventArgs.CurrentRequest">
            <summary>
            Gets the XMLHttpRequest instance that is associated with the remove action.
            </summary>
            <value>
            Details of an XMLHttpRequest object.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.RemovingEventArgs.CustomFormData">
            <summary>
            Gets or sets the additional data in the key-value pair format that will be used for the file removal action.
            </summary>
            <value>
            Key and value pair object.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.RemovingEventArgs.Event">
            <summary>
            Gets the original event arguments.
            </summary>
            <value>
            The original event arguments for the current event.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.RemovingEventArgs.FilesData">
            <summary>
            Gets the list of the files’ details that will be removed.
            </summary>
            <value>
            <see cref="T:System.Collections.Generic.List`1"/>
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.RemovingEventArgs.PostRawFile">
            <summary>
            Gets or sets whether the selected raw file has been sent to the server or not in the remove action.
            Set true to send raw file.
            Set false to send file name only.
            </summary>
            <value>
            <c>true</c>, the selected raw file is sent to the server; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.ResponseEventArgs">
            <summary>
            Provides information about the argument for the response event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ResponseEventArgs.Headers">
            <summary>
            Gets or sets the current response header.
            </summary>
            <value>
            <see cref="T:System.String"/>
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ResponseEventArgs.ReadyState">
            <summary>
            Gets the current response ready state.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ResponseEventArgs.StatusCode">
            <summary>
            Gets the current response statusCode.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ResponseEventArgs.StatusText">
            <summary>
            Gets the current response statusText.
            </summary>
            <value>
            <see cref="T:System.String"/>
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ResponseEventArgs.ResponseText">
            <summary>
            Gets the current responseText.
            </summary>
            <value>
            <see cref="T:System.String"/>
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ResponseEventArgs.WithCredentials">
            <summary>
            Gets or sets the current response withCredentials.
            </summary>
            <value>
            <see cref="T:System.Boolean"/>
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.SelectedEventArgs">
            <summary>
            Provides information about the <see cref="P:Syncfusion.Blazor.Inputs.UploaderEvents.FileSelected"/> event callback.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SelectedEventArgs.Cancel">
            <summary>
            Gets or sets whether the file selection action has been canceled or not.
            </summary>
            <value>
            <see cref="T:System.Boolean"/>
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SelectedEventArgs.CurrentRequest">
            <summary>
            Gets the current request header to the XMLHttpRequest instance.
            </summary>
            <value>
            Details of an XMLHttpRequest object.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SelectedEventArgs.CustomFormData">
            <summary>
            Gets or sets the additional data in key and value pair format to be submitted to the upload action.
            </summary>
            <value>
            Key and value pair object.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SelectedEventArgs.Event">
            <summary>
            Gets the original event arguments.
            </summary>
            <value>
            The original event arguments for the current event.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SelectedEventArgs.FilesData">
            <summary>
            Gets the list of files selected for uploading.
            </summary>
            <value>
            <see cref="T:System.Collections.Generic.List`1"/>
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SelectedEventArgs.IsCanceled">
            <summary>
            Gets or sets whether the file selection has been canceled or not.
            </summary>
            <value>
            <see cref="T:System.Boolean"/>
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SelectedEventArgs.IsModified">
            <summary>
            Get or set whether the selected files list is generated based on the modified data.
            </summary>
            <value>
            <see cref="T:System.Boolean"/>
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SelectedEventArgs.ModifiedFilesData">
            <summary>
            Gets the modified file data to generate the file items. The argument depends on the <see cref="P:Syncfusion.Blazor.Inputs.SelectedEventArgs.IsModified"/> argument.
            </summary>
            <value>
            <see cref="T:System.Collections.Generic.List`1"/>
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SelectedEventArgs.ProgressInterval">
            <summary>
            Gets or sets the step value to the progress bar.
            </summary>
            <value>
            <see cref="T:System.String"/>
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SelectedEventArgs.Type">
            <summary>
            Gets the original event argument type.
            </summary>
            <value>
            Accepts the string value.
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.SuccessEventArgs">
            <summary>
            Provides information about the <see cref="P:Syncfusion.Blazor.Inputs.UploaderEvents.OnChunkSuccess"/> and <see cref="P:Syncfusion.Blazor.Inputs.UploaderEvents.Success"/> events callback.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SuccessEventArgs.ChunkIndex">
            <summary>
            Gets the uploaded file's chunk index.
            </summary>
            <value>
            <see cref="T:System.Double"/>
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SuccessEventArgs.ChunkSize">
            <summary>
            Gets the chunk size of the uploaded file in bytes.
            </summary>
            <value>
            <see cref="T:System.Double"/>
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SuccessEventArgs.E">
            <summary>
            Returns the original event arguments.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SuccessEventArgs.Event">
            <summary>
            Returns the original event arguments.
            </summary>
            <value>
            The original event arguments for the current event.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SuccessEventArgs.File">
            <summary>
            Gets the details about the uploaded file.
            </summary>
            <value>
            <see cref="T:Syncfusion.Blazor.Inputs.FileInfo"/>
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SuccessEventArgs.Operation">
            <summary>
            Gets the upload event operation.
            </summary>
            <value>
            <see cref="T:System.String"/>
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SuccessEventArgs.Response">
            <summary>
            Gets the details about the current response for the uploaded files.
            </summary>
            <value>
            <see cref="T:Syncfusion.Blazor.Inputs.ResponseEventArgs"/>
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SuccessEventArgs.StatusText">
            <summary>
            Gets or sets the upload files status text.
            </summary>
            <value>
            <see cref="T:System.String"/>
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SuccessEventArgs.TotalChunk">
            <summary>
            Gets the total number of chunk count.
            </summary>
            <value>
            <see cref="T:System.Double"/>
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.UploadFiles">
            <summary>
            Specify the details of the uploaded files in the class.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploadFiles.Stream">
            <summary>
            Gets the stream of the selected file.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploadFiles.FileInfo">
            <summary>
            Gets the <see cref="T:Syncfusion.Blazor.Inputs.FileInfo"/> object that provides details of the selected file such as name, size, status, and more.
            </summary>
            <value>
            <see cref="T:Syncfusion.Blazor.Inputs.FileInfo"/>
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploadFiles.File">
            <summary>
            Gets the data of a file selected from an <see cref="T:Syncfusion.Blazor.Inputs.SfUploader"/> component.
            </summary>
            <value>
            <see cref="T:Microsoft.AspNetCore.Components.Forms.IBrowserFile"/>
            </value>
            <remarks>/// The <see cref="P:Syncfusion.Blazor.Inputs.UploadFiles.File"/>property is typically used to handle file uploads in a Blazor application. 
            It represents the file selected by the user in the browser and provides access to the file's metadata, 
            such as the file name, size, and content type. To read the contents of the uploaded file, 
            call the `OpenReadStream()` method of the `IBrowserFile` interface, which returns a stream that you can use 
            to read the file data.
            </remarks>
            <example>
            <code><![CDATA[
            <SfUploader AutoUpload="true">
                <UploaderEvents ValueChange="@OnChange"></UploaderEvents>
            </SfUploader>
            @code{
                private async Task OnChange(UploadChangeEventArgs args)
                {
                    try
                    {
                        foreach (var file in args.Files)
                        {
                            var path = @"D:\" + file.FileInfo.Name;
                            FileStream filestream = new FileStream(path, FileMode.Create, FileAccess.Write);
                            await file.File.OpenReadStream(long.MaxValue).CopyToAsync(filestream);
                            filestream.Close();
                        }
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine(ex.Message);
                    }
                }
              }
            ]]></code>
            </example>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.UploadChangeEventArgs">
            <summary>
            Provides information about the <see cref="P:Syncfusion.Blazor.Inputs.UploaderEvents.ValueChange"/> event callback.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploadChangeEventArgs.Files">
            <summary>
            Gets the list of the selected files' details from the <see cref="T:Syncfusion.Blazor.Inputs.SfUploader"/> component.
            </summary>
            <value>
            <see cref="T:System.Collections.Generic.List`1"/>
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.UploadingEventArgs">
            <summary>
            Provides information about the <see cref="P:Syncfusion.Blazor.Inputs.UploaderEvents.OnChunkUploadStart"/> and <see cref="P:Syncfusion.Blazor.Inputs.UploaderEvents.OnUploadStart"/> events callback.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploadingEventArgs.Cancel">
            <summary>
            Gets or sets whether the file upload action has been canceled or not.
            </summary>
            <value>
            <see cref="T:System.Boolean"/>
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploadingEventArgs.ChunkSize">
            <summary>
            Gets the chunk size of the failure file in bytes.
            </summary>
            <value>
            <see cref="T:System.Boolean"/>
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploadingEventArgs.CurrentChunkIndex">
            <summary>
            Gets the index of the current chunk if the chunk upload is enabled. 
            </summary>
            <value>
            <see cref="T:System.Boolean"/>
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploadingEventArgs.CurrentRequest">
            <summary>
            Gets the XMLHttpRequest instance that is associated with the upload action.
            </summary>
            <value>
            Details of an XMLHttpRequest object.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploadingEventArgs.FileData">
            <summary>
            Gets the list of the file details that will be uploaded.
            </summary>
            <value>
            <see cref="T:Syncfusion.Blazor.Inputs.FileInfo"/>
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploadingEventArgs.CustomFormData">
            <summary>
            Gets or sets the additional data in key and value pair format to be submitted to the upload action.
            </summary>
            <value>
            Key and value pair object.
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.ValidationMessages">
            <summary>
            Defines the argument for the ValidationMessages.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ValidationMessages.MaxSize">
            <summary>
            Gets or sets the maximum file size validation message if the selected file size is less than the specified <see cref="P:Syncfusion.Blazor.Inputs.SfUploader.MaxFileSize"/> property.
            </summary>
            <value>
            <see cref="T:System.String"/>
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ValidationMessages.MinSize">
            <summary>
            Gets or sets the minimum file size validation message if the selected file size is less than the specified <see cref="P:Syncfusion.Blazor.Inputs.SfUploader.MinFileSize"/> property.
            </summary>
            <value>
            <see cref="T:System.String"/>
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.AsyncSettingsModel">
            <summary>
            Interface for a class AsyncSettings.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.AsyncSettingsModel.ChunkSize">
            <summary>
            Specifies the chunk size to split the large file into chunks, and upload it to the server in a sequential order.
            <para>If the ChunkSize property has value, the Uploader enables the chunk upload by default.</para>
            <para>It must be specified in bytes value.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.AsyncSettingsModel.RemoveUrl">
            <summary>
            Specifies the URL of remove action that receives the file information and handle the remove operation in server.
            <para>The remove action type must be POST request and define "RemoveFileNames" attribute to get file information that will be removed.</para>
            <para>This property is optional.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.AsyncSettingsModel.RetryAfterDelay">
            <summary>
            Specifies the delay time in milliseconds that the automatic retry happens after the delay.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.AsyncSettingsModel.RetryCount">
            <summary>
            Specifies the number of retries that the Uploader can perform on the file failed to upload.
            By default, the Uploader set 3 as maximum retries. This property must be specified to prevent infinity looping.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.AsyncSettingsModel.SaveUrl">
            <summary>
            Specifies the URL of save action that will receive the upload files and save in the server.
            <para>The save action type must be POST request and define the argument as same input name used to render the component.</para>
            <para>The upload operations could not perform without this property.</para>
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.ButtonsPropsModel">
            <summary>
            Interface for a class ButtonsProps.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ButtonsPropsModel.Browse">
            <summary>
            Specifies the text or html content to browse button.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ButtonsPropsModel.Clear">
            <summary>
            Specifies the text or html content to clear button.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ButtonsPropsModel.Upload">
            <summary>
            Specifies the text or html content to upload button.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.FilesPropModel">
            <summary>
            Interface for a class FilesProp.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FilesPropModel.Name">
            <summary>
            Specifies the name of the file.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FilesPropModel.Size">
            <summary>
            Specifies the size of the file.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FilesPropModel.Type">
            <summary>
            Specifies the type of the file.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.UploaderModel">
            <summary>
            Interface for a class Uploader.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.ActionComplete">
            <summary>
            Triggers after all the selected files has processed to upload successfully or failed to server.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.BeforeRemove">
            <summary>
            Triggers on remove the uploaded file. The event used to get confirm before remove the file from server.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.BeforeUpload">
            <summary>
            Triggers when the upload process before. This event is used to add additional parameter with upload request.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.Canceling">
            <summary>
            Fires if cancel the chunk file uploading.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.Change">
            <summary>
            Triggers when changes occur in uploaded file list by selecting or dropping files.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.ChunkFailure">
            <summary>
            Fires if the chunk file failed to upload.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.ChunkSuccess">
            <summary>
            Fires when the chunk file uploaded successfully.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.ChunkUploading">
            <summary>
            Fires when every chunk upload process gets started. This event is used to add additional parameter with upload request.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.Clearing">
            <summary>
            Triggers before clearing the items in file list when clicking "clear".
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.Created">
            <summary>
            Triggers when the Uploader is created.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.Failure">
            <summary>
            Triggers when the AJAX request fails on uploading or removing files.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.FileListRendering">
            <summary>
            Triggers before rendering each file item from the file list in a page.
            It helps to customize specific file item structure.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.Pausing">
            <summary>
            Fires if pause the chunk file uploading.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.Progress">
            <summary>
            Triggers when uploading a file to the server using the AJAX request.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.Removing">
            <summary>
            Triggers on removing the uploaded file. The event used to get confirm before removing the file from server.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.Resuming">
            <summary>
            Fires if resume the paused chunk file upload.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.Selected">
            <summary>
            Triggers after selecting or dropping the files by adding the files in upload queue.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.Success">
            <summary>
            Triggers when the AJAX request gets success on uploading files or removing files.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.Uploading">
            <summary>
            Triggers when the upload process gets started. This event is used to add additional parameter with upload request.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.AllowedExtensions">
            <summary>
            Specifies the extensions of the file types allowed in the Uploader component and pass the extensions
            with comma separators.
            <para> For example,if you want to upload specific image files, pass `AllowedExtensions` as ".jpg,.png".</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.AsyncSettings">
            <summary>
            Configures the save and remove URL to perform the upload operations in the server asynchronously.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.AutoUpload">
            <summary>
            By default, the Uploader component initiates automatic upload when the files are added in upload queue.
            <para>If you want to manipulate the files before uploading to server, disable the AutoUpload property.</para>
            <para>The buttons "upload" and "clear" will be hided from file list when AutoUpload property is true.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.Buttons">
            <summary>
            You can customize the default text of "browse, clear, and upload" buttons with plain text or HTML elements.
            The buttons' text can be customized from localization also.
            <para>If you configured both `Locale` and `Buttons` property,the Uploader component considers the `Buttons` property value.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.CssClass">
            <summary>
            Specifies the CSS class name that can be appended with root element of the Uploader.
            One or more custom CSS classes can be added to a Uploader.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.DirectoryUpload">
            <summary>
            Specifies a boolean value that indicates whether the folder of files can be browsed in the Uploader component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.DropArea">
            <summary>
            Specifies the drop target to handle the drag-and-drop upload.
            By default, the Uploader creates wrapper around file input that will act as drop target.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.DropEffect">
            <summary>
            Specifies the drag operation effect to the Uploader component.
            <para> Possible values are.</para>
            <list type="bullet">
            <item>
            <term>Copy</term>
            </item>
            <item>
            <term>Move</term>
            </item>
            <item>
            <term>Link</term>
            </item>
            <item>
            <term>None</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.EnablePersistence">
            <summary>
            Enable or disable persisting Uploader state between page reloads. If enabled, the `Files` state will be persisted.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.EnableRtl">
            <summary>
            Enable or disable rendering Uploader in right to left direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.Enabled">
            <summary>
            Specifies a boolean value that indicates whether the Uploader allows the user to interact with it.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.Files">
            <summary>
            Specifies the list of files that will be preloaded on rendering of Uploader component.
            The property used to view and remove the uploaded files from server.
            <para> By default, the files are configured with uploaded successfully state. The following properties are mandatory to configure the preload files:</para>
            <list type="bullet">
            <item>
            <term>Name</term>
            </item>
            <item>
            <term>Size</term>
            </item>
            <item>
            <term>Type</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.HtmlAttributes">
            <summary>
            <para>You can add the additional html attributes such as styles, class, and more to the root element.</para>
            <para>If you configured both property and equivalent html attributes, then the Uploader considers the property value.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.Locale">
            <summary>
            Specifies the global culture and localization of the Uploader component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.MaxFileSize">
            <summary>
            Specifies the maximum allowed file size to be uploaded in bytes.
            The property used to make sure that you cannot upload too large files.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.MinFileSize">
            <summary>
            Specifies the minimum file size to be uploaded in bytes.
            The property used to make sure that you cannot upload empty files and small files.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.Multiple">
            <summary>
            Specifies a boolean value that indicates whether the multiple files can be browsed or
            dropped simultaneously in the Uploader component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.SequentialUpload">
            <summary>
            By default, the file Uploader component is processing the multiple files simultaneously.
            <para>If SequentialUpload property is enabled, the file upload component performs the upload one after the other.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.ShowFileList">
            <summary>
            Specifies a boolean value that indicates whether the default file list can be rendered.
            The property used to prevent default file list and design own template for file list.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.Template">
            <summary>
            Specifies the HTML string that used to customize the content of each file in the list.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.MaskBlurEventArgs">
            <summary>
            Provides information about an <see cref="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.Blur"/> event being raised.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.MaskBlurEventArgs.Container">
            <summary>
            Gets the MaskedTextBox container element.
            </summary>
            <value>
            An <see cref="T:Microsoft.AspNetCore.Components.ElementReference"/> object that represents the MaskedTextBox container element.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.MaskBlurEventArgs.MaskedValue">
            <summary>
            Gets the value of the <see cref="T:Syncfusion.Blazor.Inputs.SfMaskedTextBox"/> with the masked format.
            </summary>
            <value>
            Returns the string value.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.MaskBlurEventArgs.Value">
            <summary>
            Gets the value of <see cref="T:Syncfusion.Blazor.Inputs.SfMaskedTextBox"/>.
            </summary>
            <value>
            Accepts the string value.
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.MaskChangeEventArgs">
            <summary>
            Provides information about an <see cref="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.ValueChange"/> event being raised.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.MaskChangeEventArgs.IsInteracted">
            <summary>
            Gets true when the value of MaskedTextBox is changed by user interaction. Otherwise, it returns false.
            </summary>
            <value>
            <c>true</c>, if the MaskedTextBox value has been changed by user interaction. Otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.MaskFocusEventArgs">
            <summary>
            Interface for focus event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.MaskFocusEventArgs.SelectionEnd">
            <summary>
            Returns selectionEnd value depends on mask length.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.MaskFocusEventArgs.SelectionStart">
            <summary>
            Returns selectionStart value as zero by default.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.MaskClientProps">
            <summary>
            Specifies the client properties of MaskedTextBox component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.MaskClientProps.Readonly">
            <summary>
            Specifies the read only property.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.MaskClientProps.Enabled">
            <summary>
            Specifies wheter the component in disabled state or not.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.MaskClientProps.SelectionEnd">
            <summary>
            Specifies the selection range end property of the component.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.MaskClientProps.SelectionStart">
            <summary>
            Specifies the selection start property of the component.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.MaskClientProps.Value">
            <summary>
            Specifies the value property of the component.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.MaskClientProps.Mask">
            <summary>
            Specifies the mask property of the component.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.MaskClientProps.keyValue">
            <summary>
            Specifies the key value  provided.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.MaskClientProps.IsMultipleDelete">
            <summary>
            Specifies whether the single charcater or multiple characters get deleted.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.MaskClientProps.PasteValue">
            <summary>
            Specifies the clipboard value.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.MaskClientProps.PromptCharacter">
            <summary>
            Specifies the prompt character of the component.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.MaskClientProps.PlaceHolder">
            <summary>
            Specifies the placeholder of the component.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.MaskClientProps.MaskedValue">
            <summary>
            SPecifies the value with mask literals.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.MaskClientProps.MaskValue">
            <summary>
            Specifies the input element value.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.MaskClientProps.FloatLabelType">
            <summary>
            Specifies the floatlabel type of the component.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.MaskClientProps.CustomRegExpCollec">
            <summary>
            Specifies the custom regex.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.MaskClientProps.HiddenMask">
            <summary>
            Specifies the mask literals with escape sequence and casing characters.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.MaskClientProps.PromptMask">
            <summary>
            Specifies the mask literals.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.SfMaskedTextBox">
            <summary>
            The MaskedTextBox is an input element that allows to get input from the user.
            </summary>
            <summary>
            The MaskedTextBox component allows input based on a specified mask pattern.
            </summary>
            <summary>
            The MaskedTextBox is an input element that allows to get input from the user.
            </summary>
            <summary>
            The MaskedTextBox is an input element that allows to get input from the user.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.Blur">
            <summary>
            Gets or sets the event callback that will be invoked when the <see cref="T:Syncfusion.Blazor.Inputs.SfMaskedTextBox"/> loses focus.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.ValueChange">
            <summary>
            Gets or sets the event callback that will be invoked when the content of <see cref="T:Syncfusion.Blazor.Inputs.SfMaskedTextBox"/> has changed.
            </summary>
            <example>
            <code><![CDATA[
            <SfMaskedTextBox Mask="(999) 000-0000" ValueChange="@OnChange">
            </SfMaskedTextBox>
            @code{
                private void OnChange(MaskChangeEventArgs args)
                {
                    var TextValue = args.Value;
                }
            }
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.Created">
            <summary>
            Gets or sets the event callback that will be invoked when the <see cref="T:Syncfusion.Blazor.Inputs.SfMaskedTextBox"/> component is created.
            </summary>
            <value>
            An event callback function.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.Destroyed">
            <summary>
            Gets or sets the event callback that will be invoked when the <see cref="T:Syncfusion.Blazor.Inputs.SfMaskedTextBox"/> component is destroyed.
            </summary>
            <value>
            An event callback function.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.Focus">
            <summary>
            Gets or sets the event callback that will be invoked when the <see cref="T:Syncfusion.Blazor.Inputs.SfMaskedTextBox"/> gets focus.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.OnChange">
            <summary>
            Triggers when the content of input has changed and gets focus-out.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.OnInput">
            <summary>
            Triggers each time when the value of input has changed.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.OnBlur">
            <summary>
            Triggers when the input has focus-out.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.OnFocus">
            <summary>
            Triggers when the input gets focus.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.ID">
            <summary>
            Gets or sets the ID of the component.
            </summary>
            <value>
            A string representing the identifier of the component.
            </value>
            <remarks>
            The ID property allows you to uniquely identify the component in the rendered HTML markup.
            If you don't set a custom ID, the component's ID will be auto-generated, and it
            may not be as descriptive as you require.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.ChildContent">
            <summary>
            Specifies the content that has to be passed.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.SfMaskedTextBoxEditContext">
            <summary>
            Specifies the edit context of MaskedTextBox component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.ValueExpression">
            <summary>
            Specifies the expression for defining the value of the bound.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.CssClass">
            <summary>
            Gets or sets a CSS class string to customize the appearance of the component.
            </summary>
            <value>
            Accepts a CSS class string separated by space to customize the appearance. The default value is <c>String.Empty</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.EnablePersistence">
            <summary>
            Gets or sets whether to persist component's state between page reloads. When set to <c>true</c>, the <see cref="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.Value" /> property is persisted.
            </summary>
            <value>
            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>.
            </value>
            <remarks>
            Component's <see cref="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.Value"/> property will be stored in browser local storage to persist component's state when page reloads.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.EnableRtl">
            <summary>
            Gets or sets whether the right-to-left direction is enabled or not for the component.
            </summary>
            <value>
            <c>true</c>, if the right to left direction can be enabled for the component. Otherwise. <c>false</c>. The default value is <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.Enabled">
            <summary>
            Gets or sets a value that indicates whether to enable or disable the <see cref="T:Syncfusion.Blazor.Inputs.SfMaskedTextBox"/> component. 
            </summary>
            <value>
            <c>true</c>, allow the user to interact with component. Otherwise, <c>false</c>. The default value is <c>true</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.FloatLabelType">
            <summary>
            Gets or sets the floating label behavior of the <see cref="T:Syncfusion.Blazor.Inputs.SfMaskedTextBox"/>. The <see cref="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.Placeholder"/> text act as a lable.
            </summary>
            <value>
            One of the <see cref="T:Syncfusion.Blazor.Inputs.FloatLabelType"/> enumeration. The default value is <see cref="F:Syncfusion.Blazor.Inputs.FloatLabelType.Never"/>
            </value>
            <remarks>
            If the <c>FloatLabelType</c> is <c>Never</c>, the placeholder text does not float as a label.
            If the <c>FloatLabelType</c> is <c>Auto</c>, the placeholder text will float above the <see cref="T:Syncfusion.Blazor.Inputs.SfMaskedTextBox"/> component as a label after focusing it.
            If the <c>FloatLabelType</c> is <c>Always</c>, the placeholder text is displayed as a label above the <see cref="T:Syncfusion.Blazor.Inputs.SfMaskedTextBox"/> component.
            </remarks>
            <example>
            In the following code example, set the float lable as <c>Auto</c>.
            <code><![CDATA[
              <SfMaskedTextBox Placeholder="Enter phone number" FloatLabelType="FloatLabelType.Auto" Mask="(999) 000-0000">
              </SfMaskedTextBox>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.HtmlAttributes">
            <summary>
            Gets or sets a collection of additional attributes such as styles, class, and more that will be applied to the <see cref="T:Syncfusion.Blazor.Inputs.SfMaskedTextBox"/> component.
            </summary>
            <value>
            The value as dictionary collection.The default value is <c>null</c>
            </value>
            <remarks>
            If you configured both property and equivalent html attributes, then the component considers the property value.
            </remarks>
            <example>
            <code><![CDATA[
            <SfMaskedTextBox HtmlAttributes="@CustomAttribute" Mask="(999) 000-0000">
            </SfMaskedTextBox>
            @code{
                Dictionary<string, object> CustomAttribute = new Dictionary<string, object>()
                {
                    { "title", "Please enter the phone number" }
                };
            }
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.InputAttributes">
            <summary>
            Gets or sets a collection of additional inputs attributes such as disabled, value, and more that will be applied to the TextBox component.        
            </summary>
            <value>
            The value as dictionary collection.The default value is <c>null</c>
            </value>
            <remarks>
            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive.
            If you configured both property and equivalent html attributes, then the component considers the property value.
            </remarks>
            <example>
            <code><![CDATA[
            <SfMaskedTextBox @attributes="@CustomAttribute" Mask="(999) 000-0000">
            </SfMaskedTextBox>
            @code{
                Dictionary<string, object> CustomAttribute = new Dictionary<string, object>()
                {
                    { "type", "tel" }
                };
            }
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.Placeholder">
            <summary>
            Gets or sets the text that is displayed when the <see cref="T:Syncfusion.Blazor.Inputs.SfMaskedTextBox"/> has no value and remove on the focus.
            </summary>
            <value>
            The text that is displayed when the MaskedTextBox has no value. The default value is <c>String.Empty</c>.
            </value>
            <remarks>
            The property depends on the <see cref="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.FloatLabelType"/> property, The placeholder text acts as a label.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.Readonly">
            <summary>
            Gets or sets the boolean value whether the <see cref="T:Syncfusion.Blazor.Inputs.SfMaskedTextBox"/> allows the user to change the text.
            </summary>
            <value>
            <c>true</c>, if the TextBox component cannot be edited. Otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.EnableLiterals">
            <summary>
             Gets or sets a value indicating whether literals are enabled in the masked text box.
             </summary>
             <value>
               <c>true</c> if literals are include in the <see cref="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.Value"/>; otherwise, <c>false</c>.
             </value>
             <remarks>
             When literals are enabled, the mask pattern can include literal characters in the <see cref="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.Value"/> property.
             You can get the masked value using <see cref="M:Syncfusion.Blazor.Inputs.SfMaskedTextBox.GetMaskedValue"/> method also. 
             </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.PromptPlaceholder">
             <summary>
             Gets or set character that is replace the blank spaces in the <see cref="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.Value"/> property.
             </summary>
             <value>
             Accepts the character value is used to replace the blank space. The default value is a space.
             </value>
            <remarks>
             You can use this option when you enable the <see cref="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.EnableLiterals"/> property: Otherwise, this option will not work.
            </remarks>
             <example>
             <code><![CDATA[
             <SfMaskedTextBox Mask="(999) 000-0000" EnableLiterals=true @bind-Value="@maskValue" PromptPlaceholder='@PlaceholderChar'>
             </SfMaskedTextBox>
             <p>Mask Value - @maskValue</p>
             @code{
                 private char PlaceholderChar = '*';
                 private string maskValue{ get; set; }
             }
             ]]></code>
             </example>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.ShowClearButton">
            <summary>
            Get or sets a value that indicates whether the clear button is displayed in <see cref="T:Syncfusion.Blazor.Inputs.SfMaskedTextBox"/> component.
            </summary>
            <value>
            <c>true</c>, if the clear button should be shown. Otherwise, <c>false</c>.The default is <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.Value">
            <summary>
            Gets or sets the current value of the masked text box.
            </summary>
            <value>
            The input value of the masked text box.
            </value>
            <remarks>
            The <see cref="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.Value"/> property holds the current text entered into the masked text box.
            If <see cref="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.EnableLiterals"/> is set to <c>true</c>, literal characters included in
            the mask pattern will also be part of the <see cref="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.Value"/>. Otherwise, only the
            user-entered characters will be part of the <see cref="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.Value"/>.
            </remarks>
            <example>
            <code><![CDATA[
            <SfMaskedTextBox Mask="(999) 000-0000" EnableLiterals=true @bind-Value="@maskValue">
            </SfMaskedTextBox>
            <p>Mask Value - @maskValue</p>
            @code{
                private string maskValue{ get; set; }
            }
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.ValueChanged">
            <summary>
            Gets or sets the callback to trigger when the value changes.
            </summary>
            <value>
            An event callback function.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.Width">
            <summary>
            Gets or sets the width of the <see cref="T:Syncfusion.Blazor.Inputs.SfMaskedTextBox"/> component.
            </summary>
            <value>
            The preferred width in pixels or percentage value. The default value is <c>100%</c>.
            </value>
            <example>
            <code><![CDATA[
              <SfMaskedTextBox @attributes="@CustomAttribute" Mask="(999) 000-0000">
              </SfMaskedTextBox>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.TabIndex">
            <summary>
            Gets or sets the tab order of the <see cref="T:Syncfusion.Blazor.Inputs.SfMaskedTextBox"/> component.
            </summary>
            <value>
            An integer value representing the tab index of the component.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.Mask">
            <summary>
            Gets or sets the mask pattern for the text input.
            </summary>
            <value>
            A string representing the mask pattern.
            </value>
            <remarks>
            The <see cref="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.Mask"/> property defines the pattern that the user's input must follow.
            It can include various special characters that define the allowed input format. For
            example, <c>#</c> might represent a digit and <c>_</c> might represent an optional character.
            Literal characters included in the mask will be displayed as part of the mask.
            </remarks>
            <example>
            <code><![CDATA[
            <SfMaskedTextBox Mask="(999) 000-0000">
            </SfMaskedTextBox>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.PromptChar">
            <summary>
            Gets or sets the character used as a placeholder in the masked text box for unfilled positions.
            </summary>
            <value>
            The character that indicates an unfilled position in the mask. The default value is <c>_</c>.
            </value>
            <remarks>
            The <see cref="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.PromptChar"/> is used to visually indicate the available input positions in
            the mask that the user can fill.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.CustomCharacters">
            <summary>
            Gets or sets a collection of custom characters that can be used for non-mask elements(literals).
            </summary>
            <value>
            A dictionary value of custom characters.
            </value>
            <remarks>
            The <see cref="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.CustomCharacters"/> property allows you to define additional special
            characters that can be used in the mask pattern. For example non-mask elements "P" accepts values
            "P" , "A" , "p" , "a" and "M" accepts values "M", "m" mentioned in the custom characters collection.
            </remarks>
            <example>
            <code><![CDATA[
            <SfMaskedTextBox Mask="00:00 >PM" CustomCharacters="@customMask">
            </SfMaskedTextBox>
            @code{
                private Dictionary<string, string> customMask = new Dictionary<string, string>()
                {
                    {"P" , "P,p,A,a" },
                    {"M" , "m,M" }
                }
            }
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.MaskedTextBoxParent">
            <summary>
            Parent component of Numeric TextBox.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfMaskedTextBox.GetMaskedValue">
            <summary>
            Gets the value of <see cref="T:Syncfusion.Blazor.Inputs.SfMaskedTextBox"/> with respective mask.
            </summary>
            <returns>The value with mask literals.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfMaskedTextBox.FocusAsync">
            <summary>
            Sets the focus to <see cref="T:Syncfusion.Blazor.Inputs.SfMaskedTextBox"/> component for interaction.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfMaskedTextBox.FocusOutAsync">
            <summary>
            Remove the focus from <see cref="T:Syncfusion.Blazor.Inputs.SfMaskedTextBox"/> component, if the component is in focus state.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfMaskedTextBox.GetPersistDataAsync">
            <summary>
            Gets the properties to be maintained in the persisted state.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfMaskedTextBox.UpdatePasteValue(Syncfusion.Blazor.Inputs.MaskClientProps)">
            <summary>
            Gets the clipboard values and its related properties from client.
            </summary>
            <param name="args">Specifies the mask client properties.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfMaskedTextBox.OnInitializedAsync">
            <summary>
            Triggers while initial rendering of the component.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfMaskedTextBox.OnParametersSetAsync">
            <summary>
            Triggers while dynamically updating the component properties.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfMaskedTextBox.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Triggers after the component was rendered.
            </summary>
            <param name="firstRender">true if the component rendered for the first time.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfMaskedTextBox.UpdateParentClass(System.String,System.String)">
            <summary>
            Update the parent component class to the element.
            </summary>
            <param name="rootClass">Specifies the root class of the component.</param>
            <param name="containerClass">Specifies the container class o the component.</param>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfMaskedTextBox.UpdateInputValue(System.String,System.Boolean)">
            <summary>
            Update the respective value property without mask literals.
            </summary>
            <param name="inputval">Specifies the value with mask literals.</param>
            <param name="isPaste">true if the user performs paste action , otherwise false.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.ChangeEventArgs`1">
            <summary>
            Interface for change event.
            </summary>
            <typeparam name="T">Specifies the type of ChangeEventArgs.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ChangeEventArgs`1.Event">
            <summary>
            Returns the event parameters from NumericTextBox.
            </summary>
            <value>
            The EventArgs object that contains information about the event.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ChangeEventArgs`1.IsInteracted">
            <summary>
            Returns true when the value of NumericTextBox is changed by user interaction. Otherwise, it returns false.
            </summary>
            <value>
            <c>true</c>, if the value of NumericTextBox has been changed by user interaction. Otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ChangeEventArgs`1.Name">
            <summary>
            Specifies name of the event.
            </summary>
            <value>
            Accepts the string value.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ChangeEventArgs`1.PreviousValue">
            <summary>
            Returns the previously entered value of the NumericTextBox.
            </summary>
            <value>
            Previous value of text box.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ChangeEventArgs`1.Value">
            <summary>
            Returns the entered value of the NumericTextBox.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.NumericBlurEventArgs`1">
            <summary>
            Interface for Blur event.
            </summary>
            <typeparam name="T">Specifies the type of NumericBlurEventArgs.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericBlurEventArgs`1.Container">
            <summary>
            Returns the NumericTextBox container element.
            </summary>
            <value>
            An <see cref="T:Microsoft.AspNetCore.Components.ElementReference"/> object that represents the NumericTextBox container element.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericBlurEventArgs`1.Event">
            <summary>
            Returns the original event arguments.
            </summary>
            <value>
            The original event arguments for the current event.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericBlurEventArgs`1.Name">
            <summary>
            Specifies name of the event.
            </summary>
            <value>
            Accepts the string value.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericBlurEventArgs`1.Value">
            <summary>
            Returns the value of the NumericTextBox.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.NumericFocusEventArgs`1">
            <summary>
            Interface for Focus event.
            </summary>
            <typeparam name="T">Specifies the type of NumericFocusEventArgs.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericFocusEventArgs`1.Container">
            <summary>
            Returns the NumericTextBox container element.
            </summary>
            <value>
            An <see cref="T:Microsoft.AspNetCore.Components.ElementReference"/> object that represents the NumericTextBox container element.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericFocusEventArgs`1.Event">
            <summary>
            Returns the original event arguments.
            </summary>
            <value>
            The original event arguments for the current event.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericFocusEventArgs`1.Name">
            <summary>
            Specifies name of the event.
            </summary>
            <value>
            Accepts the string value.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericFocusEventArgs`1.Value">
            <summary>
            Returns the value of the NumericTextBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericClientProps.Readonly">
            <summary>
            Specifies the component is in read-only mode or not.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericClientProps.Enabled">
            <summary>
            Specifies the component is in disabled state or not.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericClientProps.Locale">
            <summary>
            Specifies the locale property.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericClientProps.ValidateDecimalOnType">
            <summary>
            Specifies the ValidateDecimalOnType property.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericClientProps.Decimals">
            <summary>
            Specifies the Decimals property.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericClientProps.DecimalSeparator">
            <summary>
            Specifies the DecimalSeparator property.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.NumericTextBoxModel`1">
            <summary>
            Interface for a class NumericTextBox.
            </summary>
            <typeparam name="T">Specifies the type of NumericTextBoxModel.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericTextBoxModel`1.CssClass">
            <summary>
            Specifies the CSS class name that can be appended with the root element of the NumericTextBox. One or more custom CSS classes can be added to a NumericTextBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericTextBoxModel`1.Currency">
            <summary>
            Specifies the currency code to use in currency formatting. Possible values are the ISO 4217 currency codes, such as 'USD' for the US dollar and 'EUR' for the euro.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericTextBoxModel`1.Decimals">
            <summary>
            Specifies the number precision applied to the textbox value when the NumericTextBox is focused.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericTextBoxModel`1.EnablePersistence">
            <summary>
            Enable or disable persisting NumericTextBox state between page reloads. If enabled, the `Value` state will be persisted.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericTextBoxModel`1.EnableRtl">
            <summary>
            Enable or disable rendering component in right to left direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericTextBoxModel`1.Enabled">
            <summary>
            Specifies a boolean value that indicates whether the NumericTextBox allows the user to interact with it.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericTextBoxModel`1.FloatLabelType">
            <summary>
            Specifies the floating label behavior of the NumericTextBox that the placeholder text floats above the NumericTextBox based on the below values.
            <para>Possible values are:</para>
            <list type="bullet">
            <item>
            <term>Never</term>
            <description>Never floats the label in the NumericTextBox when the placeholder is available.</description>
            </item>
            <item>
            <term>Always</term>
            <description>The floating label always floats above the NumericTextBox.</description>
            </item>
            <item>
            <term>Auto</term>
            <description>The floating label floats above the NumericTextBox after focusing it or when enters the value in it.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericTextBoxModel`1.Format">
            <summary>
            Specifies the number format that indicates the display format for the value of the NumericTextBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericTextBoxModel`1.HtmlAttributes">
            <summary>
            <para>You can add the additional html attributes such as styles, class, and more to the root element.</para>
            <para>If you configured both property and equivalent html attributes, then the component considers the property value.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericTextBoxModel`1.InputAttributes">
            <summary>
            <para>You can add the additional input attributes such as disabled, value, and more to the root element.</para>
            <para>If you configured both property and equivalent input attribute, then the component considers the property value.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericTextBoxModel`1.Placeholder">
            <summary>
            Specifies the text that is shown as a hint or placeholder until the user focuses or enter a value in TextBox. The property is depending on the FloatLabelType property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericTextBoxModel`1.Readonly">
            <summary>
            Specifies the boolean value whether the NumericTextBox allows user to change the text.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericTextBoxModel`1.ShowClearButton">
            <summary>
            Specifies a boolean value that indicates whether the clear button is displayed in NumericTextBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericTextBoxModel`1.ShowSpinButton">
            <summary>
            Specifies whether the up and down spin buttons will be displayed in NumericTextBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericTextBoxModel`1.Step">
            <summary>
            Specifies the incremental or decremental step size for the NumericTextBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericTextBoxModel`1.StrictMode">
            <summary>
            Specifies a value that indicates whether the NumericTextBox component allows the value for the specified range.
            <para>True- the input value will be restricted between the min and max range. The typed value gets modified to fit the range on a focused out state.</para>
            <para>Else, it allows any value even out of range value, at that time of wrong value entered, the error class will be added to the component to highlight the error.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericTextBoxModel`1.ValidateDecimalOnType">
            <summary>
            Specifies whether the length of the decimal should be restricted during typing.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericTextBoxModel`1.Value">
            <summary>
            Sets the value of the NumericTextBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericTextBoxModel`1.Width">
            <summary>
            Specifies the width of the NumericTextBox component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericTextBoxModel`1.TabIndex">
            <summary>
            Specifies the tab order of the NumericTextBox component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericTextBoxModel`1.Max">
            <summary>
            Specifies a maximum value that is allowed a user can enter.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericTextBoxModel`1.Min">
            <summary>
            Specifies a minimum value that is allowed a user can enter.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.NumericTextBoxEvents`1">
            <summary>
            The NumericTextBox is used to get the number inputs from the user. The input values can be incremented or decremented by a predefined step value.
            </summary>
            <typeparam name="TValue">Specifies the type of SfNumericTextBox.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericTextBoxEvents`1.BaseParent">
            <summary>
            Specifies the base parent of SfNumericTextBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericTextBoxEvents`1.Blur">
            <summary>
            Gets or sets the event callback that will be invoked when the component loses focus.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericTextBoxEvents`1.ValueChange">
            <summary>
            Gets or sets the event callback that will be invoked when the value of <see cref="T:Syncfusion.Blazor.Inputs.SfNumericTextBox`1"/> has changed.
            </summary>
            <example>
            <code><![CDATA[
            <SfNumericTextBox TValue="int?" Placeholder="Enter the value" >
                <NumericTextBoxEvents TValue="int?" ValueChange="@OnChange"/>
            </SfNumericTextBox>
            @code{
                private void OnChange(ChangeEventArgs<int?> args)
                {
                    var CurrentValue = args.Value;
                }
            }
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericTextBoxEvents`1.Created">
            <summary>
            Gets or sets the event callback that will be invoked when the <see cref="T:Syncfusion.Blazor.Inputs.SfNumericTextBox`1"/> component is created.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericTextBoxEvents`1.Destroyed">
            <summary>
            Gets or sets the event callback that will be invoked when the <see cref="T:Syncfusion.Blazor.Inputs.SfNumericTextBox`1"/> component is destroyed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericTextBoxEvents`1.Focus">
            <summary>
            Gets or sets the event callback that will be invoked when the <see cref="T:Syncfusion.Blazor.Inputs.SfNumericTextBox`1"/> gets focus.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.NumericTextBoxEvents`1.OnInitializedAsync">
            <summary>
            Triggers while initial rendering of the component.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.SfNumericTextBox`1">
            <summary>
            The NumericTextBox is used to get the number inputs from the user. The input values can be incremented or decremented by a predefined step value.
            </summary>
            <summary>
            The NumericTextBox is used to get the number inputs from the user. The input values can be incremented or decremented by a predefined step value.
            </summary>
            <summary>
            The NumericTextBox is used to get the number inputs from the user. The input values can be incremented or decremented by a predefined step value.
            </summary>
            <typeparam name="TValue">Specifies the type of SfNumericTextBox.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.ChildContent">
            <summary>
            Specifies the content that has to be passed.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.Currency">
            <summary>
            Gets or sets the currency code to use in currency formatting. Possible values are the ISO 4217 currency codes, such as <c>USD</c> for the US dollar and <c>EUR</c> for the euro.
            </summary>
            <value>
            Accepts the string value representing the currency code.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.FloatLabelType">
            <summary>
            Gets or sets the floating label behavior of the <see cref="T:Syncfusion.Blazor.Inputs.SfNumericTextBox`1"/>. The <see cref="P:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.Placeholder"/> text act as a lable.
            </summary>
            <value>
            One of the <see cref="T:Syncfusion.Blazor.Inputs.FloatLabelType"/> enumeration. The default value is <see cref="F:Syncfusion.Blazor.Inputs.FloatLabelType.Never"/>
            </value>
            <remarks>
            If the <c>FloatLabelType</c> is <c>Never</c>, the placeholder text does not float as a label.
            If the <c>FloatLabelType</c> is <c>Auto</c>, the placeholder text will float above the Numeric TextBox component as a label after focusing it.
            If the <c>FloatLabelType</c> is <c>Always</c>, the placeholder text is displayed as a label above the Numeric TextBox component.
            </remarks>
            <example>
            In the following code example, set the float lable as <c>Auto</c>.
            <code><![CDATA[
              <SfNumericTextBox TValue="int?" Placeholder="Enter the value" FloatLabelType="FloatLabelType.Auto">
              </SfNumericTextBox>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.Placeholder">
            <summary>
            Gets or sets the text that is displayed when the <see cref="T:Syncfusion.Blazor.Inputs.SfNumericTextBox`1"/> has no value and remove on the focus.
            </summary>
            <value>
            The text that is displayed when the TextBox has no value. The default value is <c>String.Empty</c>.
            </value>
            <remarks>
            The property depends on the <see cref="P:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.FloatLabelType"/> property, The placeholder text acts as a label.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.Readonly">
            <summary>
            Gets or sets the boolean value whether the <see cref="T:Syncfusion.Blazor.Inputs.SfNumericTextBox`1"/> allows the user to change the text.
            </summary>
            <value>
            <c>true</c>, if the TextBox component cannot be edited. Otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.ShowClearButton">
            <summary>
            Get or sets a value that indicates whether the clear button is displayed in <see cref="T:Syncfusion.Blazor.Inputs.SfNumericTextBox`1"/> component.
            </summary>
            <value>
            <c>true</c>, if the clear button should be shown. Otherwise, <c>false</c>.The default is <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.Width">
            <summary>
            Gets or sets the width of the <see cref="T:Syncfusion.Blazor.Inputs.SfNumericTextBox`1"/> component.
            </summary>
            <value>
            The preferred width in pixels or percentage value. The default value is <c>100%</c>.
            </value>
            <example>
            <code><![CDATA[
              <SfNumericTextBox TValue="int?" Width="200px">
              </SfNumericTextBox>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.TabIndex">
            <summary>
            Gets or sets the tab order of the <see cref="T:Syncfusion.Blazor.Inputs.SfNumericTextBox`1"/> component.
            </summary>
            <value>
            An integer value representing the tab index of the component.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.HtmlAttributes">
            <summary>
            Gets or sets a collection of additional attributes such as styles, class, and more that will be applied to the <see cref="T:Syncfusion.Blazor.Inputs.SfNumericTextBox`1"/> component.
            </summary>
            <value>
            The value as dictionary collection.The default value is <c>null</c>
            </value>
            <remarks>
            If you configured both property and equivalent html attributes, then the component considers the property value.
            </remarks>
            <example>
            <code><![CDATA[
            <SfNumericTextBox TValue="int?" HtmlAttributes="@CustomAttribute">
            </SfNumericTextBox>
            @code{
                Dictionary<string, object> CustomAttribute = new Dictionary<string, object>()
                {
                    { "title", "Please enter the unit" }
                };
            }
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.InputAttributes">
            <summary>
            Gets or sets a collection of additional inputs attributes such as disabled, value, and more that will be applied to the TextBox component.        
            </summary>
            <value>
            The value as dictionary collection.The default value is <c>null</c>
            </value>
            <remarks>
            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive.
            If you configured both property and equivalent html attributes, then the component considers the property value.
            </remarks>
            <example>
            <code><![CDATA[
            <SfNumericTextBox TValue="int?" Placeholder="Enter the PIN" @attributes="@CustomAttribute">
            </SfNumericTextBox>
            @code{
                Dictionary<string, object> CustomAttribute = new Dictionary<string, object>()
                {
                    { "maxlength", "4" }
                };
            }
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.Decimals">
            <summary>
            Gets or sets the number of decimal places to display for numeric values.
            </summary>
            <value>
            An integer value representing the number of decimal places. Use <c>null</c> to display the default number of decimal places.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.Format">
            <summary>
            Gets or sets the format string used to display numeric values.
            </summary>
            <value>
            A string value representing the format pattern. The default value is <c>n2</c> which represents a number with two decimal places.
            </value>
            <remarks>
            You can customize the format string according to your requirements. The format string follows the standard format specifiers used in .NET formatting. For example, <c>n3</c> would display a number with three decimal places.
            </remarks>
            <example>
            <code><![CDATA[
              <SfNumericTextBox TValue="decimal?" Placeholder="Enter the value" Format="n3" >
              </SfNumericTextBox>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.ShowSpinButton">
            <summary>
            Gets or sets a value indicating whether to display spin buttons for incrementing and decrementing the numeric value.
            </summary>
            <value>
            <c>true</c> if spin buttons should be shown; otherwise, <c>false</c>
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.Step">
            <summary>
            Gets or sets the increment or decrement value for changing the numeric value.
            </summary>
            <value>
            The step value that determines how much the numeric value changes when interacting with the component.
            </value>
            <example>
            <code><![CDATA[
              <SfNumericTextBox TValue="int?" Placeholder="Enter the value" Step=5 >
              </SfNumericTextBox>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.StrictMode">
            <summary>
            Gets or sets a value indicating whether the component operates in strict mode for value validation.
            </summary>
            <value>
            <c>true</c>, if input value will be restricted between the min and max range. The typed value gets modified to fit the range on a focused out state. 
            Otherwise, <c>false</c> it allows any value even out of range value, at that time of wrong value entered, the error class will be added to the component to highlight the error. The default value is <c>true</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.ValidateDecimalOnType">
            <summary>
             Gets or sets a value indicating whether to perform decimal validation during typing.
            </summary>
            <value>
            <c>true</c> if decimal validation should be performed during typing; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.Max">
            <summary>
            Gets or sets the maximum allowable value for the input.
            </summary>
            <value>
            The maximum allowable value for the input. The default value is determined by the maximum possible value for the data type.
            </value>
            <example>
            <code><![CDATA[
              <SfNumericTextBox TValue="int?" Placeholder="Enter the value" Max=10 >
              </SfNumericTextBox>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.Min">
            <summary>
            Gets or sets the minimum allowable value for the input.
            </summary>
            <value>
            The minimum allowable value for the input. The default value is determined by the minimum possible value for the data type.
            </value>
            <example>
            <code><![CDATA[
              <SfNumericTextBox TValue="int?" Placeholder="Enter the value" Min=5 >
              </SfNumericTextBox>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.NumericTextBoxParent">
            <summary>
            Parent component of DataManager.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.DecrementAsync(`0)">
            <summary>
            Decrements the value asynchronously by the specified step.
            </summary>
            <param name="step">The step value by which to decrement the current value. If its not given then numeric value will be decremented based on the <see cref="P:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.Step"/> property value.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.FocusAsync">
            <summary>
            Sets the focus to the NumericTextBox component for interaction.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.FocusOutAsync">
            <summary>
            Remove the focus from the NumericTextBox component, if the component is in focus state.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.GetPersistDataAsync">
            <summary>
            Gets the properties to be maintained in the persisted state.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.GetFormattedText">
            <summary>
             Gets the formatted text representation of the current value.
            </summary>
            <returns>The formatted text representation of the current value.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.UpdateFieldSetStatus(System.Boolean)">
            <summary>
            Sets the Enabled value to false if the closest <fieldset></fieldset> value is set to disabled.
            </summary>
            <param name="isEnabled">A boolean value indicating whether the component should be enabled or disabled.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.IncrementAsync(`0)">
            <summary>
            Increments the NumericTextBox value with the specified step value.
            <param name="step">Specifies the value used to increment the NumericTextBox value.If its not given then numeric value will be incremented based on the <see cref="P:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.Step"/> property value.</param>
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.InvokePasteHandler(System.String,System.String)">
            <summary>
            Invoke the event, while paste the value to input element.
            </summary>
            <param name="beforeValue">Specifies the previous element value.</param>
            <param name="eventType">Specifies the type of the event.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.ServerAction(System.String,System.EventArgs,System.String)">
            <summary>
            Invokable the increment/decrement actions.
            </summary>
            <param name="action">Specifies the action.</param>
            <param name="args"><see cref="T:System.EventArgs"/> arguments.</param>
            <param name="currentInputValue">Specifies the input value</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.ServerupdateValue(`0,System.EventArgs)">
            <summary>
            Invokable the component value.
            </summary>
            <returns>Task.</returns>
            <param name="value">Specifies the value.</param>
            <param name="args"><see cref="T:System.EventArgs"/> arguments.</param>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.ContainerClass">
            <summary>
            Specifies the class value that is appended to container of TextBox.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.RootClass">
            <summary>
            Gets or Set the component class to element.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.IsFocus">
            <summary>
            Specifies the input is focused state.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.minMaxValue">
            <summary>
            Set the min and max validation value to the property.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.OnInitializedAsync">
            <summary>
            Triggers while initial rendering of the component.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.SetCssClass">
            <summary>
            Set the css class to component container element.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.OnParametersSetAsync">
            <summary>
            Triggers while dynamically updating the component properties.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Triggers after the component was rendered.
            </summary>
            <param name="firstRender">true if the component rendered for the first time.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.InvokeInputEvent">
            <summary>
            Bind the input event to the input element for enabled clear button and floatlabel to the component.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.UpdateAriaMinMaxAttributes(System.Boolean,System.Boolean)">
            <summary>
            Method which updates or removes the aria-valuemin and aria-valuemax 
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfOtpInput.Length">
            <summary> 
            Gets or sets a value indicating the number of Otp input in <see cref="T:Syncfusion.Blazor.Inputs.SfOtpInput"/>. 
            </summary> 
            <value> 
            <c>4</c> If the count is not set; otherwise The default input count will be considered. 
            </value> 
            <remarks> 
            The user can control the number of OTP input fields to be rendered. 
            </remarks> 
            <example>
            <code><![CDATA[
            <SfOtpInput Length=4></SfOtpInput>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfOtpInput.Value">
            <summary> 
            Gets or sets the value for the Otp input in <see cref="T:Syncfusion.Blazor.Inputs.SfOtpInput"/>. Supports two-way binding. 
            </summary> 
            <value> 
            A string representing the value of the input. The default value is an empty string. 
            </value> 
            <remarks> 
            The value can be used to update the Otp input value dynamically. Define @bind-Value to use two-way binding. 
            </remarks> 
            <example>
            <code><![CDATA[
            <SfOtpInput Value="1234"></SfOtpInput>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfOtpInput.ID">
            <summary>
            Sets id attribute for the Otp input element.
            </summary>
            <value>
            Accepts the string value.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfOtpInput.Type">
            <summary> 
            Gets or sets the type of the Otp input in <see cref="T:Syncfusion.Blazor.Inputs.SfOtpInput"/>. 
            </summary> 
            <value> 
            A <see cref="T:Syncfusion.Blazor.Inputs.OtpInputType"/> value representing the type of the Otp input. The default value is <see cref="F:Syncfusion.Blazor.Inputs.OtpInputType.Number"/>. 
            </value> 
            <remarks> 
            The type indicates the input type of the Otp inputs, which can be one of the following: 
            - <see cref="F:Syncfusion.Blazor.Inputs.OtpInputType.Number"/> 
            - <see cref="F:Syncfusion.Blazor.Inputs.OtpInputType.Text"/> 
            - <see cref="F:Syncfusion.Blazor.Inputs.OtpInputType.Password"/> 
            </remarks>
            <example>
            <code><![CDATA[
            <SfOtpInput Value="1234" Type="OtpInputType.Number"></SfOtpInput>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfOtpInput.StylingMode">
            <summary> 
            Gets or sets the style variant for the input fields in <see cref="T:Syncfusion.Blazor.Inputs.SfOtpInput"/>. 
            </summary> 
            <value> 
            An <see cref="T:Syncfusion.Blazor.Inputs.OtpInputStyle"/> value representing the style of the Otp input. The default value is <see cref="F:Syncfusion.Blazor.Inputs.OtpInputStyle.Outlined"/>. 
            </value> 
            <remarks> 
            The <see cref="P:Syncfusion.Blazor.Inputs.SfOtpInput.StylingMode"/> can be used to change the display style of the Otp input fields, which can be one of the following: 
            - <see cref="F:Syncfusion.Blazor.Inputs.OtpInputStyle.Filled"/> 
            - <see cref="F:Syncfusion.Blazor.Inputs.OtpInputStyle.Outlined"/> 
            - <see cref="F:Syncfusion.Blazor.Inputs.OtpInputStyle.Underlined"/> 
            </remarks> 
            <example>
            <code><![CDATA[
            <SfOtpInput StylingMode="OtpInputStyle.Outlined"></SfOtpInput>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfOtpInput.Separator">
            <summary> 
            Gets or sets the separator for the Otp input in <see cref="T:Syncfusion.Blazor.Inputs.SfOtpInput"/>. 
            </summary> 
            <value> 
            A string representing the separator added between the input fields. The default value is an empty string. 
            </value> 
            <remarks> 
            The separator can be used to add unique characters between the Otp input fields, such as dashes or hyphen. 
            </remarks> 
            <example>
            <code><![CDATA[
            <SfOtpInput Separator="/"></SfOtpInput>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfOtpInput.Placeholder">
            <summary>
            Gets or sets the text that is shown as a hint/placeholder until the user focuses on or enters a value in <see cref="T:Syncfusion.Blazor.Inputs.SfOtpInput"/>.
            </summary>
            <value>
            A string representing the placeholder text. If a single character is provided, it will be used for all input fields; otherwise, each character of text will be used for each field.
            </value>
            <remarks>
            The placeholder is used to provide a hint or placeholder text for the Otp inputs. If text is exceeded the Otp input <see cref="P:Syncfusion.Blazor.Inputs.SfOtpInput.Length"/>, not considered the provided exceeded character.
            </remarks>
            <example>
            <code><![CDATA[
            <SfOtpInput Placeholder="x"></SfOtpInput>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfOtpInput.Disabled">
            <summary> 
            Gets or sets a value indicating whether the <see cref="T:Syncfusion.Blazor.Inputs.SfOtpInput"/> is disabled. 
            </summary> 
            <value> 
            <c>true</c> if the <see cref="T:Syncfusion.Blazor.Inputs.SfOtpInput"/> is disabled; otherwise, <c>false</c>. The default value is <c>false</c>. 
            </value> 
            <remarks> 
            A disabled <see cref="T:Syncfusion.Blazor.Inputs.SfOtpInput"/> is not interactive and cannot update values. 
            </remarks> 
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfOtpInput.CssClass">
            <summary>  
            Gets or sets one or more CSS classes to customize the appearance of the <see cref="T:Syncfusion.Blazor.Inputs.SfOtpInput"/>. 
            </summary>  
            <value>  
            Accepts a CSS class string separated by space to customize the appearance of the <see cref="T:Syncfusion.Blazor.Inputs.SfOtpInput"/>. The default value is <c>String.Empty</c>.  
            </value> 
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfOtpInput.HtmlAttributes">
            <summary> 
            Gets or sets additional HTML attributes for the <see cref="T:Syncfusion.Blazor.Inputs.SfOtpInput"/>. 
            </summary> 
            <value> 
            A dictionary containing the HTML attributes and their values. 
            </value> 
            <remarks> 
            These attributes will be added to the HTML element of the <see cref="T:Syncfusion.Blazor.Inputs.SfOtpInput"/> component. 
            </remarks> 
            <example>
            <code><![CDATA[
            <SfOtpInput HtmlAttributes=@CustomAttribute></SfOtpInput>
            @code{
                Dictionary<string, object> CustomAttribute = new Dictionary<string, object>()
                {
                    { "name", "otp-input" }
                };
            }
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfOtpInput.AriaLabels">
            <summary> 
            Gets or sets the ARIA-label attribute for each input field in the <see cref="T:Syncfusion.Blazor.Inputs.SfOtpInput"/> component. 
            </summary> 
            <value> 
            An array of strings where each string corresponds to the ARIA-label attribute for each input field. 
            </value> 
            <remarks> 
            The ARIA-label attribute is used to provide an accessible label for each input field in the <see cref="T:Syncfusion.Blazor.Inputs.SfOtpInput"/> component. 
            </remarks> 
            <example>
            <code><![CDATA[
            <SfOtpInput AriaLabels=@customLabel></SfOtpInput>
            @code{
                private string[] customLabel = ["otp-input-1", "otp-input-2", "otp-input-3", "otp-input-4"];
            }
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfOtpInput.Created">
            <summary> 
            Gets or sets an event callback that is raised when the rendering of the <see cref="T:Syncfusion.Blazor.Inputs.SfOtpInput"/> component is completed. 
            </summary>  
            <value>  
            An event callback function.  
            </value> 
            <remarks> 
            This event is raised when the rendering of the <see cref="T:Syncfusion.Blazor.Inputs.SfOtpInput"/> component is completed. 
            </remarks> 
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfOtpInput.OnFocus">
            <summary> 
            Gets or sets an event callback that is raised when the <see cref="T:Syncfusion.Blazor.Inputs.SfOtpInput"/> component receives focus.
            </summary> 
            <value>  
            An event callback function.  
            </value> 
            <remarks> 
            This event is raised when the <see cref="T:Syncfusion.Blazor.Inputs.SfOtpInput"/> component receives focus. 
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfOtpInput.OnBlur">
            <summary> 
            Gets or sets an event callback that is raised when the <see cref="T:Syncfusion.Blazor.Inputs.SfOtpInput"/> component loses focus. 
            </summary> 
            <value>  
            An event callback function.  
            </value> 
            <remarks> 
            This event is raised when the <see cref="T:Syncfusion.Blazor.Inputs.SfOtpInput"/> component loses focus. 
            </remarks> 
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfOtpInput.OnInput">
            <summary> 
            Gets or sets an event callback that is raised each time the value of each Otp input field is changed. 
            </summary> 
            <value>  
            An event callback function.  
            </value> 
            <remarks> 
            This event is raised each time the value of each Otp input field is changed. 
            </remarks> 
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfOtpInput.ValueChanged">
            <summary> 
            Gets or sets an event callback that is raised when the <see cref="P:Syncfusion.Blazor.Inputs.SfOtpInput.Value"/> property is changed.
            </summary>
            <value> 
            An event callback function. 
            </value>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfOtpInput.UpdateRefsCount">
            <summary>
            Updates the input elements reference count.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfOtpInput.FocusAsync">
            <summary> 
            Sets the focus to the Otp input for interaction.
            </summary> 
            <returns>A task that represents the asynchronous operation.</returns> 
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfOtpInput.FocusOutAsync">
            <summary> 
            Remove the focus from Otp input if is in focus state.
            </summary> 
            <returns>A task that represents the asynchronous operation.</returns> 
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.OtpFocusInEventArgs">
            <summary> 
            Represents arguments for the Otp input focus in event. 
            </summary> 
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.OtpFocusInEventArgs.IsInteracted">
            <summary> 
            Gets or sets a value indicating whether the focus action input change was initiated by user interaction. 
            </summary> 
            <value> 
            <c>true</c>, if the event was triggered by user interaction. Otherwise, <c>false</c>. 
            </value> 
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.OtpFocusInEventArgs.Value">
            <summary> 
            Gets the current value of the Otp input. 
            </summary> 
            <value> 
            The current value of the Otp input. 
            </value> 
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.OtpFocusOutEventArgs">
            <summary> 
            Represents arguments for the Otp input focus out event. 
            </summary> 
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.OtpInputEventArgs">
            <summary> 
            Represents arguments for the Otp input event. 
            </summary> 
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.OtpInputEventArgs.PreviousValue">
            <summary> 
            Gets the previous value of the Otp input. 
            </summary> 
            <value> 
            The previous value of the Otp input. 
            </value> 
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.OtpInputEventArgs.Value">
            <summary> 
            Gets the current value of the Otp input. 
            </summary> 
            <value> 
            The current value of the Otp input. 
            </value> 
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.OtpInputType">
            <summary> 
            Specifies the type of input for the <see cref="T:Syncfusion.Blazor.Inputs.SfOtpInput"/> component. 
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.OtpInputType.Number">
            <summary> 
            Represents number input for the <see cref="T:Syncfusion.Blazor.Inputs.SfOtpInput"/> component. 
            </summary> 
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.OtpInputType.Text">
            <summary> 
            Represents text input for the <see cref="T:Syncfusion.Blazor.Inputs.SfOtpInput"/> component. 
            </summary> 
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.OtpInputType.Password">
            <summary> 
            Represents password input for the <see cref="T:Syncfusion.Blazor.Inputs.SfOtpInput"/> component. 
            </summary> 
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.OtpInputStyle">
            <summary> 
            Specifies the style variants for the Otp input.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.OtpInputStyle.Outlined">
            <summary> 
            Represents the style of the Otp input where the input is outlined. 
            </summary> 
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.OtpInputStyle.Underlined">
            <summary> 
            Represents the style of the Otp input where the input is underlined. 
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.OtpInputStyle.Filled">
            <summary> 
            Represents the style of the Otp input where the input is filled. 
            </summary> 
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.SfRating">
            <summary> 
            The Blazor Rating component allows the user to rate something by clicking on a set of symbols on numeric scale. 
            This allow users to provide feedback or ratings for products, services, or content.
            </summary> 
            <example> 
            A simple Blazor Rating component with value.
            <code><![CDATA[ 
            <SfRating Value=3 />
            ]]></code> 
            A Blazor Rating component with label.
            <code><![CDATA[ 
            <SfRating ShowLabel=true /> 
            ]]></code>
            </example> 
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfRating.AllowReset">
            <summary> 
            Gets or sets a value that specifies whether to show or hide the reset button in a rating component.
            </summary>
            <value> 
            <c>true</c>, the reset button will be visible to the user and they will be able to click it to reset the rating value to its default. 
            The default value is <c>false</c>. 
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfRating.CssClass">
            <summary> 
            Gets or sets one or more CSS classes that can be used to customize the appearance of a rating component.
            </summary> 
            <value> 
            One or more CSS classes to customize the appearance of the rating component, such as by changing its colors, fonts, sizes, or other visual aspects.
            The default value is <c>String.Empty</c>. 
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfRating.Disabled">
            <summary> 
            Gets or sets a value that specifies whether a rating component is enabled or disabled.
            A disabled rating component may have a different visual appearance than an enabled one.
            </summary> 
            <value> 
            <c>true</c>, the rating component will be disabled and the user will not be able to interact with it. The default value is <c>false</c>. 
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfRating.EmptyTemplate">
            <summary> 
            Gets or sets a template that defines the appearance of each un-rated item in a rating component. 
            The <see cref="T:Syncfusion.Blazor.Inputs.RatingItemContext"/> is passed as a context to the template, allowing it to access information about the un-rated item, such as its <see cref="P:Syncfusion.Blazor.Inputs.RatingItemContext.Value"/> and <see cref="P:Syncfusion.Blazor.Inputs.RatingItemContext.Index"/>.
            </summary>   
            <value> 
            The template content. The default value is <c>null</c>. 
            </value>
            <example> 
            Rating with empty template.
            <code><![CDATA[ 
            <SfRating> 
               <EmptyTemplate>
                    <span class="e-rating-icon e-icons e-star"></span>
               </EmptyTemplate>
            </SfRating>
            ]]></code> 
            </example>   
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfRating.EnableAnimation">
            <summary> 
            Gets or sets a value that specifies whether to add animation (to provide visual feedback to the user) when an item in a rating component is hovered.
            </summary>
            <value> 
            <c>true</c>, an animation will be added when the user hovers their cursor over an item in the rating component.
            The default value is <c>true</c>. 
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfRating.EnableSingleSelection">
            <summary> 
            Gets or sets a value that specifies whether to select all the items before the selected item should be in selected state in a rating component.
            </summary>
            <value> 
            <c>true</c>, only the selected item will be in the selected state, and all other items will be un-selected.
            <c>false</c>, all items before the selected one will be in the selected state.
            The default value is <c>false</c>. 
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfRating.FullTemplate">
            <summary> 
            Gets or sets a template that defines the appearance of each rated item in a rating component. 
            The <see cref="T:Syncfusion.Blazor.Inputs.RatingItemContext"/> is passed as a context to the template, allowing it to access information about the rated item, such as its <see cref="P:Syncfusion.Blazor.Inputs.RatingItemContext.Value"/> and <see cref="P:Syncfusion.Blazor.Inputs.RatingItemContext.Index"/>.
            </summary>   
            <value> 
            The template content. The default value is <c>null</c>. 
            </value>
            <example> 
            Rating with full template.
            <code><![CDATA[ 
            <SfRating> 
               <FullTemplate>
                    <span class="e-rating-icon e-icons e-star"></span>
               </FullTemplate>
            </SfRating>
            ]]></code> 
            </example>   
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfRating.ID">
            <summary>
            Sets id attribute for the rating element.
            </summary>
            <value>
            Accepts the string value.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfRating.ItemsCount">
            <summary> 
            Gets or sets a value that specifies the number of items (symbols) in rating component.
            The rating component typically consists of a number of items, such as stars or other symbols, that represent the rating value. 
            </summary>
            <value>
            An int that specifies the number of items (symbols) displayed in rating component
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfRating.LabelPosition">
            <summary> 
            Gets or sets the the position of the label in rating component. 
            </summary> 
            <value> 
            One of the <see cref="T:Syncfusion.Blazor.Inputs.LabelPosition"/> enumeration that specifies the position of the label. The default value is <see cref="F:Syncfusion.Blazor.Inputs.LabelPosition.Right"/>.
            </value>
            <remarks>
            You can use this property to customize the position of the label within the rating component to suit the needs of your application. 
            For example, you can set the <c>LabelPosition</c> property to ,<c>Top</c> to position the label at the top center of the rating component, 
            or set it to <c>Left</c> to position the label at the left side of the component.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfRating.LabelTemplate">
            <summary> 
            Gets or sets a template that used as label over default label of the rating. The current value of rating passed as context to build the content.
            </summary>   
            <value> 
            The template content. The default value is <c>null</c>. 
            </value>
            <example> 
            Rating with label template.
            <code><![CDATA[ 
            <SfRating> 
               <LabelTemplate>
                    <span>@context Out Of 5</span>
               </LabelTemplate>
            </SfRating>
            ]]></code> 
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfRating.Min">
            <summary> 
            Gets or sets the value that specifies minimum rating that a user can select.
            </summary>
            <value>
            By default, the <c>Min</c> property is set to 0, which means that the minimum possible rating is 0.
            </value>
            <remarks>
            You can use the <c>Min</c> property to customize the minimum possible rating in the <c>SfRating</c> component. 
            For example, if you want to allow users to provide ratings from 1 to 5, you can set the <c>Min</c> property to 1 and <c>ItemsCount</c> to 5.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfRating.Precision">
            <summary> 
            Gets or sets the precision type of the rating which used to component the granularity of the rating, allowing users to provide ratings with varying levels of precision.
            </summary>
            <value> 
            One of the <see cref="T:Syncfusion.Blazor.Inputs.PrecisionType"/> enumeration that specifies the precision type. The default value is <see cref="F:Syncfusion.Blazor.Inputs.PrecisionType.Full"/>.
            </value>
            <remarks>
            The <c>Precision</c> property can be set to one of the following values:
            <list type="bullet">
            <item><description>Full: The rating is increased in whole number increments. For example, if the current rating is 3, the next possible ratings are 4, 5, and so on.</description></item>
            <item><description>Half: The rating is increased in increments of 0.5 (half). For example, if the current rating is 3.5, the next possible ratings are 4, 4.5, 5, and so on.</description></item>
            <item><description>Quarter: The rating is increased in increments of 0.25 (quarter). For example, if the current rating is 3.75, the next possible ratings are 4, 4.25, 4.5, and so on.</description></item>
            <item><description>Exact: The rating is increased in increments of 0.1. For example, if the current rating is 3.9, the next possible ratings are 4, 4.1, 4.2, and so on.</description></item>
            </list>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfRating.ReadOnly">
            <summary> 
            Gets or sets a boolean value that specifies whether the read-only mode is enabled for a rating component, 
            which means that the user will be able to interact with it and change the rating value. 
            </summary>
            <value> 
            <c>true</c>,the rating component will be in read-only mode, which means that the user will not be able to interact with it and change the rating value. 
            The default value is <c>false</c>. 
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfRating.ShowLabel">
            <summary> 
            Gets or sets a value that specifies whether to display a label that shows the current value of a rating.
            </summary>
            <value> 
            <c>true</c>, a label will be displayed that shows the current value of the rating; otherwise false. The default value is <c>false</c>. 
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfRating.ShowTooltip">
            <summary> 
            Gets or sets a value that defines whether to show tooltip for the items.
            </summary>
            <value> 
            <c>true</c>, show tooltip for the items. The default value is <c>true</c>. 
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfRating.TooltipTemplate">
            <summary> 
            Gets or sets a template that used as tooltip content over default tooltip content of the rating. The current value of rating passed as context to build the content. 
            </summary>   
            <value> 
            The template content. The default value is <c>null</c>. 
            </value>
            <example> 
            Rating with tooltip template.
            <code><![CDATA[ 
            <SfRating> 
               <TooltipTemplate>
                    <div>@context Star</div>
               </TooltipTemplate>
            </SfRating>
            ]]></code> 
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfRating.Value">
            <summary> 
            Gets or sets the current rating value which used to display and update the rating selected by the user. 
            Based on <see cref="T:Syncfusion.Blazor.Inputs.PrecisionType"/>, users can select ratings with varying levels of precision
            </summary>
            <value>
            The <c>Value</c> property is a decimal value that ranges from the <see cref="P:Syncfusion.Blazor.Inputs.SfRating.Min"/> to the <see cref="P:Syncfusion.Blazor.Inputs.SfRating.ItemsCount"/>, 
            as specified by the <c>Min</c> and <c>ItemsCount</c> properties of the rating.
            </value>
            <remarks>
            You can use the <c>Value</c> property to initialize the rating component with a specific rating value, or to get the current rating value selected by the user. 
            For example, if you want to initialize the rating component with a rating of 3.5, you can set the <c>Value</c> property to 3.5.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfRating.Visible">
            <summary> 
            Gets or sets a value that indicates whether the rating component is visible or hidden
            </summary> 
            <value> 
            <c>true</c>, if the rating component is visible. The default value is <c>true</c>. 
            </value>          
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfRating.Created">
            <summary> 
            Gets or sets an event callback that is raised when the <see cref="T:Syncfusion.Blazor.Inputs.SfRating"/> rendering is completed.  
            </summary> 
            <value> 
            An event call back function. 
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfRating.OnItemHover">
            <summary> 
            Gets or sets an event callback that is raised when a user hovers over an item.   
            </summary> 
            <value> 
            An event call back function. 
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfRating.ValueChanged">
            <summary> 
            Gets or sets an event callback that is raised when the <see cref="P:Syncfusion.Blazor.Inputs.SfRating.Value"/> property is changed.
            </summary>
            <value> 
            An event call back function. 
            </value>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfRating.OnInitializedAsync">
            <inheritdoc/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfRating.OnAfterScriptRendered">
            <inheritdoc/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfRating.OnParametersSetAsync">
            <inheritdoc/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfRating.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfRating.UpdateMinValue">
            <summary>
            Update the minimum value for the rating items.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfRating.UpdateValue(System.Double)">
            <summary>
            Update the Value and current value for the rating items.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfRating.ValidateValue(System.Double)">
            <summary>
            Validates the value based on the type of precision.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfRating.GetItemValue(System.Double)">
            <summary>
            Returns a value of particular rating item calculating from <see cref="P:Syncfusion.Blazor.Inputs.SfRating.Value"/>. Returns the value ranging from 0 to 1.
            </summary>
            <param name="position">Position of a rating item ranging from 1 to ItemsCount</param>
            <returns>A value of particular rating item selection.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfRating.MouseMoveHandler(System.Double)">
            <summary>
            Update the current value of the rating on mouse move.
            </summary>
            <param name="value">value of rating.</param>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfRating.MouseOutHandler(System.Double)">
            <summary>
            Updates the value of the rating on mouse out.
            </summary>
            <param name="value">value of rating.</param>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfRating.TouchEventHandler(System.Double,System.Boolean)">
            <summary>
            Set the value of the rating item on touch move, onclick, and on keydown.
            </summary>
            <param name="value">value of rating.</param>
            <param name="tooltipState">state of tooltip.</param>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfRating.SetValue(System.Double)">
            <summary>
            Sets the value of the rating when user select on click, or on keydown.
            </summary>
            <param name="value">value of rating.</param>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.PrecisionType">
            <summary>
            Specifies the precision type of the rating. It is used to component the granularity of the rating, allowing users to provide ratings with varying levels of precision. 
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.PrecisionType.Full">
            <summary>
            The rating is increased in whole number increments. For example, if the current rating is 3, the next possible ratings are 4, 5, and so on.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.PrecisionType.Half">
            <summary>
            The rating is increased in increments of 0.5 (half). For example, if the current rating is 3.5, the next possible ratings are 4, 4.5, 5, and so on.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.PrecisionType.Quarter">
            <summary>
            The rating is increased in increments of 0.25 (quarter). For example, if the current rating is 3.75, the next possible ratings are 4, 4.25, 4.5, and so on.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.PrecisionType.Exact">
            <summary>
            The rating is increased in increments of 0.1. For example, if the current rating is 3.9, the next possible ratings are 4, 4.1, 4.2, and so on.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.LabelPosition">
            <summary>
            Specifies where to position the label in <see cref="T:Syncfusion.Blazor.Inputs.SfRating"/>.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.LabelPosition.Top">
            <summary>
            The label is positioned at the top center of the rating component.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.LabelPosition.Bottom">
            <summary>
            The label is positioned at the bottom center of the rating component.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.LabelPosition.Left">
            <summary>
            The label is positioned at the left side of the rating component.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.LabelPosition.Right">
            <summary>
            The label is positioned at the right side of the rating component.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.RatingHoverEventArgs">
            <summary>
            Provides information about <see cref="P:Syncfusion.Blazor.Inputs.SfRating.OnItemHover"/> event. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.RatingHoverEventArgs.Element">
            <summary>
            Gets the rating item element reference.
            </summary>
            <value>
            An element reference of rating item.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.RatingHoverEventArgs.Value">
            <summary>
            Gets or sets the hover value at hovered point of rating.
            </summary>
            <value>
            Value  
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.RatingItemContext">
            <summary>
            Represents the context of <see cref="P:Syncfusion.Blazor.Inputs.SfRating.EmptyTemplate"/> and <see cref="P:Syncfusion.Blazor.Inputs.SfRating.FullTemplate"/> which used to render the content of the item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.RatingItemContext.Index">
            <summary> 
            Gets or sets the index of the associated the rating item.
            </summary> 
            <value>
            An index of the rating item. The value ranges from 0 to <see cref="P:Syncfusion.Blazor.Inputs.SfRating.ItemsCount"/> - 1, where <c>ItemsCount</c> is the total number of rating items in the component.
            For example, if there are 5 rating items in the component, the ItemIndex for the first item would be 0, the ItemIndex for the second item would be 1, and so on. 
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.RatingItemContext.Value">
            <summary> 
            Gets or sets the selected value for a particular rating item. The value range from 0 to 1.
            </summary>
            <value>
            The selected value of a particular item ranges from 0 to 1, where 0 represents no selection and 1 represents a fully selected item.  
            For example, if <c>Value</c> is set to 0.5, then half of the rating item will be selected.
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.SfSignature">
            <summary>
            Signature allows user to draw smooth signatures as vector outline of strokes using variable width Bézier curve interpolation. 
            It allows to save signature as image.
            You can use your finger, pen, or mouse on a tablet, touchscreen, etc., to draw your own signature on this Signature component.
            </summary>
            <remarks>
            Signature is a user interface to draw the signature or text.
            It supports stroke color, background color and image.
            </remarks>
            <example>
            In the below code example, a basic Signature initialized with <see cref="T:Syncfusion.Blazor.Inputs.SfSignature"/> tag directive.
            <code><![CDATA[ 
            <SfSignature style="height: 100%; width: 100%;"></SfSignature>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSignature.HtmlAttributes">
            <summary>
            Gets or sets a collection of additional attributes that will applied to the <see cref="T:Syncfusion.Blazor.Inputs.SfSignature"/> component.
            </summary>
            <remarks>
            Additional attributes can be added as inline attributes or by specifying <c>@attributes</c> directive.
            </remarks>
            <example>
            In the below code example, signature height and width has been specified as style attribute in <see cref="T:Syncfusion.Blazor.Inputs.SfSignature"/>.
            <code><![CDATA[
            <SfSignature style="height: 100%; width: 100%;"></SfSignature>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSignature.BackgroundColor">
            <summary>
            Gets or sets the background color of the component.
            </summary>
            <value>
            The background color of the component that accepts hex value, rgb and text (like <code>red</code>). The default value is <c>null</c>. 
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSignature.BackgroundImage">
            <summary>
            Gets or sets the background image for the <see cref="T:Syncfusion.Blazor.Inputs.SfSignature"/> component.
            </summary>
            <value>
            An image that used to fill the background of the component. The default value is <c>null</c>. 
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSignature.Disabled">
            <summary>
            Gets or sets whether to disable the <see cref="T:Syncfusion.Blazor.Inputs.SfSignature"/> component where the opacity is set to show disabled state. 
            </summary>
            <value>
            <c>true</c>, if the signature component is disabled for user interaction. The default value is <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSignature.IsReadOnly">
            <summary>
            Gets or sets whether to prevent the interaction in <see cref="T:Syncfusion.Blazor.Inputs.SfSignature"/> component. 
            </summary>
            <value>
            <c>true</c>, if the signature component is read only state where the user interaction is prevented. The default value is <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSignature.SaveWithBackground">
            <summary>
            Gets or sets whether to save the signature along with <see cref="P:Syncfusion.Blazor.Inputs.SfSignature.BackgroundColor"/> and <see cref="P:Syncfusion.Blazor.Inputs.SfSignature.BackgroundImage"/> while saving. 
            </summary>
            <value>
            <c>true</c>, if signature component to save with background. The default value is <c>true</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSignature.StrokeColor">
            <summary>
            Gets or sets the stroke color of the signature.
            </summary>
            <value>
            The color of the signature stroke that accepts hex value, rgb and text (like <code>red</code>). The default value is <c>"#000000"</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSignature.MinStrokeWidth">
            <summary>
            Gets or sets the minimum stroke width for signature. 
            The <see cref="T:Syncfusion.Blazor.Inputs.SfSignature"/> component calculates stroke width based on <see cref="P:Syncfusion.Blazor.Inputs.SfSignature.Velocity"/>, <see cref="P:Syncfusion.Blazor.Inputs.SfSignature.MinStrokeWidth"/> and <see cref="P:Syncfusion.Blazor.Inputs.SfSignature.MaxStrokeWidth"/>.
            </summary>
            <value>
            The minimum width of stroke. The default value is <c>0.5</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSignature.MaxStrokeWidth">
            <summary>
            Gets or sets the maximum stroke width for signature.
            The <see cref="T:Syncfusion.Blazor.Inputs.SfSignature"/> component calculates stroke width based on <see cref="P:Syncfusion.Blazor.Inputs.SfSignature.Velocity"/>, <see cref="P:Syncfusion.Blazor.Inputs.SfSignature.MinStrokeWidth"/> and <see cref="P:Syncfusion.Blazor.Inputs.SfSignature.MaxStrokeWidth"/>.
            </summary>
            <value>
            The maximum width of stroke. The default value is <c>2.0</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSignature.Velocity">
            <summary>
            Gets or sets the velocity to calculate the stroke thickness based on the pressure of the contact on the digitizer surface.
            The Signature component calculates stroke thickness based on <see cref="P:Syncfusion.Blazor.Inputs.SfSignature.Velocity"/>, <see cref="P:Syncfusion.Blazor.Inputs.SfSignature.MinStrokeWidth"/> and <see cref="P:Syncfusion.Blazor.Inputs.SfSignature.MaxStrokeWidth"/>.
            </summary>
            <value>
            The velocity to calculate the stroke thickness based on the pressure of the contact on the digitizer surface. The default value is <c>0.7</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSignature.EnablePersistence">
            <summary>
            Gets or sets whether to persist component's state between page reloads.
            </summary>
            <value>
            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>.
            </value>
            <remarks>
            Component's property will be stored in browser local storage to persist component's state when page reloads.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSignature.Changed">
            <summary>
            Gets or sets an event callback that is raised for the actions like undo, redo, clear and while user complete signing on <see cref="T:Syncfusion.Blazor.Inputs.SfSignature"/> component.
            </summary>
            <value>
            An event callback function.
            </value>
            <example>
            <code><![CDATA[
            <SfSignature Changed="@changefunc"></SfSignature>
            @code 
            {
                private void changefunc(SignatureChangeEventArgs args) 
                {
                    if (args.ActionName == "Clear")
                    {
                        // validation code goes here
                    }
                }
            }
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSignature.OnSave">
            <summary>
            Gets or sets an event callback that is raised while saving the signature.
            </summary>
            <remarks>
            The file name and the file type(PNG, JPEG, SVG) can be changed using <see cref="T:Syncfusion.Blazor.Inputs.SignatureSaveEventArgs"/> and <see cref="T:Syncfusion.Blazor.Inputs.SignatureFileType"/>.
            The event callback is raised only for the keyboard action (Ctrl + S).
            </remarks>
            <example>
            <code><![CDATA[
            <SfSignature Changed="@beforesavefunc"></SfSignature>
            @code 
            {
                private void beforesavefunc(SignatureSaveEventArgs args) 
                {        
                    args.fileType = "SignatureFileType.Jpeg";
                }
            }
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSignature.Created">
            <summary>
            Gets or sets an event callback that is raised when component rendering is completed.
            </summary>
            <remarks>
            You can load the pre-drawn signature when the signature component is created.
            </remarks>
            <example>
            In the below code example, the pre-drawn signature is loaded using <c>Created</c> event.
            <code><![CDATA[
            <SfSignature Created="@Created">
            </SfSignature >
            @code {
                private void Created() {
                    var sign = ""; // Base 64 or URL of the pre-drawn signature
                    signature.LoadAsync(sign);
                }
            }
            ]]></code>
            </example>
            <summary>
            Renders the base 64 string as signature on <see cref="T:Syncfusion.Blazor.Inputs.SfSignature"/> component. 
            </summary>
            <returns>
            A Task that completes when the component has finished the loading of base 64 string.
            </returns>
            <example>
            In the below code example, the pre-drawn signature is loaded using <c>Created</c> event.
            <code><![CDATA[
            <SfSignature @ref="signature" Created="@Created">
            </SfSignature >
            @code {
                private void Created() {
                    var sign = ""; // Base 64 or URL of the pre-drawn signature
                    signature.LoadAsync(sign, 400, 400);
                }
            }
            ]]></code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfSignature.ClearAsync">
            <summary>
            Erases all the signature strokes signed by user.
            </summary>
            <returns>
            A Task that completes when the component has finished the erasing.
            </returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfSignature.IsEmptyAsync">
            <summary>
            Returns whether the signature is empty or not.
            </summary>
            <returns>
            A Task that returns bool when it has finished.
            </returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfSignature.UndoAsync">
            <summary>
            Undo the last user action.
            </summary>
            <returns>
            A Task that completes when the component has finished the undo action.
            </returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfSignature.CanUndoAsync">
            <summary>
            Returns whether the undo collection is empty or not.
            </summary>
            /// <returns>
            A Task that returns bool when it has finished.
            </returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfSignature.RedoAsync">
            <summary>
            Redo the last user action.
            </summary>
            <returns>
            A Task that completes when the component has finished the redo action.
            </returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfSignature.CanRedoAsync">
            <summary>
            Returns whether the redo collection is empty or not.
            </summary>
            <returns>
            A Task that returns bool when it has finished.
            </returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfSignature.SaveAsync(Syncfusion.Blazor.Inputs.SignatureFileType,System.String)">
            <summary>
            Saves the signature as an image with the given file type and name.
            </summary>
            <param name="fileName">A file name.</param>
            <param name="fileType">A file type <see cref="T:Syncfusion.Blazor.Inputs.SignatureFileType"/>.</param>
            <remarks>
            <see cref="P:Syncfusion.Blazor.Inputs.SfSignature.SaveWithBackground"/> decides whether to save the signature with background or not. 
            </remarks>
            <returns>
            A Task that completes when the component has finished the saving operation.
            </returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfSignature.DrawAsync(System.String,System.String,System.Int32,System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Draws the text as signature on <see cref="T:Syncfusion.Blazor.Inputs.SfSignature"/> component. 
            </summary>
            <param name="text">The text to render.</param>
            <param name="fontFamily">The font family.</param>
            <param name="fontSize">The font size.</param>
            <param name="x">Optional. Specify X- coordinates to draw a signature. Default to the center point of the image if it is not specified.</param>
            <param name="y">Optional. Specify Y- coordinates to draw a signature. Default to the center point of the image if it is not specified.</param>
            <returns>
            A Task that completes when the component has finished the drawing of text.
            </returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfSignature.LoadAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Renders the base 64 string as signature on <see cref="T:Syncfusion.Blazor.Inputs.SfSignature"/> component. 
            </summary>
            <returns>
            A Task that completes when the component has finished the loading of base 64 string.
            </returns>
            <param name="signature">The base 64 string to render.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfSignature.GetSignatureAsync(Syncfusion.Blazor.Inputs.SignatureFileType)">
            <summary>
            Returns the signature as base 64 string.
            </summary>
            <remarks>
            <see cref="P:Syncfusion.Blazor.Inputs.SfSignature.SaveWithBackground"/> decides whether to save the signature with background or not.
            <see cref="T:Syncfusion.Blazor.Inputs.SignatureFileType"/> decides what type of signature base64 url to be get.
            </remarks>
            <returns>
            A Task that returns base 64 string when it has finished.
            </returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfSignature.SaveAsBlobAsync">
            <summary>
            Returns the signature as Blob.
            </summary>
            <remarks>
            <see cref="P:Syncfusion.Blazor.Inputs.SfSignature.SaveWithBackground"/> decides whether to save the signature with background or not. 
            </remarks>
            <returns>
            A Task that returns the blob when it has finished.
            </returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfSignature.RefreshAsync">
            <summary>
            Refreshes the signature canvas to reflect external changes, ensuring the updated height and width.
            </summary>
            <returns>
            A Task that completes when the component has finished re-rendering with the new canvas dimensions.
            </returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfSignature.TriggerEventAsync(System.String)">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.SignatureSaveEventArgs">
            <summary>
            Provides information about the <see cref="P:Syncfusion.Blazor.Inputs.SfSignature.OnSave"/> event callback.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SignatureSaveEventArgs.Cancel">
            <summary>
            Gets or sets whether to cancel the save action. You can cancel and perform save operation programmatically.
            </summary>
            <value>
            The default value is <code>false</code>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SignatureSaveEventArgs.FileType">
            <summary>
            Gets or sets the file type to be saved.
            </summary>
            <value>
            A SignatureFileType denotes the file type <see cref="T:Syncfusion.Blazor.Inputs.SignatureFileType"/>. The default value is <code>PNG</code>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SignatureSaveEventArgs.FileName">
            <summary>
            Gets or sets the file name to be saved.
            </summary>
            <value>
            A string denotes the file name. The default value is <code>Signature</code>.
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.SignatureChangeEventArgs">
            <summary>
            Provides information about the <see cref="P:Syncfusion.Blazor.Inputs.SfSignature.Changed"/> event callback.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SignatureChangeEventArgs.ActionName">
            <summary>
            Gets or sets the action name of the signature.
            </summary>
            <value>
            Accepts the string value.
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.SignatureFileType">
            <summary>
            Provides the signature filetype <see cref="T:Syncfusion.Blazor.Inputs.SfSignature"/> component.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.SignatureFileType.Png">
            <summary>
            Defines the signature filetype as PNG.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.SignatureFileType.Jpeg">
            <summary>
            Defines the signature filetype as JPEG.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.SignatureFileType.Svg">
            <summary>
            Defines the signature filetype as SVG.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.ColorRange">
            <summary>
            This class represent the color, start and end position of slider track.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ColorRange.ChildContent">
            <summary>
            Get and set the Slider.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ColorRange.Color">
            <summary>
            Get and set the Color.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ColorRange.Start">
            <summary>
            Get and set the start.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ColorRange.End">
            <summary>
            Get and set the End.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.ColorRange.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>"Task" representing the asynchronous operation.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.SliderColorRanges">
            <summary>
            Specifies the collections of colors to the slider track based on start and end value of each color.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderColorRanges.ChildContent">
            <summary>
            Get and set the ChildContent.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SliderColorRanges.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Method invoked after each time the component has been rendered.
            </summary>
            <param name="firstRender">Set to true for the first time component rendering; otherwise gets false.</param>
            <returns>"Task".</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.SliderOrientation">
            <summary>
             Holds slider component's different orientation options.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.SliderOrientation.Horizontal">
            <summary>
            Specifies the slider rendering position as Horizontal.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.SliderOrientation.Vertical">
            <summary>
            Specifies the slider rendering position as Vertical.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.SliderType">
            <summary>
            Holds slider component's different options.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.SliderType.Default">
            <summary>
            Specifies the slider type as Default.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.SliderType.MinRange">
            <summary>
            Specifies the slider type as MinRange.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.SliderType.Range">
            <summary>
            Specifies the slider type as Range.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.Placement">
            <summary>
            Holds slider component's Ticks Placement options.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.Placement.None">
            <summary>
            This enum value will restrict the ticks element rendering.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.Placement.Before">
            <summary>
            This is used to rendering tiks element before the slider track.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.Placement.After">
            <summary>
            This is used to rendering tiks element after the slider track.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.Placement.Both">
            <summary>
            This is used to rendering tiks element before and after the slider track.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.TooltipPlacement">
            <summary>
            Holds slider component's Tooltip Placement options.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.TooltipPlacement.Before">
            <summary>
            This is used to render the tooltip element before the slider track.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.TooltipPlacement.After">
            <summary>
            This is used to render the tooltip element after the slider track.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.TooltipShowOn">
            <summary>
            Holds slider component's Tooltip ShowOn options.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.TooltipShowOn.Auto">
            <summary>
            This is used to display the tooltip while click / focus the slider handle elemenet.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.TooltipShowOn.Focus">
            <summary>
            This is used to display the tooltip while focus the slider handle elemenet.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.TooltipShowOn.Hover">
            <summary>
            This is used to display the tooltip while hover the slider handle elemenet.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.TooltipShowOn.Always">
            <summary>
            This is used to display the tooltip until new actions occurred in slider elemenet.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.SliderChangeEventArgs`1">
            <summary>
            It is used to denote the Slider Change/Changed Event arguments.
            </summary>
            <typeparam name="T">"T".</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderChangeEventArgs`1.Name">
            <summary>
            It is used to get the action applied on the Slider.
            </summary>
            <value>
            Accepts the string value.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderChangeEventArgs`1.IsInteracted">
            <summary>
            It is used to check whether the event triggered is via user or programmatic way.
            </summary>
            <value>
            <c>true</c>, if the event was initiated by user interaction. Otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderChangeEventArgs`1.PreviousValue">
            <summary>
            It is used to get the previous value of the Slider.
            </summary>
            <value>
            The value of the Slider that was previously selected by the user.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderChangeEventArgs`1.Text">
            <summary>
            It is used to get the current text or formatted text of the Slider, which is placed in tooltip.
            </summary>
            <value>
            Accepts the string value.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderChangeEventArgs`1.Value">
            <summary>
            It is used to get the current value of the Slider.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.SliderTickEventArgs">
            <summary>
            It is used to denote the TicksRender event arguments.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderTickEventArgs.Text">
            <summary>
            It is used to get the label text of the tick.
            </summary>
            <value>
            Accepts the string value.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderTickEventArgs.TickElementRef">
            <summary>
            It is used to get the current tick element reference.
            </summary>
            <value>
            An <see cref="T:Microsoft.AspNetCore.Components.ElementReference"/> to the current tick element that is being rendered.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderTickEventArgs.Value">
            <summary>
            It is used to get the value of the tick.
            </summary>
            <value>
            Accepts the double value.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderTickEventArgs.HtmlAttributes">
            <summary>
            It is used to customize tick elements.
            </summary>
            <value>
            A dictionary of HTML attributes that can be used to customize the appearance or behavior of the tick elements.
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.SliderTickRenderedEventArgs">
            <summary>
            It is used to denote the ticks rendered Event arguments.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderTickRenderedEventArgs.TickElementsRef">
            <summary>
            It returns the collection of tick elements as a reference.
            </summary>
            <value>
            A list of ElementReference objects representing the tick elements.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderTickRenderedEventArgs.TicksContainerRef">
            <summary>
            It returns the container of the ticks element as a reference.
            </summary>
            <value>
            An ElementReference object representing the container element for the ticks.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderTickRenderedEventArgs.HtmlAttributes">
            <summary>
            It is used to customize ticks parent element.
            </summary>
            <value>
            A dictionary of HTML attributes that can be used to customize the appearance or behavior of the tick parent element.
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.SliderTooltipEventArgs`1">
            <summary>
            It is used to denote the TooltipChange Event arguments.
            </summary>
            <typeparam name="T">"T".</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderTooltipEventArgs`1.Text">
            <summary>
            It is used to get the text shown in the Slider tooltip.
            </summary>
            <value>
            Accepts the string value.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderTooltipEventArgs`1.Value">
            <summary>
            It is used to get the value of the Slider.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.ColorRangeDataModel">
            <summary>
            class for holding ColorRange properties arguments.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ColorRangeDataModel.Color">
            <summary>
            It is used to set the color in the slider bar.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ColorRangeDataModel.End">
            <summary>
            It is used to get the end value for applying color.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ColorRangeDataModel.Start">
            <summary>
            It is used to get the starting value for applying color.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.PersistenceValues`1">
            <summary>
            Class that holds the persistence property details.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.TicksValues">
            <summary>
            Class that holds the tick's position.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.ChangeEventData`1">
            <summary>
            Class that holds the previous and currentValue of slider component.
            </summary>
            <typeparam name="TValue">"TValue".</typeparam>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ChangeEventData`1.PreviousValue">
            <summary>
            Specifies the PreviousValue.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ChangeEventData`1.Value">
            <summary>
            Specifies the Value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ChangeEventData`1.IsValueChanged">
            <summary>
            Specifies the isValueChanged.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.Slider.Internal.ISlider">
            <summary>
            Interface for holding slider properties.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Slider.Internal.ISlider.Slider">
            <summary>
            Get and set the Slider.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Slider.Internal.ISlider.CssClass">
            <summary>
            Get and set the CssClass.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Slider.Internal.ISlider.CustomValues">
            <summary>
            Get and set the CustomValues.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Slider.Internal.ISlider.EnableAnimation">
            <summary>
            Get and set the EnableAnimation.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Slider.Internal.ISlider.EnablePersistence">
            <summary>
            Get and set the EnablePersistence.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Slider.Internal.ISlider.EnableRtl">
            <summary>
            Get and set the EnableRtl.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Slider.Internal.ISlider.Enabled">
            <summary>
            Get and set the Enabled.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Slider.Internal.ISlider.Max">
            <summary>
            Get and set the Max Value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Slider.Internal.ISlider.Min">
            <summary>
            Get and set the Min Value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Slider.Internal.ISlider.Orientation">
            <summary>
            Get and set the Orientation.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Slider.Internal.ISlider.ReadOnly">
            <summary>
            Get and set the ReadOnly.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Slider.Internal.ISlider.ShowButtons">
            <summary>
            Get and set the ShowButtons.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Slider.Internal.ISlider.Step">
            <summary>
            Get and set the Step.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Slider.Internal.ISlider.Ticks">
            <summary>
            Get and set the Slider.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Slider.Internal.ISlider.Type">
            <summary>
            Get and set the Slider.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Slider.Internal.ISlider.Width">
            <summary>
            Get and set the Slider.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Slider.Internal.ISlider.ID">
            <summary>
            Get and set the Slider.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.Slider.Internal.ISlider.GetDataId">
            <summary>
            Get the Slider dataId.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.Slider.Internal.ISlider.UpdateChildProperties(System.String,System.Object)">
            <summary>
            Updates the Child Properties.
            </summary>
            <param name="key">key.</param>
            <param name="value">value.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.Slider.Internal.ISlider.GetLimitData">
            <summary>
            Get the Limit Data.
            </summary>
            <returns>Limit.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.Slider.Internal.ISlider.TriggeredTicksRendered(Microsoft.AspNetCore.Components.ElementReference,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Triggers after the ticks rendered.
            </summary>
            <param name="ticksWrapperRef">ticksWrapperRef.</param>
            <param name="attributes">attributes.</param>
            <returns>="Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.Slider.Internal.ISlider.TriggeredTicksRendering(Microsoft.AspNetCore.Components.ElementReference,System.String,System.Double,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Triggers while the ticks rendered.
            </summary>
            <param name="ticksRef">ticksRef.</param>
            <param name="text">text.</param>
            <param name="value">value.</param>
            <param name="attributes">attributes.</param>
            <returns>="Task".</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.Slider.Internal.SliderTicksRender">
            <summary>
            This class is used to render ticks to slider component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Slider.Internal.SliderTicksRender.ChildContent">
            <exclude/>
            <summary>
            Public fiels ChildContent.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Slider.Internal.SliderTicksRender.TicksClass">
            <summary>
            Class for the Tick.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.Slider.Internal.SliderTicksRender.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Method invoked after each time the component has been rendered.
            </summary>
            <param name="firstRender">Set to true for the first time component rendering; otherwise gets false.</param>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.Slider.Internal.SliderTicksRender.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>"Task".</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.Slider.Internal.TickElement">
            <summary>
            Specifies the Partial class TickElement.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Slider.Internal.TickElement.ClassName">
            <summary>
            Specifies the ClassName.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Slider.Internal.TickElement.Styles">
            <summary>
            Specifies the Styles.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Slider.Internal.TickElement.Value">
            <summary>
            Specifies the Value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Slider.Internal.TickElement.FormattedValue">
            <summary>
            Specifies the FormattedValue.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Slider.Internal.TickElement.IsSmallTick">
            <summary>
            Specifies the IsSmallTick.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.Slider.Internal.TickElement.OnInitialized">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.Slider.Internal.TickElement.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Method invoked after each time the component has been rendered.
            </summary>
            <param name="firstRender">Set to true for the first time component rendering; otherwise gets false.</param>
            <returns>""Task".</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.SfSlider`1">
            <summary>
            Partial class SfSlider.
            </summary>
            <typeparam name="TValue">Generic type parameter.</typeparam>.
            <summary>
            The Slider component allows the user to select a value or range of values
            in-between the min and max range, by dragging the handle over the slider bar.
            </summary>
            <summary>
            Partial class SfSlider.
            </summary>
            <summary>
            Specifies the partial class SfSlider.
            </summary>
            <summary>
            Specifies the partial class SfSlider.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSlider`1.Slider">
            <summary>
            Get and set the Slider.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfSlider`1.SetLocale">
            <summary>
            Set Locale value for button.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfSlider`1.GetProperties">
            <summary>
            Get Public property information.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfSlider`1.UpdateChildProperties(System.String,System.Object)">
            <summary>
            Update Child Property Information.
            </summary>
            <exclude/>
            <param name="key">key.</param>
            <param name="value">value.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfSlider`1.GetSliderValue">
            <summary>
            Get Slider Value.
            </summary>
            <returns>sliderValue.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfSlider`1.GetLimitData">
            <summary>
            Get Slider Limits data.
            </summary>
            <exclude/>
            <returns>SliderLimits().</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfSlider`1.GetDataId">
            <summary>
            Get Slider data id.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfSlider`1.GetTicksData">
            <summary>
            Get Slider ticks data.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfSlider`1.GetDefaultTickValue">
            <summary>
            Get Slider ticks default data.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfSlider`1.DynamicPropertyChange">
            <summary>
            Handling Dynamic Property changes.
            </summary>
            <exclude/>
            <returns>="Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfSlider`1.UpdateValue(`0,System.Int32)">
            <summary>
            Update Value Property.
            </summary>
            <exclude/>
            <param name="args">args.</param>
            <param name="activeHandle">activeHandle.</param>
            <returns>="Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfSlider`1.TriggerEvent(Syncfusion.Blazor.Inputs.ChangeEventData{`0})">
            <summary>
            Trigger onChange / Value change event.
            </summary>
            <exclude/>
            <param name="args">args.</param>
            <returns>="Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfSlider`1.TooltipHandle(Microsoft.AspNetCore.Components.ElementReference)">
            <summary>
            Slider Handle Value.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfSlider`1.OnOpen(Syncfusion.Blazor.Popups.TooltipEventArgs)">
            <summary>
            update tooltip position.
            </summary>
            <param name="args">args.</param>
            <returns>="Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfSlider`1.IncreaseValue">
            <summary>
            Increase Slider Handle Value.
            </summary>
            <returns>="Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfSlider`1.DecreaseValue">
            <summary>
            Decrease Slider Value.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfSlider`1.TriggeredTicksRendered(Microsoft.AspNetCore.Components.ElementReference,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Calling Ticks Rendered Event.
            </summary>
            <param name="ticksWrapperRef">args.</param>
            <param name="attributes">attributes.</param>
            <returns>="Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfSlider`1.TriggeredTicksRendering(Microsoft.AspNetCore.Components.ElementReference,System.String,System.Double,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Calling Ticks Rendering Event.
            </summary>
            <param name="ticksRef">ticksRef.</param>
            <param name="text">text.</param>
            <param name="value">sliderValue.</param>
            <param name="attributes">attributes.</param>
            <returns>="Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfSlider`1.SetLocalStorage(System.String,System.String)">
            <summary>
            Update the Persistence value to local storage.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfSlider`1.SerializeModel(Syncfusion.Blazor.Inputs.SfSlider{`0})">
            <summary>
            Updating the persisting values to our component properties.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfSlider`1.CloseTooltip">
            <summary>
            Closes the Tooltip Element.
            </summary>
            <returns>="Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfSlider`1.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfSlider`1.OnParametersSetAsync">
            <summary>
            Method invoked when any changes in component state occurs.
            </summary>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfSlider`1.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Method invoked after each time the component has been rendered.
            </summary>
            <param name="firstRender">Set to true for the first time component rendering; otherwise gets false.</param>
            <returns>"Task".</returns>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSlider`1.ID">
            <summary>
            Sets id attribute for the slider element.
            </summary>
            <value>
            Accepts the string value.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSlider`1.ChildContent">
            <summary>
            Specifies the ChildContent.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSlider`1.ValueExpression">
            <summary>
            Specifies the expression for defining the value of the bound.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSlider`1.SliderEditContext">
            <summary>
            Specifies the ChildContent.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSlider`1.CssClass">
            <summary>
            Specifies the custom classes to be added to the element used to customize the slider.
            </summary>
            <value>
            Accepts the CSS class string separated by space to customize the appearance of component. The default value is empty.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSlider`1.CustomValues">
            <summary>
            Specifies an array of slider values in number or string type.
            The min and max step values are not considered.
            </summary>
            <value>
            Accepts an array of slider values in number or string type.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSlider`1.EnableAnimation">
            <summary>
            Enables/Disables the animation for slider movement.
            </summary>
            <value>
            <c>true</c>, if the animation can be enabled. Otherwise, <c>false</c>. The default value is <c>true</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSlider`1.EnablePersistence">
            <summary>
            Enable or disable persisting component's state between page reloads.
            </summary>
            <value>
            <c>true</c>, if the persistence can be enabled. Otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSlider`1.EnableRtl">
            <summary>
            Enable or disable rendering component in right to left direction.
            </summary>
            <value>
            <c>true</c>, if the right to left direction can be enabled. Otherwise, <c>false</c>. The default value is <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSlider`1.Enabled">
            <summary>
            Enables or disables the slider.
            </summary>
            <value>
            <c>true</c>, Allow the user to interact with the component. Otherwise, <c>false</c>. The default value is <c>true</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSlider`1.Max">
            <summary>
            Specifies the maximum value of the slider.
            </summary>
            <value>
            Accepts a double value representing that the maximum value of slider. The default value is <c>100</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSlider`1.Min">
            <summary>
            Specifies the minimum value of the slider.
            </summary>
            <value>
            Accepts a double value representing that the minimum value of slider. The default value is <c>0</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSlider`1.Orientation">
            <summary>
             Specifies whether to render the slider in vertical or horizontal orientation.
            </summary>
            <value>
            A value of the <see cref="T:Syncfusion.Blazor.Inputs.SliderOrientation" /> enumeration that specifies the orientation of scale. The default value is <see cref="F:Syncfusion.Blazor.Inputs.SliderOrientation.Horizontal" />.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSlider`1.ReadOnly">
            <summary>
            Specifies whether the render the slider in read-only mode to restrict any user interaction.
            The slider rendered with user defined values and can’t be interacted with user actions.
            </summary>
            <value>
            <c>true</c>, if the slider component cannot be edited. Otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSlider`1.ShowButtons">
            <summary>
            Specifies whether to show or hide the increase/decrease buttons
            of Slider to change the slider value.
            </summary>
            <value>
            <c>true</c>, if the increase or decrease buttons should be shown. Otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSlider`1.Step">
            <summary>
            Specifies the step value for each value change when the increase / decrease
             button is clicked or on arrow keys press or on dragging the thumb.
            </summary>
            <value>
            Accepts the double value that specifies the step value change when increase or decrease button is clicked or arrow key press or dragging the thumb. The default value is <c>1</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSlider`1.Ticks">
            <summary>
            It is used to render the slider ticks options such as placement and step values.
            </summary>
            <value>
            The options for rendering the slider ticks, such as placement and step values.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSlider`1.Type">
            <summary>
            Defines the type of the Slider. The available options are:
              Default - Allows to a single value in the Slider.
              MinRange - Allows to select a single value in the Slider. It display’s a shadow from the start to the current value.
              Range - Allows to select a range of values in the Slider. It displays shadow in-between the selection range.
            </summary>
            <value>
            One of the <see cref="T:Syncfusion.Blazor.Inputs.SliderType" /> enumeration that specifies the type of slider in the component.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSlider`1.Value">
            <summary>
            It is used to denote the current value of the Slider.
            The value should be specified in array of number when render Slider type as range.
            </summary>
            <value>
            The current value of the Slider.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSlider`1.ValueChanged">
            <summary>
            Gets or sets a callback of the bound value.
            </summary>
            <value>
            An event callback function.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSlider`1.Width">
            <summary>
            Specifies the width of the Slider.
            </summary>
            <value>
            Accepts the string value.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSlider`1.IsImmediateValue">
            <summary>
            Specifies whether the value need to be updated at the time of dragging slider handle.
            </summary>
            <value>
            <c>true</c>, the value is updated immediately when the slider handle is dragged. Otherwise, <c>false</c>. The default value is <c>true</c>.
            </value>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfSlider`1.Reposition">
            <summary>
            This method is used to reposition slider.
            </summary>
            <returns>"Task".</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfSlider`1.RepositionAsync">
            <summary>
            This method is used to reposition slider.
            </summary>
            <returns>"Task".</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.SliderEvents`1">
            <summary>
            Configure handlers to handle the events of the Slider component.
            </summary>
            <typeparam name="TValue">"TValue".</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderEvents`1.OnChange">
            <summary>
            We can trigger change event whenever Slider value is changed.
             In other term, this event will be triggered while drag the slider thumb.
            </summary>
            <value>
            An event callback function.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderEvents`1.ValueChange">
            <summary>
            Fires whenever the Slider value is changed.
            In other term, this event will be triggered, while drag the slider thumb completed.
            </summary>
            <value>
            An event callback function.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderEvents`1.Created">
            <summary>
            Triggers when the Slider is successfully created.
            </summary>
            <value>
            An event callback function.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderEvents`1.TicksRendered">
            <summary>
            Triggers when the ticks are rendered on the Slider.
            </summary>
            <value>
            An event callback function.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderEvents`1.TicksRendering">
            <summary>
            Triggers on rendering the ticks element in the Slider,
            which is used to customize the ticks labels dynamically.
            </summary>
            <value>
            An event callback function.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderEvents`1.OnTooltipChange">
            <summary>
            Triggers when the Sider tooltip value is changed.
            </summary>
            <value>
            An event callback function.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderEvents`1.Destroyed">
            <summary>
            Triggers when the component is destroyed.
            </summary>
            <value>
            An event callback function.
            </value>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SliderEvents`1.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>"Task".</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.SliderLimits">
            <summary>
            This class is used to set limit bar to slider component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderLimits.Parent">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderLimits.ChildContent">
            <summary>
            Specifies the ChildContent.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderLimits.Enabled">
            <summary>
            It is used to enable the limit in the slider.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderLimits.EndHandleFixed">
            <summary>
            It is used to lock the second handle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderLimits.MaxEnd">
            <summary>
            It is used to set the maximum end limit value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderLimits.MaxStart">
            <summary>
            It is used to set the maximum start limit value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderLimits.MinEnd">
            <summary>
            It is used to set the minimum end limit value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderLimits.MinStart">
            <summary>
            It is used to set the minimum start limit value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderLimits.StartHandleFixed">
            <summary>
            It is used to lock the first handle.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SliderLimits.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SliderLimits.OnParametersSetAsync">
            <summary>
            Method invoked when any changes in component state occurs.
            </summary>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SliderLimits.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Method invoked after each time the component has been rendered.
            </summary>
            <param name="firstRender">Set to true for the first time component rendering; otherwise gets false.</param>
            <returns>"Task".</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.SliderTicks">
            <summary>
            This class is used to render ticks to slider component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderTicks.ChildContent">
            <summary>
            Specifies the ChildContent.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderTicks.Format">
            <summary>
            It is used to customize the Slider scale value to the desired format using Internationalization or events(custom formatting).
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderTicks.LargeStep">
            <summary>
            It is used to denote the distance between two major (large) ticks from the scale of the Slider.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderTicks.Placement">
            <summary>
            It is used to denote the position of the ticks in the Slider. The available options are:.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderTicks.ShowSmallTicks">
            <summary>
            We can show or hide the small ticks in the Slider, which will be appeared in between the largeTicks.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderTicks.SmallStep">
            <summary>
            It is used to denote the distance between two minor (small) ticks from the scale of the Slider.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SliderTicks.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>"Task".</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.SliderTooltip">
            <summary>
            This class is used to set a tooltip for slider component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderTooltip.ChildContent">
            <summary>
            Specifies the ChildContent.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderTooltip.CssClass">
            <summary>
            It is used to customize the Tooltip which accepts custom CSS class names that define
             specific user-defined styles and themes to be applied on the Tooltip element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderTooltip.Format">
            <summary>
            It is used to customize the Tooltip content to the desired format
             using internationalization or events (custom formatting).
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderTooltip.IsVisible">
            <summary>
            It is used to show or hide the Tooltip of Slider Component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderTooltip.Placement">
            <summary>
            It is used to denote the position for the tooltip element in the Slider. The available options are:
              Before - Tooltip is shown in the top of the horizontal slider bar or at the left of the vertical slider bar.
              After - Tooltip is shown in the bottom of the horizontal slider bar or at the right of the vertical slider bar.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderTooltip.ShowOn">
            <summary>
            It is used to determine the device mode to show the Tooltip.
            If it is in desktop, it will show the Tooltip content when hovering on the target element.
            If it is in touch device. It will show the Tooltip content when tap and holding on the target element.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SliderTooltip.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>"Task".</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.TextAreaValueChangeEventArgs">
            <summary>
            Interface for value change event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.TextAreaValueChangeEventArgs.IsInteracted">
            <summary> 
            Gets or sets a value indicating whether the event is triggered by user interaction. 
            </summary> 
            <value> 
            <c>true</c>, if the component has been interacted with by the user. Otherwise, <c>false</c>. 
            </value> 
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.TextAreaValueChangeEventArgs.PreviousValue">
            <summary> 
            Gets the previously entered value of the <see cref="T:Syncfusion.Blazor.Inputs.SfTextArea"/>. 
            </summary> 
            <value> 
            Return the string value. 
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.TextAreaValueChangeEventArgs.Value">
            <summary> 
            Gets the entered value of the <see cref="T:Syncfusion.Blazor.Inputs.SfTextArea"/>. 
            </summary> 
            <value> 
            Return the string value. 
            </value> 
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.TextAreaInputEventArgs">
            <summary>
            Interface for input event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.TextAreaInputEventArgs.PreviousValue">
            <summary> 
            Returns the previously updated value of the <see cref="T:Syncfusion.Blazor.Inputs.SfTextArea"/>. 
            </summary> 
            <value> 
            Accepts the string value. 
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.TextAreaInputEventArgs.Value">
            <summary> 
            Returns the entered value of the <see cref="T:Syncfusion.Blazor.Inputs.SfTextArea"/>. 
            </summary> 
            <value> 
            Accepts the string value. 
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.TextAreaFocusInEventArgs">
            <summary>
            Interface for focus event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.TextAreaFocusInEventArgs.Value">
            <summary> 
            Gets the entered value of the <see cref="T:Syncfusion.Blazor.Inputs.SfTextArea"/>. 
            </summary> 
            <value> 
            Return the string value. 
            </value> 
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.TextAreaFocusOutEventArgs">
            <summary>
            Interface for focus out event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.TextAreaFocusOutEventArgs.Value">
            <summary> 
            Gets the entered value of the <see cref="T:Syncfusion.Blazor.Inputs.SfTextArea"/>. 
            </summary>	 
            <value> 
            Return the string value. 
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.SfTextArea">
            <summary>
            The TextArea is an textarea element that allows to get input from the user. It allows the user to edit or display the text value.
            </summary>
            <summary>
            The TextArea is an textarea element that allows to get input from the user. It allows the user to edit or display the text value.
            </summary>
            <summary>
            The TextArea is an input element that allows to get input from the user. It allows the user to edit or display the text value.
            </summary>
            <summary>
            The TextArea is an multiline text input element that allows to get input from the user. It allows the user to edit or display the text value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfTextArea.ValueChange">
            <summary> 
            Gets or sets the event callback that will be invoked when the content of <see cref="T:Syncfusion.Blazor.Inputs.SfTextArea"/> has changed. 
            </summary> 
            <example> 
            <code><![CDATA[ 
            <SfTextArea Placeholder="Enter a value" ValueChange="@OnChange"> 
            </SfTextArea> 
            @code{ 
                private void OnChange(TextAreaValueChangeEventArgs args) 
                { 
                    var TextValue = args.Value; 
                } 
            } 
            ]]></code> 
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfTextArea.Input">
            <summary> 
            Gets or sets the event callback that will be invoked when the user types or pastes text into the <see cref="T:Syncfusion.Blazor.Inputs.SfTextArea"/>. 
            </summary> 
            <remarks> 
            The <see cref="P:Syncfusion.Blazor.Inputs.SfTextArea.Input"/> event is triggered whenever the user interacts with the <see cref="T:Syncfusion.Blazor.Inputs.SfTextArea"/> by typing, pasting, or 
            using any input method to modify the content. It provides real-time updates as the user enters text, 
            allowing you to perform actions or validation based on the changing input. 
             
            It is important to note that the <see cref="P:Syncfusion.Blazor.Inputs.SfTextArea.Input"/> event may fire frequently during user input, potentially with 
            each keystroke, so it is generally suitable for handling real-time updates or feedback rather than more 
            intensive processing. 
            </remarks> 
            <example> 
            <code><![CDATA[ 
            <SfTextArea Placeholder="Enter a value" Input="@OnInput"> 
            </SfTextArea> 
            @code{ 
                private void OnInput(TextAreaInputEventArgs args) 
                { 
                    var TextValue = args.Value; 
                } 
            } 
            ]]></code> 
            </example> 
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfTextArea.Created">
            <summary> 
            Gets or sets the event callback that will be invoked when the <see cref="T:Syncfusion.Blazor.Inputs.SfTextArea"/> component is created. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfTextArea.Destroyed">
            <summary> 
            Gets or sets the event callback that will be invoked when the <see cref="T:Syncfusion.Blazor.Inputs.SfTextArea"/> component is destroyed. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfTextArea.Focus">
            <summary> 
            Gets or sets the event callback that will be invoked when the <see cref="T:Syncfusion.Blazor.Inputs.SfTextArea"/> gets focus. 
            </summary> 
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfTextArea.Blur">
            <summary> 
            Gets or sets the event callback that will be invoked when the <see cref="T:Syncfusion.Blazor.Inputs.SfTextArea"/> loses focus. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfTextArea.FloatLabelType">
            <summary> 
            Gets or sets the floating label behavior of the <see cref="T:Syncfusion.Blazor.Inputs.SfTextArea"/>. The <see cref="P:Syncfusion.Blazor.Inputs.SfTextArea.Placeholder"/> text acts as a label. 
            </summary> 
            <value> 
            One of the <see cref="T:Syncfusion.Blazor.Inputs.FloatLabelType"/> enumeration. The default value is <see cref="F:Syncfusion.Blazor.Inputs.FloatLabelType.Never"/>. 
            </value> 
            <remarks>  
            <list type="bullet"> 
            <item><description>If the <see cref="P:Syncfusion.Blazor.Inputs.SfTextArea.FloatLabelType"/> is <see cref="F:Syncfusion.Blazor.Inputs.FloatLabelType.Never"/>, the placeholder text does not float as a label.</description></item> 
            <item><description>If the <see cref="P:Syncfusion.Blazor.Inputs.SfTextArea.FloatLabelType"/> is <see cref="F:Syncfusion.Blazor.Inputs.FloatLabelType.Auto"/>, the placeholder text will float above the <see cref="T:Syncfusion.Blazor.Inputs.SfTextArea"/> component as a label after focusing on it.</description></item> 
            <item><description>If the <see cref="P:Syncfusion.Blazor.Inputs.SfTextArea.FloatLabelType"/> is <see cref="F:Syncfusion.Blazor.Inputs.FloatLabelType.Always"/>, the placeholder text is displayed as a label above the  <see cref="T:Syncfusion.Blazor.Inputs.SfTextArea"/> component.</description></item> 
            </list>  
            </remarks> 
            <example> 
            In the following code example, set the float label as <see cref="F:Syncfusion.Blazor.Inputs.FloatLabelType.Auto"/>. 
            <code><![CDATA[ 
              <SfTextArea FloatLabelType="FloatLabelType.Auto" Placeholder="Enter a value"></SfTextArea> 
            ]]></code> 
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfTextArea.Placeholder">
            <summary> 
            Gets or sets the text that is shown as a hint or placeholder until the user focuses on the <see cref="T:Syncfusion.Blazor.Inputs.SfTextArea"/>. 
            </summary> 
            <value> 
            A string representing the placeholder text. The default value is <c>null</c>. 
            </value> 
            <remarks> 
            The Placeholder property specifies the text that appears in the <see cref="T:Syncfusion.Blazor.Inputs.SfTextArea"/> when it is empty, providing a hint to the user about the expected input. 
            </remarks> 
            <example> 
            <code><![CDATA[ 
            <SfTextArea Placeholder="Enter text" RowCount="4"></SfTextArea> 
            ]]></code> 
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfTextArea.ReadOnly">
            <summary> 
            Gets or sets a value indicating whether the <see cref="T:Syncfusion.Blazor.Inputs.SfTextArea"/> is read-only. 
            </summary> 
            <value> 
            A boolean indicating whether the <see cref="T:Syncfusion.Blazor.Inputs.SfTextArea"/> is read-only. The default value is <c>false</c>. 
            </value> 
            <remarks> 
            Set this property to <c>true</c> to make the <see cref="T:Syncfusion.Blazor.Inputs.SfTextArea"/> read-only, preventing user input. 
            </remarks> 
            <example> 
            <code><![CDATA[ 
            <SfTextArea ReadOnly="true" Placeholder="Read-only text" RowCount="4"></SfTextArea> 
            ]]></code> 
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfTextArea.ShowClearButton">
            <summary> 
            Gets or sets a value indicating whether the clear button is displayed in the <see cref="T:Syncfusion.Blazor.Inputs.SfTextArea"/>. 
            </summary> 
            <value> 
            A boolean indicating whether the clear button is displayed. The default value is <c>false</c>. 
            </value> 
            <remarks> 
            Set this property to <c>true</c> to show a clear button in the <see cref="T:Syncfusion.Blazor.Inputs.SfTextArea"/>, allowing users to quickly remove all text content. 
            </remarks> 
            <example> 
            <code><![CDATA[ 
            <SfTextArea ShowClearButton="true" Placeholder="Enter text" RowCount="4"></SfTextArea> 
            ]]></code> 
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfTextArea.Width">
            <summary> 
            Gets or sets the width of the <see cref="T:Syncfusion.Blazor.Inputs.SfTextArea"/> component. 
            </summary> 
            <value> 
            A string representing the width of the <see cref="T:Syncfusion.Blazor.Inputs.SfTextArea"/>. The default value is <c>null</c>. 
            </value> 
            <remarks> 
            Use this property to specify the width of the <see cref="T:Syncfusion.Blazor.Inputs.SfTextArea"/>, supporting various units such as auto, cm, mm, in, px, pt, pc, %, em, ex, ch, rem, vw, vh, vmin, vmax. 
            If the <see cref="P:Syncfusion.Blazor.Inputs.SfTextArea.Width"/> property is not set, the width of the <see cref="T:Syncfusion.Blazor.Inputs.SfTextArea"/> is determined by the <see cref="P:Syncfusion.Blazor.Inputs.SfTextArea.ColumnCount"/> property. 
            The <see cref="P:Syncfusion.Blazor.Inputs.SfTextArea.ColumnCount"/> property specifies the visible width of the <see cref="T:Syncfusion.Blazor.Inputs.SfTextArea"/>, measured in average character widths, with a default value of 20. 
            </remarks> 
            <example> 
            <code><![CDATA[ 
            <SfTextArea Width="300px" Placeholder="Enter text" RowCount="4"></SfTextArea> 
            ]]></code> 
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfTextArea.TabIndex">
            <summary>
            Gets or sets the tab order of the <see cref="T:Syncfusion.Blazor.Inputs.SfTextArea"/> component.
            </summary>
            <value>
            An integer value representing the tab index of <see cref="T:Syncfusion.Blazor.Inputs.SfTextArea"/> component.
            </value>
            <example>
            <code><![CDATA[
              <SfTextArea TabIndex=1></SfTextArea>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfTextArea.HtmlAttributes">
            <summary> 
            Gets or sets a collection of additional attributes such as styles, class, and more that will be applied to the <see cref="T:Syncfusion.Blazor.Inputs.SfTextArea"/> component. 
            </summary> 
            <value> 
            The value as a dictionary collection. The default value is <c>null</c>. 
            </value> 
            <remarks> 
            If you configure both the property and equivalent HTML attributes, the component considers the property value. 
            </remarks> 
            <example> 
            <code><![CDATA[ 
            <SfTextArea HtmlAttributes="@CustomAttribute"> 
            </SfTextArea> 
            @code{ 
                Dictionary<string, object> CustomAttribute = new Dictionary<string, object>() 
                { 
                    { "title", "Enter your text" } 
                }; 
            } 
            ]]></code> 
            </example>       
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfTextArea.MaxLength">
            <summary> 
            Gets or sets the maximum number of characters allowed in the <see cref="T:Syncfusion.Blazor.Inputs.SfTextArea"/>. 
            </summary> 
            <value> 
            An integer representing the maximum number of characters. The default value is -1, indicating no maximum limit. 
            </value> 
            <remarks> 
            Set this property to impose a maximum limit on the number of characters that can be entered into the <see cref="T:Syncfusion.Blazor.Inputs.SfTextArea"/>. 
            A value of -1 indicates no maximum limit. 
            </remarks> /// <example> 
            <code><![CDATA[ 
            <SfTextArea MaxLength="100" Placeholder="Enter text"></SfTextArea> 
            ]]></code> 
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfTextArea.ResizeMode">
            <summary>
            Gets or sets the resize behavior of the <see cref="T:Syncfusion.Blazor.Inputs.SfTextArea"/>.
            </summary>
            <value>
            One of the <see cref="T:Syncfusion.Blazor.Inputs.Resize"/> enumeration. The default value is <see cref="F:Syncfusion.Blazor.Inputs.Resize.Both"/>.
            </value>
            <remarks>
            <list type="bullet"> 
            <item><description>If the <see cref="P:Syncfusion.Blazor.Inputs.SfTextArea.ResizeMode"/> is <see cref="F:Syncfusion.Blazor.Inputs.Resize.None"/>, the <see cref="T:Syncfusion.Blazor.Inputs.SfTextArea"/> component should not be resizable ever.</description></item>
            <item><description>If the <see cref="P:Syncfusion.Blazor.Inputs.SfTextArea.ResizeMode"/> is <see cref="F:Syncfusion.Blazor.Inputs.Resize.Horizontal"/>, the <see cref="T:Syncfusion.Blazor.Inputs.SfTextArea"/> component resizable horizontally always.</description></item>
            <item><description>If the <see cref="P:Syncfusion.Blazor.Inputs.SfTextArea.ResizeMode"/> is <see cref="F:Syncfusion.Blazor.Inputs.Resize.Vertical"/>, the <see cref="T:Syncfusion.Blazor.Inputs.SfTextArea"/> component resizable vertically always.</description></item>
            <item><description>If the <see cref="P:Syncfusion.Blazor.Inputs.SfTextArea.ResizeMode"/> is <see cref="F:Syncfusion.Blazor.Inputs.Resize.Both"/>, the <see cref="T:Syncfusion.Blazor.Inputs.SfTextArea"/> component resizable both vertically and horizontally always.</description></item>
            </list> 
            </remarks>
            <example>
            In the following code example, set the resize mode as <see cref="F:Syncfusion.Blazor.Inputs.Resize.Horizontal"/>.
            <code><![CDATA[
              <SfTextArea ResizeMode="Resize.Horizontal" Placeholder="Enter a value"></SfTextArea>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfTextArea.RowCount">
            <summary> 
            Gets or sets the number of lines that are visible in the <see cref="T:Syncfusion.Blazor.Inputs.SfTextArea"/>. 
            </summary> 
            <value> 
            An integer representing the number of lines. The default value is 2. 
            </value> 
            <remarks> 
            The RowCount property specifies the visible height of the textarea, measured in lines. 
            </remarks> 
            <example> 
            <code><![CDATA[ 
            <SfTextArea RowCount="4" Placeholder="Enter text"></SfTextArea> 
            ]]></code> 
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfTextArea.ColumnCount">
            <summary> 
            Gets or sets the number of columns for the <see cref="T:Syncfusion.Blazor.Inputs.SfTextArea"/> component. 
            </summary> 
            <remarks> 
            The ColumnCount property specifies the visible width of the <see cref="T:Syncfusion.Blazor.Inputs.SfTextArea"/>, measured in average character widths. 
            </remarks> 
            <value> 
            An integer representing the number of columns. The default value is 20. 
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfTextArea.Disabled">
            <summary> 
            Gets or sets a value indicating whether the <see cref="T:Syncfusion.Blazor.Inputs.SfTextArea"/> component is enabled. 
            </summary> 
            <value> 
            A boolean indicating whether the component is enabled. The default value is <c>false</c>. 
            </value> 
            <remarks> 
            Set this property to <c>true</c> to disable user interaction with the <see cref="T:Syncfusion.Blazor.Inputs.SfTextArea"/>. 
            </remarks> 
            <example> 
            <code><![CDATA[ 
            <SfTextArea Disabled="true" Placeholder="Enter text" RowCount="4"></SfTextArea> 
            ]]></code> 
            </example> 
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfTextArea.FocusAsync">
            <summary> 
            Sets the focus to <see cref="T:Syncfusion.Blazor.Inputs.SfTextArea"/> component for interaction. 
            </summary> 
            <returns>Task.</returns> 
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfTextArea.FocusOutAsync">
            <summary> 
            Remove the focus from <see cref="T:Syncfusion.Blazor.Inputs.SfTextArea"/> component, if the component is in focus state. 
            </summary> 
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfTextArea.GetPersistDataAsync">
            <summary> 
            Gets the properties to be maintained in the persisted state. 
            </summary> 
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfTextArea.OnInitializedAsync">
            <summary>
            Triggers while initial rendering of the component.
            </summary>
            <returns>Task.</returns>
            <exclude/>
            <inheritdoc/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfTextArea.OnParametersSetAsync">
            <inheritdoc/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfTextArea.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Triggers after the component was rendered.
            </summary>
            <param name="firstRender">true if the component rendered for the first time.</param>
            <returns>Task.</returns>
            <exclude/>
            <inheritdoc/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfTextArea.InvokeInputEvent">
            <summary>
            Bind the input event to the input element for enabled clear button and floatlabel to the component.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfTextArea.ComponentDispose">
            <summary>
            Disposes of the component.
            </summary>
            <remarks>
            This method is called internally to dispose of the component. It checks if the component has been rendered 
            and if so, it invokes the Destroyed event asynchronously.
            </remarks>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.ChangedEventArgs">
            <summary>
            Interface for changed event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ChangedEventArgs.Container">
            <summary>
            Gets the TextBox container element.
            </summary>
            <value>
            An <see cref="T:Microsoft.AspNetCore.Components.ElementReference"/> that represents the container element of the TextBox.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ChangedEventArgs.Event">
            <summary>
            Gets the event parameters from TextBox.
            </summary>
            <value>
            An EventArgs object that contains the event data associated with the TextBox event.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ChangedEventArgs.IsInteracted">
            <summary>
            Gets Gets or sets a value indicating whether the event is triggered by user interaction.
            </summary>
            <value>
            <c>true</c>, if the component has been interacted with by the user. Otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ChangedEventArgs.PreviousValue">
            <summary>
            Gets the previously entered value of the TextBox.
            </summary>
            <value>
            Return the string value.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ChangedEventArgs.Value">
            <summary>
            Gets the entered value of the TextBox.
            </summary>
            <value>
            Return the string value.
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.FocusInEventArgs">
            <summary>
            Interface for focus event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FocusInEventArgs.Container">
            <summary>
            Gets the TextBox container element.
            </summary>
            <value>
            An <see cref="T:Microsoft.AspNetCore.Components.ElementReference"/> that represents the container element of the TextBox.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FocusInEventArgs.Event">
            <summary>
            Gets the event parameters from TextBox.
            </summary>
            <value>
            An EventArgs object that contains the event data associated with the TextBox event.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FocusInEventArgs.Value">
            <summary>
            Gets the entered value of the TextBox.
            </summary>
            <value>
            Return the string value.
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.FocusOutEventArgs">
            <summary>
            Interface for focus out event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FocusOutEventArgs.Container">
            <summary>
            Gets the TextBox container element.
            </summary>
            <value>
            An <see cref="T:Microsoft.AspNetCore.Components.ElementReference"/> that represents the container element of the TextBox.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FocusOutEventArgs.Event">
            <summary>
            Gets the event parameters from TextBox.
            </summary>
            <value>
            An EventArgs object that contains the event data associated with the TextBox event.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FocusOutEventArgs.Value">
            <summary>
            Gets the entered value of the TextBox.
            </summary>
            <value>
            Return the string value.
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.InputEventArgs">
            <summary>
            Interface for input event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.InputEventArgs.Container">
            <summary>
            Returns the TextBox container element.
            </summary>
            <value>
            An <see cref="T:Microsoft.AspNetCore.Components.ElementReference"/> that represents the container element of the TextBox.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.InputEventArgs.Event">
            <summary>
            Returns the event parameters from TextBox.
            </summary>
            <value>
            An EventArgs object that contains the event data associated with the TextBox event.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.InputEventArgs.PreviousValue">
            <summary>
            Returns the previously updated value of the TextBox.
            </summary>
            <value>
            Accepts the string value.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.InputEventArgs.Value">
            <summary>
            Returns the entered value of the TextBox.
            </summary>
            <value>
            Accepts the string value.
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.TextBoxModel">
            <summary>
            Interface for a class TextBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.TextBoxModel.Autocomplete">
            <summary>
            Specifies whether the browser is allowed to automatically enter or select a value for the TextBox.
            <para>By default, autocomplete is enabled for TextBox.</para>
            <para>Possible values are:</para>
            <list type="bullet">
            <item>
            <term>On</term>
            <description>Specifies that autocomplete is enabled</description>
            </item>
            <item>
            <term>Off</term>
            <description>Specifies that autocomplete is disabled.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.TextBoxModel.CssClass">
            <summary>
            Specifies the CSS class name that can be appended with the root element of the TextBox. One or more custom CSS classes can be added to a TextBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.TextBoxModel.EnablePersistence">
            <summary>
            Enable or disable the persisting TextBox state between page reloads. If enabled, the `Value` state will be persisted.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.TextBoxModel.EnableRtl">
            <summary>
            Enable or disable rendering component in the right to left direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.TextBoxModel.Enabled">
            <summary>
            Specifies a boolean value that indicates whether the TextBox allows the user to interact with it.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.TextBoxModel.FloatLabelType">
            <summary>
            Specifies the floating label behavior of the TextBox that the placeholder text floats above the TextBox based on the following values.
            <para>Possible values are:</para>
            <list type="bullet">
            <item>
            <term>Never</term>
            <description>Never floats the label in the TextBox when the placeholder is available.</description>
            </item>
            <item>
            <term>Always</term>
            <description>The floating label always floats above the TextBox.</description>
            </item>
            <item>
            <term>Auto</term>
            <description>The floating label floats above the TextBox after focusing it or when enters the value in it.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.TextBoxModel.HtmlAttributes">
            <summary>
            You can add the additional html attributes such as styles, class, and more to the root element.
            <para>If you configured both property and equivalent html attributes, then the component considers the property value.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.TextBoxModel.InputAttributes">
            <summary>
            You can add the additional input attributes such as disabled, value, and more to the root element.
            <para>If you configured both property and equivalent input attribute, then the component considers the property value.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.TextBoxModel.Multiline">
            <summary>
            Specifies a boolean value that enables or disables the multiline on the TextBox.
            <para>The TextBox changes from a single line to multiline when enabling this multiline mode.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.TextBoxModel.Placeholder">
            <summary>
            Specifies the text that is shown as a hint or placeholder until the user focuses or enter a value in TextBox. The property is depending on the FloatLabelType property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.TextBoxModel.Readonly">
            <summary>
            Specifies the boolean value whether the TextBox allows user to change the text.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.TextBoxModel.ShowClearButton">
            <summary>
            Specifies a boolean value that indicates whether the clear button is displayed in TextBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.TextBoxModel.Type">
            <summary>
            Specifies the behavior of the TextBox such as text, password, email, and more.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.TextBoxModel.Value">
            <summary>
            Sets the content of the TextBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.TextBoxModel.Width">
            <summary>
            Specifies the width of the TextBox component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.TextBoxModel.TabIndex">
            <summary>
            Specifies the tab order of the TextBox component.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.SfTextBox">
            <summary>
            The TextBox is an input element that allows to get input from the user. It allows the user to edit or display the text value.
            </summary>
            <summary>
            The TextBox is an input element that allows to get input from the user. It allows the user to edit or display the text value.
            </summary>
            <summary>
            The TextBox is an input element that allows to get input from the user. It allows the user to edit or display the text value.
            </summary>
            <summary>
            The TextBox is an input element that allows to get input from the user. It allows the user to edit or display the text value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfTextBox.Blur">
            <summary>
            Gets or sets the event callback that will be invoked when the TextBox loses focus.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfTextBox.ValueChange">
            <summary>
            Gets or sets the event callback that will be invoked when the content of TextBox has changed.
            </summary>
            <example>
            <code><![CDATA[
            <SfTextBox Placeholder="Enter a value" ValueChange="@OnChange">
            </SfTextBox>
            @code{
                private void OnChange(ChangedEventArgs args)
                {
                    var TextValue = args.Value;
                }
            }
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfTextBox.Created">
            <summary>
            Gets or sets the event callback that will be invoked when the TextBox component is created.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfTextBox.Destroyed">
            <summary>
            Gets or sets the event callback that will be invoked when the TextBox component is destroyed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfTextBox.Focus">
            <summary>
            Gets or sets the event callback that will be invoked when the TextBox gets focus.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfTextBox.Input">
            <summary>
            Gets or sets the event callback that will be invoked when the user types or pastes text into the TextBox.
            </summary>
            <remarks>
            The <see cref="P:Syncfusion.Blazor.Inputs.SfTextBox.Input"/> event is triggered whenever the user interacts with the TextBox by typing, pasting, or
            using any input method to modify the content. It provides real-time updates as the user enters text,
            allowing you to perform actions or validation based on the changing input.
            
            It is important to note that the <see cref="P:Syncfusion.Blazor.Inputs.SfTextBox.Input"/> event may fire frequently during user input, potentially with
            each keystroke, so it is generally suitable for handling real-time updates or feedback rather than more
            intensive processing.
            </remarks>
            <example>
            <code><![CDATA[
            <SfTextBox Placeholder="Enter a value" Input="@OnInput">
            </SfTextBox>
            @code{
                private void OnInput(InputEventArgs args)
                {
                    var TextValue = args.Value;
                }
            }
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfTextBox.Autocomplete">
            <summary>
            Gets or sets a value indicating whether the browser should automatically enter or suggest a value for the TextBox.
            </summary>
            <value>One of the <see cref="T:Syncfusion.Blazor.Inputs.AutoComplete"/> enumeration.The default value is <see cref="F:Syncfusion.Blazor.Inputs.AutoComplete.On"/> for TextBox.
            Possible values are:
            <list type="bullet">
            <item>
            <term>On</term>
            <description>Specifies that autocomplete is enabled</description>
            </item>
            <item>
            <term>Off</term>
            <description>Specifies that autocomplete is disabled.</description>
            </item>
            </list>
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfTextBox.FloatLabelType">
            <summary>
            Gets or sets the floating label behavior of the <see cref="T:Syncfusion.Blazor.Inputs.SfTextBox"/>. The <see cref="P:Syncfusion.Blazor.Inputs.SfTextBox.Placeholder"/> text act as a lable.
            </summary>
            <value>
            One of the <see cref="T:Syncfusion.Blazor.Inputs.FloatLabelType"/> enumeration. The default value is <see cref="F:Syncfusion.Blazor.Inputs.FloatLabelType.Never"/>
            </value>
            <remarks>
            If the <c>FloatLabelType</c> is <c>Never</c>, the placeholder text does not float as a label.
            If the <c>FloatLabelType</c> is <c>Auto</c>, the placeholder text will float above the TextBox component as a label after focusing it.
            If the <c>FloatLabelType</c> is <c>Always</c>, the placeholder text is displayed as a label above the TextBox component.
            </remarks>
            <example>
            In the following code example, set the float lable as <c>Auto</c>.
            <code><![CDATA[
              <SfTextBox FloatLabelType="FloatLabelType.Auto" Placeholder="Enter a value"></SfTextBox>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfTextBox.Placeholder">
            <summary>
            Gets or sets the text that is displayed when the <see cref="T:Syncfusion.Blazor.Inputs.SfTextBox"/> has no value and remove on the focus.
            </summary>
            <value>
            The text that is displayed when the TextBox has no value. The default value is <c>String.Empty</c>.
            </value>
            <remarks>
            The property depends on the <see cref="P:Syncfusion.Blazor.Inputs.SfTextBox.FloatLabelType"/> property, The placeholder text acts as a label.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfTextBox.Readonly">
            <summary>
            Gets or sets the boolean value whether the <see cref="T:Syncfusion.Blazor.Inputs.SfTextBox"/> allows the user to change the text.
            </summary>
            <value>
            <c>true</c>, if the TextBox component cannot be edited. Otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfTextBox.ShowClearButton">
            <summary>
            Get or sets a value that indicates whether the clear button is displayed in <see cref="T:Syncfusion.Blazor.Inputs.SfTextBox"/> component.
            </summary>
            <value>
            <c>true</c>, if the clear button should be shown. Otherwise, <c>false</c>.The default is <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfTextBox.Width">
            <summary>
            Gets or sets the width of the <see cref="T:Syncfusion.Blazor.Inputs.SfTextBox"/> component.
            </summary>
            <value>
            The preferred width in pixels or percentage value. The default value is <c>100%</c>.
            </value>
            <example>
            <code><![CDATA[
              <SfTextBox Width="300px"></SfTextBox>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfTextBox.TabIndex">
            <summary>
            Gets or sets the tab order of the <see cref="T:Syncfusion.Blazor.Inputs.SfTextBox"/> component.
            </summary>
            <value>
            An integer value representing the tab index of <see cref="T:Syncfusion.Blazor.Inputs.SfTextBox"/> component.
            </value>
            <example>
            <code><![CDATA[
              <SfTextBox TabIndex=1></SfTextBox>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfTextBox.Multiline">
            <summary>
            Gets or sets a boolean value that enables or disables the multiline(textarea) on the TextBox.
            The TextBox changes from a single line to multiline when enabling this multiline mode.
            </summary>
            <value>
            <c>true</c> to enable multiline mode (textarea); <c>false</c> to keep it as a single line TextBox.
            </value>
            <remarks>
            Enabling multiline mode for the TextBox allows users to enter and display text across multiple lines,
            effectively converting it into a textarea component. This can be useful when you need to capture longer
            or formatted text, such as in comments, descriptions, or any scenario that requires multiple lines of input.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfTextBox.HtmlAttributes">
            <summary>
            Gets or sets a collection of additional attributes such as styles, class, and more that will be applied to the TextBox component.
            </summary>
            <value>
            The value as dictionary collection.The default value is <c>null</c>
            </value>
            <remarks>
            If you configured both property and equivalent html attributes, then the component considers the property value.
            </remarks>
            <example>
            <code><![CDATA[
            <SfTextBox HtmlAttributes="@CustomAttribute">
            </SfTextBox>
            @code{
                Dictionary<string, object> CustomAttribute = new Dictionary<string, object>()
                {
                    { "title", "Enter your name" }
                };
            }
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfTextBox.InputAttributes">
            <summary>
            Gets or sets a collection of additional inputs attributes such as disabled, value, and more that will be applied to the TextBox component.        
            </summary>
            <value>
            The value as dictionary collection.The default value is <c>null</c>
            </value>
            <remarks>
            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive.
            If you configured both property and equivalent html attributes, then the component considers the property value.
            </remarks>
            <example>
            <code><![CDATA[
            <SfTextBox Placeholder="Enter the PIN" @attributes="@CustomAttribute">
            </SfTextBox>
            @code{
                Dictionary<string, object> CustomAttribute = new Dictionary<string, object>()
                {
                    { "maxlength", "4" }
                };
            }
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfTextBox.Type">
            <summary>
            Gets or sets the behavior of the TextBox such as text, password, email, and more.
            </summary>
            <value>
            One of the <see cref="T:Syncfusion.Blazor.Inputs.InputType" /> enumeration that specifies the type of input in the component.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfTextBox.TextBoxParent">
            <summary>
            Parent component of TextBox.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfTextBox.AddIconAsync(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Adding the icons to the TextBox component.
            </summary>
            <param name="position">The position where icons should be added, either <c>prepend</c> or <c>append</c>.</param>
            <param name="icons">The CSS classes representing the icons to be added to the icon element.</param>
            <param name="events">The icon events that should be added to the events element.</param>
            <example>The below code demonstrates usage of <see cref="M:Syncfusion.Blazor.Inputs.SfTextBox.AddIconAsync(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})"/> method through component instance. While passing Events parameter, ontouchstart denotes the Event type and the touchstart denotes the EventHandler method.
            <code>
            <![CDATA[
            Instance.AddIconAsync("prepend", "e-icon-pan", new Dictionary<string, object>() { { "ontouchstart", touchStart } });
            ]]>
            </code>
            </example>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfTextBox.UpdateFieldSetStatus(System.Boolean)">
            <summary>
            Sets the Enabled value to false if the closest <fieldset></fieldset> value is set to disabled.
            </summary>
            <param name="isEnabled">A boolean value indicating whether the component should be enabled or disabled.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfTextBox.FocusAsync">
            <summary>
            Sets the focus to TextBox component for interaction.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfTextBox.FocusOutAsync">
            <summary>
            Remove the focus from TextBox component, if the component is in focus state.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfTextBox.GetPersistDataAsync">
            <summary>
            Gets the properties to be maintained in the persisted state.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfTextBox.OnInitializedAsync">
            <summary>
            Triggers while initial rendering of the component.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfTextBox.OnParametersSetAsync">
            <summary>
            Triggers while dynamically updating the component properties.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfTextBox.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Triggers after the component was rendered.
            </summary>
            <param name="firstRender">true if the component rendered for the first time.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfTextBox.InvokeInputEvent">
            <summary>
            Bind the input event to the input element for enabled clear button and floatlabel to the component.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfTextBox.UpdateParentClass(System.String,System.String)">
            <summary>
            Update the parent component class to the element.
            </summary>
            <param name="rootClass">Specifies the root class of the component.</param>
            <param name="containerClass">Specifies the container class of the component.</param>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.SfUploader">
            <summary>
            The uploader component is useful to upload images, documents, and other files to server.
            The component is the extended version of HTML5 that is uploaded with multiple file selection, auto upload, drag and drop, progress bar, preload files, and validation.
            </summary>
            <summary>
            Specifies the list of files that will be preloaded on rendering of uploader component.
            </summary>
            <summary>
            Specifies the list of files that will be preloaded on rendering of uploader component.
            </summary>
            <summary>
            The uploader component is useful to upload images, documents, and other files to server.
            The component is the extended version of HTML5 that is uploaded with multiple file selection, auto upload, drag and drop, progress bar, preload files, and validation.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfUploader.ID">
            <summary>
            Gets the ID of the Uploader component.
            </summary>
            <value>
            Accepts the string value.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfUploader.ChildContent">
            <summary>
            Specifies the content that has to be passed.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfUploader.AllowedExtensions">
            <summary>
            Gets or sets the extensions of the file types allowed in the Uploader component, passing the extensions with the comma separators.
            </summary>
            <value>
            Accepts the string value. The default value is empty.
            </value>
            <remarks>
            For example, if you want to upload specific image files, pass the property as ".jpg" and ".png."
            </remarks>
            <example>
            <code><![CDATA[
            @using Syncfusion.Blazor.Inputs
            <SfUploader ID="UploadFiles" AllowedExtensions=".jpg, .png">
                <UploaderAsyncSettings SaveUrl="api/SampleData/Save" RemoveUrl="api/SampleData/Remove"/>
            </SfUploader>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfUploader.EnableHtmlSanitizer">
            <summary>
            Gets or sets whether to prevent the cross site scripting code in filename or not.
            </summary>
            <value>
            <c>true</c>, if the component prevents the cross site scripting code in filename; otherwise,<c>false</c>. The default value is <c>true</c>.       
            </value>
            <remarks>
            The Enable HtmlSanitizer property removes the cross-site scripting code or functions from the filename and shows the validation error message to the user.
            </remarks> 
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfUploader.AutoUpload">
            <summary>
            Gets or sets whether the <see cref="T:Syncfusion.Blazor.Inputs.SfUploader"/> component initiates automatic upload after the files are selected.
            </summary>
            <value>
            <c>true</c>, if the automatic upload option can be enabled in component. Otherwise, <c>false</c>. The default value is <c>true</c>.
            </value>
            <remarks>
            If you want to manipulate the files before uploading to server, disable the <see cref="P:Syncfusion.Blazor.Inputs.SfUploader.AutoUpload"/> property. 
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfUploader.ShowProgressBar">
            <summary>
            Gets or sets a value indicating whether to show the progress bar while uploading a file.
            </summary>
            <value>
            <c>true</c> if the progress bar should be shown; otherwise, <c>false</c>. The default value is <c>true</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfUploader.CssClass">
            <summary>
            Gets or sets one or more CSS classes that can be used to customize the appearance of a file upload component.
            </summary>
            <value>
            Accepts the CSS class string separated by space to customize the appearance of component.
            </value>
            <remarks>
            One or more custom CSS classes can be added to a file upload.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfUploader.DirectoryUpload">
            <summary>
            Gets or sets a value indicating whether the folder of files can be browsed in the file upload component.
            </summary>
            <value>
            <c>true</c>, if the directory upload option can be enabled. Otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfUploader.DropArea">
            <summary>
            Gets or sets the custom file drop target element selectors to handle file upload on drag-and-drop action.
            </summary>
            <value>
            Accepts the target element selector string.
            </value>
            <remarks>
            By default, the file upload component creates a container element around the file input that will act as a drop target.
            </remarks>
            <example>
            <code><![CDATA[
            @using Syncfusion.Blazor.Inputs
            <SfUploader DropArea="#CustomDropArea" >
                <UploaderAsyncSettings SaveUrl="api/SampleData/Save" RemoveUrl="api/SampleData/Remove" />
            </SfUploader>
            <div id="CustomDropArea" style="width:200px; height:200px; border:dashed 1px" ></div>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfUploader.DropEffect">
            <summary>
            Gets or sets the cursor displayed while dragging the file into the <see cref="T:Syncfusion.Blazor.Inputs.SfUploader"/> component. It indicates which type of operation will occur.
            </summary>
            <value>
            One of the <see cref="T:Syncfusion.Blazor.Inputs.DropEffect" /> enumeration that specifies the drag operation for the component. The default value is <see cref="F:Syncfusion.Blazor.Inputs.DropEffect.Default" />.
            </value>
            <remarks>
             The <c>DropEffect</c> property can be set to one of the following values:
            <list type="bullet">
            <item>
            <term>Copy</term> The mouse cursor shows a copy symbol when dragging and dropping the files.
            </item>
            <item>
            <term>Move</term> The mouse cursor shows a move symbol when dragging and dropping the files.
            </item>
            <item>
            <term>Link</term> The mouse cursor shows a link symbol when dragging and dropping the files.
            </item>
            <item>
            <term>None</term> The files are not allowed to be dropped.
            </item>
            </list>
            </remarks>
            <example>
            <code><![CDATA[
            @using Syncfusion.Blazor.Inputs
            <SfUploader ID="UploadFiles" DropEffect="DropEffect.Copy">
                <UploaderAsyncSettings SaveUrl="api/SampleData/Save" RemoveUrl="api/SampleData/Remove" />
            </SfUploader>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfUploader.EnablePersistence">
            <summary>
            Gets or sets a value indicating whether the persisting file upload state on page reload. If enabled, the state of the uploaded or selected files will be persisted.
            </summary>
            <value>
            <c>true</c>, if the persistence can be enabled. Otherwise, <c>false</c>. The default value is <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfUploader.EnableRtl">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:Syncfusion.Blazor.Inputs.SfUploader"/> component is rendered in right-to-left direction.
            </summary>
            <value>
            <c>true</c>, if the right to left direction can be enabled for the component. Otherwise, <c>false</c>. The default value is <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfUploader.Enabled">
            <summary>
            Gets or sets a value that indicates whether the <see cref="T:Syncfusion.Blazor.Inputs.SfUploader"/> component allows the user to interact with it.
            </summary>
            <value>
            <c>true</c>, allow the user to interact with component. Otherwise, <c>false</c>. The default value is <c>true</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfUploader.HtmlAttributes">
            <summary>
            Gets or sets an additional html attributes such as styles, class, and more to add the root element.
            </summary>
            <value>
            A dictionary of additional HTML attributes for the root element of the component.
            </value>
            <remarks>
            If you configured both property and equivalent html attributes, the component considers the property value.
            </remarks>
            <example>
            <code><![CDATA[
            @using Syncfusion.Blazor.Inputs
            <SfUploader ID="UploadFiles" HtmlAttributes="@HtmlAttribute">
                <UploaderAsyncSettings SaveUrl="api/SampleData/Save" RemoveUrl="api/SampleData/Remove" />
            </SfUploader>
            @code {
                Dictionary<string, object> HtmlAttribute = new Dictionary<string, object>() {
                {"disabled","true" }
                };
             }
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfUploader.InputAttributes">
            <summary>
            Gets or sets an additional input attributes such as disabled, value, and more to add the input file element.
            </summary>
            <value>
            A dictionary of additional input attributes for the root element of the component.
            </value>
            <remarks>
            If you configured both property and equivalent input attribute, the component considers the property value.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfUploader.MaxFileSize">
            <summary>
            Gets or sets the maximum allowed file size to be uploaded in bytes.
            </summary>
            <value>
            Accepts the double value representing that the maximum file size for the component. The default value is <c>30000000</c>.
            </value>
            <remarks>
            The property used to make sure that you cannot upload too large files.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfUploader.MinFileSize">
            <summary>
            Gets or sets the minimum file size to be uploaded in bytes.
            </summary>
            <value>
            Accepts the double value representing that the minimum file size for the component.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfUploader.AllowMultiple">
            <summary>
            Gets or sets a value that indicates whether the multiple files can be browsed or dropped simultaneously in the <see cref="T:Syncfusion.Blazor.Inputs.SfUploader"/> component.
            </summary>
            <value>
            <c>true</c>, if the multiple file options can be enabled. Otherwise, <c>false</c>. The default value is <c>true</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfUploader.SequentialUpload">
            <summary>
            Gets or sets a value that indicates whether the <see cref="T:Syncfusion.Blazor.Inputs.SfUploader"/> component is processing the multiple files simultaneously or not.
            </summary>
            <value>
            <c>true</c>, if the sequential upload option can be enabled in component. Otherwise, <c>false</c>. 
            </value>
            <remarks>
            If SequentialUpload property is enabled, the file upload component performs the upload one after the other.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfUploader.ShowFileList">
            <summary>
            Gets or sets a value that indicates whether the file list can be rendered or not.
            </summary>
            <value>
            <c>true</c>, if the file list should be shown. otherwise, <c>false</c>. The default value is <c>true</c>.
            </value>
            <remarks>
            The property used to prevent default file list and design own template for file list using <see cref="P:Syncfusion.Blazor.Inputs.SfUploader.Template"/>.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfUploader.TabIndex">
            <summary>
            Gets or sets the tab order of the component.
            </summary>
            <value>
            An integer value representing the tab index of Uploader component.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfUploader.Template">
            <summary>
            Gets or sets a template that is used to customize the content of each file in the list.
            </summary>
            <value> 
            The template content. The default value is <c>null</c>. 
            </value>
            <example>
            <code><![CDATA[
            @using Syncfusion.Blazor.Inputs
            @inject HttpClient Http
            <SfUploader ID="UploadFiles" DropEffect="DropEffect.Copy">
                <UploaderAsyncSettings SaveUrl="api/SampleData/Save" RemoveUrl="api/SampleData/Remove"/>
                <UploaderTemplates>
                    <Template Context="HttpContext">
                        <div style="padding: 7px;">
                            <h5 title="@(HttpContext.Name)">@(HttpContext.Name)</h5>
                            <i>@(HttpContext.Size) Bytes</i>
                        </div>
                    </Template>
                </UploaderTemplates>
            </SfUploader>
            ]]></code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.PropertyInitialized">
            <summary>
            Method provides initial values to the properties.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.PropertyParametersSet">
            <summary>
            Triggers while dynamically updating the component properties.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.BytesToSizeAsync(System.Double)">
            <summary>
            It is used to convert bytes value into kilobytes or megabytes depending on the size based
            on [binary prefix](https://en.wikipedia.org/wiki/Binary_prefix).
            </summary>
            <param name="bytes">Specifies the file size in bytes.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.CancelAsync(Syncfusion.Blazor.Inputs.FileInfo[])">
            <summary>
            Stops the in-progress chunked upload based on the file data.
            When the file upload is canceled, the partially uploaded file is removed from server.
            </summary>
            <param name="fileData">specifies the files data to cancel the progressing file.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.ClearAllAsync">
            <summary>
            Clear all the file entries from list that can be uploaded files or added in upload queue.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.CreateFileList(Syncfusion.Blazor.Inputs.FileInfo[],System.Nullable{System.Boolean})">
            <summary>
            Create the file list for specified files data.
            </summary>
            <param name="fileData">Specifies the file data.</param>
            <param name="isSelectedFile">true if the file is selected.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.GetFilesDataAsync(System.Nullable{System.Double})">
            <summary>
            Get the data of files which are shown in file list.
            </summary>
            <param name="index">Specifies the index.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.PauseAsync(System.Collections.Generic.List{Syncfusion.Blazor.Inputs.FileInfo},System.Nullable{System.Boolean})">
            <summary>
            Pauses the in-progress chunked upload based on the file data.
            </summary>
            <param name="fileData">specifies the files data to pause from uploading.</param>
            <param name="custom">Set true if used custom UI.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.RemoveAsync(Syncfusion.Blazor.Inputs.FileInfo[],System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Object)">
            <summary>
            Remove the uploaded file from server manually by calling the remove URL action.
            <para>If you pass an empty argument to this method, the complete file list can be cleared,
            otherwise remove the specific file based on its argument ("file_data").</para>
            </summary>
            <param name="fileData">specifies the files data to remove from file list/server.</param>
            <param name="customTemplate">Set true if the component rendering with customize template.</param>
            <param name="removeDirectly">Set true if files remove without removing event.</param>
            <param name="postRawFile">Set false, to post file name only to the remove action.</param>
            <param name="args"></param>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.ResumeAsync(Syncfusion.Blazor.Inputs.FileInfo[],System.Nullable{System.Boolean})">
            <summary>
            Resumes the chunked upload that is previously paused based on the file data.
            </summary>
            <param name="fileData">specifies the files data to resume the paused file.</param>
            <param name="custom"></param>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.RetryAsync(Syncfusion.Blazor.Inputs.FileInfo[],System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Retries the canceled or failed file upload based on the file data.
            <param name="fileData">specifies the files data to retry the canceled or failed file</param>
            <param name="fromcanceledStage">Set true to retry from canceled stage and set false to retry from initial stage.</param>
            <param name="custom"></param>
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.SortFileListAsync(Syncfusion.Blazor.Inputs.FileInfo[])">
            <summary>
            Allows you to sort the file data alphabetically based on its file name clearly.
            </summary>
            <param name="filesData">specifies the files data for upload.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.UploadAsync(Syncfusion.Blazor.Inputs.FileInfo[],System.Nullable{System.Boolean})">
            <summary>
            Allows you to call the upload process manually by calling save URL action.
            <para>To process the selected files (added in upload queue), pass an empty argument otherwise
            upload the specific file based on its argument.</para>
            </summary>
            <param name="files">specifies the files data for upload.</param>
            <param name="custom">specifies the custom files.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.GetFileDetails(System.Collections.Generic.List{Syncfusion.Blazor.Inputs.FileInfo})">
            <summary>
            Task which retrieves the file data.
            </summary>
            <param name="file">Specifies the file.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.CreateFileList(System.Collections.Generic.List{Syncfusion.Blazor.Inputs.Internal.UploadFileDetails},System.Boolean)">
            <summary>
            Task which creates the file list.
            </summary>
            <param name="fileData">Specifies the file data.</param>
            <param name="isForm">true if the component inside form.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.ClearAllFile">
            <summary>
            Task which clears the file list.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.RemoveFileData(System.Int32)">
            <summary>
            Method which removes the file data.
            </summary>
            <param name="index">Specifies the index.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.UpdateServerFileData(System.Collections.Generic.List{Syncfusion.Blazor.Inputs.Internal.UploadFileDetails},System.Boolean)">
            <summary>
            Method which update the file data  in server.
            </summary>
            <param name="fileData">Specifies the filedata.</param>
            <param name="isForm">true if the component rendered inside the form component.</param>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.SelectedEvent(Syncfusion.Blazor.Inputs.SelectedEventArgs)">
            <summary>
            Task which specifies the selected event.
            </summary>
            <param name="args">Selected event arguments.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.RemovingEvent(Syncfusion.Blazor.Inputs.RemovingEventArgs)">
            <summary>
            Task which specifies the RemovingEvent.
            </summary>
            <param name="args">Specifies the removing event arguments.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.ActionCompleteEvent(Syncfusion.Blazor.Inputs.ActionCompleteEventArgs)">
            <summary>
            Task which specifies the action complete event.
            </summary>
            <param name="args">Specifies the action complete event arguments.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.SuccessEvent(Syncfusion.Blazor.Inputs.SuccessEventArgs)">
            <summary>
            Task which specifies the success event .
            </summary>
            <param name="args">Specifies the success event arguments.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.ChangeEvent(Syncfusion.Blazor.Inputs.UploadChangeEventArgs)">
            <summary>
            Task which specifies the change event.
            </summary>
            <param name="args">Specifies the upload change event arguments.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.FailureEvent(Syncfusion.Blazor.Inputs.FailureEventArgs)">
            <summary>
            Task which specifies the failure event.
            </summary>
            <param name="args">FailureEventArgs arguments.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.ChunkFailureEvent(Syncfusion.Blazor.Inputs.FailureEventArgs)">
            <summary>
            Task which specifies the chunk failure event.
            </summary>
            <param name="args">FailureEventArgs arguments.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.FileListRenderingEvent(Syncfusion.Blazor.Inputs.FileListRenderingEventArgs)">
            <summary>
            Task which specifies the file list rendering event.
            </summary>
            <param name="args">FileListRenderingEventArgs arguments.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.ProgressEvent(Syncfusion.Blazor.Inputs.ProgressEventArgs)">
            <summary>
            Task which specifies the progress event.
            </summary>
            <param name="args">ProgressEventArgs arguments.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.CancelingEvent(Syncfusion.Blazor.Inputs.CancelEventArgs)">
            <summary>
            Task which specifies the canceling event.
            </summary>
            <param name="args">CancelEventArgs arguments.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.UploadingEvent(Syncfusion.Blazor.Inputs.UploadingEventArgs)">
            <summary>
            Task which specifies the uploading event.
            </summary>
            <param name="args">UploadingEventArgs arguments.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.ChunkUploadingEvent(Syncfusion.Blazor.Inputs.UploadingEventArgs)">
            <summary>
            Task which specifies the chunk uploading event.
            </summary>
            <param name="args">UploadingEventArgs arguments.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.ChunkSuccessEvent(Syncfusion.Blazor.Inputs.SuccessEventArgs)">
            <summary>
            Task which specifies the chunk success event.
            </summary>
            <param name="args">SuccessEventArgs arguments.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.PausingEvent(Syncfusion.Blazor.Inputs.PauseResumeEventArgs)">
            <summary>
            Task which specifies the pausing event.
            </summary>
            <param name="args">PauseResumeEventArgs arguments.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.ResumingEvent(Syncfusion.Blazor.Inputs.PauseResumeEventArgs)">
            <summary>
            Task which specifies the resuming event.
            </summary>
            <param name="args">PauseResumeEventArgs arguments.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.BeforeUploadEvent(Syncfusion.Blazor.Inputs.BeforeUploadEventArgs)">
            <summary>
            Task which specifies the before upload event.
            </summary>
            <param name="args">BeforeUploadEventArgs arguments.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.BeforeRemoveEvent(Syncfusion.Blazor.Inputs.BeforeRemoveEventArgs)">
            <summary>
            Task specifies the before remove event.
            </summary>
            <param name="args">BeforeRemoveEventArgs arguments.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.ClearingEvent(Syncfusion.Blazor.Inputs.ClearingEventArgs)">
            <summary>
            Task specifies the clearing event.
            </summary>
            <param name="args">ClearingEventArgs arguments.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.OnInitializedAsync">
            <summary>
            Triggers while initial rendering of the component.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Triggers after the component was rendered.
            </summary>
            <param name="firstRender">true if the component rendered for the firts time.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.OnParametersSetAsync">
            <summary>
            Triggers while dynamically updating the component properties.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.UpdateChildProperties(System.String,System.Object)">
            <summary>
            Update the dropdownlist fileds.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.UploaderAsyncSettings">
            <summary>
            Specifies the Uploader Events of the component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderAsyncSettings.ChildContent">
            <summary>
            Specifies the content that has to be passed.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderAsyncSettings.ChunkSize">
            <summary>
            Specifies the ChunkSize to split the large file into chunks, and upload it to the server in a sequential order.
            <para>If the ChunkSize property has value, the Uploader enables the chunk upload by default.
            It must be specified in bytes value.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderAsyncSettings.RemoveUrl">
            <summary>
            Specifies the URL of remove action that receives the file information and handle the remove operation in server.
            <para>The remove action type must be POST request and define "RemoveFileNames" attribute to get file information that will be removed.
            This property is optional.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderAsyncSettings.RetryAfterDelay">
            <summary>
            Specifies the delay time in milliseconds that the automatic retry happens after the delay.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderAsyncSettings.RetryCount">
            <summary>
            Specifies the number of retries that the Uploader can perform on the file failed to upload.
            By default, the Uploader set 3 as maximum retries. This property must be specified to prevent infinity looping.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderAsyncSettings.SaveUrl">
            <summary>
            Specifies the URL of save action that will receive the upload files and save in the server.
            <para>The save action type must be POST request and define the argument as same input name used to render the component.</para>
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.UploaderAsyncSettings.OnInitializedAsync">
            <summary>
            Triggers while initial rendering of the component.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.UploaderAsyncSettings.OnParametersSetAsync">
            <summary>
            Triggers after the component was rendered.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.UploaderButtons">
            <summary>
            Customize the default text of browse, clear, and upload buttons with plain text.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderButtons.ChildContent">
            <summary>
            Specifies the content that has to be passed.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderButtons.Browse">
            <summary>
            Specifies the text or html content to browse button.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderButtons.Clear">
            <summary>
            Specifies the text or html content to clear button.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderButtons.Upload">
            <summary>
            Specifies the text or html content to upload button.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.UploaderButtons.OnInitializedAsync">
            <summary>
            Triggers while initial rendering of the component.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.UploaderButtons.OnParametersSetAsync">
            <summary>
            Triggers while dynamically updating the component properties.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.UploaderEvents">
            <summary>
            Specifies the Uploader Events of the component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderEvents.OnActionComplete">
            <summary>
            Gets or sets the event callback that will be invoked after all the selected files has processed to upload successfully or failed to server.
            </summary>
            <value>
            An event callback function.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderEvents.BeforeRemove">
            <summary>
            Gets or sets the event callback that will be invoked before removing the file from the server.
            </summary>
            <value>
            An event callback function.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderEvents.BeforeUpload">
            <summary>
            Gets or sets the event callback that will be invoked before the uploading process starts.
            </summary>
            <value>
            An event callback function.
            </value>
            <remarks>
            You can pass additional data with the file uploading request in the <see cref="P:Syncfusion.Blazor.Inputs.BeforeUploadEventArgs.CustomFormData"/> argument.
            </remarks>
            <example>
            <code><![CDATA[
            @using Syncfusion.Blazor.Inputs
            <SfUploader>
                <UploaderEvents BeforeUpload="@BeforeUploadHandler"/>
            </SfUploader>
            @code {
            public void BeforeUploadHandler(BeforeUploadEventArgs args) {
               var accessToken = "Authorization_token";
               args.CurrentRequest = new List<object> { new { Authorization = accessToken } };
            }
            }
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderEvents.OnCancel">
            <summary>
            Gets or sets the event callback that will be invoked if the chunk file uploading action is canceled.
            </summary>
            <value>
            An event callback function.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderEvents.ValueChange">
            <summary>
            Gets or sets the event callback that will be invoked when the collection of the selected files is uploaded for each file.
            </summary>
            <value>
            An event callback function.
            </value>
            <remarks>
            This event is triggered when the user selects a new file in the input file element.
            To read the contents of the uploaded file, call the `OpenReadStream()` method of the `IBrowserFile` interface, 
            which returns a stream that you can use to read the file data.
            </remarks>
            <example>
            <code><![CDATA[
            @using Syncfusion.Blazor.Inputs
            <SfUploader AutoUpload="true">
                <UploaderEvents ValueChange="@OnChange"></UploaderEvents>
            </SfUploader>
            @code{
                private async Task OnChange(UploadChangeEventArgs args)
                {
                    try
                    {
                        foreach (var file in args.Files)
                        {
                            var path = @"D:\" + file.FileInfo.Name;
                            FileStream filestream = new FileStream(path, FileMode.Create, FileAccess.Write);
                            await file.File.OpenReadStream(long.MaxValue).CopyToAsync(filestream);
                            filestream.Close();
                        }
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine(ex.Message);
                    }
                }
              }
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderEvents.OnChunkFailure">
            <summary>
            Gets or sets the event callback that will be invoked if the chunk file fails to upload.
            </summary>
            <value>
            An event callback function.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderEvents.OnChunkSuccess">
            <summary>
            Gets or sets the event callback that will be invoked when every chunk file is uploaded successfully.
            </summary>
            <value>
            An event callback function.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderEvents.OnChunkUploadStart">
            <summary>
            Gets or sets the event callback that will be invoked when every chunk upload process gets started.
            </summary>
            <value>
            An event callback function.
            </value>
            <remarks>
            Pass the additional data with the file uploading request in the <see cref="P:Syncfusion.Blazor.Inputs.UploadingEventArgs.CustomFormData"/> argument.
            </remarks>
            <example>
            <code><![CDATA[
            @using Syncfusion.Blazor.Inputs
            <SfUploader ID="UploadFiles">
                <UploaderAsyncSettings SaveUrl="api/SampleData/Save" RemoveUrl="api/SampleData/Remove" ChunkSize="50000" />
                <UploaderEvents OnChunkUploadStart="@ChunkUploadStartHandler" />
            </SfUploader>
            @code {
            public void ChunkUploadStartHandler(UploadingEventArgs args) {
               var accessToken = "Authorization_token";
               args.CurrentRequest = new List<object> { new { Authorization = accessToken } };
            }
            }
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderEvents.OnClear">
            <summary>
            Gets or sets the event callback invoked before clearing the items in the file list using the <c>Clear</c> button.
            </summary>
            <value>
            An event callback function.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderEvents.Created">
            <summary>
            Gets or sets the event callback that will be invoked when the <see cref="T:Syncfusion.Blazor.Inputs.SfUploader"/> component is created.
            </summary>
            <value>
            An event callback function.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderEvents.OnFailure">
            <summary>
            Gets or sets the event callback that will be invoked when the file uploading or removal request fails.
            </summary>
            <value>
            An event callback function.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderEvents.OnFileListRender">
            <summary>
            Gets or sets the event callback invoked before rendering each file item. It helps to customize specific file item structures.
            </summary>
            <value>
            An event callback function.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderEvents.Paused">
            <summary>
            Gets or sets the event callback invoked when the chunk file uploading is paused.
            </summary>
            <value>
            An event callback function.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderEvents.Progressing">
            <summary>
            Gets or sets the event callback invoked when a file is uploading.
            </summary>
            <value>
            An event callback function.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderEvents.OnRemove">
            <summary>
            Gets or sets the event callback invoked on removing the uploaded file.
            </summary>
            <value>
            An event callback function.
            </value>
            <remarks>
            This event used to be confirmed before removing the file from the server.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderEvents.OnResume">
            <summary>
            Fires if resume the paused chunk file upload.
            </summary>
            <value>
            An event callback function.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderEvents.FileSelected">
            <summary>
            Gets or sets the event callback invoked after selecting or dropping the files in the <see cref="T:Syncfusion.Blazor.Inputs.SfUploader"/>.
            </summary>
            <value>
            An event callback function.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderEvents.Success">
            <summary>
            Gets or sets the event callback invoked when uploading or removing files is successful.
            </summary>
            <value>
            An event callback function.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderEvents.OnUploadStart">
            <summary>
            Gets or sets the event callback invoked when the upload process starts. This event is used to add a parameter to the upload request.
            </summary>
            <value>
            An event callback function.
            </value>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.UploaderEvents.OnInitializedAsync">
            <summary>
            Triggers while initial rendering of the component.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.UploaderFiles">
            <summary>
            Specifies the list of files that will be preloaded on rendering of uploader component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderFiles.ChildContent">
            <summary>
            Specifies the content that has to be passed.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderFiles.Files">
            <summary>
            Specifies the uploaded file list.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.UploaderFiles.OnInitializedAsync">
            <summary>
            Triggers while initial rendering of the component.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.UploaderUploadedFiles">
            <summary>
            Specifies the list of files that will be preloaded on rendering of uploader component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderUploadedFiles.ChildContent">
            <summary>
            Specifies the content that has to be passed.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderUploadedFiles.Name">
            <summary>
            Specifies the name of the file.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderUploadedFiles.Size">
            <summary>
            Specifies the size of the file.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderUploadedFiles.Type">
            <summary>
            Specifies the type of the file.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.UploaderUploadedFiles.OnInitializedAsync">
            <summary>
            Triggers while initial rendering of the component.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.UploaderUploadedFiles.OnParametersSetAsync">
            <summary>
            Triggers while dynamically updating the component properties.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderTemplates.ChildContent">
             <summary>
             Specifies the content that has to be passed.
             </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.LocaleData.Uploader">
            <summary>
            Returns the upload locale.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.LocaleData.NumericTextBox">
            <summary>
            Returns the numerictextbox locale.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.LocaleData.FormValidator">
            <summary>
            Returns the formValidator locale.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.UploaderLocale">
            <summary>
            Gets or sets the UploaderLocale property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.UploaderLocale.Browse">
            <summary>
            Gets or sets the Browse property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.UploaderLocale.Clear">
            <summary>
            Gets or sets the Clear property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.UploaderLocale.Upload">
            <summary>
            Gets or sets the Upload property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.UploaderLocale.DropFilesHint">
            <summary>
            Gets or sets the DropFilesHint property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.UploaderLocale.InvalidMaxFileSize">
            <summary>
            Gets or sets the InvalidMaxFileSize property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.UploaderLocale.InvalidMinFileSize">
            <summary>
            Gets or sets the InvalidMinFileSize property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.UploaderLocale.InvalidFileType">
            <summary>
            Gets or sets the InvalidFileType property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.UploaderLocale.UploadFailedMessage">
            <summary>
            Gets or sets the UploadFailedMessage property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.UploaderLocale.UploadSuccessMessage">
            <summary>
            Gets or sets the UploadSuccessMessage property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.UploaderLocale.RemovedSuccessMessage">
            <summary>
            Gets or sets the RemovedSuccessMessage property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.UploaderLocale.RemovedFailedMessage">
            <summary>
            Gets or sets the RemovedFailedMessage property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.UploaderLocale.InProgress">
            <summary>
            Gets or sets the InProgress property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.UploaderLocale.ReadyToUploadMessage">
            <summary>
            Gets or sets the ReadyToUploadMessage property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.UploaderLocale.Abort">
            <summary>
            Gets or sets the Abort property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.UploaderLocale.Remove">
            <summary>
            Gets or sets the Remove property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.UploaderLocale.Cancel">
            <summary>
            Gets or sets the Cancel property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.UploaderLocale.Delete">
            <summary>
            Gets or sets the Delete property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.UploaderLocale.PauseUpload">
            <summary>
            Gets or sets the PauseUpload property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.UploaderLocale.Pause">
            <summary>
            Gets or sets the Browse property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.UploaderLocale.Resume">
            <summary>
            Gets or sets the Resume property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.UploaderLocale.Retry">
            <summary>
            Gets or sets the Retry property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.UploaderLocale.FileUploadCancel">
            <summary>
            Gets or sets the FileUploadCancel property.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.NumericTextBoxLocale">
            <summary>
            Gets or sets the NumericTextBoxLocale property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.NumericTextBoxLocale.IncrementTitle">
            <summary>
            Gets or sets the IncrementTitle property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.NumericTextBoxLocale.DecrementTitle">
            <summary>
            Gets or sets the DecrementTitle property.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.FormValidatorLocale">
            <summary>
            Gets or sets the FormValidatorLocale property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.FormValidatorLocale.Required">
            <summary>
            Gets or sets the Required property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.FormValidatorLocale.Email">
            <summary>
            Gets or sets the Email property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.FormValidatorLocale.Url">
            <summary>
            Gets or sets the Url property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.FormValidatorLocale.Date">
            <summary>
            Gets or sets the Date property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.FormValidatorLocale.DateIso">
            <summary>
            Gets or sets the DateIso property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.FormValidatorLocale.Creditcard">
            <summary>
            Gets or sets the Creditcard property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.FormValidatorLocale.Number">
            <summary>
            Gets or sets the Number property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.FormValidatorLocale.Digits">
            <summary>
            Gets or sets the Digits property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.FormValidatorLocale.MaxLength">
            <summary>
            Gets or sets the MaxLength property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.FormValidatorLocale.MinLength">
            <summary>
            Gets or sets the MinLength property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.FormValidatorLocale.RangeLength">
            <summary>
            Gets or sets the RangeLength property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.FormValidatorLocale.Range">
            <summary>
            Gets or sets the Range property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.FormValidatorLocale.Max">
            <summary>
            Gets or sets the Max property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.FormValidatorLocale.Min">
            <summary>
            Gets or sets the Min property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.FormValidatorLocale.Regex">
            <summary>
            Gets or sets the Regex property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.FormValidatorLocale.Tel">
            <summary>
            Gets or sets the Tel property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.FormValidatorLocale.Pattern">
            <summary>
            Gets or sets the Pattern property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.FormValidatorLocale.EqualTo">
            <summary>
            Gets or sets the EqualTo property.
            </summary>
        </member>
    </members>
</doc>
