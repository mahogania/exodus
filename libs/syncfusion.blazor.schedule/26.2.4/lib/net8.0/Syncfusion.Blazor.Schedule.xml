<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Syncfusion.Blazor.Schedule</name>
    </assembly>
    <members>
        <member name="T:Syncfusion.Blazor.Schedule.EventSettingsField">
            <summary>
            A class that represents event settings field of <see cref="T:Syncfusion.Blazor.Schedule.SfSchedule`1"/> component.
            </summary>
            <remarks>
            You can map the custom field names, labels and validation for event fields by specifying value to corresponding property.
            </remarks>
            <example>
            In the below code example, subject and location field name were changed and validation were applied using <see cref="T:Syncfusion.Blazor.Schedule.ScheduleField"/> tag directive.
            <code><![CDATA[
            <SfSchedule TValue="AppointmentData">
                <ScheduleEventSettings TValue="AppointmentData" DataSource="@DataSource">
                    <ScheduleField>
                        <FieldSubject Name="Title" Title="Travel Summary" Validation="@validationRules"></FieldSubject>
                        <FieldLocation Name="Place" Title="Source" Default="Chennai" Validation="@locationValidationRules"></FieldLocation>
                    </ScheduleField>
                </ScheduleEventSettings>
            </SfSchedule>
            @code{
                ValidationRules validationRules = new ValidationRules { Required = true };
                ValidationRules locationValidationRules = new ValidationRules { Required = true, RegexPattern = "^[a-zA-Z0-9- ]*$", Messages = new Dictionary<string, object>() { { "regex", "Special characters are not allowed" } } };
                List<AppointmentData> DataSource = new List<AppointmentData>
                {
                    new AppointmentData { Id = 1, Title = "Meeting", StartTime = DateTime.Today.Date.AddHours(9).AddMinutes(30), EndTime = DateTime.Today.Date.AddHours(11) }
                };
                public class AppointmentData
                {
                    public int Id { get; set; }
                    public string Title { get; set; }
                    public string Place { get; set; }
                    public DateTime StartTime { get; set; }
                    public DateTime EndTime { get; set; }
                }
            }
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.EventSettingsField.Default">
            <summary>
            Gets or sets the specific default value to the fields, when no value is provided to those fields from dataSource.
            </summary>
            <value>
            Accepts a string value. The default value is <c>null</c>.
            </value>
            <example>
            <code><![CDATA[
            <SfSchedule TValue="AppointmentData">
                <ScheduleEventSettings TValue="AppointmentData">
                    <ScheduleField>
                        <FieldLocation Default="Chennai"></FieldLocation>
                    </ScheduleField>
                </ScheduleEventSettings>
            </SfSchedule>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.EventSettingsField.Name">
            <summary>
            Gets or sets the field name to be mapped from the dataSource for every event fields.
            </summary>
            <value>
            Accepts a string value. The default value is <c>null</c>.
            </value>
            <example>
            <code><![CDATA[
            <SfSchedule TValue="AppointmentData">
                <ScheduleEventSettings TValue="AppointmentData">
                    <ScheduleField>
                        <FieldSubject Name="Title"></FieldSubject>
                    </ScheduleField>
                </ScheduleEventSettings>
            </SfSchedule>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.EventSettingsField.Title">
            <summary>
            Gets or sets the label values to be displayed for the event editor fields.
            </summary>
            <value>
            Accepts a string value. The default value is <c>null</c>.
            </value>
            <example>
            <code><![CDATA[
            <SfSchedule TValue="AppointmentData">
                <ScheduleEventSettings TValue="AppointmentData">
                    <ScheduleField>
                        <FieldSubject Title="Travel Summary"></FieldSubject>
                    </ScheduleField>
                </ScheduleEventSettings>
            </SfSchedule>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.EventSettingsField.Validation">
            <summary>
            Gets or sets the validation rules to be applied for event fields within the event editor.
            </summary>
            <value>
            Accepts a <see cref="T:Syncfusion.Blazor.Schedule.ValidationRules"/> value. The default value is <c>null</c>.
            </value>
            <example>
            <code><![CDATA[
            <SfSchedule TValue="AppointmentData">
                <ScheduleEventSettings TValue="AppointmentData">
                    <ScheduleField>
                        <FieldSubject Validation="@validationRules"></FieldSubject>
                    </ScheduleField>
                </ScheduleEventSettings>
            </SfSchedule>
            @code{
                ValidationRules validationRules = new ValidationRules { Required = true };
            }
            ]]></code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.EventSettingsField.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.EventSettingsField.OnParametersSetAsync">
            <summary>
            Triggers while dynamically updating the component properties.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Schedule.FieldDescription">
            <summary>
            A class that represents the event description fields to be mapped from dataSource within the <see cref="T:Syncfusion.Blazor.Schedule.ScheduleField"/> tag directive.
            </summary>
            <remarks>
            You can map the custom field names, labels and validation for event description fields by specifying value to corresponding property in <see cref="T:Syncfusion.Blazor.Schedule.FieldDescription"/> tag directive.
            </remarks>
            <example>
            <code><![CDATA[
            <SfSchedule TValue="AppointmentData">
                <ScheduleEventSettings TValue="AppointmentData" DataSource="@DataSource">
                    <ScheduleField>
                        <FieldDescription Name="Notes" Title="Comments" Validation="@validationRules" Default="Write your Comments"></FieldDescription>
                    </ScheduleField>
                </ScheduleEventSettings>
            </SfSchedule>
            @code{
                ValidationRules validationRules = new ValidationRules { Required = true };
                List<AppointmentData> DataSource = new List<AppointmentData>
                {
                    new AppointmentData { Id = 1, Subject = "Meeting", StartTime = DateTime.Today.Date.AddHours(9).AddMinutes(30), EndTime = DateTime.Today.Date.AddHours(11) }
                };
                public class AppointmentData
                {
                    public int Id { get; set; }
                    public string Subject { get; set; }
                    public DateTime StartTime { get; set; }
                    public DateTime EndTime { get; set; }
                    public string Notes { get; set; }
                }
            }
            ]]></code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.FieldDescription.OnInitializedAsync">
            <summary>
            Triggers while initial rendering of the component.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Schedule.FieldEndTime">
            <summary>
            A class that represents the event end time fields to be mapped from dataSource within the <see cref="T:Syncfusion.Blazor.Schedule.ScheduleField"/> tag directive.
            </summary>
            <remarks>
            You can map the custom field names, labels and validation for event end time fields by specifying value to corresponding property in <see cref="T:Syncfusion.Blazor.Schedule.FieldEndTime"/> tag directive.
            </remarks>
            <example>
            <code><![CDATA[
            <SfSchedule TValue="AppointmentData">
                <ScheduleEventSettings TValue="AppointmentData" DataSource="@DataSource">
                    <ScheduleField>
                        <FieldEndTime Name="ArrivalTime" Title="Arrival Time" Validation="@validationRules"></FieldEndTime>
                    </ScheduleField>
                </ScheduleEventSettings>
            </SfSchedule>
            @code{
                ValidationRules validationRules = new ValidationRules { Required = true };
                List<AppointmentData> DataSource = new List<AppointmentData>
                {
                    new AppointmentData { Id = 1, Subject = "Meeting", StartTime = DateTime.Today.Date.AddHours(9).AddMinutes(30), ArrivalTime = DateTime.Today.Date.AddHours(11) }
                };
                public class AppointmentData
                {
                    public int Id { get; set; }
                    public string Subject { get; set; }
                    public DateTime StartTime { get; set; }
                    public DateTime ArrivalTime { get; set; }
                }
            }
            ]]></code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.FieldEndTime.OnInitializedAsync">
            <summary>
            Triggers while initial rendering of the component.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Schedule.FieldEndTimezone">
            <summary>
            A class that represents the event end timezone fields to be mapped from dataSource within the <see cref="T:Syncfusion.Blazor.Schedule.ScheduleField"/> tag directive.
            </summary>
            <remarks>
            You can map the custom field names, labels and validation for event end timezone fields by specifying value to corresponding property in <see cref="T:Syncfusion.Blazor.Schedule.FieldEndTimezone"/> tag directive.
            </remarks>
            <example>
            <code><![CDATA[
            <SfSchedule TValue="AppointmentData">
                <ScheduleEventSettings TValue="AppointmentData" DataSource="@DataSource">
                    <ScheduleField>
                        <FieldEndTimezone Name="Destination" Title="Destination"></FieldEndTimezone>
                    </ScheduleField>
                </ScheduleEventSettings>
            </SfSchedule>
            @code{
                List<AppointmentData> DataSource = new List<AppointmentData>
                {
                    new AppointmentData { Id = 1, Subject = "Meeting", StartTime = DateTime.Today.Date.AddHours(9).AddMinutes(30), EndTime = DateTime.Today.Date.AddHours(11), Destination = "Europe/Moscow" }
                };
                public class AppointmentData
                {
                    public int Id { get; set; }
                    public string Subject { get; set; }
                    public DateTime StartTime { get; set; }
                    public DateTime EndTime { get; set; }
                    public string Destination { get; set; }
                }
            }
            ]]></code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.FieldEndTimezone.OnInitializedAsync">
            <summary>
            Triggers while initial rendering of the component.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Schedule.FieldIsAllDay">
            <summary>
            A class that represents the event allday fields to be mapped from dataSource within the <see cref="T:Syncfusion.Blazor.Schedule.ScheduleField"/> tag directive.
            </summary>
            <remarks>
            You can map the custom field names, labels and validation for event allday fields by specifying value to corresponding property in <see cref="T:Syncfusion.Blazor.Schedule.FieldIsAllDay"/> tag directive.
            </remarks>
            <example>
            <code><![CDATA[
            <SfSchedule TValue="AppointmentData">
                <ScheduleEventSettings TValue="AppointmentData" DataSource="@DataSource">
                    <ScheduleField>
                        <FieldIsAllDay Name="FullDay" Title="FullDay"></FieldIsAllDay>
                    </ScheduleField>
                </ScheduleEventSettings>
            </SfSchedule>
            @code{
                List<AppointmentData> DataSource = new List<AppointmentData>
                {
                    new AppointmentData { Id = 1, Subject = "Meeting", StartTime = DateTime.Today.Date.AddHours(9).AddMinutes(30), EndTime = DateTime.Today.Date.AddHours(11), FullDay = true }
                };
                public class AppointmentData
                {
                    public int Id { get; set; }
                    public string Subject { get; set; }
                    public DateTime StartTime { get; set; }
                    public DateTime EndTime { get; set; }
                    public bool FullDay { get; set; }
                }
            }
            ]]></code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.FieldIsAllDay.OnInitializedAsync">
            <summary>
            Triggers while initial rendering of the component.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Schedule.FieldLocation">
            <summary>
            A class that represents the event location fields to be mapped from dataSource within the <see cref="T:Syncfusion.Blazor.Schedule.ScheduleField"/> tag directive.
            </summary>
            <remarks>
            You can map the custom field names, labels and validation for event location fields by specifying value to corresponding property in <see cref="T:Syncfusion.Blazor.Schedule.FieldLocation"/> tag directive.
            </remarks>
            <example>
            <code><![CDATA[
            <SfSchedule TValue="AppointmentData">
                <ScheduleEventSettings TValue="AppointmentData" DataSource="@DataSource">
                    <ScheduleField>
                        <FieldLocation Name="Place" Title="Place"></FieldLocation>
                    </ScheduleField>
                </ScheduleEventSettings>
            </SfSchedule>
            @code{
                List<AppointmentData> DataSource = new List<AppointmentData>
                {
                    new AppointmentData { Id = 1, Subject = "Meeting", Place = "Chennai", StartTime = DateTime.Today.Date.AddHours(9).AddMinutes(30), EndTime = DateTime.Today.Date.AddHours(11) }
                };
                public class AppointmentData
                {
                    public int Id { get; set; }
                    public string Subject { get; set; }
                    public DateTime StartTime { get; set; }
                    public DateTime EndTime { get; set; }
                    public string Place { get; set; }
                }
            }
            ]]></code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.FieldLocation.OnInitializedAsync">
            <summary>
            Triggers while initial rendering of the component.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Schedule.FieldRecurrenceException">
            <summary>
            A class that represents the event recurrence exception fields to be mapped from dataSource within the <see cref="T:Syncfusion.Blazor.Schedule.ScheduleField"/> tag directive.
            </summary>
            <remarks>
            You can map the custom field names, labels and validation for event recurrence exception fields by specifying value to corresponding property in <see cref="T:Syncfusion.Blazor.Schedule.FieldRecurrenceException"/> tag directive.
            </remarks>
            <example>
            In the below code example, a recurrence exception is applied for third occurrence in a series of recurring appointments.
            <code><![CDATA[
            <SfSchedule TValue="AppointmentData">
                <ScheduleEventSettings TValue="AppointmentData" DataSource="@DataSource">
                    <ScheduleField>
                        <FieldRecurrenceException Name="RecurringException"></FieldRecurrenceException>
                    </ScheduleField>
                </ScheduleEventSettings>
            </SfSchedule>
            @code{
                List<AppointmentData> DataSource = new List<AppointmentData>
                {
                    new AppointmentData { Id = 1, Subject = "Meeting", StartTime = DateTime.Today.Date.AddHours(9).AddMinutes(30), EndTime = DateTime.Today.Date.AddHours(11), RecurrenceRule = "FREQ=DAILY;INTERVAL=1;COUNT=5", RecurrenceException = DateTime.Today.Date.AddDays(2).ToString("yyyyMMdd") + "T040000Z" }
                };
                public class AppointmentData
                {
                    public int Id { get; set; }
                    public string Subject { get; set; }
                    public DateTime StartTime { get; set; }
                    public DateTime EndTime { get; set; }
                    public string RecurrenceRule { get; set; }
                    public string RecurringException { get; set; }
                }
            }
            ]]></code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.FieldRecurrenceException.OnInitializedAsync">
            <summary>
            Triggers while initial rendering of the component.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Schedule.FieldRecurrenceId">
            <summary>
            A class that represents the event recurrence id fields to be mapped from dataSource within the <see cref="T:Syncfusion.Blazor.Schedule.ScheduleField"/> tag directive.
            </summary>
            <remarks>
            You can map the custom field names, labels and validation for event recurrence id fields by specifying value to corresponding property in <see cref="T:Syncfusion.Blazor.Schedule.FieldRecurrenceId"/> tag directive.
            </remarks>
            <example>
            <code><![CDATA[
            <SfSchedule TValue="AppointmentData">
                <ScheduleEventSettings TValue="AppointmentData" DataSource="@DataSource">
                    <ScheduleField>
                        <FieldRecurrenceId Name="RecurringID"></FieldRecurrenceId>
                    </ScheduleField>
                </ScheduleEventSettings>
            </SfSchedule>
            @code{
                List<AppointmentData> DataSource = new List<AppointmentData>
                {
                    new AppointmentData { Id = 1, Subject = "Meeting", StartTime = DateTime.Today.Date.AddHours(9).AddMinutes(30), EndTime = DateTime.Today.Date.AddHours(11), RecurrenceRule = "FREQ=DAILY;INTERVAL=1;COUNT=5", RecurringID = 1 }
                };
                public class AppointmentData
                {
                    public int Id { get; set; }
                    public string Subject { get; set; }
                    public DateTime StartTime { get; set; }
                    public DateTime EndTime { get; set; }
                    public string RecurrenceRule { get; set; }
                    public Nullable<int> RecurringID { get; set; }
                }
            }
            ]]></code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.FieldRecurrenceId.OnInitializedAsync">
            <summary>
            Triggers while initial rendering of the component.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Schedule.FieldRecurrenceRule">
            <summary>
            A class that represents the event recurrence rule fields to be mapped from dataSource within the <see cref="T:Syncfusion.Blazor.Schedule.ScheduleField"/> tag directive.
            </summary>
            <remarks>
            You can map the custom field names, labels and validation for event recurrence rule fields by specifying value to corresponding property in <see cref="T:Syncfusion.Blazor.Schedule.FieldRecurrenceRule"/> tag directive.
            </remarks>
            <example>
            <code><![CDATA[
            <SfSchedule TValue="AppointmentData">
                <ScheduleEventSettings TValue="AppointmentData" DataSource="@DataSource">
                    <ScheduleField>
                        <FieldRecurrenceRule Name="OccurrenceRule"></FieldRecurrenceRule>
                    </ScheduleField>
                </ScheduleEventSettings>
            </SfSchedule>
            @code{
                List<AppointmentData> DataSource = new List<AppointmentData>
                {
                    new AppointmentData { Id = 1, Subject = "Meeting", StartTime = DateTime.Today.Date.AddHours(9).AddMinutes(30), EndTime = DateTime.Today.Date.AddHours(11), OccurrenceRule = "FREQ=DAILY;INTERVAL=1;COUNT=5" }
                };
                public class AppointmentData
                {
                    public int Id { get; set; }
                    public string Subject { get; set; }
                    public DateTime StartTime { get; set; }
                    public DateTime EndTime { get; set; }
                    public string OccurrenceRule { get; set; }
                }
            }
            ]]></code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.FieldRecurrenceRule.OnInitializedAsync">
            <summary>
            Triggers while initial rendering of the component.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Schedule.FieldStartTime">
            <summary>
            A class that represents the event start time fields to be mapped from dataSource within the <see cref="T:Syncfusion.Blazor.Schedule.ScheduleField"/> tag directive.
            </summary>
            <remarks>
            You can map the custom field names, labels and validation for event start time fields by specifying value to corresponding property in <see cref="T:Syncfusion.Blazor.Schedule.FieldStartTime"/> tag directive.
            </remarks>
            <example>
            <code><![CDATA[
            <SfSchedule TValue="AppointmentData">
                <ScheduleEventSettings TValue="AppointmentData" DataSource="@DataSource">
                    <ScheduleField>
                        <FieldStartTime Name="DepartureTime" Title="Departure Time" Validation="@validationRules"></FieldStartTime>
                    </ScheduleField>
                </ScheduleEventSettings>
            </SfSchedule>
            @code{
                ValidationRules validationRules = new ValidationRules { Required = true };
                List<AppointmentData> DataSource = new List<AppointmentData>
                {
                    new AppointmentData { Id = 1, Subject = "Meeting", DepartureTime = DateTime.Today.Date.AddHours(9).AddMinutes(30), EndTime = DateTime.Today.Date.AddHours(11) }
                };
                public class AppointmentData
                {
                    public int Id { get; set; }
                    public string Subject { get; set; }
                    public DateTime DepartureTime { get; set; }
                    public DateTime EndTime { get; set; }
                }
            }
            ]]></code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.FieldStartTime.OnInitializedAsync">
            <summary>
            Triggers while initial rendering of the component.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Schedule.FieldStartTimezone">
            <summary>
            A class that represents the event start timezone fields to be mapped from dataSource within the <see cref="T:Syncfusion.Blazor.Schedule.ScheduleField"/> tag directive.
            </summary>
            <remarks>
            You can map the custom field names, labels and validation for event start timezone fields by specifying value to corresponding property in <see cref="T:Syncfusion.Blazor.Schedule.FieldStartTimezone"/> tag directive.
            </remarks>
            <example>
            <code><![CDATA[
            <SfSchedule TValue="AppointmentData">
                <ScheduleEventSettings TValue="AppointmentData" DataSource="@DataSource">
                    <ScheduleField>
                        <FieldStartTimezone Name="Origin" Title="Origin"></FieldStartTimezone>
                    </ScheduleField>
                </ScheduleEventSettings>
            </SfSchedule>
            @code{
                List<AppointmentData> DataSource = new List<AppointmentData>
                {
                    new AppointmentData { Id = 1, Subject = "Meeting", StartTime = DateTime.Today.Date.AddHours(9).AddMinutes(30), EndTime = DateTime.Today.Date.AddHours(11), Origin = "Europe/Moscow" }
                };
                public class AppointmentData
                {
                    public int Id { get; set; }
                    public string Subject { get; set; }
                    public DateTime StartTime { get; set; }
                    public DateTime EndTime { get; set; }
                    public string Origin { get; set; }
                }
            }
            ]]></code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.FieldStartTimezone.OnInitializedAsync">
            <summary>
            Triggers while initial rendering of the component.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Schedule.FieldSubject">
            <summary>
            A class that represents the event subject fields to be mapped from dataSource within the <see cref="T:Syncfusion.Blazor.Schedule.ScheduleField"/> tag directive.
            </summary>
            <remarks>
            You can map the custom field names, labels and validation for event subject fields by specifying value to corresponding property in <see cref="T:Syncfusion.Blazor.Schedule.FieldSubject"/> tag directive.
            </remarks>
            <example>
            <code><![CDATA[
            <SfSchedule TValue="AppointmentData">
                <ScheduleEventSettings TValue="AppointmentData" DataSource="@DataSource">
                    <ScheduleField>
                        <FieldSubject Name="Summary" Title="Travel Summary" Validation="@validationRules" Default="Summary"></FieldSubject>
                    </ScheduleField>
                </ScheduleEventSettings>
            </SfSchedule>
            @code{
                ValidationRules validationRules = new ValidationRules { Required = true };
                List<AppointmentData> DataSource = new List<AppointmentData>
                {
                    new AppointmentData { Id = 1, Summary = "Meeting", StartTime = DateTime.Today.Date.AddHours(9).AddMinutes(30), EndTime = DateTime.Today.Date.AddHours(11) }
                };
                public class AppointmentData
                {
                    public int Id { get; set; }
                    public string Summary { get; set; }
                    public DateTime StartTime { get; set; }
                    public DateTime EndTime { get; set; }
                }
            }
            ]]></code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.FieldSubject.OnInitializedAsync">
            <summary>
            Triggers while initial rendering of the component.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Schedule.ScheduleEventSettings`1">
            <summary>
            A class that represents event settings for configuring the scheduler events.
            </summary>
            <typeparam name="TValue">A type which provides schema for the events.</typeparam>
            <remarks>
            You can configure the scheduler events using <see cref="T:Syncfusion.Blazor.Schedule.ScheduleEventSettings`1"/> tag directive.
            </remarks>
            <example>
            <code><![CDATA[
            <SfSchedule TValue="AppointmentData">
                <ScheduleEventSettings TValue="AppointmentData" DataSource="@DataSource"></ScheduleEventSettings>
            </SfSchedule>
            @code{
                List<AppointmentData> DataSource = new List<AppointmentData>
                {
                    new AppointmentData { Id = 1, Subject = "Meeting", StartTime = DateTime.Today.Date.AddHours(9).AddMinutes(30), EndTime = DateTime.Today.Date.AddHours(11) }
                };
                public class AppointmentData
                {
                    public int Id { get; set; }
                    public string Subject { get; set; }
                    public string Location { get; set; }
                    public DateTime StartTime { get; set; }
                    public DateTime EndTime { get; set; }
                }
            }
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleEventSettings`1.ChildContent">
            <summary>
            Gets or sets the child content for schedule event settings.
            </summary>
            <value>
            The value used to build the content.
            </value>
            <example>
            In the below example <see cref="T:Syncfusion.Blazor.Data.SfDataManager"/> is rendered as child content to bind remote data to scheduler. 
            <code><![CDATA[
            <SfSchedule TValue="AppointmentData">
                <ScheduleEventSettings TValue="AppointmentData">
                    <SfDataManager Url="https://ej2services.syncfusion.com/production/web-services/api/Schedule" Adaptor="@Syncfusion.Blazor.Adaptors.WebApiAdaptor"></SfDataManager>
                </ScheduleEventSettings>
            </SfSchedule>
            @code{
                public class AppointmentData
                {
                    public int Id { get; set; }
                    public string Subject { get; set; }
                    public string Location { get; set; }
                    public DateTime StartTime { get; set; }
                    public DateTime EndTime { get; set; }
                }
            }
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleEventSettings`1.AllowAdding">
            <summary>
            Gets or sets a value indicating whether new events can be added to the scheduler.
            </summary>
            <value>
            `false` to restrict the ability to add events. The default value `true` is set.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleEventSettings`1.AllowDeleting">
            <summary>
            Gets or sets a value indicating whether events can be deleted from the Scheduler.
            </summary>
            <value>
            `false` to restrict the ability to delete events. The default value `true` is set.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleEventSettings`1.AllowEditing">
            <summary>
            Gets or sets a value indicating whether events can be edited in the Scheduler.
            </summary>
            <value>
            `false` to restrict the ability to edit events. The default value `true` is set.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleEventSettings`1.DataSource">
            <summary>
            The collection of events to display in the Scheduler.
            </summary>
            <value>
            The collection should be of type <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleEventSettings`1.AllowEditFollowingEvents">
            <summary>
            Gets or sets a value indicating whether only future events in a series can be edited.
            </summary>
            <value>
            `true` to allow editing of only future events in a series. The default value is `false`.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleEventSettings`1.EnableIndicator">
            <summary>
            Gets or sets whether events can occupy the full height of the cell, excluding the header and more indicator.
            </summary>
            <value>
            `true` to allow events to occupy the full height of the cell, excluding the header and more indicator. The default value is `false`.
            </value>
            <remarks>
            This property is applicable only when <see cref="P:Syncfusion.Blazor.Schedule.ScheduleEventSettings`1.EnableMaxHeight"/> is enabled.
            The "more" indicator is only shown when there is more than one appointment on a single cell.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleEventSettings`1.EnableMaxHeight">
            <summary>
            Gets or sets whether events can occupy the full height of the cell, excluding the header.
            </summary>
            <value>
            `true` to allow events to occupy the full height of the cell, excluding the header. The default value is `false`.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleEventSettings`1.EnableTooltip">
            <summary>
            Gets or sets whether a tooltip is displayed for events, showing the subject, location, start and end time.
            </summary>
            <value>
            `true` to display a tooltip for events. The default value is `false`.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleEventSettings`1.IncludeFiltersInQuery">
            <summary>
            Gets or sets a value that determines whether the start date and end date filter conditions should be included in the query itself when requesting data from the server, or passed as query parameters in the API call.
            </summary>
            <value>
            Set to <c>true</c> to include the start and end date filter conditions in the query itself, or set to <c>false</c> to pass the filter conditions as query parameters in the API call. The default value is <c>false</c>.
            </value>
            <remarks>
            Setting this property to <c>true</c> can result in better performance, as the filter conditions will be part of the query itself, potentially reducing the size of the request and minimizing the time needed to parse the response. However, it can also lead to longer query strings, which could result in issues with maximum URL length or server limitations on query string length.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleEventSettings`1.SpannedEventPlacement">
            <summary>
            Get or sets how spanned events (events with a duration of more than 24 hours) are rendered in the Scheduler.
            </summary>
            <value>
            Accepts a <see cref="T:Syncfusion.Blazor.Schedule.SpannedEventPlacement"/> enum value. The default value is <see cref="F:Syncfusion.Blazor.Schedule.SpannedEventPlacement.AllDayRow"/>.
            </value>
            <remarks>
            Spanned events can be rendered in the all-day row or within time slots, depending on this property.
            This property is only applicable for the day, week, and workweek views.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleEventSettings`1.MinimumEventDuration">
            <summary>
            Gets or sets the minimum duration for an event, where events with a shorter duration will be rendered for this minimum duration.
            </summary>
            <value>
            Accepts a value of integer type, representing minutes. The default value is 1 minute.
            </value>
            <remarks>
            The events will be rendered using the `MinimumEventDuration` property if their duration is less than the `MinimumEventDuration` property value.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleEventSettings`1.ScheduleField">
            <summary>
            Gets or sets the default event fields that will be bound to the Schedule.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleEventSettings`1.IgnoreWhitespace">
            <summary>
            Gets or sets whether the bottom white space of the Events element should be ignored or included.
            </summary>
            <value>
            `true` to ignore the bottom white space. The default value `false` is set. 
            </value>
            <remarks>
            This property is applicable only when <see cref="P:Syncfusion.Blazor.Schedule.SfSchedule`1.EnableAutoRowHeight"/> is enabled.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleEventSettings`1.SortBy">
            <summary>
            Gets or sets the field by which the scheduler events should be sorted.
            </summary>
            <value>
            A string value representing the event field to sort by.
            </value>
            <remarks>
            The property value should correspond to a field in the Scheduler's events.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleEventSettings`1.Query">
            <summary>
            Gets or sets an external [`Query`](https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Data.Query.html) to be executed during data processing.
            </summary>
            <value>
            Accepts <see cref="T:Syncfusion.Blazor.Data.Query"/> value.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleEventSettings`1.ResourceColorField">
            <summary>
            Gets or sets the name of the resource to apply the color of that resource level to appointments when grouping is enabled.
            </summary>
            <value>
            A string value representing the name of the resource.
            </value>
            <remarks>
            When grouping is enabled on the Scheduler, this property allows you to specify which resource's color should be applied to appointments.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleEventSettings`1.Template">
            <summary>
            Gets or sets template as a <see cref="T:Microsoft.AspNetCore.Components.RenderFragment"/> that defines custom appearance for displaying scheduler events.
            </summary>
            <value>
            A template content that specifies the visualization of a scheduler event. The default value is <c>null</c>.
            </value>
            <example>
            <code><![CDATA[
            <SfSchedule TValue="AppointmentData">
                <ScheduleEventSettings TValue="AppointmentData" DataSource="@DataSource">
                    <Template>
                        <div>Subject: @((context as AppointmentData).Subject)</div>
                        <div>StartTime: @((context as AppointmentData).StartTime)</div>
                        <div>EndTime:  @((context as AppointmentData).EndTime)</div>
                    </Template>
                </ScheduleEventSettings>
            </SfSchedule>
            @code{
                List<AppointmentData> DataSource = new List<AppointmentData>
                {
                    new AppointmentData { Id = 1, Subject = "Meeting", StartTime = DateTime.Today.Date.AddHours(9).AddMinutes(30), EndTime = DateTime.Today.Date.AddHours(11) }
                };
                public class AppointmentData
                {
                    public int Id { get; set; }
                    public string Subject { get; set; }
                    public string Location { get; set; }
                    public DateTime StartTime { get; set; }
                    public DateTime EndTime { get; set; }
                }
            }
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleEventSettings`1.TooltipTemplate">
            <summary>
            Gets or sets template as a <see cref="T:Microsoft.AspNetCore.Components.RenderFragment"/> that defines custom appearance for displaying event tooltip.
            </summary>
            <value>
            A template content that specifies the visualization of event tooltip. The default value is <c>null</c>.
            </value>
            <example>
            <code><![CDATA[
            <SfSchedule TValue="AppointmentData">
                <ScheduleEventSettings TValue="AppointmentData" DataSource="@DataSource">
                    <TooltipTemplate>
                        <div class="tooltip-wrap">
                            <div>@((context as AppointmentData).Subject)</div>
                            <div>From&nbsp;:&nbsp;@((context as AppointmentData).StartTime)</div>
                            <div>To&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;@((context as AppointmentData).EndTime) </div>
                        </div>
                    </TooltipTemplate>
                </ScheduleEventSettings>
            </SfSchedule>
            @code{
                List<AppointmentData> DataSource = new List<AppointmentData>
                {
                    new AppointmentData { Id = 1, Subject = "Meeting", StartTime = DateTime.Today.Date.AddHours(9).AddMinutes(30), EndTime = DateTime.Today.Date.AddHours(11) }
                };
                public class AppointmentData
                {
                    public int Id { get; set; }
                    public string Subject { get; set; }
                    public string Location { get; set; }
                    public DateTime StartTime { get; set; }
                    public DateTime EndTime { get; set; }
                }
            }
            ]]></code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.ScheduleEventSettings`1.UpdateFieldsProperties(Syncfusion.Blazor.Schedule.ScheduleField)">
            <summary>
            It will update the event fields.
            </summary>
            <param name="fields">Accepts event fields.</param>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Schedule.ScheduleField">
            <summary>
            A class that represents the collection of event fields that requires to be mapped with the dataSource fields within the <see cref="T:Syncfusion.Blazor.Schedule.ScheduleEventSettings`1"/> tag directive.
            </summary>
            <example>
            <code><![CDATA[
            <SfSchedule TValue="AppointmentData">
                <ScheduleEventSettings TValue="AppointmentData" DataSource="@DataSource">
                    <ScheduleField Id="TravelId" IsBlock="Disabled" IsReadonly="ReadOnly"></ScheduleField>
                </ScheduleEventSettings>
            </SfSchedule>
            @code{
                List<AppointmentData> DataSource = new List<AppointmentData>
                {
                    new AppointmentData { TravelId = 1, Subject = "Meeting", StartTime = DateTime.Today.Date.AddHours(9).AddMinutes(30), EndTime = DateTime.Today.Date.AddHours(11), ReadOnly = true, Disabled = false }
                };
                public class AppointmentData
                {
                    public int TravelId { get; set; }
                    public string Subject { get; set; }
                    public string Location { get; set; }
                    public DateTime StartTime { get; set; }
                    public DateTime EndTime { get; set; }
                    public bool ReadOnly { get; set; }
                    public bool Disabled { get; set; }
                }
            }
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleField.ChildContent">
            <summary>
            Gets or sets the child content for the event settings field.
            </summary>
            <value>
            The value used to build the content.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleField.FollowingID">
            <summary>
            Gets or sets the <c>FollowingID</c> field mapped from dataSource. It holds the <see cref="P:Syncfusion.Blazor.Schedule.ScheduleField.Id"/> value of main parent event.
            </summary>
            <value>
            Accepts a string value. The default value is <c>null</c>.
            </value>
            <example>
            In the below code example, `FollowId` is mapped for <c>FollowingID</c> event field property.
            <code><![CDATA[
            <SfSchedule TValue="AppointmentData">
                <ScheduleEventSettings TValue="AppointmentData">
                    <ScheduleField FollowingID="FollowId">
                    </ScheduleField>
                </ScheduleEventSettings>
            </SfSchedule>
            @code{
                public class AppointmentData
                {
                    public int Id { get; set; }
                    public string Subject { get; set; }
                    public string Location { get; set; }
                    public DateTime StartTime { get; set; }
                    public DateTime EndTime { get; set; }
                    public int FollowId { get; set; }
                }
            }
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleField.Id">
            <summary>
            Gets or sets the <c>Id</c> field mapped from dataSource used to set unique id for events.
            </summary>
            <value>
            Accepts a string value. The default value is <c>null</c>.
            </value>
            <remarks>
            This field is mandatory when dataSource is bound to scheduler. 
            </remarks>
            <example>
            In the below code example, `TravelId` is mapped for <c>Id</c> event field property.
            <code><![CDATA[
            <SfSchedule TValue="AppointmentData">
                <ScheduleEventSettings TValue="AppointmentData">
                    <ScheduleField Id="TravelId">
                    </ScheduleField>
                </ScheduleEventSettings>
            </SfSchedule>
            @code{
                public class AppointmentData
                {
                    public int TravelId { get; set; }
                    public string Subject { get; set; }
                    public string Location { get; set; }
                    public DateTime StartTime { get; set; }
                    public DateTime EndTime { get; set; }
                }
            }
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleField.IsBlock">
            <summary>
            Gets or sets the <c>IsBlock</c> field mapped from dataSource used to block specific time.
            </summary>
            <value>
            Accepts a string value. The default value is <c>null</c>.
            </value>
            <example>
            In the below code example, `Disabled` is mapped for <c>IsBlock</c> event field property.
            <code><![CDATA[
            <SfSchedule TValue="AppointmentData">
                <ScheduleEventSettings TValue="AppointmentData">
                    <ScheduleField IsBlock="Disabled">
                    </ScheduleField>
                </ScheduleEventSettings>
            </SfSchedule>
            @code{
                public class AppointmentData
                {
                    public int Id { get; set; }
                    public string Subject { get; set; }
                    public string Location { get; set; }
                    public DateTime StartTime { get; set; }
                    public DateTime EndTime { get; set; }
                    public bool Disabled { get; set; }
                }
            }
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleField.IsReadonly">
            <summary>
            Gets or sets the <c>IsReadonly</c> field mapped from dataSource used to prevent the CRUD actions on specific events.
            </summary>
            <value>
            Accepts a string value. The default value is <c>null</c>.
            </value>
            <example>
            In the below code example, `ReadOnly` is mapped for <c>IsReadonly</c> event field property.
            <code><![CDATA[
            <SfSchedule TValue="AppointmentData">
                <ScheduleEventSettings TValue="AppointmentData">
                    <ScheduleField IsReadonly="ReadOnly">
                    </ScheduleField>
                </ScheduleEventSettings>
            </SfSchedule>
            @code{
                public class AppointmentData
                {
                    public int Id { get; set; }
                    public string Subject { get; set; }
                    public string Location { get; set; }
                    public DateTime StartTime { get; set; }
                    public DateTime EndTime { get; set; }
                    public bool ReadOnly { get; set; }
                }
            }
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleField.CssClass">
            <summary>
            Gets or sets the <c>CssClass</c> field mapped from dataSource used to customize the event styles.
            </summary>
            <value>
            Accepts a string value. The default value is <c>null</c>.
            </value>
            <example>
            In the below code example, `CustomClass` is mapped for <c>CssClass</c> event field property.
            <code><![CDATA[
            <SfSchedule TValue="AppointmentData">
                <ScheduleEventSettings TValue="AppointmentData">
                    <ScheduleField CssClass="CustomClass">
                    </ScheduleField>
                </ScheduleEventSettings>
            </SfSchedule>
            @code{
                public class AppointmentData
                {
                    public int Id { get; set; }
                    public string Subject { get; set; }
                    public string Location { get; set; }
                    public DateTime StartTime { get; set; }
                    public DateTime EndTime { get; set; }
                    public string CustomClass { get; set; }
                }
            }
            ]]></code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.ScheduleField.Dispose(System.Boolean)">
            <summary>
            Dispose unmanaged resources in the Syncfusion Blazor component.
            </summary>
            <param name="disposing">Boolean value to dispose the object.</param>
        </member>
        <member name="T:Syncfusion.Blazor.Schedule.ISchedule">
            <summary>
            An interface that represents the properties of a scheduler.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ISchedule.AgendaDaysCount">
            <summary>
            Gets or sets the number of days to be displayed in Agenda View by default. When using virtual scrolling, this value determines the number of days that will be fetched on each scroll-end. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ISchedule.AllowDragAndDrop">
            <summary> 
            Gets or sets whether the scheduler appointments can be dragged and dropped over work cells.
            </summary> 
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ISchedule.AllowInline">
            <summary>
            Gets or sets the ability to create and edit appointments in-line in the scheduler.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ISchedule.AllowKeyboardInteraction">
            <summary>
            Gets or sets the ability to use keyboard input in the scheduler.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ISchedule.AllowMultiCellSelection">
            <summary>
            Gets or sets the ability to select multiple cells in the scheduler.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ISchedule.AllowMultiRowSelection">
            <summary>
            Gets or sets the ability to select multiple days (rows) in the scheduler.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ISchedule.AllowResizing">
            <summary>
            Gets or sets the ability to resize appointments in the scheduler.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ISchedule.CssClass">
            <summary>
            Gets or sets the custom classes to customize the schedule component.  
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ISchedule.CurrentView">
            <summary>
            Gets or sets the current view on the scheduler. The specified view will be initially loaded.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ISchedule.DateFormat">
            <summary>
            Gets or sets the date format that should be applied on header date range label and also in editor window.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ISchedule.EnablePersistence">
            <summary>
            Gets or sets whether to persist component's state between page reloads. When set to <c>true</c>, the <see cref="P:Syncfusion.Blazor.Schedule.ISchedule.CurrentView" /> and <see cref="P:Syncfusion.Blazor.Schedule.ISchedule.SelectedDate"/> property is persisted.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ISchedule.EnableRecurrenceValidation">
            <summary>
            Gets or sets the ability to perform recurrence validation.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ISchedule.EnableRtl">
            <summary>
            Gets or sets whether the right to left direction is enabled for schedule component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ISchedule.EndHour">
            <summary>
            Gets or sets the time string in short skeleton format `HH:mm`, which represents the end of the schedule hour.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ISchedule.EventDragArea">
            <summary>
            Gets or sets the ability to enable external drag and drop support for appointments on the scheduler.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ISchedule.EventSettings">
            <summary>
            Gets or sets the event settings for configuring the scheduler events.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ISchedule.FirstDayOfWeek">
            <summary>
            Gets or sets the first day of the week.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ISchedule.ScheduleGroup">
            <summary>
            Allows defining the group related settings of multiple resources. When this property is non-empty, it means
            that the resources will be grouped on the schedule layout based on the provided resource names.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ISchedule.HeaderRows">
            <summary>
            Allows defining the collection of custom header rows to display the year, month, week, date and hour label as an individual row
            on the timeline view of the scheduler.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ISchedule.Height">
            <summary> 
            Gets or sets the height of the schedule element in pixels/number/percentage.
            </summary> 
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ISchedule.HideEmptyAgendaDays">
            <summary>
            Gets or sets the ability to hide empty dates from the Agenda View of the scheduler.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ISchedule.MaxDate">
            <summary>
            Gets or sets the maximum date that can be displayed on the scheduler.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ISchedule.MinDate">
            <summary>
            Gets or sets the minimum date that can be displayed on the scheduler.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ISchedule.QuickInfoOnSelectionEnd">
            <summary>
            Gets or sets the ability to show a quick popup after multiple cell selection via mouse interaction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ISchedule.QuickInfoTemplates">
            <summary>
            The template option to customize the quick window. The three sections of the quick popup whereas the header, content,
            and footer can be easily customized with individual template option.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ISchedule.Readonly">
            <summary>
            Gets or sets the ability to enable read-only mode on the scheduler.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ISchedule.ScheduleResources">
            <summary>
            Allows defining the collection of resources to be displayed on the Schedule. The resource collection needs to be defined
            with unique resource names to identify it along with the respective dataSource and field mapping options.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ISchedule.EnableAutoRowHeight">
            <summary>
            Gets or sets the ability to adjust the height of work cells based on the number of appointments in the time range.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ISchedule.SelectedDate">
            <summary>
            Gets or sets the currently selected date on the scheduler, based on which layout will be rendered.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ISchedule.ShowHeaderBar">
            <summary>
            Gets or sets the ability to hide the header bar on the scheduler.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ISchedule.ShowQuickInfo">
            <summary>
            Gets or sets the ability to display a quick popup with cell or event details on single click.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ISchedule.ShowTimeIndicator">
            <summary>
            Gets or sets the ability to hide the current time indicator on the scheduler.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ISchedule.ShowWeekNumber">
            <summary>
            Gets or sets the ability to display the week number of the current view date range on the scheduler.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ISchedule.ShowWeekend">
            <summary>
            Gets or sets whether non-working days are hidden from the scheduler.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ISchedule.StartHour">
            <summary>
            Gets or sets the time string in short skeleton format `HH:mm`, which represents the start of the schedule hour.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ISchedule.TimeScale">
            <summary>
            Allows to set different time duration on Schedule along with the customized grid count. It also has template option to
            customize the time slots with required time values in its own format.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ISchedule.Timezone">
            <summary>
            Gets or sets the timezone to be applied on the scheduler.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ISchedule.Width">
            <summary>
            Gets or sets the width of the schedule element in pixels/number/percentage.
            </summary> 
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ISchedule.WorkDays">
            <summary>
            Gets or sets the working days on the schedule.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ISchedule.WorkHours">
            <summary>
            The working hours should be highlighted on Schedule with different color shade and an additional option must be provided to
            highlight it or not.This functionality is handled through `workHours` property and the start work hour should be 9 AM by default
            and end work hour should point to 6 PM.The start and end working hours needs to be provided as Time value of short skeleton type.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ISchedule.ResourceCollection">
            <summary>
            It contains the collection of resources to be displayed on the Schedule.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ISchedule.ScheduleTemplates">
            <summary>
            Template option to customize the scheduler.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ISchedule.ResourceRowRef">
            <summary>
            Gets or sets the resource row reference for displaying the resources in editor window.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.ISchedule.UpdateChildProperties(System.String,System.Object)">
            <summary>
            It will update the child properties.
            </summary>
            <param name="key">Key string to get the property value.</param>
            <param name="propertyValue">value object to get the property value.</param>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.ISchedule.PropertyChanged">
            <summary>
            Called internally, if any of the property value changed.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.ISchedule.CallStateHasChanged">
            <summary>
            Notifies the component that its state has changed.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ISchedule.ActiveViewOptions">
            <summary>
            It contains the active view's data 
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.ISchedule.SetActiveView(Syncfusion.Blazor.Schedule.ScheduleView)">
            <summary>
            Called internally, if Schedule view got updated
            </summary>
            <param name="scheduleView">value object to get the view's data.</param>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.ISchedule.SetViewIndex">
            <summary>
            Called internally, if the current view has changed.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ISchedule.ViewIndex">
            <summary>
            It contains the currently selected view's index.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.ISchedule.AddResourceCollection(Syncfusion.Blazor.Schedule.IScheduleResources)">
            <summary>
            Called internally to update the resource collections
            </summary>
            <param name="resource">mapping field for the resource data.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ISchedule.IsRefreshEvents">
            <summary>
            When set to `True`, it allows to update the event fields and resource collection.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ISchedule.IsPreventSave">
            <summary>
            Used internally to prevent the save action on enter key press when set to `True`
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ISchedule.ScheduleViews">
            <summary>
            This property holds the views collection and its configurations. It accepts either the array of view names or the array of view
            objects that holds different configurations for each views.By default,
            Schedule displays all the views namely `Day`, `Week`, `Work Week`, `Month` and `Agenda`.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.ISchedule.GetCurrentViewDates">
            <summary>
            Retrieves the dates that lies on active view of Scheduler.
            </summary>
            <returns>List of dates.</returns>.
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.ISchedule.GetResourceCollections">
            <summary>
            Retrieves the resource collection available in the scheduler.
            </summary>
            <returns>The resource collections available in the scheduler.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.ISchedule.GetCurrentAction">
            <summary>
            Retrieves the current action of the scheduler.
            </summary>
            <returns>The current action of the scheduler.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Schedule.IScheduleEventSettings">
            <summary>
            An interface that represents the event setting properties of a scheduler.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.IScheduleEventSettings.AllowAdding">
            <summary>
            Gets or sets whether the new events added to the scheduler.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.IScheduleEventSettings.AllowDeleting">
            <summary>
            Gets or sets whether events can be deleted in the Scheduler.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.IScheduleEventSettings.AllowEditing">
            <summary>
            Gets or sets whether events can be edited in the Scheduler.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.IScheduleEventSettings.AllowEditFollowingEvents">
            <summary>
            Gets or sets whether only future events in a series can be edited.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.IScheduleEventSettings.EnableIndicator">
            <summary>
            Gets or sets whether events can occupy the full height of the cell, excluding the header and more indicator.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.IScheduleEventSettings.EnableMaxHeight">
            <summary>
            Gets or sets whether events can occupy the full height of the cell, excluding the header.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.IScheduleEventSettings.EnableTooltip">
            <summary>
            Gets or sets whether a tooltip is displayed for events, showing the subject, location, start and end time.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.IScheduleEventSettings.IncludeFiltersInQuery">
            <summary>
            Gets or sets a value that determines whether the start date and end date filter conditions should be included in the query itself when requesting data from the server, or passed as query parameters in the API call.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.IScheduleEventSettings.SpannedEventPlacement">
            <summary>
            Get or sets how spanned events (events with a duration of more than 24 hours) are rendered in the Scheduler.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.IScheduleEventSettings.MinimumEventDuration">
            <summary>
            Gets or sets the minimum duration for an event, where events with a shorter duration will be rendered for this minimum duration.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.IScheduleEventSettings.DataManager">
            <summary>
            DataManager is used to manage and manipulate relational data.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.IScheduleEventSettings.ScheduleField">
            <summary>
            Gets or sets the default event fields that will be bound to the Schedule.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.IScheduleEventSettings.IgnoreWhitespace">
            <summary>
            Gets or sets whether the bottom white space of the Events element should be ignored or included.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.IScheduleEventSettings.SortBy">
            <summary>
            Gets or sets the field by which the scheduler events should be sorted.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.IScheduleEventSettings.Query">
            <summary>
            Gets or sets an external [`Query`](https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Data.Query.html) to be executed during data processing.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.IScheduleEventSettings.ResourceColorField">
            <summary>
            Gets or sets the name of the resource to apply the color of that resource level to appointments when grouping is enabled.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.IScheduleEventSettings.Template">
            <summary>
             Gets or sets template as a <see cref="T:Microsoft.AspNetCore.Components.RenderFragment"/> that defines custom appearance for displaying scheduler events.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.IScheduleEventSettings.TooltipTemplate">
            <summary>
            Gets or sets template as a <see cref="T:Microsoft.AspNetCore.Components.RenderFragment"/> that defines custom appearance for displaying event tooltip.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.IScheduleEventSettings.UpdateFieldsProperties(Syncfusion.Blazor.Schedule.ScheduleField)">
            <summary>
            It will update the event fields.
            </summary>
            <param name="fields">Accepts event fields.</param>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Schedule.IScheduleResources">
            <summary>
            An interface that represents the resource properties of a scheduler.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.IScheduleResources.AllowMultiple">
            <summary>
            When set to true, allows multiple selection of resource names, thus creating multiple instances of same appointment for the
            selected resources.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.IScheduleResources.ColorField">
            <summary>
            It maps the `Color` field from the dataSource, which is used to specify colors for the resources.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.IScheduleResources.CssClassField">
            <summary>
            It maps the `CssClass` field from the dataSource, which is used to specify different styles to each resource appointments.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.IScheduleResources.EndHourField">
            <summary>
            It maps the `EndHour` field from the dataSource, which is used to specify different work end hour for each resources.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.IScheduleResources.ExpandedField">
            <summary>
            It maps the `Expanded` field from the dataSource, which is used to specify whether each resource levels
            in timeline view needs to be maintained in an expanded or collapsed state by default.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.IScheduleResources.Field">
            <summary>
            A value that binds to the resource field of event object.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.IScheduleResources.GroupIDField">
            <summary>
            It maps the `GroupID` field from the dataSource, which is used to specify under which parent resource,
            the child should be grouped.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.IScheduleResources.IdField">
            <summary>
             It maps the `Id` field from the dataSource and is used to uniquely identify the resources.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.IScheduleResources.Name">
            <summary>
            It represents a unique resource name for differentiating various resource objects while grouping.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.IScheduleResources.Query">
            <summary>
            Defines the external [`Query`](https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Data.Query.html)
            that will be executed along with the data processing.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.IScheduleResources.StartHourField">
            <summary>
            It maps the `StartHour` field from the dataSource, which is used to specify different work start hour for each resources.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.IScheduleResources.TextField">
            <summary>
            It maps the `Text` field from the dataSource, which is used to specify the resource names.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.IScheduleResources.Title">
            <summary>
            It holds the Title of the resource field to be displayed on the schedule event editor window.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.IScheduleResources.WorkDaysField">
            <summary>
            It maps the working days field from the dataSource, which is used to specify different working days for each resources.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.IScheduleResources.ResourceIndex">
            <summary>
            It maps the resource index.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.IScheduleResources.ResourceDetails">
            <summary>
            It maps the resource details.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.IScheduleResources.IsRefresh">
            <summary>
            Enables/Disables Schedule UI refresh.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.IScheduleResources.GetData">
            <summary>
            Gets the resource data.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Schedule.Internal.CrudModule`1">
            <summary>
            Crud module.
            </summary>
            <typeparam name="T">TValue of schedule component.</typeparam>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.Internal.CrudModule`1.#ctor(Syncfusion.Blazor.Schedule.SfSchedule{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Schedule.Internal.CrudModule`1"/> class.
            Crud module Constructor.
            </summary>
            <param name="parent">Parent name.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.Internal.CrudModule`1.AddEvent(`0)">
            <summary>
            Adds the newly created event into the Schedule dataSource.
            </summary>
            <param name="data">Event object to be added into Schedule.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.Internal.CrudModule`1.AddEvents(System.Collections.Generic.List{`0})">
            <summary>
            Adds the newly created event into the Schedule dataSource.
            </summary>
            <param name="eventsData">Collection of event objects to be added into Schedule.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.Internal.CrudModule`1.SaveEvent(`0,System.Nullable{Syncfusion.Blazor.Schedule.CurrentAction})">
            <summary>
            Updates the changes made in the event object by passing it as an parameter into the dataSource.
            </summary>
            <param name="data">Single or collection of event objects to be saved into Schedule.</param>
            <param name="action">Denotes the action that takes place either for editing occurrence or series.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.Internal.CrudModule`1.SaveEvents(System.Collections.Generic.List{`0},System.Nullable{Syncfusion.Blazor.Schedule.CurrentAction})">
            <summary>
            Updates the changes made in the event object by passing it as an parameter into the dataSource.
            </summary>
            <param name="eventsData">Single or collection of event objects to be saved into Schedule.</param>
            <param name="action">Denotes the action that takes place either for editing occurrence or series.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.Internal.CrudModule`1.DeleteEvent(System.Object,System.Nullable{Syncfusion.Blazor.Schedule.CurrentAction})">
            <summary>
            Deletes the events based on the provided ID or event collection in the argument list.
            </summary>
            <param name="id">Accepts the ID as string or number type or single or collection of the event object which needs to be removed from the Schedule.</param>
            <param name="action">Denotes the delete action that takes place either on occurrence or series events.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.Internal.CrudModule`1.DeleteEvents(System.Collections.Generic.List{`0},System.Nullable{Syncfusion.Blazor.Schedule.CurrentAction})">
            <summary>
            Deletes the events based on the provided ID or event collection in the argument list.
            </summary>
            <param name="deleteEvents">Accepts the event data to be removed from the Schedule.</param>
            <param name="action">Denotes the delete action that takes place either on occurrence or series events.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.Internal.CrudModule`1.GetParentEvent(`0,System.Boolean)">
            <summary>
            Get parent events.
            </summary>
            <param name="eventData">Accepts the event data of child event.</param>
            <param name="isParent">IsParent.</param>
            <returns>Task.</returns>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.Internal.AppointmentData`1.ClassNames">
            <summary>
            Gets or sets the class names for appointment.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.Internal.AppointmentData`1.Color">
            <summary>
            Gets or sets the resource color for appointment.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.Internal.AppointmentData`1.Label">
            <summary>
            Gets or sets the aria-label atribute for appointment.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.Internal.AppointmentData`1.ActualStartTime">
            <summary>
            Gets the internal start time which is converted based on start time zone applied.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.Internal.AppointmentData`1.ActualEndTime">
            <summary>
            Gets the internal end time which is converted based on end time zone applied.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.Internal.AppointmentData`1.ResourceIds">
            <summary>
            Gets or sets the resource ids property for schedule appointment to allocate the corresponding resource to the appointment.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Schedule.Internal.Recurrence">
            <summary>
            Recurrence rule parser module.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.Internal.Recurrence.GetRecurrenceDates(System.String,System.String,System.Int32,System.DateTime,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
            To get the recurrence dates
            </summary>
            <param name="recurrenceRule">Recurrence rule.</param>
            <param name="excludedDates">Dates exclude from collection</param>
            <param name="firstDayOfWeek">First day of week</param>
            <param name="recurrenceStartDate">Recurrence start date.</param>
            <param name="recurrenceEndDate">Recurrence end date.</param>
            <param name="dateRangeStart">Start date to collect the recurrence dates from the specified date range.</param>
            <param name="dateRangeEnd">End date to collect the recurrence dates from the specified date range.</param>
            <param name="maximumCount">Length of the recurrence DateTime collection.</param>
            <example>
            <code><![CDATA[
            List<DateTime> dateList = new List<DateTime>();
            void GetDates()
            {
                dateList = new Recurrence().GetRecurrenceDates("FREQ=WEEKLY;BYDAY=TU;INTERVAL=1;", "20221220T090000Z", 0, new DateTime(2022, 11, 9), new DateTime(2023, 1, 31), new DateTime(2022, 11, 9), new DateTime(2023, 1, 31), 9).ToList();  
            }
            ]]></code>
            </example>
            <returns>Recurrence DateTime collection.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.Internal.Recurrence.GetRuleSummary(System.String,Syncfusion.Blazor.ISyncfusionStringLocalizer)">
            <summary>
            To get the rule summary
            </summary>
            <param name="recurrenceRule">Recurrence rule.</param>
            <param name="localizer">Syncfusion Localizer.</param>
            <example>
            <code><![CDATA[
            @inject ISyncfusionStringLocalizer Localizer
            string ruleSummary;
            void RuleSummary()
            {
                ruleSummary = new Recurrence().GetRuleSummary("FREQ=WEEKLY;BYDAY=TU;INTERVAL=1;", Localizer);
            }
            ]]></code>
            </example>
            <returns>Recurrence rule summary</returns>
            <exception cref="T:System.ArgumentNullException">Recurrence rule or localizer is null</exception>
        </member>
        <member name="T:Syncfusion.Blazor.Schedule.Internal.RecurrenceDateGenerator">
            <summary>
            RecurrenceDateGenerator module.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.Internal.RecurrenceDateGenerator.GetRecurrenceDateTimeCollection(System.String,System.DateTime,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.DateTime})">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Schedule.Internal.RecurrenceHelper">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.Internal.RecurrenceHelper.GetRuleSummary(System.String,Syncfusion.Blazor.ISyncfusionStringLocalizer)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.Internal.RecurrenceHelper.GetWeekDay(System.String)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.Internal.RecurrenceHelper.SetWeeklyRecurrenceDate(System.DateTime,System.String[],System.Int32,System.Collections.ObjectModel.ObservableCollection{System.DateTime})">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.Internal.RecurrenceHelper.IsRecurrenceDate(System.DateTime,System.String[],System.Int32)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.Internal.RecurrenceHelper.FindWeeklyRule(System.String[]@,System.String@,System.Int32@,System.String[],System.DayOfWeek)">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Schedule.DateRangeTemplateContext">
            <summary> 
            Provides the information about the date range text template in the Scheduler.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.DateRangeTemplateContext.StartDate">
            <summary> 
            Gets the start date of the current view. 
            </summary> 
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.DateRangeTemplateContext.EndDate">
            <summary> 
            Gets the end date of the current view. 
            </summary> 
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.DateRangeTemplateContext.CurrentView">
            <summary> 
            Gets the current view of the Scheduler. 
            </summary> 
        </member>
        <member name="T:Syncfusion.Blazor.Schedule.RecurrenceEditorChangeEventArgs">
            <summary>
            Provides the information about the changing the rule in the recurrence editor.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.RecurrenceEditorChangeEventArgs.Value">
            <summary>
            Gets the current recurrence rule from the editor.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Schedule.ActionEventArgs`1">
            <summary>
            Provides information about the CRUD and Navigation actions of scheduler.
            </summary>
            <typeparam name="T">The type of the values of schedule events.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ActionEventArgs`1.AddedRecords">
            <summary>
            Gets or sets the added data based on the specified action.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ActionEventArgs`1.Cancel">
            <summary>
            Gets or sets whether the specified action of Scheduler should be canceled or not.
            </summary>
            <value>
            <c>true</c>, if the scheduler action is canceled. Otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ActionEventArgs`1.ChangedRecords">
            <summary>
            Gets or sets the changed data based on the specified action.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ActionEventArgs`1.DeletedRecords">
            <summary>
            Gets or sets the deleted data based on the specified action.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ActionEventArgs`1.GroupIndex">
            <summary>
            Gets the group index of the specified action which helps to get the resource information using <see cref="M:Syncfusion.Blazor.Schedule.SfSchedule`1.GetResourceByIndex(System.Int32)" /> method.
            </summary>
            <value>
            Accepts an integer value.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ActionEventArgs`1.Error">
            <summary>
            Gets the details of an action failure.
            </summary>
            <value>
            An exception representing the details of the action failure.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ActionEventArgs`1.ActionType">
            <summary>
            Gets the type of current action.
            </summary>
            <value>
            One of the <see cref="T:Syncfusion.Blazor.Schedule.ActionType"/> enumeration.
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Schedule.CellClickEventArgs">
            <summary>
            Provides the information about the cell click action in the Scheduler.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.CellClickEventArgs.Cancel">
            <summary>
            Gets or sets whether the cell click action of Scheduler should be canceled or not.
            </summary>
            <value>
            <c>true</c>, if the cell click action is canceled. Otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.CellClickEventArgs.EndTime">
            <summary>
            Gets the end time of the cell.
            </summary>
            <value>
            A DateTime object representing the end time of the cell.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.CellClickEventArgs.MouseEventArgs">
            <summary>
            Gets the mouse event informations.
            </summary>
            <value>
            A <see cref="P:Syncfusion.Blazor.Schedule.CellClickEventArgs.MouseEventArgs"/> object representing the mouse event information.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.CellClickEventArgs.GroupIndex">
            <summary>
            Gets the group index of the cell which helps to get the resource information associated with the cell using <see cref="M:Syncfusion.Blazor.Schedule.SfSchedule`1.GetResourceByIndex(System.Int32)" /> method.
            </summary>
            <value>
            Accepts an integer value.
            </value>
            <remarks>
            The <see cref="M:Syncfusion.Blazor.Schedule.SfSchedule`1.GetResourceByIndex(System.Int32)" /> method returns the resource information associated with the cell.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.CellClickEventArgs.IsAllDay">
            <summary>
            Gets whether the clicked cell is all-day or not.
            </summary>
            <value>
            <c>true</c>, if the clicked cell is an all-day cell. Otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.CellClickEventArgs.StartTime">
            <summary>
            Gets the start time of the cell.
            </summary>
            <value>
            A DateTime object representing the start time of the cell.
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Schedule.ElementInfo`1">
            <summary>
            Provides the information about the target element. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ElementInfo`1.ElementType">
            <summary>
            Gets the element type of the target.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ElementInfo`1.EndTime">
            <summary>
            Gets the end time of the work/time cells.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ElementInfo`1.EventData">
            <summary>
            Gets the event details of the target event.
            If the target is not a event element, it should be null.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ElementInfo`1.IsAllDay">
            <summary>
            Returns true or false, based on whether the clicked cell is all-day or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ElementInfo`1.ResourceData">
            <summary>
            Gets the resource details when the target element is either work cells or resource cell.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ElementInfo`1.StartTime">
            <summary>
            Gets the start time of the work/time cells.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Schedule.ElementInfoArgs">
            <summary>
            Provides the information about the target element from the client end. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ElementInfoArgs.RowIndex">
            <summary>
            Gets the row index of the of the work/time cells.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ElementInfoArgs.ColumnIndex">
            <summary>
            Gets the column index of the of the work/time cells.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ElementInfoArgs.GroupIndex">
            <summary>
            Returns the group index of the cell.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ElementInfoArgs.StartTime">
            <summary>
            Gets the start time of the work/time cells.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ElementInfoArgs.EndTime">
            <summary>
            Gets the end time of the work/time cells.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ElementInfoArgs.IsAllDay">
            <summary>
            Gets true or false, based on whether the clicked cell is all-day or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ElementInfoArgs.EventGuid">
            <summary>
            Gets the guid of the target event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ElementInfoArgs.ElementType">
            <summary>
            Gets the type of the target element.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Schedule.DataBindingEventArgs`1">
            <summary>
            Provides the information about events before it binds to the scheduler.
            </summary>
            <typeparam name="T">The type of the values of schedule events.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.DataBindingEventArgs`1.Result">
            <summary>
            Gets the result data which is bind to the scheduler.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Schedule.DataBoundEventArgs`1">
            <summary>
            Provides the information about events once they are bound to the scheduler.
            </summary>
            <typeparam name="T">The type of the values of schedule events.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.DataBoundEventArgs`1.Result">
            <summary>
            Gets the result data that is bound to the scheduler.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Schedule.DragEventArgs`1">
            <summary>
            Provides the information about the drag action on appointments.
            </summary>
            <typeparam name="T">The type of the values of schedule events.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.DragEventArgs`1.Cancel">
            <summary>
            Gets or sets whether the drag action should be canceled or not.
            </summary>
            <value>
            <c>true</c>, if the drag action is canceled. Otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.DragEventArgs`1.Data">
            <summary>
            Gets the data of the dragged event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.DragEventArgs`1.SelectedData">
            <summary>
            Gets the data of the multiple dragged events.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.DragEventArgs`1.EndTime">
            <summary>
            Gets the end time of the drag clone element.
            </summary>
            <value>
            A <see cref="T:System.DateTime"/> value representing the end time of the drag clone element.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.DragEventArgs`1.ExcludeSelectors">
            <summary>
            Gets or sets the selectors that can be used to cancel the drop action on a selector target.
            </summary>
            <value>
            Accepts the string value.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.DragEventArgs`1.GroupIndex">
            <summary>
            Gets the group index of the cloned element.
            </summary>
            <value>
            Accepts an integer value.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.DragEventArgs`1.Interval">
            <summary>
            Gets or sets the interval in minutes for dragging appointments.
            </summary>
            <value>
            Accepts an integer value.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.DragEventArgs`1.Navigation">
            <summary>
            Gets or sets the date range navigation action that occurs while dragging.
            </summary>
            <value>
            A <see cref="T:Syncfusion.Blazor.Schedule.NavigateOptions"/> value representing the date range navigation action that occurs while dragging.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.DragEventArgs`1.Scroll">
            <summary>
            Gets or sets the scroll-related actions that occur when dragging to the edges of the scheduler.
            </summary>
            <value>
            A <see cref="T:Syncfusion.Blazor.Schedule.ScrollOptions"/> value representing the scroll-related actions that occur when dragging to the edges.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.DragEventArgs`1.StartTime">
            <summary>
            Gets the start time of the drag clone element.
            </summary>
            <value>
            A <see cref="T:System.DateTime"/> value representing the start time of the drag clone element.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.DragEventArgs`1.Left">
            <summary>
            Gets the client X value of the target element.
            </summary>
            <value>
            Accepts the double value.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.DragEventArgs`1.Top">
            <summary>
            Gets the client Y value of the target element.
            </summary>
            <value>
            Accepts the double value.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.DragEventArgs`1.MouseEventArgs">
            <summary> 
            Gets the mouse event informations.
            </summary>
            <value>
            A <see cref="P:Syncfusion.Blazor.Schedule.DragEventArgs`1.MouseEventArgs"/> object representing the mouse event information associated with the event.
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Schedule.EventClickArgs`1">
            <summary>
            Provides the information about the event click actions.
            </summary>
            <typeparam name="T">Specifies the TValue of schedule events.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.EventClickArgs`1.Cancel">
            <summary>
            Gets or sets whether the event click action of scheduler should be canceled or not.
            </summary>
            <value>
            <c>true</c>, if the event click action is canceled. Otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.EventClickArgs`1.MouseEventArgs">
            <summary>
            Gets the mouse event informations.
            </summary>
            <value>
            A <see cref="P:Syncfusion.Blazor.Schedule.EventClickArgs`1.MouseEventArgs"/> object representing the mouse event information.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.EventClickArgs`1.Event">
            <summary>
            Gets the selected or clicked event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.EventClickArgs`1.EventCollection">
            <summary>
            Gets a collection of selected or clicked events.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.EventClickArgs`1.GroupIndex">
            <summary>
            Gets the group index of the event which helps to get the resource information associated with the cell using <see cref="M:Syncfusion.Blazor.Schedule.SfSchedule`1.GetResourceByIndex(System.Int32)" /> method.
            </summary>
            <remarks>
            The <see cref="M:Syncfusion.Blazor.Schedule.SfSchedule`1.GetResourceByIndex(System.Int32)" /> method returns the resource information associated with the cell.
            </remarks>
        </member>
        <member name="T:Syncfusion.Blazor.Schedule.EventRenderedArgs`1">
            <summary>
            Provides the information about the rendering of events in the Scheduler.
            </summary>
            <typeparam name="T">Specifies the TValue of schedule events.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.EventRenderedArgs`1.Cancel">
            <summary>
            Gets or sets whether the event rendering action should be canceled or not.
            </summary>
            <value>
            <c>true</c>, if the event rendering action is canceled. Otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.EventRenderedArgs`1.Data">
            <summary>
            Gets the event data that is currently being rendered.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.EventRenderedArgs`1.CssClasses">
            <summary>
            Gets or sets the custom classes to appointment element.
            </summary>
            <value>
            A list of strings representing the custom classes to be added to the appointment element.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.EventRenderedArgs`1.ElementReference">
            <summary>
            Gets the <see cref="T:Microsoft.AspNetCore.Components.ElementReference"/> of the current appointment element.
            This can be used to access the underlying DOM element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.EventRenderedArgs`1.GroupIndex">
            <summary>
            Gets the group index of the event that is currently being rendered.
            </summary>
            <value>
            Accepts an integer value.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.EventRenderedArgs`1.AppointmentType">
            <summary>
            Gets the current <see cref="T:Syncfusion.Blazor.Schedule.AppointmentType"/>, which can be either normal or block.
            </summary>
            <value>
            A <see cref="T:Syncfusion.Blazor.Schedule.AppointmentType"/> enumeration value indicating whether the current appointment type is normal or block.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.EventRenderedArgs`1.Attributes">
            <summary>
            Gets or sets the custom attributes of the appointment element.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Schedule.ExportOptions">
            <summary>
            A class that represents the export options of scheduler.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ExportOptions.CustomData">
            <summary>
            Gets or sets the custom data collection that can be exported by passing it through the <c>customData</c> option.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ExportOptions.ExportType">
            <summary>
            Gets or sets the export type, which allows you to specify the format of the exported Excel file.
            The supported file formats are .xlsx and .csv.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ExportOptions.Fields">
            <summary>
            Gets or sets the custom or specific field collection of the event dataSource to be exported.
            This can be provided through the <c>Fields</c> option, which allows you to choose which fields to include in the exported file.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ExportOptions.FieldsInfo">
            <summary>
            Gets or sets the collection of field names and their associated header text for exporting to Excel.
            </summary>
            <remarks>
            If this list is empty, the scheduler exports the fields based on the <c>Fields</c> option.
            If both <c>FieldsInfo</c> and <c>Fields</c> are empty, the scheduler will export all fields.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ExportOptions.FileName">
            <summary>
            Gets or sets the filename for the exported file.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ExportOptions.DateFormat">
            <summary>
            Gets or sets the date format for the appointment start and end dates in the exported file.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ExportOptions.IncludeOccurrences">
            <summary>
            Gets or sets whether individual instances of recurring events should be exported as separate entries in the Excel file.
            </summary>
            <remarks>
            Setting this option to 'true' will include the individual instances in the exported file, while setting it to 'false' will exclude them.
            </remarks>
        </member>
        <member name="T:Syncfusion.Blazor.Schedule.ExportFieldInfo">
            <summary>
            A class that holds the field name and its header text to export to excel.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ExportFieldInfo.Text">
            <summary>
            Gets or sets the header display text.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ExportFieldInfo.Name">
            <summary>
            Gets or sets the field name to export.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Schedule.MoreEventsClickArgs">
            <summary>
            Provides information about the actions on clicking the more event indicator.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.MoreEventsClickArgs.Cancel">
            <summary>
            Gets or sets whether the more event click action should be canceled or not.
            </summary>
            <value>
            <c>true</c>, if the more event click action is canceled. Otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.MoreEventsClickArgs.EndTime">
            <summary>
            Gets the end time of the cell.
            </summary>
            <value>
            A DateTime value that represents the end time of the cell.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.MoreEventsClickArgs.GroupIndex">
            <summary>
            Gets the group index of the cell which helps to get the resource information associated with the cell using <see cref="M:Syncfusion.Blazor.Schedule.SfSchedule`1.GetResourceByIndex(System.Int32)" /> method.
            </summary>
            <value>
            Accepts an integer value.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.MoreEventsClickArgs.IsPopupOpen">
            <summary>
            Gets or sets the whether to show/hide the more event popup.
            </summary>
            <value>
            <c>true</c>, if the more event popup is shown. Otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.MoreEventsClickArgs.StartTime">
            <summary>
            Gets the start time of the cell.
            </summary>
            <value>
            A DateTime value that represents the start time of the cell.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.MoreEventsClickArgs.ViewName">
            <summary>
            Gets or sets whether to navigate to a specific view when the <see cref="P:Syncfusion.Blazor.Schedule.MoreEventsClickArgs.IsPopupOpen"/> property is `false`.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Schedule.NavigateOptions">
            <summary>
            Provides information about the navigation while performing a drag action on appointments.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.NavigateOptions.Enable">
            <summary>
            Gets or sets a value indicating whether to enable or disable auto navigation on dates when performing a drag action on appointments.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.NavigateOptions.TimeDelay">
            <summary>
            Gets or sets the delay time when navigating between dates during a drag action on appointments.
            </summary>
            <remarks>
            The <c>TimeDelay</c> value should be provided in milliseconds.
            </remarks>
        </member>
        <member name="T:Syncfusion.Blazor.Schedule.NavigatingEventArgs">
            <summary>
            Provides the information about the date and view navigation actions in the scheduler.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.NavigatingEventArgs.Action">
            <summary>
            Gets the type of <see cref="T:System.String"/> that determines how navigation occurs, either as date navigation or view navigation.
            </summary>
            <value>
            Accepts the string value.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.NavigatingEventArgs.ActionType">
            <summary>
            Gets the type of <see cref="T:Syncfusion.Blazor.Schedule.ActionType"/> that determines how navigation occurs, either as date navigation or view navigation.
            </summary>
            <value>
            A value of the <see cref="T:Syncfusion.Blazor.Schedule.ActionType"/> enum that specifies how navigation occurs.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.NavigatingEventArgs.Cancel">
            <summary>
            Gets or sets whether the navigation action of Scheduler should be canceled or not. 
            </summary>
            <value>
            <c>true</c>, if the navigation action is canceled. Otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.NavigatingEventArgs.CurrentDate">
            <summary>
            Gets or sets the current date value after navigation has occurred.
            </summary>
            <value>
            A DateTime object representing the current date value after navigation.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.NavigatingEventArgs.CurrentView">
            <summary>
            Gets or sets the name of the active view after view navigation has occurred.
            </summary>
            <value>
            A value of the <see cref="T:Syncfusion.Blazor.Schedule.View"/> enum representing the name of the active view.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.NavigatingEventArgs.PreviousDate">
            <summary>
            Gets the date value before date navigation has occurred.
            </summary>
            <value>
            A DateTime object representing the previous date value before navigation.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.NavigatingEventArgs.PreviousView">
            <summary>
            Gets the name of the view before view navigation has occurred.
            </summary>
            <value>
            A value of the <see cref="T:Syncfusion.Blazor.Schedule.View" /> enum representing the name of view before navigation.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.NavigatingEventArgs.ViewIndex">
            <summary>
            Gets the index of the active view after view navigation has occurred.
            </summary>
            <value>
            Accepts an integer value.
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Schedule.PopupCloseEventArgs`1">
            <summary>
            Provides the information about the popup close action.
            </summary>
            <typeparam name="T">Specifies the type of schedule events.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.PopupCloseEventArgs`1.Cancel">
            <summary>
            Gets or sets whether the popup close action of Scheduler should be canceled or not.
            </summary>
            <value>
            <c>true</c>, if the popup close action is canceled. Otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.PopupCloseEventArgs`1.CurrentAction">
            <summary>
            Gets the current CRUD action that has been performed on the scheduler.
            </summary>
            <value>
            A <see cref="P:Syncfusion.Blazor.Schedule.PopupCloseEventArgs`1.CurrentAction"/> enum value representing the current CRUD action.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.PopupCloseEventArgs`1.Data">
            <summary>
            Gets the cell or event data that is currently being opened.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.PopupCloseEventArgs`1.Type">
            <summary>
            Gets the <see cref="T:Syncfusion.Blazor.Schedule.PopupType"/> that is currently being opened.
            </summary>
            <value>
            A <see cref="T:Syncfusion.Blazor.Schedule.PopupType"/> value representing the type of the currently opened popup.
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Schedule.PopupOpenEventArgs`1">
            <summary>
            Provides the information about the popup open action.
            </summary>
            <typeparam name="T">Specifies the type of schedule events.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.PopupOpenEventArgs`1.Cancel">
            <summary>
            Gets or sets whether the popup open action of Scheduler should be canceled or not.
            </summary>
            <value>
            <c>true</c>, if the popup open action is canceled. Otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.PopupOpenEventArgs`1.Data">
            <summary>
            Gets the cell or event data that is currently being opened.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.PopupOpenEventArgs`1.DataCollection">
            <summary>
            Gets the collection of events to be rendered in more event popup.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.PopupOpenEventArgs`1.Duration">
            <summary>
            Gets or sets the time duration to be used in the editor window, which determines how the start and end time are displayed.
            </summary>
            <value>
            Accepts an integer value.
            </value>
            <remarks>
            By default, this will be based on the value of the <see cref="P:Syncfusion.Blazor.Schedule.ScheduleTimeScale.Interval"/> property in the <see cref="T:Syncfusion.Blazor.Schedule.ScheduleTimeScale"/> tag directive.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.PopupOpenEventArgs`1.Type">
            <summary>
            Gets the <see cref="T:Syncfusion.Blazor.Schedule.PopupType"/> that is currently being opened.
            </summary>
            <value>
            A <see cref="T:Syncfusion.Blazor.Schedule.PopupType"/> value representing the type of the currently opened popup.
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Schedule.RenderCellEventArgs">
            <summary>
            Provides the information about the rendering of all cells (work, time, resource, header, and more).
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.RenderCellEventArgs.Date">
            <summary>
            Gets the date value of the cell that is currently being rendered on the user interface (UI).
            </summary>
            <value>
            A <see cref="T:System.DateTime"/> value representing the date of the cell currently being rendered on the UI.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.RenderCellEventArgs.CssClasses">
            <summary>
            Gets or sets the custom classes for the currently rendering element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.RenderCellEventArgs.ElementType">
            <summary>
            Gets the <see cref="T:Syncfusion.Blazor.Schedule.ElementType"/> that is currently being rendered on the UI.
            </summary>
            <value>
            An instance of <see cref="T:Syncfusion.Blazor.Schedule.ElementType"/> class representing the element that is currently being rendered on the UI.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.RenderCellEventArgs.GroupIndex">
            <summary>
            Gets the group index of the cell which helps to get the resource information associated with the cell using <see cref="M:Syncfusion.Blazor.Schedule.SfSchedule`1.GetResourceByIndex(System.Int32)" /> method.
            </summary>
            <value>
            Accepts an integer value.
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Schedule.ResizeEventArgs`1">
            <summary>
            Provides the information about the resize action on appointments.
            </summary>
            <typeparam name="T">The type of the value of schedule events.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ResizeEventArgs`1.Cancel">
            <summary>
            Gets or sets whether the resize action should be canceled or not.
            </summary>
            <value>
            <c>true</c>, if the resize action is canceled. Otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ResizeEventArgs`1.Data">
            <summary>
            Gets the data of the resized event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ResizeEventArgs`1.EndTime">
            <summary>
            Gets the end time of the resize clone element.
            </summary>
            <value>
            A <see cref="T:System.DateTime"/> value representing the end time of the resize clone element.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ResizeEventArgs`1.GroupIndex">
            <summary>
            Gets the group index of the cloned element.
            </summary>
            <value>
            Accepts an integer value.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ResizeEventArgs`1.Interval">
            <summary>
            Gets or sets the interval in minutes for resizing appointments.
            </summary>
            <value>
            Accepts an integer value.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ResizeEventArgs`1.Scroll">
            <summary>
            Gets or sets the scroll-related actions that occur when resizing to the edges of the scheduler.
            </summary>
            <value>
            A <see cref="T:Syncfusion.Blazor.Schedule.ScrollOptions"/> value representing the scroll-related actions that occur when resizing to the edges.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ResizeEventArgs`1.StartTime">
            <summary>
            Gets the start time of the resize clone element.
            </summary>
            <value>
            A <see cref="T:System.DateTime"/> value representing the start time of the resize clone element.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ResizeEventArgs`1.MouseEventArgs">
            <summary>
            Gets the mouse event informations.
            </summary>
            <value>
            A <see cref="P:Syncfusion.Blazor.Schedule.ResizeEventArgs`1.MouseEventArgs"/> object representing the mouse event information.
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Schedule.ScrollEventArgs`1">
            <summary>
            Provides information about the virtual scroll action of the scheduler.
            </summary>
            <typeparam name="T">The type of the value of schedule events.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScrollEventArgs`1.EndIndex">
            <summary>
            Gets the group index of the last resource which is currently being rendered.
            </summary>
            <value>
            Gets a value of <see cref="T:System.Int32"/> type.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScrollEventArgs`1.EndDate">
            <summary>
            Gets the end date from the active view of the scheduler.
            </summary>
            <value>
            Gets a value of <see cref="T:System.DateTime"/> type.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScrollEventArgs`1.StartIndex">
            <summary>
            Gets the group index of the first resource which is currently being rendered.
            </summary>
            <value>
            Gets a value of <see cref="T:System.Int32"/> type.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScrollEventArgs`1.StartDate">
            <summary>
            Gets the start date from the active view of scheduler.
            </summary>
            <value>
            Gets a value of <see cref="T:System.DateTime"/> type.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScrollEventArgs`1.ResourceData">
            <summary>
            Gets the resource data collection which is currently rendered.
            </summary>
            <value>
            Gets a resource <see cref="P:Syncfusion.Blazor.Schedule.ScheduleResource`2.DataSource"/> collection which is currently rendered in viewport.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScrollEventArgs`1.EventData">
            <summary>
            Gets or sets the event data collection that needs to be rendered on every virtual scroll action
            This data dynamically bound to the scheduler only when <see cref="P:Syncfusion.Blazor.Schedule.ScheduleView.EnableLazyLoading"/> property is enabled.
            </summary>
            <value>
            If we set the event data collection then the data is currently bound to the scheduler. Accepts a value of <see cref="T:System.Collections.Generic.IEnumerable`1"/> type.
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Schedule.ResourceDetails`1">
            <summary>
            A class that represents the details of a resource.
            </summary>
            <typeparam name="T">The type of the resource data source model.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ResourceDetails`1.GroupData">
            <summary>
            Gets the data for the resource fields.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ResourceDetails`1.Resource">
            <summary>
            Gets the resource model data, including the field mapping options used within it.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ResourceDetails`1.ResourceChild">
            <summary>
            Gets the child level resources in compact mode.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ResourceDetails`1.ResourceData">
            <summary>
            Gets the child resource data.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ResourceDetails`1.ResourceId">
            <summary>
            Gets the Id of the current resource in compact mode.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ResourceDetails`1.ResourceName">
            <summary>
            Gets the name of the current resource in compact mode.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Schedule.ScrollOptions">
            <summary>
            Provides information about the scrolling action during a drag and resize action on appointments.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScrollOptions.Enable">
            <summary>
            Gets or sets whether to enable or disable the auto scrolling during a drag and resize action on appointments.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScrollOptions.ScrollBy">
            <summary>
            Gets or sets the scroll step value.
            </summary>
            <remarks>
            The <c>ScrollBy</c> value should be provided in minutes.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScrollOptions.TimeDelay">
            <summary>
            Gets or sets the time delay value while scrolling.
            </summary>
            <remarks>
            The <c>TimeDelay</c> value should be provided in milliseconds.
            </remarks>
        </member>
        <member name="T:Syncfusion.Blazor.Schedule.HeaderRowsModel">
            <summary>
            A class that represents the configuration of the header rows in a scheduler.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.HeaderRowsModel.Option">
            <summary>
            Gets or sets the <see cref="T:Syncfusion.Blazor.Schedule.HeaderRowType"/> for rendering header rows in timeline views (timelineday, timelineweek, timelinwworkweek and timelinemonth).
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.HeaderRowsModel.Template">
            <summary>
            Gets or sets template as a <see cref="T:Microsoft.AspNetCore.Components.RenderFragment`1"/> that defines custom appearance for rendering header rows.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Schedule.ValidationRules">
            <summary>
            A class that represents the validation rules for the <see cref="P:Syncfusion.Blazor.Schedule.ScheduleEventSettings`1.ScheduleField"/>.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Schedule.PrintOptions">
            <summary> 
            Represents print options for customizing the dimensions of a print scheduler element.
            The dimensions are determined by specifying the height and width using the PrintOptions settings.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.PrintOptions.Height">
            <summary>
            Gets or sets the height of the print scheduler element.
            The height determines the vertical size of the element on the screen.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.PrintOptions.Width">
            <summary>
            Gets or sets the width of the print scheduler element.
            The width determines the horizontal size of the element on the screen.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Schedule.Resource">
            <summary>
            Provide information about the resource fields.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.Resource.AllowMultiple">
            <summary>
            Gets or sets a value indicating whether to allow multiple selection of resource names, which results in multiple instances of the same appointment for the selected resources.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.Resource.ColorField">
            <summary>
            Gets or sets the mapping field for the <c>Color</c> field from the dataSource, used to specify the colors for the resources.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.Resource.CssClassField">
            <summary>
            Gets or sets the mapping field for the <c>CssClass</c> field from the dataSource, used to specify different styles to each resource's appointments.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.Resource.DataSource">
            <summary>
            Gets or sets the collection of resources to display in the scheduler.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.Resource.EndHourField">
            <summary>
            Gets or sets the mapping field for the <c>EndHour</c> field from the dataSource, used to specify different work end hours for each resource.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.Resource.ExpandedField">
            <summary>
            Gets or sets the mapping field for the <c>Expanded</c> field from the dataSource, used to specify whether each resource level in the timeline view should be maintained in an expanded or collapsed state by default.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.Resource.Field">
            <summary>
            Gets or sets a value that is bound to the resource field of appointment data.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.Resource.GroupIDField">
            <summary>
            Gets or sets the mapping field for the <c>GroupID</c> field from the dataSource, used to specify under which parent resource the child should be grouped.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.Resource.IdField">
            <summary>
            Gets or sets the mapping field for the <c>Id</c> field from the dataSource, used to uniquely identify the resources.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.Resource.Name">
            <summary>
            Gets or sets a unique resource name for differentiating various resource objects while grouping.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.Resource.Query">
            <summary>
            Gets or sets the external `Query` that will be executed during data processing.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.Resource.StartHourField">
            <summary>
            Gets or sets the mapping field for the <c>StartHour</c> field from the dataSource, used to specify different work start hours for each resource.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.Resource.TextField">
            <summary>
            Gets or sets the mapping field for the <c>Text</c> field from the dataSource, used to specify the resource names.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.Resource.Title">
            <summary>
            Gets or sets the title for the resource field to be displayed on the schedule event editor window.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.Resource.WorkDaysField">
            <summary>
            Gets or sets the mapping field for the <c>WorkDays</c> field from the dataSource, used to specify different working days for each resource.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Schedule.TemplateContext">
            <summary> 
            Provides the information about the template options in the Scheduler.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.TemplateContext.Date">
            <summary>
            Gets the date of the template.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.TemplateContext.Type">
            <summary>
            Gets the type of element represented by the Scheduler.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.TemplateContext.GroupIndex">
            <summary>
            Gets the group index of the resource which helps to get the resource information using <see cref="M:Syncfusion.Blazor.Schedule.SfSchedule`1.GetResourceByIndex(System.Int32)" /> method.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.TemplateContext.Resource">
            <summary>
            Gets the resource details and relevant fields for the specified resource.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.TemplateContext.ResourceData">
            <summary>
            Gets the data associated with the specified resource.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Schedule.TimezoneFields">
            <summary> 
            Provides the information about the scheduler timezoneData.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.TimezoneFields.Value">
            <summary>
            Gets or sets the timezone data that will be displayed in the editor window dropdown.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.TimezoneFields.Text">
            <summary>
            Gets or sets the text that will be displayed in the editor window dropdown for timezones.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Schedule.RecurrenceEditorEvents">
            <summary>
            Configure event handlers to handle the events with the Recurrence component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.RecurrenceEditorEvents.OnChange">
            <summary>
            The event triggers on the recurrence rule change.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Schedule.RecurrenceHelper">
            <summary>
            Represents a helper for handling recurrence appointments.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.RecurrenceHelper.GetRecurrenceDateTimeCollection(System.String,System.String,System.Int32,System.DateTime,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
            Method to get recurrence appointment's date-time collection.
            </summary>
            <param name="recurrenceRule">RRule of Recurrence appointment's.</param>
            <param name="excludedDates">Dates exclude from collection</param>
            <param name="firstDayOfWeek">First day of week</param>
            <param name="recurrenceStartDate">Recurrence start date.</param>
            <param name="recurrenceEndDate">Recurrence end date.</param>
            <param name="dateRangeStart">Start date to collect the recurrence dates from the specified date range.</param>
            <param name="dateRangeEnd">End date to collect the recurrence dates from the specified date range.</param>
            <param name="maximumCount">Length of the recurrence DateTime collection.</param>
            <example>
            <code><![CDATA[
            List<DateTime> dateList = new List<DateTime>();
            void GetDates()
            {
                dateList = RecurrenceHelper.GetRecurrenceDateTimeCollection("FREQ=WEEKLY;BYDAY=TU;INTERVAL=1;", "20221220T090000Z", 0, new DateTime(2022, 11, 9), new DateTime(2023, 1, 31), new DateTime(2022, 11, 9), new DateTime(2023, 1, 31), 9).ToList();  
            }
            ]]></code>
            </example>
            <returns>Collection of recurrence date time</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.RecurrenceHelper.GetRuleSummary(System.String,Syncfusion.Blazor.ISyncfusionStringLocalizer)">
            <summary>
            Method to get the rule summary.
            </summary>
            <param name="recurrenceRule">Recurrence rule.</param>
            <param name="localizer">Syncfusion Localizer.</param>
            <example>
            <code><![CDATA[
            @inject ISyncfusionStringLocalizer Localizer
            string ruleSummary;
            void RuleSummary()
            {
                ruleSummary = RecurrenceHelper.GetRuleSummary("FREQ=WEEKLY;BYDAY=TU;INTERVAL=1;", Localizer);
            }
            ]]></code>
            </example>
            <returns>Recurrence rule summary</returns>
            <exception cref="T:System.ArgumentNullException">Recurrence rule or localizer is null</exception>
        </member>
        <member name="T:Syncfusion.Blazor.Schedule.SfRecurrenceEditor">
            <summary>
            Recurrence Editor component to generate the recurrence rules and dates.
            </summary>
            <example>
            The following code example shows how to render a basic recurrence editor component based on the recurrence rule value.
            <code><![CDATA[
            <SfRecurrenceEditor Value="@RecurrenceValue">
            </SfRecurrenceEditor>
            @code {
                string RecurrenceValue = "FREQ=DAILY;INTERVAL=2;COUNT=8";
            }
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.SfRecurrenceEditor.ChildContent">
            <summary>
            Gets or sets the child content of Recurrence editor.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.SfRecurrenceEditor.CssClass">
            <summary>
            Gets or sets the custom classes to customize the recurrence editor component.
            </summary>
            <value>
            If we set the css class, then the custom class is applied for recurrence editor element. The default value is `null`. 
            </value>
            <example>
            <code><![CDATA[ 
            <SfRecurrenceEditor CssClass="custom-editor"></SfRecurrenceEditor>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.SfRecurrenceEditor.DateFormat">
            <summary>
            Gets or sets the user-specific date format on the recurrence editor.
            </summary>
            <value>
            A string value. The default value is `null`. 
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.SfRecurrenceEditor.EnableRtl">
            <summary>
            Gets or sets whether the right-to-left direction is enabled for the recurrence editor component.
            </summary>
            <value> 
            If set to `true`, the right-to-left direction is enabled for the recurrence editor component. The default value is `false`. 
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.SfRecurrenceEditor.FirstDayOfWeek">
            <summary>
            Gets or sets the first day of the week.
            </summary>
            <value>
            If the <c>FirstDayOfWeek</c> value is set, it will be applied to the recurrence editor, otherwise the default value  of <c>0</c> will be used.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.SfRecurrenceEditor.Frequencies">
            <summary>
            Gets or sets the recurrence pattern on the editor.
            </summary>
            <value>
            A collection of <see cref="T:Syncfusion.Blazor.Schedule.RepeatType"/> will be applied, By default all frequencies of the <see cref="T:Syncfusion.Blazor.Schedule.RepeatType"/> are used.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.SfRecurrenceEditor.EndTypes">
            <summary>  
            Gets or sets the types that can be used to define the end condition for a recurrence editor.
            </summary>  
            <value>  
            A collection of <see cref="T:Syncfusion.Blazor.Schedule.EndType"/> objects representing the possible recurrence end types that can be applied to the pattern. By default, all available end types are used.
            </value>  
            <remarks> 
            The recurrence end type determines when the recurrence pattern ends, such as never, after a certain number of occurrences, or on a specific date. This property allows the user to select the desired end type(s) from a list of available options.
            </remarks> 
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.SfRecurrenceEditor.MaxDate">
            <summary>
            Gets or sets the maximum date that can be selected in the editor.
            </summary>
            <value>
            The default value is <c>December 31st 2099 12 am</c>.
            </value>
            <remarks>
            The Until date cannot be selected beyond the `MaxDate`.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.SfRecurrenceEditor.MinDate">
            <summary>
            Gets or sets the minimum date that can be selected in the editor.
            </summary>
            <value>
            The default value is <c>January 1st 1900 12 am</c>.
            </value>
            <remarks>
            The Until date cannot be selected before the `MinDate`.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.SfRecurrenceEditor.SelectedType">
            <summary>
            Gets or sets the current repeat type on the recurrence editor.
            </summary>
            <value>
            One of the <see cref="T:Syncfusion.Blazor.Schedule.RepeatType"/> enumeration. The default value is <see cref="F:Syncfusion.Blazor.Schedule.RepeatType.None"/>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.SfRecurrenceEditor.StartDate">
            <summary>
            Gets or sets the start date on the recurrence editor.
            </summary>
            <value>
            The default value is `DateTime.Now`.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.SfRecurrenceEditor.Value">
            <summary>
            Gets or sets the recurrence rule value.
            </summary>
            <value>
            The default value is `null`.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.SfRecurrenceEditor.ValueChanged">
            <summary>
            Invoked when the recurrence value changes.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.SfRecurrenceEditor.SetRecurrenceRule(System.String,System.Nullable{System.DateTime})">
            <summary>
            Sets the recurrence rule.
            </summary>
            <param name="rule">Recurrence rule which needs to set in the recurrence editor.</param>
            <param name="startDate">Specifies the start date of the recurrence.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.SfRecurrenceEditor.GetRecurrenceRule">
            <summary>
            To get the recurrence rule.
            </summary>
            <returns>The current recurrence rule in the recurrence editor.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.SfRecurrenceEditor.GetRuleSummary(System.String)">
            <summary>
            Gets the summary of the recurrence rule.
            </summary>
            <param name="recurrenceRule">Recurrence rule.</param>
            <returns>The summary of the recurrence rule in the recurrence editor.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.SfRecurrenceEditor.GetRecurrenceDates(System.DateTime,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime})">
            <summary>
            Gets the summary of the recurrence rule.
            </summary>
            <param name="startDate">Specifies the start date of the rule.</param>
            <param name="rule">Recurrence rule.</param>
            <param name="excludeDate">Specifies the date to be excluded.</param>
            <param name="maximumCount">Specifies the maximum number of occurrences.</param>
            <param name="viewDate">Specifies the current view date.</param>
            <returns>The date of occurrences for the specified rule. </returns>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.SfRecurrenceEditor.UpdateRuleUntilDate(System.DateTime)">
            <summary>
            Sets the end date in the recurrence rule.
            </summary>
            <param name="endDate">Specifies the until date.</param>
        </member>
        <member name="T:Syncfusion.Blazor.Schedule.View">
            <summary>
            An enum that denotes the view mode of the scheduler.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Schedule.View.Day">
            <summary>
            The day view of the scheduler.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Schedule.View.Week">
            <summary>
            The week view of the scheduler.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Schedule.View.WorkWeek">
            <summary>
            The work week view of the scheduler.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Schedule.View.Month">
            <summary>
            The month view of the scheduler.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Schedule.View.Year">
            <summary>
            The year view of the scheduler.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Schedule.View.Agenda">
            <summary>
            The agenda view of the scheduler.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Schedule.View.MonthAgenda">
            <summary>
            The month agenda view of the scheduler.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Schedule.View.TimelineDay">
            <summary>
            The timeline day view of the scheduler.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Schedule.View.TimelineWeek">
            <summary>
            The timeline week view of the scheduler.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Schedule.View.TimelineWorkWeek">
            <summary>
            The timeline work week view of the scheduler.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Schedule.View.TimelineMonth">
            <summary>
            The timeline month view of the scheduler.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Schedule.View.TimelineYear">
            <summary>
            The timeline year view of the scheduler.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Schedule.Orientation">
            <summary>
            An enum that holds the orientation modes in the timeline Year view of the scheduler.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Schedule.Orientation.Vertical">
            <summary>
            The vertical orientation of the timeline year view.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Schedule.Orientation.Horizontal">
            <summary>
            The horizontal orientation of the timeline year view.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Schedule.HeaderRowType">
            <summary>
            An enum that holds the types of header rows in the timeline view of the scheduler.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Schedule.HeaderRowType.Year">
            <summary>
            The year row in the header bar.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Schedule.HeaderRowType.Month">
            <summary>
            The month row in the header bar.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Schedule.HeaderRowType.Week">
            <summary>
            The week row in the header bar.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Schedule.HeaderRowType.Date">
            <summary>
            The date row in the header bar.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Schedule.HeaderRowType.Hour">
            <summary>
            The hour row in the header bar.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Schedule.TemplateType">
            <summary>
            An enum that holds the type where the quick info template applies.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Schedule.TemplateType.Both">
            <summary>
            The template applies to both the event and cell.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Schedule.TemplateType.Cell">
            <summary>
            The template applies only to the cell.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Schedule.TemplateType.Event">
            <summary>
            The template applies only to the event.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Schedule.RepeatType">
            <summary>
            An enum that holds the frequencies available in recurrence editor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Schedule.RepeatType.None">
            <summary>
            No frequency is available in the recurrence.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Schedule.RepeatType.Daily">
            <summary>
            The recurring frequency is daily.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Schedule.RepeatType.Weekly">
            <summary>
            The recurring frequency is weekly.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Schedule.RepeatType.Monthly">
            <summary>
            The recurring frequency is monthly.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Schedule.RepeatType.Yearly">
            <summary>
            The recurring frequency is yearly.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Schedule.EndType">
            <summary>  
            Specifies the available end types for a recurrence pattern in a recurrence editor.  
            </summary>  
        </member>
        <member name="F:Syncfusion.Blazor.Schedule.EndType.Never">
            <summary>  
            The recurrence has no specific end date and continues indefinitely.
            </summary>  
        </member>
        <member name="F:Syncfusion.Blazor.Schedule.EndType.Until">
            <summary>  
            The recurrence ends on a specified date.  
            </summary>  
        </member>
        <member name="F:Syncfusion.Blazor.Schedule.EndType.Count">
            <summary>  
            The recurrence ends after a specified number of occurrences.  
            </summary>  
        </member>
        <member name="T:Syncfusion.Blazor.Schedule.CurrentAction">
            <summary>
            An enum that holds the actions available in scheduler.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Schedule.CurrentAction.Add">
            <summary>
            The current action of the scheduler is creating an appointment.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Schedule.CurrentAction.Save">
            <summary>
            The current action of the scheduler is editing an appointment.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Schedule.CurrentAction.Delete">
            <summary>
            The current action is deleting an appointment.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Schedule.CurrentAction.DeleteOccurrence">
            <summary>
            The current action is deleting a single occurrence of a recurring appointment.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Schedule.CurrentAction.DeleteSeries">
            <summary>
            The current action is deleting the entire series of a recurring appointment.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Schedule.CurrentAction.EditOccurrence">
            <summary>
            The current action is editing a single occurrence of a recurring appointment.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Schedule.CurrentAction.EditSeries">
            <summary>
            The current action is editing the entire series of a recurring appointment.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Schedule.CurrentAction.EditFollowingEvents">
            <summary>
            The current action is editing the following occurrences of a recurring appointment.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Schedule.CurrentAction.DeleteFollowingEvents">
            <summary>
            The current action is deleting the following occurrences of a recurring appointment.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Schedule.ExcelFormat">
            <summary>
            An enum that holds the supported excel file formats.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Schedule.ExcelFormat.Csv">
            <summary>
            The Excel file format is `csv`.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Schedule.ExcelFormat.Xlsx">
            <summary>
            The Excel file format is `xlsx`.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Schedule.PopupType">
            <summary>
            An enum that holds the available types of popups in the scheduler.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Schedule.PopupType.Editor">
            <summary>
            The detailed editor window.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Schedule.PopupType.EventContainer">
            <summary>
            The more indicator popup.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Schedule.PopupType.QuickInfo">
            <summary>
            The quick popup.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Schedule.PopupType.RecurrenceAlert">
            <summary>
            The popup showing recurrence alerts.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Schedule.PopupType.DeleteAlert">
            <summary>
            The popup showing delete confirmation message.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Schedule.PopupType.ViewEventInfo">
            <summary>
            The quick popup on cells in responsive mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Schedule.PopupType.EditEventInfo">
            <summary>
            The quick popup on events in responsive mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Schedule.PopupType.ValidationAlert">
            <summary>
            The popup showing validation alerts.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Schedule.PopupType.RecurrenceValidationAlert">
            <summary>
            The popup showing recurrence validation alerts.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Schedule.ElementType">
            <summary>
            An enum that holds the available element types in the scheduler.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Schedule.ElementType.EmptyCells">
            <summary>
            Empty cells.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Schedule.ElementType.MajorSlot">
            <summary>
            Time scale major slot cells.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Schedule.ElementType.MinorSlot">
            <summary>
            Minor slot cells.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Schedule.ElementType.DateHeader">
            <summary>
            Date header cells.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Schedule.ElementType.AllDayCells">
            <summary>
            All day row cells.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Schedule.ElementType.WorkCells">
            <summary>
            Work cells.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Schedule.ElementType.ResourceHeader">
            <summary>
            Resource header cells.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Schedule.ElementType.ResourceGroupCells">
            <summary>
            Resource group cells.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Schedule.ElementType.MonthDay">
            <summary>
            Month day elements.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Schedule.ElementType.MonthCells">
            <summary>
            Month cells.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Schedule.ElementType.OtherMonthCells">
            <summary>
            Previous and next month cells.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Schedule.ElementType.YearHeader">
            <summary>
            The year header element.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Schedule.ElementType.DayHeader">
            <summary>
            The day header element.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Schedule.ElementType.MonthHeader">
            <summary>
            The month header element.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Schedule.ElementType.WeekHeader">
            <summary>
            The week header element.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Schedule.ElementType.Event">
            <summary>
            The appointment element.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Schedule.ActionType">
            <summary>
            An enum that holds the scheduler actions.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Schedule.ActionType.EventChange">
            <summary>
            Changes to an appointment.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Schedule.ActionType.EventCreate">
            <summary>
            The creation of an appointment.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Schedule.ActionType.EventRemove">
            <summary>
            The deletion of an appointment.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Schedule.ActionType.ViewNavigate">
            <summary>
            A change in the scheduler view.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Schedule.ActionType.DateNavigate">
            <summary>
            A change in the scheduler date.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Schedule.ActionType.ResourceExpand">
            <summary>
            The expansion of a resource.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Schedule.ActionType.ResourceCollapse">
            <summary>
            The collapse of a resource.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Schedule.AppointmentType">
            <summary>
            An enum that holds the appointment types.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Schedule.AppointmentType.Event">
            <summary>
            A normal appointment.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Schedule.AppointmentType.BlockEvent">
            <summary>
            A block appointment.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Schedule.SpannedEventPlacement">
            <summary>
            Specifies the rendering of spanned events (duration is more than 24 hours) in an all-day row or time slot (work area) for scheduler. 
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Schedule.SpannedEventPlacement.AllDayRow">
            <summary>
            Renders the spanned events in the all-day row.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Schedule.SpannedEventPlacement.TimeSlot">
            <summary>
            Renders the spanned events in the time slot.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Schedule.ScheduleEvents`1">
            <summary>
            Provides event handlers for the <see cref="T:Syncfusion.Blazor.Schedule.SfSchedule`1"/> component.
            </summary>
            <typeparam name="TValue">The value type of the schedule component.</typeparam>
            <example>
            <code><![CDATA[
            <SfSchedule TValue="AppointmentData">
                <ScheduleEvents TValue="AppointmentData" OnCellClick="TriggerCellClick" OnEventClick="TriggerEventClick"></ScheduleEvents>
            </SfSchedule>
            @code{
                private void TriggerCellClick(CellClickEventArgs args)
                {
                    //write custom code.
                }
                private void TriggerEventClick(EventClickArgs<AppointmentData> args)
                {
                    //write custom code.
                }
                public class AppointmentData
                {
                    public int Id { get; set; }
                    public string Subject { get; set; }
                    public string Location { get; set; }
                    public DateTime StartTime { get; set; }
                    public DateTime EndTime { get; set; }
                }
            }
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleEvents`1.OnActionBegin">
            <summary>
            Triggers at the beginning of every scheduler action.
            </summary>
            <value>
            An event callback function.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleEvents`1.ActionCompleted">
            <summary>
            Triggers upon successful completion of the scheduler actions.
            </summary>
            <value>
            An event callback function.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleEvents`1.OnActionFailure">
            <summary>
            Triggers when a scheduler action fails or is interrupted, and returns error information.
            </summary>
            <value>
            An event callback function.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleEvents`1.OnCellClick">
            <summary>
            Triggers when the scheduler cells are single-clicked or single-tapped on mobile devices.
            </summary>
            <value>
            An event callback function.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleEvents`1.OnCellDoubleClick">
            <summary>
            Triggers when the scheduler cells are double clicked.
            </summary>
            <value>
            An event callback function.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleEvents`1.Created">
            <summary>
            Triggers after the <see cref="T:Syncfusion.Blazor.Schedule.SfSchedule`1"/> component is created.
            </summary>
            <value>
            An event callback function.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleEvents`1.DataBinding">
            <summary>
            Triggers before the data is bound to the scheduler.
            </summary>
            <value>
            An event callback function.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleEvents`1.DataBound">
            <summary>
            Triggers after the event data is bound to the scheduler.
            </summary>
            <value>
            An event callback function.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleEvents`1.Destroyed">
            <summary>
            Triggers when the <see cref="T:Syncfusion.Blazor.Schedule.SfSchedule`1"/> component is destroyed.
            </summary>
            <value>
            An event callback function.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleEvents`1.OnDragStart">
            <summary>
            Triggers when an appointment starts a drag action.
            </summary>
            <value>
            An event callback function.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleEvents`1.Dragged">
            <summary>
            Triggers when the dragging of an appointment is stopped.
            </summary>
            <value>
            An event callback function.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleEvents`1.OnEventClick">
            <summary>
            Triggers when the events are single-clicked or single-tapped on mobile devices.
            </summary>
            <value>
            An event callback function.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleEvents`1.OnEventDoubleClick">
            <summary>
            Triggers when the events are double clicked.
            </summary>
            <value>
            An event callback function.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleEvents`1.EventRendered">
            <summary>
            Triggers before each event is rendered on the scheduler user interface.
            </summary>
            <value>
            An event callback function.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleEvents`1.MoreEventsClicked">
            <summary>
            Triggers when the more events indicator is clicked.
            </summary>
            <value>
            An event callback function.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleEvents`1.Navigating">
            <summary>
            Triggers before the date or view is navigated on the scheduler.
            </summary>
            <value>
            An event callback function.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleEvents`1.OnPopupClose">
            <summary>
            Triggers before any scheduler popups are closed on the page.
            </summary>
            <value>
            An event callback function.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleEvents`1.OnPopupOpen">
            <summary>
            Triggers before any scheduler popups open on the page.
            </summary>
            <value>
            An event callback function.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleEvents`1.OnRenderCell">
            <summary>
            Triggers before each cell is rendered on the scheduler user interface.
            </summary>
            <value>
            An event callback function.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleEvents`1.OnResizeStart">
            <summary>
            Triggers when an appointment is started to resize.
            </summary>
            <value>
            An event callback function.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleEvents`1.Resized">
            <summary>
            Triggers when the resizing of appointment is stopped.
            </summary>
            <value>
            An event callback function.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleEvents`1.OnVirtualScrollStart">
            <summary>
            Gets or sets the event callback function that is triggered when virtual scrolling is started.
            </summary>
            <value>
            An event callback function should accept a parameter of type <see cref="T:Syncfusion.Blazor.Schedule.ScrollEventArgs`1"/>.
            </value>
            <example>
            <code><![CDATA[
            <SfSchedule TValue="EventData" Width="100%" Height="600px">
               <ScheduleGroup Resources="@GroupData"></ScheduleGroup>
               <ScheduleResources>
                   <ScheduleResource TItem = "ResourceData" TValue="int[]" DataSource="@ResourceDatasource" Field="ResourceId" Title="Resource" Name="Resources" TextField="Text" IdField="Id" ColorField="Color" AllowMultiple="true"></ScheduleResource>
               </ScheduleResources>
               <ScheduleViews>
                   <ScheduleView Option="View.TimelineMonth" AllowVirtualScrolling="true"></ScheduleView>
               </ScheduleViews>
               <ScheduleEvents TValue="EventData" OnVirtualScrollStart="OnVirtualScrollStart"></ScheduleEvents>
            </SfSchedule>
            @code {
                public void OnVirtualScrollStart(ScrollEventArgs args)
                {
                    //Customize the code in scroll start event.
                }
            }
            ]]></code>
            </example>
            <remarks>
            This event is applicable only when <see cref="P:Syncfusion.Blazor.Schedule.ScheduleView.AllowVirtualScrolling"/> and <see cref="P:Syncfusion.Blazor.Schedule.ScheduleGroup.Resources"/> properties are enabled.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleEvents`1.OnVirtualScrollStop">
            <summary>
            Gets or sets the event callback function that is triggered when virtual scrolling is stopped.
            </summary>
            <value>
            An event callback function should accept a parameter of type <see cref="T:Syncfusion.Blazor.Schedule.ScrollEventArgs`1"/>.
            </value>
            <example>
            <code><![CDATA[
            <SfSchedule TValue="EventData" Width="100%" Height="600px">
               <ScheduleGroup Resources="@GroupData"></ScheduleGroup>
               <ScheduleResources>
                   <ScheduleResource TItem = "ResourceData" TValue="int[]" DataSource="@ResourceDatasource" Field="ResourceId" Title="Resource" Name="Resources" TextField="Text" IdField="Id" ColorField="Color" AllowMultiple="true"></ScheduleResource>
               </ScheduleResources>
               <ScheduleViews>
                   <ScheduleView Option="View.TimelineMonth" AllowVirtualScrolling="true"></ScheduleView>
               </ScheduleViews>
               <ScheduleEvents TValue="EventData" OnVirtualScrollStop="OnVirtualScrollStop"></ScheduleEvents>
            </SfSchedule>
            @code {
                private void OnVirtualScrollStop(ScrollEventArgs args)
                {
                    //Customize the code in scroll stop event.
                }
            }
            ]]></code>
            </example>
            <remarks>
            This event is applicable only when <see cref="P:Syncfusion.Blazor.Schedule.ScheduleView.AllowVirtualScrolling"/> and <see cref="P:Syncfusion.Blazor.Schedule.ScheduleGroup.Resources"/> properties are enabled.
            </remarks>
        </member>
        <member name="T:Syncfusion.Blazor.Schedule.ScheduleGroup">
            <summary>
            A class that represents the resource grouping related configurations on <see cref="T:Syncfusion.Blazor.Schedule.SfSchedule`1"/> component.
            </summary>
            <remarks>
            You can configure the resource grouping by specifying values for the corresponding properties.
            </remarks>
            <example>
            The following code example shows how to configure the resource grouping
            <code><![CDATA[
            <SfSchedule TValue="AppointmentData">
                <ScheduleGroup Resources="@Resources" AllowGroupEdit="false" ByDate="false" EnableCompactView="false"></ScheduleGroup>
            </SfSchedule>
            @code {
                string[] Resources { get; set; } = { "Rooms", "Owners" };
            }
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleGroup.ChildContent">
            <summary>
            Gets or sets the child content of schedule group.
            </summary>
            <value>
            The value used to build the content.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleGroup.AllowGroupEdit">
            <summary>
            Gets or sets whether the group editing is enabled in the scheduler.
            </summary>
            <value>
            Set to `true` to treat multiple resources as a single appointment object in the scheduler's dataSource. The default value is `false`
            </value>
            <remarks>
            Group editing is performed on multiple resources based on the <see cref="P:Syncfusion.Blazor.Schedule.ScheduleField.Id"/> value on appointments.
            It is mandatory to group the resources as an array type and map them to the appointment data's resource field.
            </remarks>
            <example>
            <code><![CDATA[
            <SfSchedule TValue="AppointmentData">
                <ScheduleGroup Resources="@Resources" AllowGroupEdit="true"></ScheduleGroup>
                <ScheduleResources>
                    <ScheduleResource TItem="ResourceData" TValue="int[]" DataSource="@OwnersData" Field="OwnerId" Title="Owner" Name="Owners" TextField="Text" IdField="Id" GroupIDField="OwnerGroupId" AllowMultiple="true"></ScheduleResource>
                </ScheduleResources>
            </SfSchedule>
            @code {
                string[] Resources { get; set; } = { "Owners" };
                public List<ResourceData> OwnersData { get; set; } = new List<ResourceData>
                {
                    new ResourceData{ Text = "Nancy", Id = 1 },
                    new ResourceData{ Text = "Steven", Id = 2 }
                };
                public class AppointmentData
                {
                    public int Id { get; set; }
                    public string Subject { get; set; }
                    public DateTime StartTime { get; set; }
                    public DateTime EndTime { get; set; }
                    public int[] OwnerId { get; set; }
                }
                public class ResourceData
                {
                    public int Id { get; set; }
                    public string Text { get; set; }
                }
            }
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleGroup.ByDate">
            <summary>
            Gets or sets whether to group resources under each date.
            </summary>
            <value>
            Set to `true` to group resources by date, where each day will render all the resource names under it. The default value is `false`.
            </value>
            <remarks>
            This property is applicable only for Day, Week, WorkWeek, Month and Agenda Views.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleGroup.ByGroupID">
            <summary>
            Gets or sets whether to render the resource hierarchy based on the value mapped to <see cref="P:Syncfusion.Blazor.Schedule.ScheduleResource`2.GroupIDField"/>.
            </summary>
            <value>
            Set to `false` to map all the resources in the child collection to each available parent. The default value is `true`.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleGroup.EnableCompactView">
            <summary>
            Gets or sets whether to display the resource grouping layout in normal or compact mode on mobile devices.
            </summary>
            <value>
            Set to `false` to display the default grouping layout on mobile devices, with scrolling enabled. The default value is `false`.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleGroup.HeaderTooltipTemplate">
            <summary>
            Gets or sets template as a <see cref="T:Microsoft.AspNetCore.Components.RenderFragment`1"/> that defines custom appearance for displaying the resource header tooltip.
            </summary>
            <value>
            A template content that specifies the visualization of resource header tooltip. By default, no tooltip will be displayed on resource header.
            </value>
            <example>
            <code><![CDATA[
            <SfSchedule TValue="AppointmentData">
                <ScheduleGroup Resources="@Resources">
                    <HeaderTooltipTemplate>
                        @{
                            var resourceData = (context as TemplateContext).ResourceData as ResourceData;
                            <div class='template-wrap'>
                                <div class="resource-name">@(resourceData.Text)</div>
                            </div>
                        }
                    </HeaderTooltipTemplate>
                </ScheduleGroup>
            </SfSchedule>
            @code{
                string[] Resources { get; set; } = { "Conferences" };
                public class ResourceData
                {
                    public int Id { get; set; }
                    public string Text { get; set; }
                }
            }
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleGroup.HideNonWorkingDays">
            <summary> 
            Gets or sets whether to show/hide the non-working days. 
            </summary> 
            <value> 
            true, to hide the non-working days. The default value is `false`.
            </value>
            <remarks> 
            This property is only applicable when <see cref="P:Syncfusion.Blazor.Schedule.ScheduleGroup.ByDate"/> is set to `true`, and only affects the Day, Week, WorkWeek, and Month views.
            </remarks>
            <example>
            <code><![CDATA[ 
            <SfSchedule>
                <ScheduleGroup ByDate="true" HideNonWorkingDays="true"></ScheduleGroup>
            </SfSchedule>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleGroup.Resources">
            <summary>
            Gets or sets the collection of resource names assigned to each resources, which determines the grouping order in the scheduler.
            </summary>
            <value>
            The collection should be an array of strings. The default value is `null`.
            </value>
            <remarks>
            If this property is set to `null`, grouping will be disabled and the scheduler will be rendered without grouping.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.ScheduleGroup.Dispose(System.Boolean)">
            <summary>
            Dispose unmanaged resources in the Syncfusion Blazor component.
            </summary>
            <param name="disposing">Boolean value to dispose the object.</param>
        </member>
        <member name="T:Syncfusion.Blazor.Schedule.ScheduleHeaderRow">
            <summary>
            A class that represents the timeline view headers on the <see cref="T:Syncfusion.Blazor.Schedule.SfSchedule`1"/> component.
            </summary>
            <remarks>
            Use this class to specify values for the corresponding properties to configure the header rows.
            </remarks>
            <example>
            <code><![CDATA[
            <SfSchedule TValue="AppointmentData">
                <ScheduleHeaderRows>
                    <ScheduleHeaderRow Option="HeaderRowType.Week">
                        <Template>
                            <div class="week-text">Week: @(GetWeekText((context as TemplateContext).Date))</div>
                        </Template>
                    </ScheduleHeaderRow>
                    <ScheduleHeaderRow Option="HeaderRowType.Date"></ScheduleHeaderRow>
                </ScheduleHeaderRows>
            </SfSchedule>
            @code {
                public static string GetWeekText(DateTime date)
                {
                    return CultureInfo.InvariantCulture.Calendar.GetWeekOfYear(date, CalendarWeekRule.FirstFourDayWeek, DayOfWeek.Monday).ToString();
                }
            }
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleHeaderRow.ChildContent">
            <summary>
            Gets or sets the child content of header row.
            </summary>
            <value>
            The value used to build the content.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleHeaderRow.Option">
            <summary>
            It defines the header row type, which accepts either of the following values.
             Year
             Month
             Week
             Date
             Hour.
            </summary>
            <summary>
            Gets or sets the header row type that needs be rendered on timeline views.
            </summary>
            <value>
            One of the <see cref="T:Syncfusion.Blazor.Schedule.HeaderRowType"/> enumeration.
            </value>
            <remarks>
            If the <c>HeaderRowType</c> is <c>Year</c>, renders the year row in timeline view header.
            If the <c>HeaderRowType</c> is <c>Month</c>, renders the month row in timeline view header.
            If the <c>HeaderRowType</c> is <c>Week</c>, renders the week row in timeline view header.
            If the <c>HeaderRowType</c> is <c>Date</c>, renders the date row in timeline view header.
            If the <c>HeaderRowType</c> is <c>Hour</c>, renders the hour row in timeline view header.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleHeaderRow.Template">
            <summary>
            Gets or sets template as a <see cref="T:Microsoft.AspNetCore.Components.RenderFragment`1"/> that defines custom appearance for displaying the timeline view header rows.
            </summary>
            <value>
            A template content that specifies the visualization of timeline view header rows. The default value is <c>null</c>.
            </value>
            <example>
            <code><![CDATA[
            <SfSchedule TValue="AppointmentData">
                <ScheduleHeaderRows>
                    <ScheduleHeaderRow Option="HeaderRowType.Date">
                        <Template>
                            <div class="date-text">Date: @(GetDateText((context as TemplateContext).Date))</div>
                        </Template>
                    </ScheduleHeaderRow>
                    <ScheduleHeaderRow Option="HeaderRowType.Hour">
                    <Template>
                            <div class="hour-text">hour: @(GetHourText((context as TemplateContext).Date))</div>
                        </Template>
                    </ScheduleHeaderRow>
                </ScheduleHeaderRows>
            </SfSchedule>
            @code {
                public static string GetDateText(DateTime date)
                {
                    return date.ToString("dd ddd", CultureInfo.CurrentCulture);
                }
                public static string GetHourText(DateTime date)
                {
                    return date.ToString("hh", CultureInfo.InvariantCulture);
                }
            }
            ]]></code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.ScheduleHeaderRow.Dispose(System.Boolean)">
            <summary>
            Dispose unmanaged resources in the Syncfusion Blazor component.
            </summary>
            <param name="disposing">Boolean value to dispose the object.</param>
        </member>
        <member name="T:Syncfusion.Blazor.Schedule.ScheduleHeaderRows">
            <summary>
            Represents a collection of <see cref="T:Syncfusion.Blazor.Schedule.ScheduleHeaderRow"/>.
            </summary>
            <remarks>
            To generate dynamic <see cref="T:Syncfusion.Blazor.Schedule.ScheduleHeaderRow"/> based on collection, use <c>@foreach</c> directive within <see cref="T:Syncfusion.Blazor.Schedule.ScheduleHeaderRows"/> tag.
            </remarks>
            <example>
            <code><![CDATA[
            <SfSchedule TValue="AppointmentData">
                <ScheduleHeaderRows>
                    <ScheduleHeaderRow Option="HeaderRowType.Year"></ScheduleHeaderRow>
                    <ScheduleHeaderRow Option="HeaderRowType.Month"></ScheduleHeaderRow>
                    <ScheduleHeaderRow Option="HeaderRowType.Week"></ScheduleHeaderRow>
                    <ScheduleHeaderRow Option="HeaderRowType.Date"></ScheduleHeaderRow>
                    <ScheduleHeaderRow Option="HeaderRowType.Hour"></ScheduleHeaderRow>
                </ScheduleHeaderRows>
            </SfSchedule>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleHeaderRows.ChildContent">
            <summary>
            Gets or sets the child content of header rows.
            </summary>
            <value>
            The value used to build the content.
            </value>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.ScheduleHeaderRows.Dispose(System.Boolean)">
            <summary>
            Dispose unmanaged resources in the Syncfusion Blazor component.
            </summary>
            <param name="disposing">Boolean value to dispose the object.</param>
        </member>
        <member name="T:Syncfusion.Blazor.Schedule.ScheduleQuickInfoTemplates">
            <summary>
            A class that represents the schedule quick popup templates in <see cref="T:Syncfusion.Blazor.Schedule.SfSchedule`1"/> component.
            </summary>
            <remarks>
            You can customize the header, content and footer of the quick popup individually or all combined together.
            </remarks>
            <example>
            The following code example explains the cell quick popup customization using <c>HeaderTemplate</c>, <c>ContentTemplate</c> and <c>FooterTemplate</c>.
            <code><![CDATA[
            <SfSchedule TValue="AppointmentData">
                <ScheduleQuickInfoTemplates TemplateType="TemplateType.Cell">
                    <HeaderTemplate>
                        <div class="quick-info-header">
                            <div class="quick-info-header-content" style="align-items: center; color: #919191;">
                                <div class="quick-info-title">Add Appointment</div>
                            </div>
                        </div>
                    </HeaderTemplate>
                    <ContentTemplate>
                        <div class="e-cell-content">
                            <div class="content-area">
                                <input @bind="SubjectValue" type="text" />
                            </div>
                            <div class="content-area">
                                <input @bind="DescriptionValue" type="text" />
                            </div>
                        </div>
                    </ContentTemplate>
                    <FooterTemplate>
                        <div class="cell-footer">
                            <button class="e-btn e-primary" type="button" @onclick="(e => OnAdd(e, context as AppointmentData))">Add</button>
                        </div>
                    </FooterTemplate>
                </ScheduleQuickInfoTemplates>
            </SfSchedule>
            @code {
                private string SubjectValue { get; set; }
                private string DescriptionValue { get; set; }
                private void OnAdd(MouseEventArgs args, AppointmentData data)
                {
                    // write custom code
                }
            }
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleQuickInfoTemplates.ChildContent">
            <summary>
            Gets or sets the Child content of quick popup templates.
            </summary>
            <value>
            The value used to build the content.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleQuickInfoTemplates.HeaderTemplate">
            <summary>
            Gets or sets template as a <see cref="T:Microsoft.AspNetCore.Components.RenderFragment"/> that defines custom appearance for displaying the header section of quick popup.
            </summary>
            <value>
            A template content that specifies the visualization of header section of quick popup. By default, `null` value is set.
            </value>
            <example>
            <code><![CDATA[
            <SfSchedule TValue="AppointmentData">
                <ScheduleQuickInfoTemplates TemplateType="TemplateType.Cell">
                    <HeaderTemplate>
                        <div class="quick-info-header">
                            <div class="quick-info-header-content" style="align-items: center; color: #919191;">
                                <div class="quick-info-title">Add Appointment</div>
                            </div>
                        </div>
                    </HeaderTemplate>
                </ScheduleQuickInfoTemplates>
            </SfSchedule>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleQuickInfoTemplates.ContentTemplate">
            <summary>
            Gets or sets template as a <see cref="T:Microsoft.AspNetCore.Components.RenderFragment"/> that defines custom appearance for displaying the content area of quick popup.
            </summary>
            <value>
            A template content that specifies the visualization of content area of quick popup. By default, `null` value is set.
            </value>
            <example>
            <code><![CDATA[
            <SfSchedule TValue="AppointmentData">
                <ScheduleQuickInfoTemplates TemplateType="TemplateType.Cell">
                    <ContentTemplate>
                        <div class="e-cell-content">
                            <div class="content-area">
                                <input @bind="SubjectValue" type="text" />
                            </div>
                            <div class="content-area">
                                <input @bind="DescriptionValue" type="text" />
                            </div>
                        </div>
                    </ContentTemplate>
                </ScheduleQuickInfoTemplates>
            </SfSchedule>
            @code {
                private string SubjectValue { get; set; }
                private string DescriptionValue { get; set; }
            }
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleQuickInfoTemplates.FooterTemplate">
            <summary>
            Gets or sets template as a <see cref="T:Microsoft.AspNetCore.Components.RenderFragment"/> that defines custom appearance for displaying the footer section of quick popup.
            </summary>
            <value>
            A template content that specifies the visualization of footer section of quick popup. By default, `null` value is set.
            </value>
            <example>
            <code><![CDATA[
            <SfSchedule TValue="AppointmentData">
                <ScheduleQuickInfoTemplates TemplateType="TemplateType.Event">
                    <FooterTemplate>
                        <div class="event-footer">
                            <button class="e-btn e-primary" type="button" @onclick="(e => OnMoreDetailsClick(e, context as AppointmentData))">More Details</button>
                            <button class="e-btn" type="button" @onclick="(e => OnDeleteClick(e, context as AppointmentData))">Delete</button>
                        </div>
                    </FooterTemplate>
                </ScheduleQuickInfoTemplates>
            </SfSchedule>
            @code {
                private void OnMoreDetailsClick(MouseEventArgs args, AppointmentData data)
                {
                    // write code to open editor
                }
                private void OnDeleteClick(MouseEventArgs args, AppointmentData data)
                {
                    // write code to delete the appointment
                }
            }
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleQuickInfoTemplates.TemplateType">
            <summary>
            Gets or sets the template type to customize the quick popup, either as a cell or an event. 
            </summary>
            <value>
            One of the <see cref="T:Syncfusion.Blazor.Schedule.TemplateType"/> enumeration. By default <see cref="F:Syncfusion.Blazor.Schedule.TemplateType.Both"/> value is set.
            </value>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.ScheduleQuickInfoTemplates.Dispose(System.Boolean)">
            <summary>
            Dispose unmanaged resources in the Syncfusion Blazor component.
            </summary>
            <param name="disposing">Boolean value to dispose the object.</param>
        </member>
        <member name="T:Syncfusion.Blazor.Schedule.ScheduleResource`2">
            <summary>
            A class that represents the resource related configurations and the options for binding its data.
            </summary>
            <typeparam name="TValue">The type of the resource ID field value from the data source model.</typeparam>
            <typeparam name="TItem">The type of the data source model.</typeparam>
            <remarks>
            You can configure the collection of schedule resource by specifying values for the corresponding properties with in the <see cref="T:Syncfusion.Blazor.Schedule.ScheduleResources"/> tag directive.
            </remarks>
            <example>
            The following code example shows how to configure the resource in scheduler:
            <code><![CDATA[
            <SfSchedule TValue="AppointmentData">
                <ScheduleResources>
                    <ScheduleResource TItem="ResourceData" TValue="int" DataSource="@OwnersData" Field="OwnerId" Title="Owner" Name="Owners" TextField="Text" IdField="Id"></ScheduleResource>
                </ScheduleResources>
            </SfSchedule>
            @code {
                public List<ResourceData> OwnersData { get; set; } = new List<ResourceData>
                {
                    new ResourceData{ Text = "Nancy", Id = 1 },
                    new ResourceData{ Text = "Steven", Id = 2 }
                };
                public class AppointmentData
                {
                    public int Id { get; set; }
                    public string Subject { get; set; }
                    public DateTime StartTime { get; set; }
                    public DateTime EndTime { get; set; }
                    public int OwnerId { get; set; }
                }
                public class ResourceData
                {
                    public int Id { get; set; }
                    public string Text { get; set; }
                }
            }
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleResource`2.ChildContent">
            <summary>
            Gets or sets the child content for schedule resource.
            </summary>
            <value>
            The value used to build the content.
            </value>
            <example>
            In the below example <see cref="T:Syncfusion.Blazor.Data.SfDataManager"/> is rendered as child content to bind resource data using custom adaptor. 
            <code><![CDATA[
            <SfSchedule TValue="AppointmentData">
                <ScheduleResources>
                    <ScheduleResource TItem="ResourceData" TValue="int" Field="OwnerId" Title="Owner" Name="Owners" TextField="Text" IdField="Id">
                        <SfDataManager AdaptorInstance="@typeof(CustomAdaptor)" Adaptor="Adaptors.CustomAdaptor"></SfDataManager>
                    </ScheduleResource>
                </ScheduleResources>
            </SfSchedule>
            @code{
                public class CustomAdaptor : DataAdaptor
                {
                    List<ResourceData> EventData = ResourceList();
                    public async override Task<object> ReadAsync(DataManagerRequest dataManagerRequest, string key = null)
                    {
                        await Task.yield();
                        return dataManagerRequest.RequiresCounts ? new DataResult() { Result = EventData, Count = EventData.Count() } : (object)EventData;
                    }
                }
                private static List<ResourceData> LastResourceList()
                {
                    return new List<ResourceData>
                    {
                        new ResourceData { Text = "Resource 1", Id = 1 },
                        new LastLevel { Text = "Resource 2", Id = 2 },
                        new LastLevel { Text = "Resource 3", Id = 3 }
                    }
                }
                public class ResourceData
                {
                    public int Id { get; set; }
                    public string Text { get; set; }
                }
            }
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleResource`2.ResourceDetails">
            <summary>
            Gets or sets the resource details to render in the editor window as a <see cref="T:Microsoft.AspNetCore.Components.RenderFragment"/>.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleResource`2.IsRefresh">
            <summary>
            When set to true will refresh the resources in editor.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleResource`2.ResourceIndex">
            <summary>
            It maps the index of resource from resource collection.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleResource`2.AllowMultiple">
            <summary>
            Gets or sets a value indicating whether to allow multiple selection of resource names, which results in multiple instances of the same appointment for the selected resources.
            </summary>
            <value>
            `true` to allow multiple selection of resource names. The default value is `fasle`.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleResource`2.ColorField">
            <summary>
            Gets or sets the mapping field for the <c>Color</c> field from the dataSource, used to specify the colors for the resources.
            </summary>
            <value>
            Accepts string value that should be mapped in the dataSource. The default value is `Color`.
            </value>
            <example>
            <code><![CDATA[
            <SfSchedule TValue="AppointmentData">
                <ScheduleResources>
                    <ScheduleResource TItem="ResourceData" TValue="int" ColorField="ResColor"></ScheduleResource>
                </ScheduleResources>
            </SfSchedule>
            @code {
                public class ResourceData
                {
                    Public string ResColor { get; set;}
                }
            }
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleResource`2.CssClassField">
            <summary>
            Gets or sets the mapping field for the <c>CssClass</c> field from the dataSource, used to specify different styles to each resource's appointments.
            </summary>
            <value>
            Accepts string value that should be mapped in the dataSource. The default value is `CssClass`.
            </value>
            <example>
            <code><![CDATA[
            <SfSchedule TValue="AppointmentData">
                <ScheduleResources>
                    <ScheduleResource TItem="ResourceData" TValue="int" CssClassField="CustomClass"></ScheduleResource>
                </ScheduleResources>
            </SfSchedule>
            @code {
                public class ResourceData
                {
                    Public string CustomClass { get; set;}
                }
            }
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleResource`2.DataSource">
            <summary>
            Gets or sets the collection of resources to display in the scheduler.
            </summary>
            <value>
            The collection should be of type <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleResource`2.EndHourField">
            <summary>
            Gets or sets the mapping field for the <c>EndHour</c> field from the dataSource, used to specify different work end hours for each resource.
            </summary>
            <value>
            Accepts string value that should be mapped in the dataSource. The default value is `EndHour`.
            </value>
            <example>
            <code><![CDATA[
            <SfSchedule TValue="AppointmentData">
                <ScheduleResources>
                    <ScheduleResource TItem="ResourceData" TValue="int" EndHourField="ResEndHour"></ScheduleResource>
                </ScheduleResources>
            </SfSchedule>
            @code {
                public class ResourceData
                {
                    Public string ResEndHour { get; set;}
                }
            }
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleResource`2.ExpandedField">
            <summary>
            Gets or sets the mapping field for the <c>Expanded</c> field from the dataSource, used to specify whether each resource level in the timeline view should be maintained in an expanded or collapsed state by default.
            </summary>
            <value>
            Accepts string value that should be mapped in the dataSource. The default value is `Expanded`.
            </value>
            <example>
            <code><![CDATA[
            <SfSchedule TValue="AppointmentData">
                <ScheduleResources>
                    <ScheduleResource TItem="ResourceData" TValue="int" ExpandedField="Expand"></ScheduleResource>
                </ScheduleResources>
            </SfSchedule>
            @code {
                public class ResourceData
                {
                    Public string Expand { get; set;}
                }
            }
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleResource`2.Field">
            <summary>
            Gets or sets a value that is bound to the resource field of appointment data.
            </summary>
            <value>
            This value should be a string and will be mapped in the <see cref="T:Syncfusion.Blazor.Schedule.ScheduleEventSettings`1"/> data source. The default value is null.
            </value>
            <remarks>
            If the resource field value is not mapped to the appointment data model, then the appointment will not be rendered for that resource.
            </remarks>
            <example>
            In the below code example, `ResourceId` field is mapped for <c>Field</c> property to map the resource id for appointments. 
            <code><![CDATA[
            <SfSchedule TValue="AppointmentData">
                <ScheduleResources>
                    <ScheduleResource TItem="ResourceData" TValue="int" Field="ResourceId"></ScheduleResource>
                </ScheduleResources>
            </SfSchedule>
            @code {
                public class AppointmentData
                {
                    public int Id { get; set; }
                    public string Subject { get; set; }
                    public DateTime StartTime { get; set; }
                    public DateTime EndTime { get; set; }
                    public int ResourceId { get; set; }
                }
                public class ResourceData
                {
                    public int Id { get; set; }
                    public string Text { get; set; }
                }
            }
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleResource`2.GroupIDField">
            <summary>
            Gets or sets the mapping field for the <c>GroupID</c> field from the dataSource, used to specify under which parent resource the child should be grouped.
            </summary>
            <value>
            Accepts string value that should be mapped in the dataSource. The default value is `GroupID`.
            </value>
            <example>
            <code><![CDATA[
            <SfSchedule TValue="AppointmentData">
                <ScheduleResources>
                    <ScheduleResource TItem="ResourceData" TValue="int" GroupIDField="ResGroupId"></ScheduleResource>
                </ScheduleResources>
            </SfSchedule>
            @code {
                public class ResourceData
                {
                    Public string ResGroupId { get; set;}
                }
            }
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleResource`2.IdField">
            <summary>
            Gets or sets the mapping field for the <c>Id</c> field from the dataSource, used to uniquely identify the resources.
            </summary>
            <value>
            Accepts string value that should be mapped in the dataSource. The default value is `Id`.
            </value>
            <example>
            <code><![CDATA[
            <SfSchedule TValue="AppointmentData">
                <ScheduleResources>
                    <ScheduleResource TItem="ResourceData" TValue="int" IdField="ResId"></ScheduleResource>
                </ScheduleResources>
            </SfSchedule>
            @code {
                public class ResourceData
                {
                    public int ResId { get; set; }
                }
            }
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleResource`2.Name">
            <summary>
            Gets or sets a unique resource name for differentiating various resource objects while grouping.
            </summary>
            <value>
            This value should be a string and will be applied to the <see cref="P:Syncfusion.Blazor.Schedule.ScheduleGroup.Resources"/> property to group the resources. The default value is `null`.
            </value>
            <example>
            In the below code example, Resource names were mapped for resource grouping.
            <code><![CDATA[
            <SfSchedule TValue="AppointmentData">
                <ScheduleGroup Resources="@Resources"></ScheduleGroup>
                <ScheduleResources>
                    <ScheduleResource TItem="ResourceData" TValue="int" Name="Rooms"></ScheduleResource>
                    <ScheduleResource TItem="ResourceData" TValue="int" Name="Owners"></ScheduleResource>
                </ScheduleResources>
            </SfSchedule>
            @code {
                public string[] Resources { get; set; } = { "Rooms", "Owners" };
            }
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleResource`2.Query">
            <summary>
            Gets or sets the external `Query` that will be executed during data processing.
            </summary>
            <value>
            Accepts <see cref="T:Syncfusion.Blazor.Data.Query"/> value.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleResource`2.StartHourField">
            <summary>
            Gets or sets the mapping field for the <c>StartHour</c> field from the dataSource, used to specify different work start hours for each resource.
            </summary>
            <value>
            Accepts string value that should be mapped in the dataSource. The default value is `StartHour`.
            </value>
            <example>
            <code><![CDATA[
            <SfSchedule TValue="AppointmentData">
                <ScheduleResources>
                    <ScheduleResource TItem="ResourceData" TValue="int" StartHourField="ResStart"></ScheduleResource>
                </ScheduleResources>
            </SfSchedule>
            @code {
                public class ResourceData
                {
                    public string ResStart { get; set; }
                }
            }
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleResource`2.TextField">
            <summary>
            Gets or sets the mapping field for the <c>Text</c> field from the dataSource, used to specify the resource names.
            </summary>
            <value>
            Accepts string value that should be mapped in the dataSource. The default value is `Text`.
            </value>
            <example>
            <code><![CDATA[
            <SfSchedule TValue="AppointmentData">
                <ScheduleResources>
                    <ScheduleResource TItem="ResourceData" TValue="int" TextField="ResName"></ScheduleResource>
                </ScheduleResources>
            </SfSchedule>
            @code {
                public class ResourceData
                {
                    public string ResName { get; set; }
                }
            }
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleResource`2.Title">
            <summary>
            Gets or sets the title for the resource field to be displayed on the schedule event editor window.
            </summary>
            <value>
            This value should be a string and will be displayed on the editor window. The default value is `null`.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleResource`2.WorkDaysField">
            <summary>
            Gets or sets the mapping field for the <c>WorkDays</c> field from the dataSource, used to specify different working days for each resource.
            </summary>
            <value>
            Accepts string value that should be mapped in the dataSource. The default value is `WorkDays`.
            </value>
            <example>
            <code><![CDATA[
            <SfSchedule TValue="AppointmentData">
                <ScheduleResources>
                    <ScheduleResource TItem="ResourceData" TValue="int" WorkDaysField="ResWorkDays"></ScheduleResource>
                </ScheduleResources>
            </SfSchedule>
            @code {
                public class ResourceData
                {
                    public int[] ResWorkDays { get; set; }
                }
            }
            ]]></code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.ScheduleResource`2.GetData">
            <summary>
            Allows to get resource data.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Schedule.ScheduleResources">
            <summary>
            Represents a collection of <see cref="T:Syncfusion.Blazor.Schedule.ScheduleResource`2"/>.
            </summary>
            <remarks>
            To generate dynamic <see cref="T:Syncfusion.Blazor.Schedule.ScheduleResource`2"/> based on collection, use <c>@foreach</c> directive within <see cref="T:Syncfusion.Blazor.Schedule.ScheduleResources"/> tag.
            </remarks>
            <example>
            <code><![CDATA[
            <SfSchedule TValue="AppointmentData">
                <ScheduleResources>
                    <ScheduleResource TItem="ResourceData" TValue="int" DataSource="@OwnerData" Field="OwnerId" Title="Owner" Name="Owner" TextField="Text" IdField="Id" ColorField="Color"></ScheduleResource>
                </ScheduleResources>
            </SfSchedule>
            @code{
                public List<ResourceData> OwnerData { get; set; } = new List<ResourceData>
                {
                    new ResourceData{ Text = "Nancy", Id= 1, Color = "#df5286" },
                    new ResourceData{ Text = "Steven", Id= 2, Color = "#7fa900" }
                }
                public class ResourceData
                {
                    public int Id { get; set; }
                    public string Text { get; set; }
                    public string Color { get; set; }
                }
                public class AppointmentData
                {
                    public int Id { get; set; }
                    public string Subject { get; set; }
                    public DateTime StartTime { get; set; }
                    public DateTime EndTime { get; set; }
                    public int OwnerId { get; set; }
                }
            }
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleResources.ChildContent">
            <summary>
            Gets or sets the child content of schedule resources.
            </summary>
            <value>
            The value used to build the content.
            </value>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.ScheduleResources.Dispose(System.Boolean)">
            <summary>
            Dispose unmanaged resources in the Syncfusion Blazor component.
            </summary>
            <param name="disposing">Boolean value to dispose the object.</param>
        </member>
        <member name="T:Syncfusion.Blazor.Schedule.ScheduleTemplates">
            <summary>
            A class that represents the template configurations on <see cref="T:Syncfusion.Blazor.Schedule.SfSchedule`1"/> component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleTemplates.ChildContent">
            <summary>
            Gets or sets the child content of schedule templates.
            </summary>
            <value>
            The value used to build the content.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleTemplates.DateHeaderTemplate">
            <summary>
            Gets or sets the date header template for customizing the date header cells on the Scheduler.
            </summary>
            <value> 
            Accepts a template for the date header text in the Scheduler.
            </value>
            <example> 
            In the below code example, date header cells were customized using <c>DateHeaderTemplate</c> within <see cref="T:Syncfusion.Blazor.Schedule.ScheduleTemplates"/> tag directive. 
            <code><![CDATA[ 
            <SfSchedule>
                <ScheduleTemplates>
                    <DateHeaderTemplate>
                        @((context as TemplateContext).Date.ToString("dd ddd", CultureInfo.InvariantCulture))
                    </DateHeaderTemplate>
                </ScheduleTemplates>
            </SfSchedule>
            ]]></code> 
            </example> 
            <remarks> 
            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>, which is of type <see cref="T:Syncfusion.Blazor.Schedule.TemplateContext"/>. 
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleTemplates.DateRangeTemplate">
            <summary>
            Gets or sets the header date range template for customizing the header date range.
            </summary>
            <value> 
            Accepts a template for the header date range text in the Scheduler.
            </value>
            <example> 
            In the below code example, date range template has been rendered using <c>DateRangeTemplate</c> within <see cref="T:Syncfusion.Blazor.Schedule.ScheduleTemplates"/> tag directive. 
            <code><![CDATA[ 
            <SfSchedule>
                <ScheduleTemplates>
                    <DateRangeTemplate>
                        @((context as DateRangeTemplateContext).StartDate.ToString("dd ddd", CultureInfo.InvariantCulture))
                    </DateRangeTemplate>
                </ScheduleTemplates>
            </SfSchedule>
            ]]></code> 
            </example> 
            <remarks> 
            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>, which is of type <see cref="T:Syncfusion.Blazor.Schedule.DateRangeTemplateContext"/>. 
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleTemplates.DayHeaderTemplate">
            <summary>
            Gets or sets the day header template for customizing the day header cells on the scheduler year view.
            </summary>
            <value> 
            Accepts a template for the day header text in the scheduler year view.
            </value>
            <example> 
            In the below code example, day header cells were customized using <c>DayHeaderTemplate</c> within <see cref="T:Syncfusion.Blazor.Schedule.ScheduleTemplates"/> tag directive. 
            <code><![CDATA[ 
            <SfSchedule>
                <ScheduleTemplates>
                    <DayHeaderTemplate>
                        @((context as TemplateContext).Date.ToString("dd", CultureInfo.InvariantCulture))
                    </DayHeaderTemplate>
                </ScheduleTemplates>
            </SfSchedule>
            ]]></code> 
            </example> 
            <remarks> 
            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>, which is of type <see cref="T:Syncfusion.Blazor.Schedule.TemplateContext"/>. 
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleTemplates.MonthHeaderTemplate">
            <summary>
            Gets or sets the month header template for customizing the month header cells on the scheduler year view.
            </summary>
            <value> 
            Accepts a template for the month header text in the scheduler year view.
            </value>
            <example> 
            In the below code example, year view month header cells were customized using <c>MonthHeaderTemplate</c> within <see cref="T:Syncfusion.Blazor.Schedule.ScheduleTemplates"/> tag directive. 
            <code><![CDATA[ 
            <SfSchedule>
                <ScheduleTemplates>
                    <MonthHeaderTemplate>
                        @((context as TemplateContext).Date.ToString("MMMM yyyy", CultureInfo.InvariantCulture))
                    </MonthHeaderTemplate>
                </ScheduleTemplates>
            </SfSchedule>
            ]]></code> 
            </example>
            <remarks> 
            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>, which is of type <see cref="T:Syncfusion.Blazor.Schedule.TemplateContext"/>. 
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleTemplates.CellHeaderTemplate">
            <summary>
            Gets or sets the cell header template for customizing the work cells header on the scheduler.
            </summary>
            <value> 
            Accepts a template for the work cells header text in the scheduler.
            </value>
            <example> 
            In the below code example, cell header were customized using <c>CellHeaderTemplate</c> within <see cref="T:Syncfusion.Blazor.Schedule.ScheduleTemplates"/> tag directive. 
            <code><![CDATA[ 
            <SfSchedule>
                <ScheduleTemplates>
                    <CellHeaderTemplate>
                        @((context as TemplateContext).Date.ToString("dd", CultureInfo.InvariantCulture))
                    </CellHeaderTemplate>
                </ScheduleTemplates>
            </SfSchedule>
            ]]></code> 
            </example>
            <remarks> 
            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>, which is of type <see cref="T:Syncfusion.Blazor.Schedule.TemplateContext"/>.
            This template is applicable for Month, MonthAgenda, Year and TimelineYear views.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleTemplates.CellTemplate">
            <summary>
            Gets or sets the cell template for customizing the work cells on the scheduler.
            </summary>
            <value> 
            Accepts a template for the work cells in the scheduler.
            </value>
            <example> 
            In the below code example, work cells were customized using <c>CellTemplate</c> within <see cref="T:Syncfusion.Blazor.Schedule.ScheduleTemplates"/> tag directive. 
            <code><![CDATA[ 
            <SfSchedule>
                <ScheduleTemplates>
                    <CellTemplate>
                        <div class="templatewrap">
                            @if ((int)(context as TemplateContext).Date.Month == 11 && (int)(context as TemplateContext).Date.Day == 23)
                            {
                                <div class="caption">Thanksgiving day</div>
                            }
                            @if ((int)(context as TemplateContext).Date.Month == 12 && (int)(context as TemplateContext).Date.Day == 9)
                            {
                                <div class="caption">Party time</div>
                            }
                        </div>
                    </CellTemplate>
                </ScheduleTemplates>
            </SfSchedule>
            ]]></code> 
            </example>
            <remarks> 
            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>, which is of type <see cref="T:Syncfusion.Blazor.Schedule.TemplateContext"/>.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleTemplates.EditorTemplate">
            <summary>
            Gets or sets the editor template for customizing the editor window.
            </summary>
            <value>
            Accepts a template for the editor window.
            </value>
            <example>
            In the below code example, editor content were customized using <c>EditorTemplate</c> within <see cref="T:Syncfusion.Blazor.Schedule.ScheduleTemplates"/> tag directive. 
            <code><![CDATA[ 
            <SfSchedule>
                <ScheduleTemplates>
                    <EditorTemplate>
                        <table class="custom-event-editor" width="100%" cellpadding="5">
                            <tbody>
                                <tr>
                                    <td class="e-textlabel">Summary</td>
                                    <td colspan="4">
                                        <SfTextBox @bind-Value="@((context as AppointmentData).Subject)"></SfTextBox>
                                    </td>
                                </tr>
                                <tr>
                                    <td class="e-textlabel">From</td>
                                    <td colspan="4">
                                        <SfDateTimePicker @bind-Value="@((context as AppointmentData).StartTime)"></SfDateTimePicker>
                                    </td>
                                </tr>
                                <tr>
                                    <td class="e-textlabel">To</td>
                                    <td colspan="4">
                                        <SfDateTimePicker @bind-Value="@((context as AppointmentData).EndTime)"></SfDateTimePicker>
                                    </td>
                                </tr>
                            </tbody>
                        </div>
                    </EditorTemplate>
                </ScheduleTemplates>
            </SfSchedule>
            @code{
                public class AppointmentData
                {
                    public int Id { get; set; }
                    public string Subject { get; set; }
                    public DateTime StartTime { get; set; }
                    public DateTime EndTime { get; set; }
                }
            }
            ]]></code> 
            </example>
            <remarks> 
            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>, which is of type <see cref="T:Syncfusion.Blazor.Schedule.TemplateContext"/>.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleTemplates.EditorHeaderTemplate">
            <summary> 
            Gets or sets the <see cref="T:Microsoft.AspNetCore.Components.RenderFragment"/> for customizing the header of the editor window. 
            </summary> 
            <value> 
            Accepts a <see cref="T:Microsoft.AspNetCore.Components.RenderFragment"/> as a template for the header of the editor window. 
            </value> 
            <example> 
            In the below code example, editor header was customized using <c>EditorHeaderTemplate</c> within <see cref="T:Syncfusion.Blazor.Schedule.ScheduleTemplates"/> tag directive.  
            <code><![CDATA[  
            <SfSchedule> 
                <ScheduleTemplates> 
                    <EditorHeaderTemplate> 
                       @((context as AppointmentData).Subject) 
                    </EditorHeaderTemplate> 
                </ScheduleTemplates> 
            </SfSchedule> 
            @code{ 
                public class AppointmentData 
                { 
                    public int Id { get; set; } 
                    public string Subject { get; set; } 
                    public DateTime StartTime { get; set; } 
                    public DateTime EndTime { get; set; } 
                } 
            } 
            ]]></code>  
            </example> 
            <remarks> 
            The parameters passed to the templates can be accessed using an implicit parameter named <c>context</c>, which is of type <see cref="T:Syncfusion.Blazor.Schedule.SfSchedule`1"/> object.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleTemplates.EditorFooterTemplate">
            <summary> 
            Gets or sets the <see cref="T:Microsoft.AspNetCore.Components.RenderFragment"/> for customizing the footer of the editor window. 
            </summary> 
            <value> 
            Accepts a <see cref="T:Microsoft.AspNetCore.Components.RenderFragment"/> as a template for the footer of the editor window. 
            </value> 
            <example> 
            In the below code example, editor footer was customized using <c>EditorFooterTemplate</c> within <see cref="T:Syncfusion.Blazor.Schedule.ScheduleTemplates"/> tag directive.  
            <code><![CDATA[  
            <SfSchedule> 
                <ScheduleTemplates> 
                    <EditorFooterTemplate> 
                       <button id="saveButton" class="e-control e-btn e-primary" data-ripple="true">Save</button>
                    </EditorFooterTemplate> 
                </ScheduleTemplates> 
            </SfSchedule> 
            @code{ 
                public class AppointmentData 
                { 
                    public int Id { get; set; } 
                    public string Subject { get; set; } 
                    public DateTime StartTime { get; set; } 
                    public DateTime EndTime { get; set; } 
                } 
            } 
            ]]></code>  
            </example> 
            <remarks> 
            The parameters passed to the templates can be accessed using an implicit parameter named <c>context</c>, which is of type <see cref="T:Syncfusion.Blazor.Schedule.SfSchedule`1"/> object.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleTemplates.ResourceHeaderTemplate">
            <summary>
            Gets or sets the resource header template for customizing the resource header cells on the scheduler.
            </summary>
            <value> 
            Accepts a template for the resource cells in the scheduler.
            </value>
            <example> 
            In the below code example, resource cells were customized using <c>ResourceHeaderTemplate</c> within <see cref="T:Syncfusion.Blazor.Schedule.ScheduleTemplates"/> tag directive. 
            <code><![CDATA[ 
            <SfSchedule>
                <ScheduleGroup Resources="@Resources"></ScheduleGroup>
                <ScheduleTemplates>
                    <ResourceHeaderTemplate>
                        @{
                            var resourceData = (context as TemplateContext).ResourceData as ResourceData;
                            <div class='template-wrap'>
                                <div class="resource-name">@(resourceData.Text)</div>
                            </div>
                        }
                    </ResourceHeaderTemplate>
                </ScheduleTemplates>
            </SfSchedule>
            @code{
                string[] Resources { get; set; } = { "Conferences" };
                public class ResourceData
                {
                    public int Id { get; set; }
                    public string Text { get; set; }
                }
            }
            ]]></code> 
            </example>
            <remarks> 
            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>, which is of type <see cref="T:Syncfusion.Blazor.Schedule.TemplateContext"/>.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleTemplates.HeaderIndentTemplate">
            <summary>
            Gets or sets the header indent template for customizing the header indent bar on the scheduler.
            </summary>
            <value> 
            Accepts a template for the header indent bar in the scheduler.
            </value>
            <example> 
            In the below code example, header indent(element type should be of <see cref="F:Syncfusion.Blazor.Schedule.ElementType.EmptyCells"/>) were customized using <c>HeaderIndentTemplate</c> within <see cref="T:Syncfusion.Blazor.Schedule.ScheduleTemplates"/> tag directive. 
            <code><![CDATA[ 
            <SfSchedule>
                <ScheduleTemplates>
                    <HeaderIndentTemplate>
                        <div class='e-week-number'>@(GetWeekNumber((context as TemplateContext).Date))</div>
                    </HeaderIndentTemplate>
                </ScheduleTemplates>
            </SfSchedule>
            @code {
                public int GetWeekNumber(DateTime date)
                {
                    CultureInfo culture = CultureInfo.CurrentCulture;
                    return culture.Calendar.GetWeekOfYear(date, CalendarWeekRule.FirstFourDayWeek, DayOfWeek.Monday);
                }
            }
            ]]></code> 
            </example>
            <remarks> 
            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>, which is of type <see cref="T:Syncfusion.Blazor.Schedule.TemplateContext"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.ScheduleTemplates.Dispose(System.Boolean)">
            <summary>
            Dispose unmanaged resources in the Syncfusion Blazor component.
            </summary>
            <param name="disposing">Boolean value to dispose the object.</param>
        </member>
        <member name="T:Syncfusion.Blazor.Schedule.ScheduleTimeScale">
            <summary>
            A class that represents the time scale configurations on <see cref="T:Syncfusion.Blazor.Schedule.SfSchedule`1"/> component.
            </summary>
            <remarks>
            You can configure the time scale by specifying values for the corresponding properties.
            Timescale can be applied for Day, Week, WorkWeek, TimelineDay, TimelineWeek and TimelineWorkWeek views.
            </remarks>
            <example>
            The following code example shows how to configure the time scale:
            <code><![CDATA[
            <SfSchedule TValue="AppointmentData">
                <ScheduleTimeScale Enable="true" Interval="60" SlotCount="6"></ScheduleTimeScale>
            </SfSchedule>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleTimeScale.ChildContent">
            <summary>
            Gets or sets the child content of schedule timescale.
            </summary>
            <value>
            The value used to build the content.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleTimeScale.Enable">
            <summary>
            Gets or sets a value indicating whether the schedule should display the appointments accurately against the exact time duration.
            </summary>
            <value>
            If set to `false`, all the appointments of a day will be displayed one below the other. The default value is `true`.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleTimeScale.Interval">
            <summary>
            Gets or sets the time duration on which the time axis should be displayed, either in 1 hour or 30 minutes intervals, etc.
            </summary>
            <value>
            The interval value in minutes. The default value is `60`.
            </value>
            <remarks>
            This property will have an effect when the <see cref="P:Syncfusion.Blazor.Schedule.ScheduleTimeScale.Enable"/> property is set to `true`.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleTimeScale.MajorSlotTemplate">
            <summary>
            Gets or sets template as a <see cref="T:Microsoft.AspNetCore.Components.RenderFragment`1"/> that defines custom appearance for displaying the major time slot cells.
            </summary>
            <value>
            A template content that specifies the visualization of major time slot cells. The default value is `null`.
            </value>
            <remarks>
            The time details can be accessed within this template.
            This property will have an effect when the <see cref="P:Syncfusion.Blazor.Schedule.ScheduleTimeScale.Enable"/> property is set to `true`.
            </remarks>
            <example>
            <code><![CDATA[
            <SfSchedule TValue="AppointmentData">
                <ScheduleTimeScale>
                    <MajorSlotTemplate>
                        <div>@(GetMajorSlotTemplate((context as TemplateContext).Date))</div>
                    </MajorSlotTemplate>
                </ScheduleTimeScale>
            </SfSchedule>
            @code{
                public static string GetMajorSlotTemplate(DateTime date)
                {
                    return date.ToString("hh", CultureInfo.InvariantCulture);
                }
            }
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleTimeScale.MinorSlotTemplate">
            <summary>
            Gets or sets template as a <see cref="T:Microsoft.AspNetCore.Components.RenderFragment`1"/> that defines custom appearance for displaying the minor time slot cells.
            </summary>
            <value>
            A template content that specifies the visualization of minor time slot cells. The default value is `null`.
            </value>
            <remarks>
            The time details can be accessed within this template.
            This property will have an effect when the <see cref="P:Syncfusion.Blazor.Schedule.ScheduleTimeScale.Enable"/> property is set to `true`.
            </remarks>
            <example>
            <code><![CDATA[
            <SfSchedule TValue="AppointmentData">
                <ScheduleTimeScale>
                    <MinorSlotTemplate>
                        <div style="text-align: right; margin-right: 15px">@(GetMinorSlotTemplate((context as TemplateContext).Date))</div>
                    </MinorSlotTemplate>
                </ScheduleTimeScale>
            </SfSchedule>
            @code{
                public static string GetMinorSlotTemplate(DateTime date)
                {
                    return date.ToString("mm", CultureInfo.InvariantCulture);
                }
            }
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleTimeScale.SlotCount">
            <summary>
            Gets or sets the number of slots to be split for the specified time interval duration.
            </summary>
            <value>
            The number of slots to be split. The default value is `2`.
            </value>
            <remarks>
            This property will have an effect when the <see cref="P:Syncfusion.Blazor.Schedule.ScheduleTimeScale.Enable"/> property is set to `true`.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.ScheduleTimeScale.Dispose(System.Boolean)">
            <summary>
            Dispose unmanaged resources in the Syncfusion Blazor component.
            </summary>
            <param name="disposing">Boolean value to dispose the object.</param>
        </member>
        <member name="T:Syncfusion.Blazor.Schedule.ScheduleView">
            <summary>
            Configures the view-specific settings on scheduler.
            </summary>
            <summary>
            A class that represents the view-specific settings on the <see cref="T:Syncfusion.Blazor.Schedule.SfSchedule`1"/> component.
            </summary>
            <remarks>
            You can configure the collection of schedule views by specifying values for the corresponding properties with in the <see cref="T:Syncfusion.Blazor.Schedule.ScheduleViews"/> tag directive.
            </remarks>
            <example>
            The following code example shows how to configure the views in scheduler:
            <code><![CDATA[
            <SfSchedule TValue="AppointmentData">
                <ScheduleViews>
                    <ScheduleView Option="View.Day"></ScheduleView>
                    <ScheduleView Option="View.Week"></ScheduleView>
                    <ScheduleView Option="View.WorkWeek"></ScheduleView>
                    <ScheduleView Option="View.Month"></ScheduleView>
                </ScheduleViews>
            </SfSchedule>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleView.ChildContent">
            <summary>
            Gets or sets the child content for schedule view.
            </summary>
            <value>
            The value used to build the content.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleView.AllowVirtualScrolling">
            <summary>
            Gets or sets a value indicating whether to allow the virtual scrolling functionality.
            </summary>
            <value>
            `true` to enable virtual scrolling. The default value is `false`.
            </value>
            <remarks>
            This property is applicable only when resource grouping is enabled, and in agenda view resource grouping should be disabled.
            It is mandatory to set the <see cref="P:Syncfusion.Blazor.Schedule.SfSchedule`1.Height"/> property for schedule, when enable <c>AllowVirtualScrolling</c> property.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleView.EnableVirtualMask">
            <summary>
            Gets or sets the virtual mask to the work cells for virtual scrolling actions.
            </summary>
            <value>
            `true` to enable virtual mask. The default value is `false`.
            </value>
            <example>
            <code><![CDATA[
            <SfSchedule TValue="EventData" Width="100%" Height="600px">
               <ScheduleGroup Resources="@GroupData"></ScheduleGroup>
               <ScheduleResources>
                   <ScheduleResource TItem = "ResourceData" TValue="int[]" DataSource="@ResourceDatasource" Field="ResourceId" Title="Resource" Name="Resources" TextField="Text" IdField="Id" ColorField="Color" AllowMultiple="true"></ScheduleResource>
               </ScheduleResources>
               <ScheduleViews>
                   <ScheduleView Option="View.TimelineMonth" AllowVirtualScrolling="true" EnableVirtualMask="true"></ScheduleView>
               </ScheduleViews>
            </SfSchedule>
            ]]></code>
            </example>
            <remarks>
            This property is applicable only when <see cref="P:Syncfusion.Blazor.Schedule.ScheduleView.AllowVirtualScrolling"/> property is enabled.
            The Virtual Mask allows it to render only work cells visible within the view-port without buffering the entire resource collection. Here, same set of DOM elements is re-used to improve the performance. In this feature, a loading placeholder indicator was shown while loading the new data.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleView.EnableLazyLoading">
            <summary>
            Gets or sets whether to enable the lazy loading of events for virtual scrolling actions.
            </summary>
            <value>
            `true` to enable lazy loading of appointments. The default value is `false`.
            </value>
            <example>
            <code><![CDATA[
            <SfSchedule TValue="EventData" Width="100%" Height="600px">
               <ScheduleGroup Resources="@GroupData"></ScheduleGroup>
               <ScheduleResources>
                   <ScheduleResource TItem = "ResourceData" TValue="int[]" DataSource="@ResourceDatasource" Field="ResourceId" Title="Resource" Name="Resources" TextField="Text" IdField="Id" ColorField="Color" AllowMultiple="true"></ScheduleResource>
               </ScheduleResources>
               <ScheduleViews>
                   <ScheduleView Option="View.TimelineMonth" AllowVirtualScrolling="true" EnableLazyLoading="true"></ScheduleView>
               </ScheduleViews>
            </SfSchedule>
            ]]></code>
            </example>
            <remarks>
            Lazy loading allows the scheduler to fetch the appointments dynamically during scroll actions for the currently rendered resource collection.
            New data is fetched on-demand as the user scrolls through the schedule content. This helps to improve the scheduler's performance, when loading a large number of appointments.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleView.VirtualResourceCount">
            <summary>
            Gets or sets the number of resources to be renders only in the content viewport.
            </summary>
            <value>
            Accepts a value of integer type. The default value is `null`.
            </value>
            <example>
            <code><![CDATA[
            <SfSchedule TValue="EventData" Height="550px">
               <ScheduleGroup Resources="@GroupData"></ScheduleGroup>
               <ScheduleResources>
                   <ScheduleResource TItem = "ResourceData" TValue="int[]" DataSource="@ResourceDatasource" Field="ResourceId" Title="Resource" Name="Resources" TextField="Text" IdField="Id" ColorField="Color" AllowMultiple="true"></ScheduleResource>
               </ScheduleResources>
               <ScheduleViews>
                   <ScheduleView Option="View.TimelineMonth" AllowVirtualScrolling="true" VirtualResourceCount="20"></ScheduleView>
               </ScheduleViews>
            </SfSchedule>
            ]]></code>
            </example>
            <remarks>
            <see cref="P:Syncfusion.Blazor.Schedule.ScheduleView.VirtualResourceCount"/> property is only applicable for resources virtual scrolling in timeline views. If this property value is not set, then the number of resources to be displayed in the scheduler is determined implicitly by height of the content area. The provided count must be two times larger than the number of visible resources in the scheduler.
            </remarks>
            <seealso cref="P:Syncfusion.Blazor.Schedule.ScheduleView.AllowVirtualScrolling">To enable virtual scrolling</seealso>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleView.CellHeaderTemplate">
            <summary>
            Gets or sets the cell header template for customizing the work cells header on the scheduler.
            </summary>
            <value> 
            Accepts a template for the work cells header text in the scheduler.
            </value>
            <example> 
            <code><![CDATA[ 
            <SfSchedule>
                <ScheduleViews>
                    <ScheduleView Option="View.Month">
                        <CellHeaderTemplate>
                            @((context as TemplateContext).Date.ToString("dd", CultureInfo.InvariantCulture))
                        </CellHeaderTemplate>
                    </ScheduleView>
                </ScheduleViews>
            </SfSchedule>
            ]]></code> 
            </example>
            <remarks> 
            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>, which is of type <see cref="T:Syncfusion.Blazor.Schedule.TemplateContext"/>.
            This template is applicable for Month, MonthAgenda, Year and TimelineYear views.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleView.CellTemplate">
            <summary>
            Gets or sets the cell template for customizing the work cells on the scheduler.
            </summary>
            <value> 
            Accepts a template for the work cells in the scheduler.
            </value>
            <example>
            <code><![CDATA[ 
            <SfSchedule>
                <ScheduleViews>
                    <ScheduleView Option="View.Month">
                        <CellTemplate>
                            <div class="templatewrap">
                                @if ((int)(context as TemplateContext).Date.Month == 11 && (int)(context as TemplateContext).Date.Day == 23)
                                {
                                    <div class="caption">Thanksgiving day</div>
                                }
                                @if ((int)(context as TemplateContext).Date.Month == 12 && (int)(context as TemplateContext).Date.Day == 9)
                                {
                                    <div class="caption">Party time</div>
                                }
                            </div>
                        </CellTemplate>
                    </ScheduleView>
                </ScheduleViews>
            </SfSchedule>
            ]]></code> 
            </example>
            <remarks> 
            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>, which is of type <see cref="T:Syncfusion.Blazor.Schedule.TemplateContext"/>.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleView.DateFormat">
            <summary>
            Gets or sets the date format that should be applied on header date range label and also in editor window.
            </summary>
            <value>
            Accepts a string value to set specific date format. By default <c>DateFormat</c> is applied based on the current culture.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleView.DateRangeTemplate">
            <summary> 
            Gets or sets the header date range template to customize header date range. 
            </summary>
            <value> 
            Accepts the template of the header date range text in the Scheduler.
            </value>
            <example> 
            In the below code example, a date range template has been rendered using <see cref="P:Syncfusion.Blazor.Schedule.ScheduleView.DateRangeTemplate"/> within <see cref="T:Syncfusion.Blazor.Schedule.ScheduleViews"/> tag directive. 
            <code><![CDATA[ 
            <SfSchedule>
                <ScheduleViews>
                    <ScheduleView Option="View.Week">
                        <DateRangeTemplate>
                            @((context as DateRangeTemplateContext).StartDate.ToString("dd ddd", CultureInfo.InvariantCulture))
                        </DateRangeTemplate>
                    </ScheduleView>
                </ScheduleViews>
            </SfSchedule>
            ]]></code> 
            </example> 
            <remarks> 
            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>. 
            The context is of type <see cref="T:Syncfusion.Blazor.Schedule.DateRangeTemplateContext"/>. 
            </remarks> 
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleView.DateHeaderTemplate">
            <summary>
            Gets or sets the date header template for customizing the date header cells on the Scheduler.
            </summary>
            <value> 
            Accepts a template for the date header text in the Scheduler.
            </value>
            <example> 
            <code><![CDATA[ 
            <SfSchedule>
                <ScheduleViews>
                    <ScheduleView Option="View.Week">
                        <DateHeaderTemplate>
                            @((context as TemplateContext).Date.ToString("dd ddd", CultureInfo.InvariantCulture))
                        </DateHeaderTemplate>
                    </ScheduleView>
                </ScheduleViews>
            </SfSchedule>
            ]]></code> 
            </example> 
            <remarks> 
            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>, which is of type <see cref="T:Syncfusion.Blazor.Schedule.TemplateContext"/>. 
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleView.DayHeaderTemplate">
            <summary>
            Gets or sets the day header template for customizing the day header cells on the scheduler year view.
            </summary>
            <value> 
            Accepts a template for the day header text in the scheduler year view.
            </value>
            <example> 
            <code><![CDATA[ 
            <SfSchedule>
                <ScheduleViews>
                    <ScheduleView Option="View.Year">
                        <DayHeaderTemplate>
                            @((context as TemplateContext).Date.ToString("dd", CultureInfo.InvariantCulture))
                        </DayHeaderTemplate>
                    </ScheduleView>
                </ScheduleViews>
            </SfSchedule>
            ]]></code> 
            </example> 
            <remarks>
            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>, which is of type <see cref="T:Syncfusion.Blazor.Schedule.TemplateContext"/>. 
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleView.HeaderIndentTemplate">
            <summary>
            Gets or sets the header indent template for customizing the header indent bar on the scheduler.
            </summary>
            <value> 
            Accepts a template for the header indent bar in the scheduler.
            </value>
            <example> 
            <code><![CDATA[ 
            <SfSchedule>
                <ScheduleViews>
                    <ScheduleView Option="View.Week">
                        <HeaderIndentTemplate>
                            <div class='e-week-number'>@(GetWeekNumber((context as TemplateContext).Date))</div>
                        </HeaderIndentTemplate>
                    </ScheduleView>
                </ScheduleViews>
            </SfSchedule>
            @code {
                public int GetWeekNumber(DateTime date)
                {
                    CultureInfo culture = CultureInfo.CurrentCulture;
                    return culture.Calendar.GetWeekOfYear(date, CalendarWeekRule.FirstFourDayWeek, DayOfWeek.Monday);
                }
            }
            ]]></code>
            </example>
            <remarks>
            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>, which is of type <see cref="T:Syncfusion.Blazor.Schedule.TemplateContext"/>.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleView.DisplayName">
            <summary>
            Gets or sets the display name for customized views in the schedule toolbar.
            </summary>
            <value>
            Accepts a string value. The default value is `null`.
            </value>
            <example> 
            <code><![CDATA[ 
            <SfSchedule>
                <ScheduleViews>
                    <ScheduleView Option="View.Week" Interval="2" DisplayName="2Weeks"></ScheduleView>
                    <ScheduleView Option="View.Week" Interval="3" DisplayName="3Weeks"></ScheduleView>
                </ScheduleViews>
            </SfSchedule>
            ]]></code> 
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleView.EndHour">
            <summary>
            Gets or sets the time string in short skeleton format `HH:mm`, which represents the end of the schedule hour.
            </summary>
            <value>
            A string value representing the time. The default value is `24:00`.
            </value>
            <remarks>
            The time beyond the specified end time is hidden when this property is used.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleView.EventTemplate">
            <summary>
            Gets or sets template as a <see cref="T:Microsoft.AspNetCore.Components.RenderFragment"/> that defines custom appearance for displaying scheduler events.
            </summary>
            <value>
            A template content that specifies the visualization of a scheduler event. The default value is <c>null</c>.
            </value>
            <example>
            <code><![CDATA[
            <SfSchedule TValue="AppointmentData">
                <ScheduleViews>
                    <ScheduleView Option="View.Week">
                        <EventTemplate>
                            <div>Subject: @((context as AppointmentData).Subject)</div>
                            <div>StartTime: @((context as AppointmentData).StartTime)</div>
                            <div>EndTime:  @((context as AppointmentData).EndTime)</div>
                        </EventTemplate>
                    </ScheduleView>
                </ScheduleViews>
                <ScheduleEventSettings TValue="AppointmentData" DataSource="@DataSource"></ScheduleEventSettings>
            </SfSchedule>
            @code{
                List<AppointmentData> DataSource = new List<AppointmentData>
                {
                    new AppointmentData { Id = 1, Subject = "Meeting", StartTime = DateTime.Today.Date.AddHours(9).AddMinutes(30), EndTime = DateTime.Today.Date.AddHours(11) }
                };
                public class AppointmentData
                {
                    public int Id { get; set; }
                    public string Subject { get; set; }
                    public string Location { get; set; }
                    public DateTime StartTime { get; set; }
                    public DateTime EndTime { get; set; }
                }
            }
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleView.FirstDayOfWeek">
            <summary>
            Gets or sets the first day of the week.
            </summary>
            <value>
            An integer value representing the first day of the week., By default `0` value is set which is denoted as Sunday.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleView.NumberOfWeeks">
            <summary>
            Gets or sets the number of weeks that is shown in the month view.
            </summary>
            <value>
            The number of weeks shown in the month view. The default is derived from number of weeks in current month.
            </value>
            <remarks>
            <see cref="P:Syncfusion.Blazor.Schedule.ScheduleView.NumberOfWeeks"/> property is only applicable for month view. Use DisplayDate property to customize the starting week of month.
            </remarks>
            <example>
            <code><![CDATA[
            <SfSchedule TValue="AppointmentData">
                <ScheduleViews>
                   <ScheduleView Option="View.Month" NumberOfWees="6"></ScheduleView>
               </ScheduleViews>
            </SfSchedule>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleView.DisplayDate">
            <summary>
            Gets or sets the starting week date at an initial rendering of month view.
            </summary>
            <value>
            It accepts <see cref="T:System.DateTime"/> value. The default value is `null`.
            </value>
            <remarks>
            <see cref="P:Syncfusion.Blazor.Schedule.ScheduleView.DisplayDate"/> property is only applicable for month view. If this property value is not set, then the month view will be rendered from the first week of the month.
            </remarks>
            <example>
            <code><![CDATA[
            <SfSchedule TValue="AppointmentData">
                <ScheduleViews>
                   <ScheduleView Option="View.Month" NumberOfWees="6" DisplayDate="new DateTime(2021, 11, 17)"></ScheduleView>
               </ScheduleViews>
            </SfSchedule>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleView.FirstMonthOfYear">
            <summary>
            Gets or sets the first month of the year.
            </summary>
            <value>
            An integer value representing the month. The default value is `1`, which denotes January.
            </value>
            <remarks>
            The value `1` denotes January, `2` denotes February and so on.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleView.HeaderRows">
            <summary>
            Gets or sets a collection of custom header rows to display the year, month, week, date and hour label as an individual row on the timeline view of the scheduler.
            </summary>
            <value>
            Accepts a collection <see cref="T:Syncfusion.Blazor.Schedule.HeaderRowsModel"/>.
            </value>
            <example>
            <code><![CDATA[
            <SfSchedule TValue="AppointmentData">
                <ScheduleViews>
                   <ScheduleView Option="View.TimelineWeek">
                        <ScheduleHeaderRows>
                            <ScheduleHeaderRow Option="HeaderRowType.Week">
                                <Template>
                                    <div class="week-text">Week: @(GetWeekText((context as TemplateContext).Date))</div>
                                </Template>
                            </ScheduleHeaderRow>
                            <ScheduleHeaderRow Option="HeaderRowType.Date"></ScheduleHeaderRow>
                        </ScheduleHeaderRows>
                    </ScheduleView>
               </ScheduleViews>
            </SfSchedule>
            @code {
                public static string GetWeekText(DateTime date)
                {
                    return CultureInfo.InvariantCulture.Calendar.GetWeekOfYear(date, CalendarWeekRule.FirstFourDayWeek, DayOfWeek.Monday).ToString();
                }
            }
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleView.Interval">
            <summary>
            Gets or sets the number of days, weeks, workweeks or months on the defined view type.
            </summary>
            <value>
            Accepts an integer value. The default value is `1`.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleView.IsSelected">
            <summary>
            Gets or sets whether the view specified in the <see cref="P:Syncfusion.Blazor.Schedule.ScheduleView.Option"/> is active or not.
            </summary>
            <value>
            `true`, to set the view as active view to be rendered on the scheduler. The default value is `false`.
            </value>
            <remarks>
            This property will similar to the <see cref="P:Syncfusion.Blazor.Schedule.SfSchedule`1.CurrentView"/> property, which sets the active view of the scheduler.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleView.MonthHeaderTemplate">
            <summary>
            Gets or sets the month header template for customizing the month header cells on the scheduler year view.
            </summary>
            <value> 
            Accepts a template for the month header text in the scheduler year view.
            </value>
            <example> 
            <code><![CDATA[ 
            <SfSchedule>
                <ScheduleViews>
                    <ScheduleView Option="View.TimelineYear">
                        <MonthHeaderTemplate>
                            @((context as TemplateContext).Date.ToString("MMMM yyyy", CultureInfo.InvariantCulture))
                        </MonthHeaderTemplate>
                    </ScheduleView>
                </ScheduleViews>
            </SfSchedule>
            ]]></code> 
            </example>
            <remarks> 
            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>, which is of type <see cref="T:Syncfusion.Blazor.Schedule.TemplateContext"/>. 
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleView.Option">
            <summary>
            Gets or sets the name of the schedule view, which determines its related properties.
            </summary>
            <value>
            One of the <see cref="T:Syncfusion.Blazor.Schedule.View"/> enumeration.
            </value>
            <remarks>
            Depending on the value of <c>View</c>, the following views will be rendered:
            <list type="bullet">
            <item><c>Day</c></item>
            <item><c>Week</c></item>
            <item><c>WorkWeek</c></item>
            <item><c>Month</c></item>
            <item><c>Agenda</c></item>
            <item><c>MonthAgenda</c></item>
            <item><c>Year</c></item>
            <item><c>TimelineDay</c></item>
            <item><c>TimelineWeek</c></item>
            <item><c>TimelineWorkWeek</c></item>
            <item><c>TimelineMonth</c></item>
            <item><c>TimelineYear</c></item>
            </list>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleView.Orientation">
            <summary>
            Gets or sets whether the timeline year view rendering orientation on the schedule should be horizontal or vertical.
            </summary>
            <value>
            One of the <see cref="T:Syncfusion.Blazor.Schedule.Orientation"/> enumeration. The default value is <see cref="F:Syncfusion.Blazor.Schedule.Orientation.Horizontal"/>. 
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleView.Readonly">
            <summary>
            Gets or sets a value whether the scheduler view is set to read-only.
            </summary>
            <value>
            If set to `true`, the scheduler will be read-only. The default value is `false`
            </value>
            <remarks>
            When read-only is enabled, the quickpopup in cells will be prevented and CRUD operations will not be possible in the scheduler. 
            Only the specified view will be set to read-only.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleView.ResourceHeaderTemplate">
            <summary>
            Gets or sets the resource header template for customizing the resource header cells on the scheduler.
            </summary>
            <value> 
            Accepts a template for the resource cells in the scheduler.
            </value>
            <example> 
            <code><![CDATA[ 
            <SfSchedule>
                <ScheduleGroup Resources="@Resources"></ScheduleGroup>
                <ScheduleViews>
                    <ScheduleView Option="View.TimelineYear">
                        <ResourceHeaderTemplate>
                            @{
                                var resourceData = (context as TemplateContext).ResourceData as ResourceData;
                                <div class='template-wrap'>
                                    <div class="resource-name">@(resourceData.Text)</div>
                                </div>
                            }
                        </ResourceHeaderTemplate>
                    </ScheduleView>
                </ScheduleViews>
            </SfSchedule>
            @code{
                string[] Resources { get; set; } = { "Conferences" };
                public class ResourceData
                {
                    public int Id { get; set; }
                    public string Text { get; set; }
                }
            }
            ]]></code> 
            </example>
            <remarks> 
            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>, which is of type <see cref="T:Syncfusion.Blazor.Schedule.TemplateContext"/>.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleView.ShowWeekNumber">
            <summary>
            Gets or sets the week number of the current view date range is displayed.
            </summary>
            <value>
            If set to `true`, the week number will be shown. The default value is `false`.
            </value>
            <remarks>
            This property has an effect on Day, Week, WorkWeek, Month and Year views of scheduler.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleView.ShowWeekend">
            <summary>
            Gets or sets whether non-working days are hidden from the scheduler.
            </summary>
            <value>
            If set to `false`, weekend days will be hidden. The default value is `true`.
            </value>
            <remarks>
            Days that are not defined in the <see cref="P:Syncfusion.Blazor.Schedule.ScheduleView.WorkDays"/> property are typically treated as weekend days.
            This property has no effect on the WorkWeek, Year and TimelineYear views.
            For example, if the working days are defined as `new int[] { 1, 3, 5 }`, the remaining days of that week will be considered as weekend days and will not be rendered if this property is set to `false`.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleView.StartHour">
            <summary>
            Gets or sets the time string in short skeleton format `HH:mm`, which represents the start of the schedule hour.
            </summary>
            <value>
            A string value representing the time. The default value is `00:00`.
            </value>
            <remarks>
            The time before the specified start time is hidden when this property is used.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleView.WorkDays">
            <summary>
            Gets or sets the working days on the schedule.
            </summary>
            <value>
            An array of integer values based on the <see cref="T:System.DayOfWeek"/> enumeration.
            </value>
            <example>
            In below code example Monday, Wednesday and Friday were set as workdays for week view.
            <code><![CDATA[
            <SfSchedule TValue="AppointmentData">
                <ScheduleViews>
                   <ScheduleView Option="View.Week" WorkDays="new int[] { 1, 3, 5 }"></ScheduleView>
               </ScheduleViews>
            </SfSchedule>
            ]]></code>
            </example>
            <remarks>
            The defined days in the collection will be rendered in the `WorkWeek` view. In other views, all usual days will be displayed, and working days will be highlighted with a different shade.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleView.MaxEventsPerRow">
            <summary>
            Gets or sets the maximum number of events that will be rendered in a row when the <see cref="P:Syncfusion.Blazor.Schedule.SfSchedule`1.EnableAutoRowHeight"/> property is disabled.
            </summary>
            <value>
            An integer value representing the maximum number of events. The default value is `1`.
            </value>
        </member>
        <member name="T:Syncfusion.Blazor.Schedule.ScheduleViewGroup">
            <summary>
            A class that represents the view-specific resource grouping related configurations by rendering <c>ScheduleViewGroup</c> as child content in <see cref="T:Syncfusion.Blazor.Schedule.ScheduleView"/> tag.
            </summary>
            <remarks>
            You can configure the view wise resource grouping by specifying values for the corresponding properties.
            </remarks>
            <example>
            The following code example shows how to configure the view wise resource grouping
            <code><![CDATA[
            <SfSchedule TValue="AppointmentData">
                <ScheduleResources>
                    <ScheduleResource TItem="ResourceData" TValue="int" DataSource="@RoomData" Field="RoomId" Title="Room" Name="Rooms" TextField="Text" IdField="Id"></ScheduleResource>
                    <ScheduleResource TItem="ResourceData" TValue="int[]" DataSource="@OwnersData" Field="OwnerId" Title="Owner" Name="Owners" TextField="Text" IdField="Id" GroupIDField="OwnerGroupId" AllowMultiple="true"></ScheduleResource>
                </ScheduleResources>
                <ScheduleViews>
                    <ScheduleView Option="View.Day">
                        <ScheduleViewGroup Resources="@Resources" ByDate="false" EnableCompactView="false"></ScheduleViewGroup>
                    </ScheduleView>
                    <ScheduleView Option="View.Week">
                        <ScheduleViewGroup Resources="@Resources" ByDate="true"></ScheduleViewGroup>
                    </ScheduleView>
                    <ScheduleView Option="View.WorkWeek"></ScheduleView>
                </ScheduleViews>
            </SfSchedule>
            @code {
                string[] Resources { get; set; } = { "Rooms", "Owners" };
                public List<ResourceData> RoomData { get; set; } = new List<ResourceData>
                {
                    new ResourceData{ Text = "ROOM 1", Id = 1 },
                    new ResourceData{ Text = "ROOM 2", Id = 2 }
                };
                public List<ResourceData> OwnersData { get; set; } = new List<ResourceData>
                {
                    new ResourceData{ Text = "Nancy", Id = 1, OwnerGroupId = 1 },
                    new ResourceData{ Text = "Steven", Id = 2, OwnerGroupId = 2 }
                };
                public class AppointmentData
                {
                    public int Id { get; set; }
                    public string Subject { get; set; }
                    public DateTime StartTime { get; set; }
                    public DateTime EndTime { get; set; }
                    public int OwnerId { get; set; }
                    public int RoomId { get; set; }
                }
                public class ResourceData
                {
                    public int Id { get; set; }
                    public string Text { get; set; }
                    public int OwnerGroupId { get; set; }
                }
            }
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleViewGroup.ChildContent">
            <summary>
            Gets or sets the child content of schedule group.
            </summary>
            <value>
            The value used to build the content.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleViewGroup.AllowGroupEdit">
            <summary>
            Gets or sets whether the group editing is enabled in the scheduler.
            </summary>
            <value>
            Set to `true` to treat multiple resources as a single appointment object in the scheduler's dataSource. The default value is `false`
            </value>
            <remarks>
            Group editing is performed on multiple resources based on the <see cref="P:Syncfusion.Blazor.Schedule.ScheduleField.Id"/> value on appointments.
            It is mandatory to group the resources as an array type and map them to the appointment data's resource field.
            </remarks>
            <example>
            <code><![CDATA[
            <SfSchedule TValue="AppointmentData">
                <ScheduleResources>
                    <ScheduleResource TItem="ResourceData" TValue="int[]" DataSource="@OwnersData" Field="OwnerId" Title="Owner" Name="Owners" TextField="Text" IdField="Id" GroupIDField="OwnerGroupId" AllowMultiple="true"></ScheduleResource>
                </ScheduleResources>
                <ScheduleViews>
                    <ScheduleView Option="View.Week">
                        <ScheduleViewGroup Resources="@Resources" AllowGroupEdit="true"></ScheduleViewGroup>
                    </ScheduleView>
                </ScheduleViews>
            </SfSchedule>
            @code {
                string[] Resources { get; set; } = { "Owners" };
                public List<ResourceData> OwnersData { get; set; } = new List<ResourceData>
                {
                    new ResourceData{ Text = "Nancy", Id = 1 },
                    new ResourceData{ Text = "Steven", Id = 2 }
                };
                public class AppointmentData
                {
                    public int Id { get; set; }
                    public string Subject { get; set; }
                    public DateTime StartTime { get; set; }
                    public DateTime EndTime { get; set; }
                    public int[] OwnerId { get; set; }
                }
                public class ResourceData
                {
                    public int Id { get; set; }
                    public string Text { get; set; }
                }
            }
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleViewGroup.ByDate">
            <summary>
            Gets or sets whether to group resources under each date.
            </summary>
            <value>
            Set to `true` to group resources by date, where each day will render all the resource names under it. The default value is `false`.
            </value>
            <remarks>
            This property is applicable only for Day, Week, WorkWeek, Month and Agenda Views.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleViewGroup.ByGroupID">
            <summary>
            Gets or sets whether to render the resource hierarchy based on the value mapped to <see cref="P:Syncfusion.Blazor.Schedule.ScheduleResource`2.GroupIDField"/>.
            </summary>
            <value>
            Set to `false` to map all the resources in the child collection to each available parent. The default value is `true`.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleViewGroup.EnableCompactView">
            <summary>
            Gets or sets whether to display the resource grouping layout in normal or compact mode on mobile devices.
            </summary>
            <value>
            Set to `false` to display the default grouping layout on mobile devices, with scrolling enabled. The default value is `false`.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleViewGroup.HeaderTooltipTemplate">
            <summary>
            Gets or sets template as a <see cref="T:Microsoft.AspNetCore.Components.RenderFragment`1"/> that defines custom appearance for displaying the resource header tooltip.
            </summary>
            <value>
            A template content that specifies the visualization of resource header tooltip. By default, no tooltip will be displayed on resource header.
            </value>
            <example>
            <code><![CDATA[
            <SfSchedule TValue="AppointmentData">
                <ScheduleViews>
                    <ScheduleView Option="View.Day">
                        <ScheduleViewGroup Resources="@Resources">
                            <HeaderTooltipTemplate>
                            @{
                                var resourceData = (context as TemplateContext).ResourceData as ResourceData;
                                <div class='template-wrap'>
                                    <div class="resource-name">@(resourceData.Text)</div>
                                </div>
                            }
                            </HeaderTooltipTemplate>
                        </ScheduleViewGroup>
                    </ScheduleView>
                    <ScheduleView Option="View.Week"></ScheduleView>
                    <ScheduleView Option="View.WorkWeek"></ScheduleView>
                </ScheduleViews>
            </SfSchedule>
            @code{
                string[] Resources { get; set; } = { "Conferences" };
                public class ResourceData
                {
                    public int Id { get; set; }
                    public string Image { get; set; }
                    public string Text { get; set; }
                }
            }
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleViewGroup.HideNonWorkingDays">
            <summary> 
            Gets or sets whether to show/hide the non-working days. 
            </summary> 
            <value> 
            true, to hide the non-working days. The default value is `false`. 
            </value>
            <remarks> 
            This property is applicable, only when <see cref="P:Syncfusion.Blazor.Schedule.ScheduleViewGroup.ByDate" /> property is enabled.
            </remarks> 
            <example>
            <code><![CDATA[ 
            <SfSchedule>
                <ScheduleViews>
                    <ScheduleView Option="View.Week">
                        <ScheduleViewGroup ByDate="true" HideNonWorkingDays="true"></ScheduleViewGroup>
                    </ScheduleView>
                </SheduleViews>
            </SfSchedule>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleViewGroup.Resources">
            <summary>
            Gets or sets the collection of resource names assigned to each resources, which determines the grouping order in the scheduler.
            </summary>
            <value>
            The collection should be an array of strings. The default value is `null`.
            </value>
            <remarks>
            If this property is set to `null`, grouping will be disabled and the scheduler will be rendered without grouping.
            </remarks>
        </member>
        <member name="T:Syncfusion.Blazor.Schedule.ScheduleViews">
            <summary>
            Represents a collection of <see cref="T:Syncfusion.Blazor.Schedule.ScheduleView"/>.
            </summary>
            <remarks>
            To generate dynamic <see cref="T:Syncfusion.Blazor.Schedule.ScheduleView"/> based on collection, use <c>@foreach</c> directive within <see cref="T:Syncfusion.Blazor.Schedule.ScheduleViews"/> tag.
            </remarks>
            <example>
            <code><![CDATA[
            <SfSchedule TValue="AppointmentData">
                <ScheduleViews>
                    <ScheduleView Option="View.Day"></ScheduleView>
                    <ScheduleView Option="View.Week"></ScheduleView>
                    <ScheduleView Option="View.WorkWeek"></ScheduleView>
                    <ScheduleView Option="View.Month"></ScheduleView>
                    <ScheduleView Option="View.Agenda"></ScheduleView>
                </ScheduleViews>
            </SfSchedule>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleViews.ChildContent">
            <summary>
            Gets or sets the child content of schedule views.
            </summary>
            <value>
            The value used to build the content.
            </value>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.ScheduleViews.Dispose(System.Boolean)">
            <summary>
            Dispose unmanaged resources in the Syncfusion Blazor component.
            </summary>
            <param name="disposing">Boolean value to dispose the object.</param>
        </member>
        <member name="T:Syncfusion.Blazor.Schedule.ScheduleViewTimeScale">
            <summary>
            A class that represents the view-specific time scale configurations by rendering <c>ScheduleViewTimeScale</c> as child content in <see cref="T:Syncfusion.Blazor.Schedule.ScheduleView"/> tag.
            </summary>
            <remarks>
            You can configure the view wise time scale by specifying values for the corresponding properties.
            Timescale can be applied for Day, Week, WorkWeek, TimelineDay, TimelineWeek and TimelineWorkWeek views.
            </remarks>
            <example>
            The following code example shows how to configure the view wise time scale:
            <code><![CDATA[
            <SfSchedule TValue="AppointmentData">
                <ScheduleViews>
                    <ScheduleView Option="View.Day">
                        <ScheduleViewTimeScale Enable="true" Interval="60" SlotCount="6"></ScheduleViewTimeScale>
                    </ScheduleView>
                    <ScheduleView Option="View.Week">
                            <ScheduleViewTimeScale Enable="false"></ScheduleViewTimeScale>
                    </ScheduleView>
                    <ScheduleView Option="View.TimelineWorkWeek">
                        <ScheduleViewTimeScale Enable="true" Interval="30" SlotCount="3"></ScheduleViewTimeScale>
                    </ScheduleView>
                </ScheduleViews>
            </SfSchedule>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleViewTimeScale.ChildContent">
            <summary>
            Gets or sets the child content of schedule view-specific timescale.
            </summary>
            <value>
            The value used to build the content.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleViewTimeScale.Enable">
            <summary>
            Gets or sets a value indicating whether the schedule should display the appointments accurately against the exact time duration.
            </summary>
            <value>
            If set to `false`, all the appointments of a day will be displayed one below the other. The default value is `true`.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleViewTimeScale.Interval">
            <summary>
            Gets or sets the time duration on which the time axis should be displayed, either in 1 hour or 30 minutes intervals, etc.
            </summary>
            <value>
            The interval value in minutes. The default value is `60`.
            </value>
            <remarks>
            This property will have an effect when the <see cref="P:Syncfusion.Blazor.Schedule.ScheduleViewTimeScale.Enable"/> property is set to `true`.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleViewTimeScale.MajorSlotTemplate">
            <summary>
            Gets or sets template as a <see cref="T:Microsoft.AspNetCore.Components.RenderFragment`1"/> that defines custom appearance for displaying the major time slot cells.
            </summary>
            <value>
            A template content that specifies the visualization of major time slot cells. The default value is `null`.
            </value>
            <remarks>
            The time details can be accessed within this template.
            This property will have an effect when the <see cref="P:Syncfusion.Blazor.Schedule.ScheduleViewTimeScale.Enable"/> property is set to `true`.
            </remarks>
            <example>
            <code><![CDATA[
            <SfSchedule TValue="AppointmentData">
                <ScheduleViews>
                    <ScheduleView Option="View.Day" Interval="30" SlotCount="3">
                        <ScheduleViewTimeScale>
                            <MajorSlotTemplate>
                                <div>@(GetMajorSlotTemplate((context as TemplateContext).Date))</div>
                            </MajorSlotTemplate>
                        </ScheduleViewTimeScale>
                    </ScheduleView>
                    <ScheduleView Option="View.Week">
                        <ScheduleViewTimeScale>
                            <MajorSlotTemplate>
                                <div>@(GetMajorSlotTemplate((context as TemplateContext).Date))</div>
                            </MajorSlotTemplate>
                        </ScheduleViewTimeScale>
                    </ScheduleView>
                    <ScheduleView Option="View.WorkWeek"></ScheduleView>
                </ScheduleViews>
            </SfSchedule>
            @code{
                public static string GetMajorSlotTemplate(DateTime date)
                {
                    return date.ToString("hh", CultureInfo.InvariantCulture);
                }
            }
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleViewTimeScale.MinorSlotTemplate">
            <summary>
            Gets or sets template as a <see cref="T:Microsoft.AspNetCore.Components.RenderFragment`1"/> that defines custom appearance for displaying the minor time slot cells.
            </summary>
            <value>
            A template content that specifies the visualization of minor time slot cells. The default value is `null`.
            </value>
            <remarks>
            The time details can be accessed within this template.
            This property will have an effect when the <see cref="P:Syncfusion.Blazor.Schedule.ScheduleViewTimeScale.Enable"/> property is set to `true`.
            </remarks>
            <example>
            <code><![CDATA[
            <SfSchedule TValue="AppointmentData">
                <ScheduleViews>
                    <ScheduleView Option="View.Day">
                        <ScheduleViewTimeScale Interval="30" SlotCount="3">
                            <MinorSlotTemplate>
                                <div style="text-align: right; margin-right: 15px">@(GetMinorSlotTemplate((context as TemplateContext).Date))</div>
                            </MinorSlotTemplate>
                        </ScheduleViewTimeScale>
                    </ScheduleView>
                    <ScheduleView Option="View.Week">
                        <ScheduleViewTimeScale>
                            <MinorSlotTemplate>
                                <div style="text-align: right; margin-right: 15px">@(GetMinorSlotTemplate((context as TemplateContext).Date))</div>
                            </MinorSlotTemplate>
                        </ScheduleViewTimeScale>
                    </ScheduleView>
                    <ScheduleView Option="View.WorkWeek"></ScheduleView>
                </ScheduleViews>
            </SfSchedule>
            @code{
                public static string GetMinorSlotTemplate(DateTime date)
                {
                    return date.ToString("mm", CultureInfo.InvariantCulture);
                }
            }
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleViewTimeScale.SlotCount">
            <summary>
            Gets or sets the number of slots to be split for the specified time interval duration.
            </summary>
            <value>
            The number of slots to be split. The default value is `2`.
            </value>
            <remarks>
            This property will have an effect when the <see cref="P:Syncfusion.Blazor.Schedule.ScheduleViewTimeScale.Enable"/> property is set to `true`.
            </remarks>
        </member>
        <member name="T:Syncfusion.Blazor.Schedule.ScheduleWorkHours">
            <summary>
            A class that represents the work hours configurations on <see cref="T:Syncfusion.Blazor.Schedule.SfSchedule`1"/> component.
            </summary>
            <remarks>
            You can configure the work hours by specifying values for the corresponding properties.
            workhours can be applied for Day, Week, WorkWeek, TimelineDay, TimelineWeek and TimelineWorkWeek views.
            </remarks>
            <example>
            The following code example shows how to configure the work hours:
            <code><![CDATA[
            <SfSchedule TValue="AppointmentData">
                <ScheduleWorkHours Start="08:00" End="20:00"></ScheduleWorkHours>
            </SfSchedule>
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleWorkHours.End">
            <summary>
            Gets or sets the time string in short skeleton format `HH:mm`, which usually denotes the end of the working hour range.
            </summary>
            <value>
            A string value representing the time. The default value is `18:00`.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleWorkHours.Highlight">
            <summary>
            Gets or sets a value indicating whether the cells of the working hour range should be highlighted with an active color.
            </summary>
            <value>
            `false`, to highlight the cells, the default value is `true`.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.ScheduleWorkHours.Start">
            <summary>
            Gets or sets the time string in short skeleton format `HH:mm`, which usually denotes the start of the working hour range.
            </summary>
            <value>
            A string value representing the time. The default value is `09:00`.
            </value>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.ScheduleWorkHours.Dispose(System.Boolean)">
            <summary>
            Dispose unmanaged resources in the Syncfusion Blazor component.
            </summary>
            <param name="disposing">Boolean value to dispose the object.</param>
        </member>
        <member name="T:Syncfusion.Blazor.Schedule.SfSchedule`1">
            <summary>
            A component that displays a list of events scheduled at specific dates and times, helping users plan and manage their schedule.
            </summary>
            <typeparam name="TValue">A type that provides a schema for the schedule events.</typeparam>
            <remarks>
            You can configure the schedule with resource grouping, timescale, work hours, event settings, views, header rows and templates by specifying the respective tag directive.
            </remarks>
            <example>
            In the below code example, a basic schedule component is initialized with <see cref="T:Syncfusion.Blazor.Schedule.ScheduleViews"/> and <see cref="T:Syncfusion.Blazor.Schedule.ScheduleEventSettings`1"/>.
            <code><![CDATA[
            <SfSchedule TValue="AppointmentData" Height="550px" @bind-SelectedDate="@currentDate" @bind-CurrentView="currentView">
                <ScheduleViews>
                    <ScheduleView Option="View.Day"></ScheduleView>
                    <ScheduleView Option="View.Week"></ScheduleView>
                    <ScheduleView Option="View.Month"></ScheduleView>
                    <ScheduleView Option="View.TimelineDay"></ScheduleView>
                    <ScheduleView Option="View.TimelineWeek"></ScheduleView>
                    <ScheduleView Option="View.TimelineMonth"></ScheduleView>
                </ScheduleViews>
                <ScheduleEventSettings TValue="AppointmentData" DataSource="@DataSource"></ScheduleEventSettings>
            </SfSchedule>
            @code{
                private DateTime currentDate { get; set; } = DateTime.Today;
                private View currentView { get; set; } = View.Month;
                List<AppointmentData> DataSource = new List<AppointmentData>
                {
                    new AppointmentData { Id = 1, Subject = "Meeting", StartTime = DateTime.Today.Date.AddHours(9).AddMinutes(30), EndTime = DateTime.Today.Date.AddHours(11) }
                };
                public class AppointmentData
                {
                    public int Id { get; set; }
                    public string Subject { get; set; }
                    public string Location { get; set; }
                    public DateTime StartTime { get; set; }
                    public DateTime EndTime { get; set; }
                }
            }
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.SfSchedule`1.ViewIndex">
            <summary>
            It contains the currently selected view's index.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.SfSchedule`1.ActiveViewOptions">
            <summary>
            It contains the active view's data.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.SfSchedule`1.IsRefreshEvents">
            <summary>
            When set to `True`, it allows to update the event fields and resource collection.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.SfSchedule`1.IsPreventSave">
            <summary>
            Used internally to prevent the save action on enter key press when set to `True`.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.SfSchedule`1.SetViewIndex">
            <summary>
            Called internally to update the view index.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.SfSchedule`1.SetActiveView(Syncfusion.Blazor.Schedule.ScheduleView)">
            <summary>
            Called internally to update the active view options.
            </summary>
            <param name="scheduleView">value object to get the view's data.</param>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.SfSchedule`1.AddResourceCollection(Syncfusion.Blazor.Schedule.IScheduleResources)">
            <summary>
            Called internally to update the resource collections.
            </summary>
            <param name="resource">Resource data.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.SfSchedule`1.CallStateHasChanged">
            <summary>
            Notifies the component that its state has changed.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.SfSchedule`1.PreventRender(System.Boolean)">
            <summary>
            Prevents the Scheduler render. This method will internally sets value to be returned from ShouldRender method.
            </summary>
            <param name="preventRender">Default value is true. Toggles the ShouldRender method value.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.SfSchedule`1.Syncfusion#Blazor#Schedule#ISchedule#PropertyChanged">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.SfSchedule`1.CellClickTimer">
            <summary>
            Timer to call the single click handler and prevent it when double click the cell.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.SfSchedule`1.EventClickTimer">
            <summary>
            Timer to call the single click handler and prevent it when double click the event.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.SfSchedule`1.SetAdaptive(System.Boolean)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.SfSchedule`1.OnContentUpdate(System.Int32)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.SfSchedule`1.SetRenderedCount(System.Int32)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.SfSchedule`1.OnOpenEditor(Syncfusion.Blazor.Schedule.CellClickEventArgs,System.String)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.SfSchedule`1.ErrorPositioning(System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.SfSchedule`1.TriggerCellClick(Syncfusion.Blazor.Schedule.CellClickEventArgs)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.SfSchedule`1.TriggerEventClick(System.Guid,Microsoft.AspNetCore.Components.Web.MouseEventArgs,System.Int32,System.Boolean,System.Boolean)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.SfSchedule`1.TriggerEventDoubleClick(System.Guid,Microsoft.AspNetCore.Components.Web.MouseEventArgs,System.Int32)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.SfSchedule`1.OnTapHold(System.Guid,System.Boolean)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.SfSchedule`1.OnResizeStart(Syncfusion.Blazor.Schedule.ResizeEventArgs{`0},System.Guid)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.SfSchedule`1.OnDragStart(Syncfusion.Blazor.Schedule.DragEventArgs{`0},System.Guid,System.Guid[])">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.SfSchedule`1.OnDragStop(Syncfusion.Blazor.Schedule.DragEventArgs{`0},System.Guid,System.Boolean,System.Boolean,System.Int32[],System.Collections.Generic.List{Syncfusion.Blazor.Schedule.Internal.SelectedEventArgs})">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.SfSchedule`1.OnResizeStop(System.DateTime,System.DateTime,System.Guid,System.Int32)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.SfSchedule`1.AgendaScroll(System.Int32)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.SfSchedule`1.AddInlineAppointment(`0,System.Nullable{System.Int32})">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.SfSchedule`1.SaveInlineAppointment(System.String)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.SfSchedule`1.OnViewNavigate(System.DateTime,Syncfusion.Blazor.Schedule.View)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.SfSchedule`1.OnDateNavigate(System.String)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.SfSchedule`1.ProcessDelete(System.Collections.Generic.List{System.Guid})">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.SfSchedule`1.TriggerCreatedEvent">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.SfSchedule`1.ID">
            <summary>
            Gets or sets the unique Id value for schedule component.
            </summary>
            <value>
            If we set the id, then the id value set for schedule element. The default value is `null`.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.SfSchedule`1.ChildContent">
            <summary>
            Gets or sets the child content of schedule component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.SfSchedule`1.EventSettings">
            <summary>
            Gets or sets the event settings for configuring the scheduler events.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.SfSchedule`1.ScheduleGroup">
            <summary>
            Allows defining the group related settings of multiple resources. When this property is non-empty, it means
            that the resources will be grouped on the schedule layout based on the provided resource names.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.SfSchedule`1.HeaderRows">
            <summary>
            Allows to configure the header rows on timeline views.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.SfSchedule`1.QuickInfoTemplates">
            <summary>
            Gets or sets the template option to customize the quick popup.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.SfSchedule`1.ScheduleResources">
            <summary>
            Allows defining the collection of resources to be displayed on the Schedule. The resource collection needs to be defined
            with unique resource names to identify it along with the respective dataSource and field mapping options.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.SfSchedule`1.TimeScale">
            <summary>
            Allows to configure the time scale on Schedule.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.SfSchedule`1.ScheduleViews">
            <summary>
            This property holds the views collection and its configurations. It accepts either the array of view names or the array of view
            objects that holds different configurations for each views.By default,
            Schedule displays all the views namely `Day`, `Week`, `Work Week`, `Month` and `Agenda`.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.SfSchedule`1.WorkHours">
            <summary>
            Allows to configure the work hours on Schedule.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.SfSchedule`1.AgendaDaysCount">
            <summary>
            Gets or sets the number of days to be displayed in Agenda View by default. When using virtual scrolling, this value determines the number of days that will be fetched on each scroll-end. 
            </summary>
            <value>
            Accepts an integer value. The default value is `7`.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.SfSchedule`1.AllowDragAndDrop">
            <summary> 
            Gets or sets whether the scheduler appointments can be dragged and dropped over work cells.
            </summary> 
            <value>
            A boolean value indicating whether drag and drop is enabled. The default value is `true`.
            </value>
            <remarks>
            When an appointment is dragged, both its start and end time will change simultaneously, allowing the appointment to be rescheduled for a different time.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.SfSchedule`1.AllowInline">
            <summary>
            Gets or sets the ability to create and edit appointments in-line in the scheduler.
            </summary>
            <value>
            A boolean value indicating whether in-line creation and editing is enabled. The default value is `false`.
            </value>
            <remarks>
            If this property is set to `true`, the quick popup for appointments will not open.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.SfSchedule`1.AllowKeyboardInteraction">
            <summary>
            Gets or sets the ability to use keyboard input in the scheduler.
            </summary>
            <value>
            A boolean value indicating whether keyboard interaction is enabled. The default value is `true`.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.SfSchedule`1.AllowMultiCellSelection">
            <summary>
            Gets or sets the ability to select multiple cells in the scheduler.
            </summary>
            <value>
            A boolean value indicating whether multiple cell selection is allowed. The default value is `true`.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.SfSchedule`1.AllowMultiRowSelection">
            <summary>
            Gets or sets the ability to select multiple days (rows) in the scheduler.
            </summary>
            <value>
            A boolean value indicating whether multiple day selection is allowed. The default value is `true`.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.SfSchedule`1.AllowResizing">
            <summary>
            Gets or sets the ability to resize appointments in the scheduler.
            </summary>
            <value>
            A boolean value indicating whether appointment resizing is allowed. The default value is `false`.
            </value>
            <remarks>
            When set to `true`, this property allows the rescheduling of appointments by changing their start or end time by dragging the event resize handles.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.SfSchedule`1.AllowMultiDrag">
            <summary>
            Gets or sets the ability to drag multiple selected appointments in the scheduler.
            </summary>
            <value>
            A boolean value indicating whether dragging multiple appointments is allowed. The default value is `false`.
            </value>
            <remarks>
            This property is applicable only when <see cref="P:Syncfusion.Blazor.Schedule.SfSchedule`1.AllowDragAndDrop"/> property is enabled.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.SfSchedule`1.EnableAllDayScroll">
            <summary>
            Gets or sets the ability to enable scrolling on the all day row when it reaches maximum height when expanded.
            </summary>
            <value>
            A boolean value indicating whether scrolling on the all day row is enabled. The default value is `false`.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.SfSchedule`1.CssClass">
            <summary>
            Gets or sets the custom classes to customize the schedule component.  
            </summary>
            <value>
            If we set the css class, then the custom class is applied for schedule element. The default value is `null`. 
            </value> 
            <example>
            <code><![CDATA[ 
            <SfSchedule CssClass="custom-tab"></SfSchedule> 
            ]]></code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.SfSchedule`1.CurrentView">
            <summary>
            Gets or sets the current view on the scheduler. The specified view will be initially loaded.
            </summary>
            <value>
            One of the <see cref="T:Syncfusion.Blazor.Schedule.View"/> enumeration
            </value>
            <remarks>
            Depending on the value of <c>View</c>, the following views will be rendered:
            <list type="bullet">
            <item><c>Day</c></item>
            <item><c>Week</c></item>
            <item><c>WorkWeek</c></item>
            <item><c>Month</c></item>
            <item><c>Agenda</c></item>
            <item><c>MonthAgenda</c></item>
            <item><c>Year</c></item>
            <item><c>TimelineDay</c></item>
            <item><c>TimelineWeek</c></item>
            <item><c>TimelineWorkWeek</c></item>
            <item><c>TimelineMonth</c></item>
            <item><c>TimelineYear</c></item>
            </list>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.SfSchedule`1.CurrentViewChanged">
            <summary>
            Invokes when current view changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.SfSchedule`1.DateFormat">
            <summary>
            Gets or sets the date format that should be applied on header date range label and also in editor window.
            </summary>
            <value>
            Accepts a string value to set specific date format. By default <c>DateFormat</c> is applied based on the current culture.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.SfSchedule`1.TimeFormat">
            <summary>
            Gets or sets the time format that should be applied on schedule time slots and also in editor window.
            </summary>
            <value>
            Accepts a string value to set specific time format. By default <c>TimeFormat</c> is applied based on the current culture.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.SfSchedule`1.EnablePersistence">
            <summary>
            Gets or sets whether to persist component's state between page reloads. When set to <c>true</c>, the <see cref="P:Syncfusion.Blazor.Schedule.SfSchedule`1.CurrentView" /> and <see cref="P:Syncfusion.Blazor.Schedule.SfSchedule`1.SelectedDate"/> property is persisted.
            </summary>
            <value>
            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>.
            </value>
            <remarks>
            Component's <see cref="P:Syncfusion.Blazor.Schedule.SfSchedule`1.CurrentView"/> and <see cref="P:Syncfusion.Blazor.Schedule.SfSchedule`1.SelectedDate"/> property will be stored in browser local storage to persist component's state when page reloads.
            It is mandatory to provide <see cref="P:Syncfusion.Blazor.Schedule.SfSchedule`1.ID"/> to persist these properties.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.SfSchedule`1.EnableRecurrenceValidation">
            <summary>
            Gets or sets the ability to perform recurrence validation.
            </summary>
            <value>
            A boolean value indicating whether recurrence validation is performed. The default value is `true`.
            </value>
            <remarks>
            When this property is set to `false`, recurrence validation will be skipped.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.SfSchedule`1.EnableRtl">
            <summary>
            Gets or sets whether the right to left direction is enabled for schedule component.
            </summary>
            <value> 
            true, the right to left direction is enabled for schedule component. The default value is `false`. 
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.SfSchedule`1.EndHour">
            <summary>
            Gets or sets the time string in short skeleton format `HH:mm`, which represents the end of the schedule hour.
            </summary>
            <value>
            A string value representing the time. The default value is `24:00`.
            </value>
            <remarks>
            The time beyond the specified end time is hidden when this property is used.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.SfSchedule`1.EventDragArea">
            <summary>
            Gets or sets the ability to enable external drag and drop support for appointments on the scheduler.
            </summary>
            <value>
            A boolean value indicating whether external drag and drop is enabled. The default value is `false`.
            </value>
            <remarks>
            When this property is set to `true`, appointments can be dragged out of the scheduler layout.
            If the drag area is explicitly set to a specific DOM element name, appointments can be dragged within the specified drag area location.
            This property is applicable only when <see cref="P:Syncfusion.Blazor.Schedule.SfSchedule`1.AllowDragAndDrop"/> property is enabled.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.SfSchedule`1.EnableAdaptiveUI">
            <summary>
            Gets or sets the ability to enable compact view and header view navigation in a popup.
            </summary>
            <value>
            A boolean value indicating whether the compact view and header view navigation are enabled in a popup. The default value is `false`.
            </value>
            <remarks>
            When this property is set to `true`, the header view navigations will be listed in a popup and the compact view will be enabled if resource grouping is also enabled.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.SfSchedule`1.FirstDayOfWeek">
            <summary>
            Gets or sets the first day of the week.
            </summary>
            <value>
            An integer value representing the first day of the week., By default `0` value is set which is denoted as Sunday.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.SfSchedule`1.FirstMonthOfYear">
            <summary>
            Gets or sets the first month of the year.
            </summary>
            <value>
            An integer value representing the month. The default value is `1`, which denotes January.
            </value>
            <remarks>
            The value `1` denotes January, `2` denotes February and so on.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.SfSchedule`1.Height">
            <summary> 
            Gets or sets the height of the schedule element in pixels/number/percentage.
            </summary>
            <value> 
            If we set the height value, then the schedule will render based on specified height otherwise the default height value `auto` is set.  
            </value> 
            <example> 
            <code><![CDATA[ 
            <SfSchedule Height="500px"></SfSchedule> 
            ]]></code>
            </example> 
            <remarks>
            If we set number values, then it is considered as pixels.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.SfSchedule`1.HideEmptyAgendaDays">
            <summary>
            Gets or sets the ability to hide empty dates from the Agenda View of the scheduler.
            </summary>
            <value>
            A boolean value indicating whether empty dates are hidden in Agenda View. The default value is `true`.
            </value>
            <remarks>
            When this property is set to `false`, empty dates will also be displayed on the scheduler.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.SfSchedule`1.MaxDate">
            <summary>
            Gets or sets the maximum date that can be displayed on the scheduler.
            </summary>
            <value>
            A date value. The default value is `new DateTime(2099, 12, 31, 23, 59, 59)`.
            </value>
            <remarks>
            The appointments after the `MaxDate` range will be hide form the UI.
            We cannot navigate to a date beyond the `MaxDate`. 
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.SfSchedule`1.MinDate">
            <summary>
            Gets or sets the minimum date that can be displayed on the scheduler.
            </summary>
            <value>
            A date value. The default value is `new DateTime(1900, 1, 1)`.
            </value>
            <remarks>
            The appointments before the `MinDate` range will be hide form the UI.
            We cannot navigate to a date before the `MinDate`. 
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.SfSchedule`1.QuickInfoOnSelectionEnd">
            <summary>
            Gets or sets the ability to show a quick popup after multiple cell selection via mouse interaction.
            </summary>
            <value>
            A boolean value indicating whether the quick popup is shown after multiple cell selection. The default value is `false`.
            </value>
            <remarks>
            This property is applicable only when <see cref="P:Syncfusion.Blazor.Schedule.SfSchedule`1.ShowQuickInfo"/> property is enabled.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.SfSchedule`1.Readonly">
            <summary>
            Gets or sets the ability to enable read-only mode on the scheduler.
            </summary>
            <value>
            A boolean value indicating whether the scheduler is in read-only mode. The default value is `false`.
            </value>
            <remarks>
            When this property is set to `true`, the scheduler will not allow any CRUD (create, read, update, delete) actions.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.SfSchedule`1.EnableAutoRowHeight">
            <summary>
            Gets or sets the ability to adjust the height of work cells based on the number of appointments in the time range.
            </summary>
            <value>
            A boolean value indicating whether the height of work cells is adjusted automatically. The default value is `false`.
            </value>
            <remarks>
            This property is applicable for Month and Timeline views.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.SfSchedule`1.SelectedDate">
            <summary>
            Gets or sets the currently selected date on the scheduler, based on which layout will be rendered.
            </summary>
            <value>
            A <see cref="T:System.DateTime"/> value. The default value is the current system date.
            </value>
            <remarks>
            If the <c>SelectedDate</c> value is set before the <see cref="P:Syncfusion.Blazor.Schedule.SfSchedule`1.MinDate"/>, the <c>MinDate</c> value will be applied to <c>SelectedDate</c>.
            If the <c>SelectedDate</c> value is set beyond the <see cref="P:Syncfusion.Blazor.Schedule.SfSchedule`1.MaxDate"/>, the <c>MaxDate</c> value will be applied to <c>SelectedDate</c>.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.SfSchedule`1.SelectedDateChanged">
            <summary>
            Invokes when selected date changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.SfSchedule`1.ShowHeaderBar">
            <summary>
            Gets or sets the ability to hide the header bar on the scheduler.
            </summary>
            <value>
            A boolean value indicating whether the header bar is hidden. The default value is `true`.
            </value>
            <remarks>
            The header bar holds the date and view navigation options.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.SfSchedule`1.ShowQuickInfo">
            <summary>
            Gets or sets the ability to display a quick popup with cell or event details on single click.
            </summary>
            <value>
            A boolean value indicating whether the quick popup is displayed on single click. The default value is `true`.
            </value>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.SfSchedule`1.ShowTimeIndicator">
            <summary>
            Gets or sets the ability to hide the current time indicator on the scheduler.
            </summary>
            <value>
            A boolean value indicating whether the current time indicator is hidden. The default value is `true`.
            </value>
            <remarks>
            When this property is set to `true`, the current time indicator will be hidden from the user interface. Otherwise, it will visually depict the current system time.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.SfSchedule`1.ShowWeekNumber">
            <summary>
            Gets or sets the ability to display the week number of the current view date range on the scheduler.
            </summary>
            <value>
            A boolean value indicating whether the week number is displayed. The default value is `false`.
            </value>
            <remarks>
            This property has an effect on Day, Week, WorkWeek, Month and Year views of scheduler.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.SfSchedule`1.ShowWeekend">
            <summary>
            Gets or sets whether non-working days are hidden from the scheduler.
            </summary>
            <value>
            If set to `false`, weekend days will be hidden. The default value is `true`.
            </value>
            <remarks>
            Days that are not defined in the <see cref="P:Syncfusion.Blazor.Schedule.SfSchedule`1.WorkDays"/> property are typically treated as weekend days.
            This property has no effect on the WorkWeek, Year and TimelineYear views.
            For example, if the working days are defined as `new int[] { 1, 3, 5 }`, the remaining days of that week will be considered as weekend days and will not be rendered if this property is set to `false`.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.SfSchedule`1.StartHour">
            <summary>
            Gets or sets the time string in short skeleton format `HH:mm`, which represents the start of the schedule hour.
            </summary>
            <value>
            A string value representing the time. The default value is `00:00`.
            </value>
            <remarks>
            The time before the specified start time is hidden when this property is used.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.SfSchedule`1.Timezone">
            <summary>
            Gets or sets the timezone to be applied on the scheduler.
            </summary>
            <value>
            A string value representing a valid [IANA](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) timezone name. The default value is the system timezone.
            </value>
            <remarks>
            It is recommended to set a specific timezone on the scheduler when it is bound to remote data services to display events consistently across different timezones.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.SfSchedule`1.Width">
            <summary>
            Gets or sets the width of the schedule element in pixels/number/percentage.
            </summary>
            <value> 
            If we set the width value, then the schedule will render based on specified width otherwise the default width value `auto` is set.  
            </value> 
            <example> 
            <code><![CDATA[ 
            <SfSchedule Width="500px"></SfSchedule> 
            ]]></code>
            </example> 
            <remarks>
            If we set number values, then it is considered as pixels.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.SfSchedule`1.WorkDays">
            <summary>
            Gets or sets the working days on the schedule.
            </summary>
            <value>
            An array of integer values based on the <see cref="T:System.DayOfWeek"/> enumeration.
            </value>
            <example>
            In below code example Monday, Wednesday and Friday were set as workdays for week view.
            <code><![CDATA[
            <SfSchedule TValue="AppointmentData" WorkDays="new int[] { 1, 3, 5 }"></SfSchedule>
            ]]></code>
            </example>
            <remarks>
            The defined days in the collection will be rendered in the `WorkWeek` view. In other views, all usual days will be displayed, and working days will be highlighted with a different shade.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.SfSchedule`1.WeekRule">
            <summary>
            Gets or sets the week rule to be applied on the scheduler.
            </summary>
            <value>
            One of the <see cref="T:System.Globalization.CalendarWeekRule"/> enumeration values. The default value is <see cref="F:System.Globalization.CalendarWeekRule.FirstDay"/>.
            </value>
            <remarks>
            The available values for the week rule are:
             - `FirstDay`: The week starts on the first day of the month.
             - `FirstFullWeek`: The week starts on the first full week of the month.
             - `FirstFourDayWeek`: The week starts on the first four-day week of the month.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.SfSchedule`1.MonthsCount">
            <summary>
            Gets or sets the number of months to be displayed on the scheduler.
            </summary>
            <value>
            An integer value indicating the number of months. The default value is `12`.
            </value>
            <remarks>
            This property is applicable only in Year and TimelineYear views.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.SfSchedule`1.TimezoneDataSource">
            <summary>
            Gets or sets the timezone data source settings for the scheduler.
            </summary>
            <value>
            Accepts a collection of <see cref="T:Syncfusion.Blazor.Schedule.TimezoneFields"/>.
            </value>
            <remarks>
            The <c>TimezoneDataSource</c> collection will be displayed in editor window timezone.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.SfSchedule`1.ResourceCollection">
            <summary>
            Gets or sets a collection of resources to be displayed on the Schedule.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.SfSchedule`1.ResourceRowRef">
            <summary>
            Gets or sets the resource row reference for displaying the resources in editor window.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.SfSchedule`1.ScheduleTemplates">
            <summary>
            Gets or sets the template option to customize the scheduler.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.SfSchedule`1.UpdateChildProperties(System.String,System.Object)">
            <summary>
            It will update the child properties.
            </summary>
            <param name="key">Key string to get the property value.</param>
            <param name="propertyValue">value object to get the property value.</param>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Schedule.SfSchedule`1.accessor">
            <summary>
            Gets or sets the fast reflection accessor to reflect the data.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.SfSchedule`1.GetValue(System.String,`0)">
            <summary>
            Returns the property value of a specified object.
            </summary>
            <param name="obj">The object whose property value will be returned.</param>
            <param name="fieldName">The string containing the name of the public property.</param>
            <returns>The property value of the specified object.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.SfSchedule`1.GetObject(System.String,System.Object)">
            <summary>
            Returns the property value of a specified object.
            </summary>
            <param name="obj">The object whose property value will be returned.</param>
            <param name="fieldName">The string containing the name of the public property.</param>
            <returns>The property value of the specified object.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.SfSchedule`1.AddEventAsync(`0)">
            <summary>
            Adds the newly created event into the Scheduler dataSource.
            </summary>
            <param name="data">New event to be added.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.SfSchedule`1.AddEventAsync(System.Collections.Generic.List{`0})">
            <summary>
            Adds the newly created events into the Scheduler dataSource.
            </summary>
            <param name="data">New events to be added.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.SfSchedule`1.AddResource``1(System.Collections.Generic.List{``0},System.String,System.Int32)">
            <summary>
            Adds the resources to the specified index.
            </summary>
            <typeparam name="T">Specifies the type of resource collection in which resources to be added.</typeparam>
            <param name="resources">Specifies the resource collection(s) to be added.</param>
            <param name="name">Specifies the resource name to which the provided resource(s) will add.</param>
            <param name="index">Specifies th index where it should be added.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.SfSchedule`1.ChangeCurrentViewAsync(Syncfusion.Blazor.Schedule.View,System.Nullable{System.Int32})">
            <summary>
            Allows to change the current view of the scheduler dynamically.
            </summary>
            <param name="viewName">Specifies the view name.</param>
            <param name="viewIndex">Specifies the index of the view. The default value is `null`.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.SfSchedule`1.ChangeDateAsync(System.DateTime)">
            <summary>
            Allows to navigate the scheduler to the specified date.
            </summary>
            <param name="date">Specifies the date to be navigated.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.SfSchedule`1.CloseEditor">
            <summary>
            Closes the event editor window manually.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.SfSchedule`1.CloseQuickInfoPopupAsync">
            <summary>
            Closes the quick info popup manually.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.SfSchedule`1.CloseTooltipAsync">
            <summary>
            Closes the tooltip asynchronously.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <remarks>
            This method can be used to close the tooltip, for example when the context menu is opened for an event.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.SfSchedule`1.CollapseResourceAsync``1(``0,System.String)">
            <summary>
            Collapses the specified resource on the scheduler.
            </summary>
            <typeparam name="T">Specifies the type of the resource id to be collapsed.</typeparam>
            <param name="resourceId">Specifies the resource id to be collapsed.</param>
            <param name="name">Specifies the resource name to be collapsed.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.SfSchedule`1.DeleteEventAsync(`0,System.Nullable{Syncfusion.Blazor.Schedule.CurrentAction})">
            <summary>
            Deletes the events from the Scheduler based on the event collection.
            </summary>
            <param name="eventData">Accepts the entire event collection to be deleted.</param>
            <param name="currentAction">The current action of the scheduler to take place. The default value is `null`.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.SfSchedule`1.DeleteEventAsync``1(``0,System.Nullable{Syncfusion.Blazor.Schedule.CurrentAction})">
            <summary>
            Deletes the events from the Scheduler based on the provided ID of an event.
            </summary>
            <typeparam name="T">Specifies the type of the event ID to be deleted.</typeparam>
            <param name="id">Accepts the id of the event to be deleted.</param>
            <param name="currentAction">Specifies the current action of the scheduler to take place. The default value is `null`.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.SfSchedule`1.ExpandResourceAsync``1(``0,System.String)">
            <summary>
            Expands the specified resource on the scheduler.
            </summary>
            <typeparam name="T">Specifies the type of the resource id to be expanded.</typeparam>
            <param name="resourceId">Specifies the resource id to be expanded.</param>
            <param name="name">Specifies the resource name to be expanded.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.SfSchedule`1.ExportToExcelAsync(Syncfusion.Blazor.Schedule.ExportOptions)">
            <summary>
            Exports the Scheduler events data as an Excel file in .xlsx or .csv file formats.
            </summary>
            <param name="excelExportOptions">Specifies the export options to export the event collection. The default value is `null`.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.SfSchedule`1.ExportToICalendarAsync(System.String,System.Collections.Generic.List{`0})">
            <summary>
            Exports the Scheduler events to a calendar (.ics) file. By default, the calendar is exported with a file name `Calendar.ics`.
            </summary>
            <param name="fileName">Specifies the file name to be used on export. The default value is "Calendar.ics".</param>
            <param name="customData">Specifies the custom required events to be exported. The default value is `null`.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.SfSchedule`1.GetBlockEventsAsync(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Boolean})">
            <summary>
            Retrieves the block event collection bound to the Scheduler.
            </summary>
            <param name="startDate">Specifies the start date of a range. The default value is null.</param>
            <param name="endDate">Specifies the end date of a range. The default value is null.</param>
            <param name="includeOccurrences">Specifies whether to include occurrence events. The default value is null.</param>
            <returns><see cref="T:System.Collections.Generic.List`1"/>. A list of block events.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.SfSchedule`1.GetCurrentViewDates">
            <summary>
            Retrieves the dates that lie on the active view of the Scheduler.
            </summary>
            <returns><see cref="T:System.Collections.Generic.List`1"/>. A list of dates.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.SfSchedule`1.GetCurrentViewEvents">
            <summary>
            Retrieves the events that lie on the current date range of the active view of the Scheduler.
            </summary>
            <returns>The current view events as a list of objects of type <typeparamref name="TValue"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.SfSchedule`1.GetDeletedOccurrences``1(``0)">
            <summary>
            Gets the deleted occurrences from a given recurrence series.
            </summary>
            <typeparam name="T">Specifies the type of scheduler appointments.</typeparam>
            <param name="recurrenceData">Specifies the series of the recurrence appointment.</param>
            <returns>A list of objects of type <typeparamref name="TValue"/> representing the deleted occurrences in the given recurrence series.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.SfSchedule`1.GetMaxEventIdAsync``1">
            <summary>
            Retrieves the maximum id of the scheduler events asynchronously.
            </summary>
            <typeparam name="T">Specifies the type of id in the scheduler events.</typeparam>
            <returns>The maximum id of the scheduler events as an object of type T.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.SfSchedule`1.GetEventsAsync(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Boolean})">
            <summary>
            Retrieves the entire collection of events bound to the Scheduler asynchronously.
            </summary>
            <param name="startDate">Specifies the start date of the range. The default value is `null`.</param>
            <param name="endDate">Specifies the end date of the range. The default value is `null`.</param>
            <param name="includeOccurrences">Specifies whether to include occurrence events. The default value is `null`.</param>
            <returns>A list of objects of type <typeparamref name="TValue"/> representing the entire event collection in the scheduler.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.SfSchedule`1.GetOccurrencesByID``1(``0)">
            <summary>
            Retrieves the occurrences of a single recurrence event based on the provided parent ID.
            </summary>
            <typeparam name="T">Specifies the type of the event id.</typeparam>
            <param name="eventID">Specifies the id of the event as an object of type T.</param>
            <returns>A list of objects of type <typeparamref name="TValue"/> representing the occurrences of a recurrence series.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.SfSchedule`1.GetOccurrencesByRange(System.DateTime,System.DateTime)">
            <summary>
            Retrieves all the occurrences that lies between the specific start and end time range.
            </summary>
            <param name="startTime">Specifies the start date of a range.</param>
            <param name="endTime">Specifies the end date of a range.</param>
            <returns>A list of objects of type <typeparamref name="TValue"/> representing the occurrences that lies in the specified date range.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.SfSchedule`1.GetResourceByIndex(System.Int32)">
            <summary>
            Retrieves the resource details based on the provided resource index.
            </summary>
            <param name="index">The index of the resource at the last level.</param>
            <returns>An object of type <see cref="T:Syncfusion.Blazor.Schedule.ResourceDetails`1"/> holding the details of the resource and resource data.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.SfSchedule`1.GetResourceCollections">
            <summary>
            Retrieves the resource collection available in the scheduler.
            </summary>
            <returns>A list of objects of type <see cref="T:Syncfusion.Blazor.Schedule.Resource"/> representing the resource collections available in the scheduler.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.SfSchedule`1.GetSelectedCellsAsync">
            <summary>
            Retrieves the selected cell details.
            </summary>
            <returns>An object of type <see cref="T:Syncfusion.Blazor.Schedule.CellClickEventArgs"/> holding the details of the selected cells.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.SfSchedule`1.GetSelectedEventsAsync">
            <summary>
            Retrieves the selected event details.
            </summary>
            <returns>A list of objects of type <typeparamref name="TValue"/> representing the details of the selected events.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.SfSchedule`1.GetElementInfoAsync(System.Int32,System.Int32)">
            <summary>
            Retrieves the information of the target element.
            </summary>
            <param name="left">The x coordinate of the target element.</param>
            <param name="top">The y coordinate of the target element.</param>
            <returns>An object of type <see cref="T:Syncfusion.Blazor.Schedule.ElementInfo`1"/> containing the details of the targeted element.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.SfSchedule`1.GetTargetCellAsync(System.Int32,System.Int32)">
            <summary>
            Retrieves the information of the target cell.
            </summary>
            <param name="left">The x coordinate of the target cell.</param>
            <param name="top">The y coordinate of the target cell.</param>
            <returns>An object of type <see cref="T:Syncfusion.Blazor.Schedule.CellClickEventArgs"/> containing the details of the targeted cell.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.SfSchedule`1.GetTargetEventAsync(System.Int32,System.Int32)">
            <summary>
            Retrieves the details of the event that is targeted by the provided coordinates.
            </summary>
            <param name="left">The x coordinate of the target event.</param>
            <param name="top">The y coordinate of the target event.</param>
            <returns>A task representing the asynchronous operation. The task result contains the details of the targeted event of type <typeparamref name="TValue"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.SfSchedule`1.HideSpinnerAsync">
            <summary>
            Hides the spinner if it is currently being displayed.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.SfSchedule`1.ImportICalendarAsync(System.String)">
            <summary>
            Imports events from an .ics file into the Scheduler.
            </summary>
            <param name="fileContent">The contents of the .ics file in string format.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.SfSchedule`1.IsSlotAvailableAsync(`0)">
            <summary>
            Determines whether the time range of the specified event is available for event creation or is already occupied by other events.
            </summary>
            <param name="eventData">The event data to check for availability.</param>
            <returns>A task representing the asynchronous operation. The task result is `true` if the time range is available, or `false` if it is already occupied by other events.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.SfSchedule`1.IsSlotAvailableAsync(System.DateTime,System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
            Determines whether the specified time range is available for event creation or is already occupied by other events.
            </summary>
            <param name="startTime">The start time of the time range to check for availability.</param>
            <param name="endTime">The end time of the time range to check for availability. The default value is `null`.</param>
            <param name="groupIndex">The resource index of the last level to consider when checking for availability. The default value is `null`.</param>
            <returns>A task representing the asynchronous operation. The task result is `true` if the time range is available, or `false` if it is already occupied by other events.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.SfSchedule`1.OpenEditorAsync(Syncfusion.Blazor.Schedule.CellClickEventArgs,Syncfusion.Blazor.Schedule.CurrentAction,System.Nullable{Syncfusion.Blazor.Schedule.RepeatType})">
            <summary>
            Manually opens the editor window for a specific time.
            </summary>
            <param name="data">The cell details for which to open the editor.</param>
            <param name="action">The current action of the scheduler.</param>
            <param name="repeatType">Indicates the type of recurrence to open the editor with. If not provided, the editor will not have a recurrence option.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.SfSchedule`1.OpenEditorAsync(`0,Syncfusion.Blazor.Schedule.CurrentAction)">
            <summary>
            Manually opens the event editor for a specific event.
            </summary>
            <param name="data">The event data for which to open the editor.</param>
            <param name="action">The current action of the scheduler.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.SfSchedule`1.PrintAsync">
            <summary>
            Prints the current view of the scheduler.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.SfSchedule`1.PrintAsync(Syncfusion.Blazor.Schedule.PrintOptions)">
            <summary>
            Prints the current view of the scheduler with the specified width and height.
            </summary>
            <param name="options">The print options, including the width and height of the printed scheduler.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.SfSchedule`1.RefreshEventsAsync">
            <summary>
            Refreshes the event data source and re-renders the events in the scheduler.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.SfSchedule`1.RefreshAsync(System.Boolean)">
            <summary>
            Re-renders the layouts that are currently visible in the scheduler.
            </summary>
            <remarks>
            This method refreshes the layout of the scheduler by re-rendering the currently visible layouts.
            It ensures that the event collection used by the scheduler remains unchanged and maintains the latest data without refreshing it.
            </remarks>
            <param name="isRefreshEvents">Specifies whether to refresh the scheduler events. The default value is true.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.SfSchedule`1.RemoveResource``1(System.Collections.Generic.List{``0},System.String)">
            <summary>
            Removes the specified resources from the scheduler.
            </summary>
            <typeparam name="T">The type of resource ID.</typeparam>
            <param name="resourceIDList">A list of resource IDs to remove.</param>
            <param name="name">The name of the resources to remove.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.SfSchedule`1.ResetWorkHoursAsync(System.Collections.Generic.List{System.DateTime},System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Removes or resets working hours on specific dates or for a specific resource.
            </summary>
            <param name="dates">The dates for which to reset the working hours.</param>
            <param name="start">The start of the work hour to be removed. The default value is `null`.</param>
            <param name="end">The end of the work hour to be removed. The default value is `null`.</param>
            <param name="groupIndex">The index of the resource for which to reset the working hours. The default value is `null`.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.SfSchedule`1.SaveEventAsync(`0,System.Nullable{Syncfusion.Blazor.Schedule.CurrentAction})">
            <summary>
            Saves changes to an event object by updating the data source.
            </summary>
            <param name="data">The edited event to save.</param>
            <param name="currentAction">The current action of the scheduler to take place. The default value is `null`.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.SfSchedule`1.SaveEventAsync(System.Collections.Generic.List{`0},System.Nullable{Syncfusion.Blazor.Schedule.CurrentAction})">
            <summary>
            Saves changes to a list of event objects by updating the data source.
            </summary>
            <param name="data">The edited events to save.</param>
            <param name="currentAction">The current action of the scheduler to take place. The default value is `null`.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.SfSchedule`1.SaveEventAsync(`0,Syncfusion.Blazor.Schedule.CurrentAction,`0)">
            <summary>
            Saves changes to an event object by updating the data source.
            </summary>
            <param name="data">The edited event to save.</param>
            <param name="currentAction">The current action whether the edited event should reflect single occurrence or entire series.</param>
            <param name="editingData">The original event before editing.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.SfSchedule`1.ScrollToAsync(System.String,System.Nullable{System.DateTime})">
            <summary>
            Scrolls the Scheduler content area to the specified time.
            </summary>
            <param name="hour">The time to scroll in `HH:mm` format.</param>
            <param name="scrollDate">Specifies the date where to be scrolled. The default value is `null`.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.SfSchedule`1.ScrollToResourceAsync``1(``0,System.String)">
            <summary>
            Asynchronously scrolls to the position of a resource on the scheduler.
            </summary>
            <typeparam name="T">The type of the resource ID.</typeparam>
            <param name="resourceId">The ID of the resource to scroll to.</param>
            <param name="groupName">The name of the resource group, if applicable.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <remarks>
            This method is not applicable for Agenda and Month agenda views of the scheduler.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.SfSchedule`1.SetWorkHoursAsync(System.Collections.Generic.List{System.DateTime},System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Asynchronously sets the working hours for a specified collection of dates.
            </summary>
            <param name="dates">The collection of working dates for which to set the working hours.</param>
            <param name="start">The start time of the working hours.</param>
            <param name="end">The end time of the working hours.</param>
            <param name="groupIndex">The index of the group to set the working hours for, if applicable.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.SfSchedule`1.OpenQuickInfoPopupAsync(Syncfusion.Blazor.Schedule.CellClickEventArgs)">
            <summary>
            Asynchronously opens the quick info popup based on cell details.
            </summary>
            <param name="data">The cell details for which to open the quick info popup.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.SfSchedule`1.OpenQuickInfoPopupAsync(`0)">
            <summary>
            Asynchronously opens the quick info popup based on event details.
            </summary>
            <param name="data">The event details for which to open the quick info popup.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.SfSchedule`1.GetCurrentAction">
            <summary>
            Gets the current action of the scheduler.
            </summary>
            <returns>The <see cref="T:Syncfusion.Blazor.Schedule.CurrentAction"/> of the scheduler.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.SfSchedule`1.ShowSpinnerAsync">
            <summary>
            Asynchronously shows the spinner on the scheduler.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Schedule.SfSchedule`1.GetGroupIndex``1(``0,System.String)">
            <summary>
            Gets the group index of a resource in the resource collection.
            </summary>
            <typeparam name="T">The type of the resource ID.</typeparam>
            <param name="resourceId">The ID of the resource to get the group index.</param>
            <param name="groupName">The name of the resource group, if applicable.</param>
            <returns>The group index of the resource.</returns>
        </member>
    </members>
</doc>
