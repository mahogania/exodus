@page "/stock-chart/multiple-series"
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Charts
@inject NavigationManager NavigationManager
@using ThemeHelper
@using System.Net.Http.Json
@inject HttpClient Http
@*Hidden:Lines*@
@inherits SampleBaseComponent;


@*End:Hidden*@

<SampleDescription>
    <p>This sample visualizes the close value of multiple stock. Crosshair show the information about the data and period.</p>
</SampleDescription>
<ActionDescription>
    <p>In this example, you can see how to render and configure stock chart to visualize the data for multiple stock. Stock Chart supports 6 major types of series namely <code>Line</code>, <code>Spline</code>, <code>Hilo</code>, <code>HiloOpenClose</code>, <code>Hollow Candle</code> and <code>Candle</code>. By using the series dropdown button in period selector you can navigate between the above listed series types.</p>
    <p>
       The legend is enabled, and you can use it to toggle the visibility of series in the stock chart. To customize the legend in the stock chart, use the <code>StockChartLegendSettings</code> property.
    </p>
    <p>
        More information about the series type can be found in this
        <a target="_blank" href="https://blazor.syncfusion.com/documentation/stock-chart/series-types" aria-label="documentation section" >documentation section</a>.
    </p>
</ActionDescription>

@if (DataSource == null)
{
    <div class="stockchartloader"></div> }
else
{
    <div class="@loadClass"></div>
    <div class="@loadDiv">
        <SfStockChart Title="Multiple Series" IndicatorType="@Indicators" Theme="@theme" SeriesType="@SeriesType">
            <StockChartEvents OnLoaded="@ChartLoaded"></StockChartEvents>
            <StockChartPrimaryXAxis>
                <StockChartAxisMajorGridLines Width="0"></StockChartAxisMajorGridLines>
                <StockChartAxisCrosshairTooltip Enable="true"></StockChartAxisCrosshairTooltip>
            </StockChartPrimaryXAxis>
            <StockChartPrimaryYAxis Interval="40">
                <StockChartAxisLineStyle Color="Transparent"></StockChartAxisLineStyle>
                <StockChartAxisMajorTickLines Width="0" Color="Transparent"></StockChartAxisMajorTickLines>
                <StockChartAxisCrosshairTooltip Enable="true"></StockChartAxisCrosshairTooltip>
            </StockChartPrimaryYAxis>
            <StockChartCrosshairSettings Enable="true"></StockChartCrosshairSettings>
            <StockChartSeriesCollection>
                <StockChartSeries DataSource="@DataSource" Type="ChartSeriesType.Spline" XName="x" YName="close" Name="GOOG"></StockChartSeries>
                <StockChartSeries DataSource="@DataSource2" Type="ChartSeriesType.Spline" XName="x" YName="close" Name="GOOGL"></StockChartSeries>
            </StockChartSeriesCollection>
            <StockChartChartArea>
                <StockChartChartAreaBorder Width="0"></StockChartChartAreaBorder>
            </StockChartChartArea>
            <StockChartLegendSettings Visible="true"></StockChartLegendSettings>
        </SfStockChart>
    </div>
    <style>
        .stockchartloader {
            border: 6px solid #f3f3f3;
            border-top: 6px solid #7a0fff;
            width: 40px;
            height: 40px;
            position: absolute;
            top: 46%;
            left: 46%;
            border-radius: 50%;
            -webkit-animation: loader 2s linear infinite;
            animation: loader 2s linear infinite;
        }

        .stockchartdiv {
            visibility: hidden;
        }

        div[id*="_stockChart_rangeSelector_leftTooltip"], div[id*="_stockChart_rangeSelector_rightTooltip"] {
            top: 10px !important;
        }

        div[id*="_selector_Secondary_Element"] {
            transform: translate(0px, @translateY) !important;
        }

        .e-tbar-btn {
            border-color: transparent !important;
        }

        @* @if(this.theme == Theme.Fluent2HighContrast)
        {
            <text>
                g[id*="_stockChart_chart_chart_legend_g"] {
                    transform: translate(0px, 1px) !important;
                }
            </text>
        } *@
    </style>
}
@code{ 
    
    private ChartData[] DataSource;

    private ChartData[] DataSource2;
    string translateY = "-5px";
    
    protected override async Task OnInitializedAsync()
    {
        BeforeRender();
        DataSource = await Http.GetFromJsonAsync<ChartData[]>(NavigationManager.BaseUri + SampleService.WebAssetsPath + "data/stock-chart/goog.json");
        DataSource2 = await Http.GetFromJsonAsync<ChartData[]>(NavigationManager.BaseUri + SampleService.WebAssetsPath + "data/stock-chart/googl.json");
        //Hidden:Lines
        if (theme == Theme.Material3 || theme == Theme.Material3Dark || theme == Theme.Bootstrap4 || theme == Theme.Material || theme == Theme.MaterialDark)
        {
            translateY = "-7px";
        }
        //End:Hidden
    }

    public class ChartData
    {
        public DateTime x { get; set; }
        public double open { get; set; }
        public double low { get; set; }
        public double close { get; set; }
        public double high { get; set; }
        public double volume { get; set; }
    }

    string loadClass = "stockchartloader";
    string loadDiv = "stockchartdiv";
    List<TechnicalIndicators> Indicators = new List<TechnicalIndicators>() { };
    public List<ChartSeriesType> SeriesType = new List<ChartSeriesType>() { ChartSeriesType.Line, ChartSeriesType.Hilo, ChartSeriesType.HiloOpenClose, ChartSeriesType.Candle, ChartSeriesType.Spline };
    void ChartLoaded(StockChartEventArgs args)
    {
        loadClass = "";
        loadDiv = "";
        StateHasChanged();
    }

    Theme theme = Theme.Bootstrap4;
    void BeforeRender()
    {
        theme = ThemeHelper.GetCurrentTheme(NavigationManager.Uri);
    } 
}