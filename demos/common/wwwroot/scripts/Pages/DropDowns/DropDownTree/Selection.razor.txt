@page "/DropDown-Tree/selection"

@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Buttons


@*Hidden:Lines*@
@inherits SampleBaseComponent
@inject NavigationManager NavigationManager


@*End:Hidden*@

<SampleDescription>
    <p>
        This sample explains the checkbox and multi-selection functionalities of the Dropdown Tree component with box and delimiter visual modes. Click on any parent item's checkbox to check or uncheck the item and its child items.
        The parent items' checked state will be determined by its child itemâ€™s checked state.
    </p>
    <p>
        To select multiple nodes, press the <code>CTRL</code> key and select the desired nodes. Or select any node, press the <code>SHIFT</code> key and select another node, which selects all the nodes in between the selected nodes.
    </p>
</SampleDescription>
<ActionDescription>
    <p>The <code>Dropdown Tree</code> component can be rendered with a checkbox on the left side of each tree item. This allows the user to check more than one item, and this can be enabled with the <code>ShowCheckBox</code> property.</p>
    <p>The <code>Dropdown Tree</code> component allows you to select multiple items by enabling the <code>AllowMultiSelection</code> property.</p>
    <p>In this demo, the Dropdown Tree component is populated with the checkbox feature enabled.</p>
</ActionDescription>

<div class="col-lg-12">
    <div class="col-lg-8 control-section sb-property-border">
            <div class="col-lg-6">
                <div class="control-wrapper">
                    <label for="checkbox" class="selection-label">Box Mode</label>
                <SfDropDownTree TItem="Listdata" TValue="string" ID="checkbox" Placeholder="Select a country" PopupHeight="200px" ShowCheckBox="true" AutoUpdateCheckState="AutoUpdateCheckState" Mode="DdtVisualMode.Box" Value="@(new List<string>(){"3"})">
                        <DropDownTreeField TItem="Listdata" DataSource="@ListDataSource" ID="Id" ParentID="Pid" Text="Name" HasChildren="HasChild" Expanded="Expanded"></DropDownTreeField>
                    </SfDropDownTree>
                </div>
            </div>
            <div class="col-lg-6">
                <div class="control-wrapper">
                    <label for="multiselection" class="selection-label">Delimiter Mode</label>
                    <SfDropDownTree TItem="FoodItem" TValue="string" ID="multiselection" Placeholder="Select an item" PopupHeight="200px" AllowMultiSelection="true" Mode="DdtVisualMode.Delimiter" ValueChanging="OnValueChanging" ExpandOn="ExpandAction.Click">
                        <DropDownTreeField TItem="FoodItem" DataSource="@FoodItems" ID="Id" ParentID="ParentId" Text="Name" HasChildren="HasChild" Expanded="Expanded"></DropDownTreeField>
                    </SfDropDownTree>
                </div>
            </div>
    </div>
    <div class="col-lg-4">
        <div class="property-panel-section">
            <div class="property-panel-header">Properties</div>
            <div class="property-panel-content">
                <SfCheckBox Label="Auto Update Check State" @bind-Checked="@AutoUpdateCheckState"></SfCheckBox>
            </div>
        </div>
    </div>
</div>

@code {
    bool AutoUpdateCheckState = true;
    List<FoodItem> FoodItems = new List<FoodItem>
    {
        new FoodItem { Id = "1", Name = "Menu", HasChild = true, Expanded=true },
        new FoodItem { Id = "2", Name = "Appetizers", ParentId = "1", HasChild = true  },
        new FoodItem { Id = "3", Name = "Main Courses", ParentId = "1", HasChild = true },
        new FoodItem { Id = "4", Name = "Desserts", ParentId = "1", HasChild = true },
        new FoodItem { Id = "5", Name = "Salads", ParentId = "2", HasChild = true, Expanded=true },
        new FoodItem { Id = "6", Name = "Starters", ParentId = "2",  HasChild = true },
        new FoodItem { Id = "7", Name = "Pasta", ParentId = "3",  HasChild = true },
        new FoodItem { Id = "8", Name = "Seafood", ParentId = "3", HasChild = true },
        new FoodItem { Id = "9", Name = "Caesar Salad", ParentId = "5" },
        new FoodItem { Id = "10", Name = "Greek Salad", ParentId = "5" },
        new FoodItem { Id = "11", Name = "Chicken Wings", ParentId = "6" },
        new FoodItem { Id = "12", Name = "Mozzarella Sticks", ParentId = "6" },
        new FoodItem { Id = "13", Name = "Spaghetti", ParentId = "7" },
        new FoodItem { Id = "14", Name = "Salmon", ParentId = "8" },
        new FoodItem { Id = "15", Name = "Tiramisu", ParentId = "4" },
        new FoodItem { Id = "16", Name = "Chocolate Cake", ParentId = "4" },
        new FoodItem { Id = "17", Name = "House Specials", ParentId = "3", HasChild = true },
        new FoodItem { Id = "18", Name = "Burgers", ParentId = "3" },
        new FoodItem { Id = "19", Name = "Sushi", ParentId = "17", HasChild = true },
        new FoodItem { Id = "20", Name = "Pizza", ParentId = "17", HasChild = true },
        new FoodItem { Id = "21", Name = "California Roll", ParentId = "19" },
        new FoodItem { Id = "22", Name = "Dragon Roll", ParentId = "19" },
        new FoodItem { Id = "23", Name = "Pepperoni Pizza", ParentId = "20" },
        new FoodItem { Id = "24", Name = "Vegetarian Pizza", ParentId = "20" },
        new FoodItem { Id = "25", Name = "Hawaiian Pizza", ParentId = "20" },
    };

    List<Listdata> ListDataSource = new List<Listdata>
    {
        new Listdata { Id = "1", Name = "Australia", HasChild = true, Expanded = true },
        new Listdata { Id = "2", Pid = "1", Name = "New South Wales" },
        new Listdata { Id = "3", Pid = "1", Name = "Victoria" },
        new Listdata { Id = "4", Pid = "1", Name = "South Australia" },
        new Listdata { Id = "6", Pid = "1", Name = "Western Australia" },
        new Listdata { Id = "7", Name = "Brazil", HasChild = true },
        new Listdata { Id = "8", Pid = "7", Name = "Parana" },
        new Listdata { Id = "9", Pid = "7", Name = "Ceara" },
        new Listdata { Id = "10", Pid = "7", Name = "Acre" },
        new Listdata { Id = "11", Name = "China", HasChild = true },
        new Listdata { Id = "12", Pid = "11", Name = "Guangzhou" },
        new Listdata { Id = "13", Pid = "11", Name = "Shanghai" },
        new Listdata { Id = "14", Pid = "11", Name = "Beijing" },
        new Listdata { Id = "15", Pid = "11", Name = "Shantou" },
        new Listdata { Id = "16", Name = "France", HasChild = true },
        new Listdata { Id = "17", Pid = "16", Name = "Pays de la Loire" },
        new Listdata { Id = "18", Pid = "16", Name = "Aquitaine" },
        new Listdata { Id = "19", Pid = "16", Name = "Brittany" },
        new Listdata { Id = "20", Pid = "16", Name = "Lorraine" },
        new Listdata { Id = "21", Name = "India", HasChild = true },
        new Listdata { Id = "22", Pid = "21", Name = "Assam" },
        new Listdata { Id = "23", Pid = "21", Name = "Bihar" },
        new Listdata { Id = "24", Pid = "21", Name = "Tamil Nadu" }
    };

    void OnValueChanging(DdtChangeEventArgs<string> args)
    {
        if (args.NodeData.HasChildren)
        {
            args.Cancel = true;
        }
    }

    class Listdata
    {
        public string Id { get; set; }
        public string Pid { get; set; }
        public string Name { get; set; }
        public bool HasChild { get; set; }
        public bool Expanded { get; set; }
    }

    class FoodItem
    {
        public string Id { get; set; }
        public string ParentId { get; set; }
        public string Name { get; set; }
        public bool HasChild { get; set; }
        public bool Expanded { get; set; }
        public Dictionary<string, object> htmlAttribute { get; set; }
    }
}

<style>
    .control-section {
        min-height: 370px;
    }

    .selection-label {
        font-size: 14px;
        margin-bottom: 6px;
    }

    .control-wrapper {
        max-width: 300px;
        margin: 0 auto;
        padding: 20px 0px 0px;
    }

    @@media (max-width: 900px) {
        .control-wrapper {
            padding: 30px 0px 0px;
        }

        .checkbox{
            display: flex;
            justify-content: center;
        }
    }

    .property-panel-content {
        padding: 0px 0px 15px 0px;
    }

    .property-panel-content:last-child {
        padding: 0px 0px 40px 0px;
    }
</style>
