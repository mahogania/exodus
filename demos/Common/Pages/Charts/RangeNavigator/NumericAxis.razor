@page "/range-selector/numeric-axis"
@using Syncfusion.Blazor.Charts
@using Syncfusion.Blazor
@using System.Net.Http.Json
@inject NavigationManager NavigationManager
@inject HttpClient Http
@*Hidden:Lines*@
@inherits SampleBaseComponent


@*End:Hidden*@

<SampleDescription>
    <p>This sample depicts the cricket match data between two countries with the help of numeric axis in range navigator.</p>
</SampleDescription>
<ActionDescription>
    <p>Numeric axis is used to plot numeric data in range navigator. To render numeric axis, set <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Charts.RangeValueType.html' aria-label="ValueType"> ValueType</a> to <code> Double</code>.</p>
    <p>
        <code>Tooltip</code> is enabled  to show the selected data range, while the selected range is changed.
    </p>
     <p>More information about the range navigator can be found in this <a target='_blank' href='https://blazor.syncfusion.com/documentation/range-selector/data#numeric' aria-label="documentation section" >documentation section</a>.</p>
</ActionDescription>

@if (AusData == null && SlData == null)
{
    <div class="stockchartloader"></div>
}
else
{
    <div class="control-section" align="center">
        <h4 style="font-family: Segoe UI;font-weight: 500; font-style:normal; font-size:15px;">Score Comparision AUS vs SL</h4>
        <div>
            <SfRangeNavigator LabelPosition="AxisPosition.Outside" @bind-Value="@Value"  Theme="@theme">
                <RangeNavigatorEvents Changed="OnRangeChanged"></RangeNavigatorEvents>
                <RangeNavigatorRangeTooltipSettings Enable="true"></RangeNavigatorRangeTooltipSettings>
                <RangeNavigatorSeriesCollection>
                    <RangeNavigatorSeries DataSource="@AusData" Width="2" XName="x" Type="RangeNavigatorType.Line" YName="y">
                    </RangeNavigatorSeries>
                    <RangeNavigatorSeries DataSource="@SlData" Width="2" XName="x" Type="RangeNavigatorType.Line" YName="y">
                    </RangeNavigatorSeries>
                </RangeNavigatorSeriesCollection>
            </SfRangeNavigator>
        </div>
        <div id="chartcontainer">
            <SfChart Theme="@theme">
                <ChartArea><ChartAreaBorder Width="0" Color="transparent"></ChartAreaBorder></ChartArea>
                <ChartPrimaryXAxis EdgeLabelPlacement="EdgeLabelPlacement.Shift" Title="Overs" ZoomFactor="@ZF" ZoomPosition="@ZP">
                    <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
                </ChartPrimaryXAxis>
                <ChartPrimaryYAxis Minimum="0" Title="Runs">
                    <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
                    <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
                </ChartPrimaryYAxis>
                <ChartSeriesCollection>
                    <ChartSeries DataSource="@AusData" XName="x" YName="y" Name="AUS" Width="2" Type="ChartSeriesType.Spline">
                        <ChartSeriesAnimation Enable="false"></ChartSeriesAnimation>
                    </ChartSeries>
                    <ChartSeries DataSource="@SlData" XName="x" YName="y" Name="SL" Width="2" Type="ChartSeriesType.Spline">
                        <ChartSeriesAnimation Enable="false"></ChartSeriesAnimation>
                    </ChartSeries>
                </ChartSeriesCollection>
                <ChartTooltipSettings Enable="false" Shared="false"></ChartTooltipSettings>
                <ChartLegendSettings Visible="false"></ChartLegendSettings>
            </SfChart>
        </div>
    </div>
}
@code{
    
    private ChartData[] AusData;
    private ChartData[] SlData;
    double ZF = 1;
    double ZP = 0;
    public string XValue = "85%";
    private Theme theme { get; set; }
    protected override async Task OnInitializedAsync()
    {
	    AusData = await Http.GetFromJsonAsync<ChartData[]>(NavigationManager.BaseUri + SampleService.WebAssetsPath + "data/range-navigator/double-data-aus.json");
		SlData = await Http.GetFromJsonAsync<ChartData[]>(NavigationManager.BaseUri + SampleService.WebAssetsPath + "data/range-navigator/double-data-sl.json");
    }
    public class ChartData
    {
        public double x { get; set; }
        public double y { get; set; }
        public bool isWicket { get; set; }
    }
    private object Value = new object[] { 31, 50 };
    public void OnRangeChanged(ChangedEventArgs args)
    {
        ZF = args.ZoomFactor;
        ZP = args.ZoomPosition;
        StateHasChanged();
    }

    string CurrentUri;
    protected override void OnInitialized()
    {
        
        CurrentUri = NavigationManager.Uri;
        if (CurrentUri.IndexOf("material3") > -1)
        {
            if (CurrentUri.IndexOf("dark") > -1)
            {
                 theme = Theme.Material3Dark;

            }
            else
            {
                 theme = Theme.Material3;

            }
        }
        else if (CurrentUri.IndexOf("material") > -1)
        {
            if (CurrentUri.IndexOf("dark") > -1)
            {
                theme = Theme.MaterialDark;
            }
            else
            {
                theme = Theme.Material;
            }
        }
        else if (CurrentUri.IndexOf("fabric") > -1)
        {
            if (CurrentUri.IndexOf("dark") > -1)
            {
                theme = Theme.FabricDark;
            }
            else
            {
                theme = Theme.Fabric;
            }
        }
        else if (CurrentUri.IndexOf("bootstrap5") > -1)
        {
            if (CurrentUri.IndexOf("dark") > -1)
            {
                theme = Theme.Bootstrap5Dark;
            }
            else
            {
                theme = Theme.Bootstrap5;
            }
        }
        else if (CurrentUri.IndexOf("fluent2") > -1)
        {
            // if (CurrentUri.IndexOf("highcontrast") > -1)
            // {
            //     theme = Theme.Fluent2HighContrast;
            // }
            if (CurrentUri.IndexOf("dark") > -1)
            {
                theme = Theme.Fluent2Dark;
            }
            else
            {
                theme = Theme.Fluent2;
            }
        }
        else if (CurrentUri.IndexOf("fluent") > -1)
        {
            if (CurrentUri.IndexOf("dark") > -1)
            {
                theme = Theme.FluentDark;
            }
            else
            {
                theme = Theme.Fluent;
            }
        }
        else if (CurrentUri.IndexOf("bootstrap4") > -1)
        {
            theme = Theme.Bootstrap4;
        }
        else if (CurrentUri.IndexOf("bootstrap") > -1)
        {
            if (CurrentUri.IndexOf("dark") > -1)
            {
                theme = Theme.BootstrapDark;
            }
            else
            {
                theme = Theme.Bootstrap;
            }
        }
        else if (CurrentUri.IndexOf("highcontrast") > -1)
        {
            theme = Theme.HighContrast;
        }
        else if (CurrentUri.IndexOf("tailwind") > -1)
        {
            if (CurrentUri.IndexOf("dark") > -1)
            {
                theme = Theme.TailwindDark;
            }
            else
            {
                theme = Theme.Tailwind;
            }
        }
        else
        {
            theme = Theme.Bootstrap4;
        }
    }
}