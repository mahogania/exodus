@page "/bullet-chart/right-to-left"
@using Syncfusion.Blazor.Charts
@using Syncfusion.Blazor
@inject NavigationManager NavigationManager
@*Hidden:Lines*@
@inherits SampleBaseComponent


@*End:Hidden*@

<SampleDescription>
    <p>This example shows a bullet chart in RTL mode.</p>
</SampleDescription>
<ActionDescription>
    <p><code>Right-to-left(RTL)</code> is used to render the component from right to left direction and it can be enabled by setting <code>EnableRtl</code> property as <b>true</b>. In this demo, you can see <code>Feature bar</code>, <code>Comparative bar</code>, <code>Labels</code> and <code>Targets</code> are aligned from right to left direction.</p>
    <p>
        <code>Tooltip</code> is enabled in this example. To see the tooltip in action, hover a feature bar or comparative bar on the bullet chart.
    </p>
    <p>More information about the bullet chart can be found in this <a target='_blank' href='https://blazor.syncfusion.com/documentation/bullet-chart/getting-started' aria-label="Navigate to the documentation for getting started with bullet chart component">documentation section</a>.</p>
</ActionDescription>

<div class="control-section" style="height: auto;">
    <div align="center">
        <SfBulletChart DataSource="@BulletChartData" ValueField="value" TargetField="target" Theme="@theme" Minimum="0" Maximum="300" Interval="@(SampleService.IsDevice ? 100 : 50)"
                       Title="Revenue YTD" LabelFormat="${value}K" EnableRtl="true" Height="110px" Width="@(SampleService.IsDevice ? "100%" : "80%")">
            <BulletChartTooltip TValue="ChartData" Enable="true"></BulletChartTooltip>
            <BulletChartRangeCollection>
                <BulletChartRange End="150"> </BulletChartRange>
                <BulletChartRange End="250"></BulletChartRange>
                <BulletChartRange End="300"></BulletChartRange>
            </BulletChartRangeCollection>
        </SfBulletChart>
    </div>
</div>
<style>
    .control-section, .sb-content-section {
        min-height: auto !important;
        height: auto !important;
    }
</style>

@code{
    
    public class ChartData
    {
        public double value { get; set; }
        public double target { get; set; }
    }
    public List<ChartData> BulletChartData = new List<ChartData>
{
        new ChartData { value = 270, target = 250 }
    };

    private string CurrentUri;
    private Theme theme { get; set; }
    protected override void OnInitialized()
    {
        
        CurrentUri = NavigationManager.Uri;
        if (CurrentUri.IndexOf("material3") > -1)
        {
            if (CurrentUri.IndexOf("dark") > -1)
            {
                theme = Theme.Material3Dark;
            }
            else
            {
                theme = Theme.Material3;
            }
        }
        else if (CurrentUri.IndexOf("material") > -1) 
        {
            if (CurrentUri.IndexOf("dark") > -1)
            {
                theme = Theme.MaterialDark;
            }
            else
            {
                theme = Theme.Material;
            }
        }
        else if (CurrentUri.IndexOf("fabric") > -1)
        {
            if (CurrentUri.IndexOf("dark") > -1)
            {
                theme = Theme.FabricDark;
            }
            else
            {
                theme = Theme.Fabric;
            }
        }
        else if (CurrentUri.IndexOf("bootstrap5") > -1)
        {
            if (CurrentUri.IndexOf("dark") > -1)
            {
                theme = Theme.Bootstrap5Dark;
            }
            else
            {
                theme = Theme.Bootstrap5;
            }
        }
        else if (CurrentUri.IndexOf("bootstrap4") > -1)
        {
            theme = Theme.Bootstrap4;
        }
        else if (CurrentUri.IndexOf("bootstrap") > -1)
        {
            if (CurrentUri.IndexOf("dark") > -1)
            {
                theme = Theme.BootstrapDark;
            }
            else
            {
                theme = Theme.Bootstrap;
            }
        }
        else if (CurrentUri.IndexOf("tailwind") > -1)
        {
            if (CurrentUri.IndexOf("dark") > -1)
            {
                theme = Theme.TailwindDark;
            }
            else
            {
                theme = Theme.Tailwind;
            }
        }
        else if (CurrentUri.IndexOf("fluent2") > -1)
        {
            // if (CurrentUri.IndexOf("highcontrast") > -1)
            // {
            //     theme = Theme.Fluent2HighContrast;
            // }
            if(CurrentUri.IndexOf("dark") > -1)
            {
                theme = Theme.Fluent2Dark;
            }
            else
            {
                theme = Theme.Fluent2;
            }
        }
        else if (CurrentUri.IndexOf("highcontrast") > -1)
        {
            theme = Theme.HighContrast;
        }
        else if (CurrentUri.IndexOf("fluent") > -1)
        {
            if (CurrentUri.IndexOf("dark") > -1)
            {
                theme = Theme.FluentDark;
            }
            else
            {
                theme = Theme.Fluent;
            }
        }
        else
        {
            theme = Theme.Bootstrap4;
        }
    }
}
