@page "/bullet-chart/legend"
@using Syncfusion.Blazor.Charts
@using Syncfusion.Blazor
@inject NavigationManager NavigationManager
@*Hidden:Lines*@
@inherits SampleBaseComponent;


@*End:Hidden*@

<SampleDescription>
    <p>A bullet chart with legend is shown in this example. In the chart, the legend is enabled to provide information about the target, range, and value.</p>
</SampleDescription>
<ActionDescription>
    <p>In this example, you can see how to render a bullet chart with legend. You can use <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Charts.BulletChartLegendSettings.html' aria-label="Navigate to the class reference for bullet chart legend settings">BulletChartLegendSettings</a> property to customize the legend in the chart.</p>
    <p>More information about the legend can be found in this <a target='_blank' href='https://blazor.syncfusion.com/documentation/bullet-chart/legend' aria-label="Navigate to the documentation for Legend in bullet chart component">documentation section</a>.</p>
</ActionDescription>

<div class="control-section">
    <div align="center">
        <SfBulletChart DataSource="@BulletChartData0" ValueField="value" Theme="@theme" TargetField="target" Minimum="0" Maximum="30" Interval="5"
                       Title="Package Downloads" Subtitle="in Thousands" Width="@Width" Height="@Height">
            <BulletChartTooltip TValue="ChartData" Enable="true"></BulletChartTooltip>
            <BulletChartLegendSettings Visible="true"></BulletChartLegendSettings>
            <BulletChartRangeCollection>
                <BulletChartRange End="8" Color="#CA4218" Name="Poor"> </BulletChartRange>
                <BulletChartRange End="18" Color="#EFC820" Name="Avg"></BulletChartRange>
                <BulletChartRange End="30" Color="#599C20" Name="Good"></BulletChartRange>
            </BulletChartRangeCollection>
        </SfBulletChart>
    </div>
</div>
<style>
    .control-section, .sb-content-section {
        min-height: auto !important;
        height: auto !important;
    }
</style>

@code{
    
    public bool visible = true;
    public class ChartData
    {
        public double value { get; set; }
        public double[] target { get; set; }
    }
    public List<ChartData> BulletChartData0 = new List<ChartData>
{
            new ChartData { value = 25, target = new double[] { 20, 26, 28 } }
        };

    private string CurrentUri;
    private Theme theme { get; set; }
    public string Height { get; set; } = "160";
    public string Width { get; set; } = "70%";

    protected override void OnInitialized()
    {
        if (SampleService.IsDevice)
        {
            Width = "100%";
            Height = "200";
        }

        
        CurrentUri = NavigationManager.Uri;
        if (CurrentUri.IndexOf("material3") > -1)
        {
            if (CurrentUri.IndexOf("dark") > -1)
            {
                theme = Theme.Material3Dark;
            }
            else
            {
                theme = Theme.Material3;
            }
        }
        else if (CurrentUri.IndexOf("material") > -1)
        {
            if (CurrentUri.IndexOf("dark") > -1)
            {
                theme = Theme.MaterialDark;
            }
            else
            {
                theme = Theme.Material;
            }
        }
        else if (CurrentUri.IndexOf("fabric") > -1)
        {
            if (CurrentUri.IndexOf("dark") > -1)
            {
                theme = Theme.FabricDark;
            }
            else
            {
                theme = Theme.Fabric;
            }
        }
        else if (CurrentUri.IndexOf("bootstrap5") > -1)
        {
            if (CurrentUri.IndexOf("dark") > -1)
            {
                theme = Theme.Bootstrap5Dark;
            }
            else
            {
                theme = Theme.Bootstrap5;
            };
        }
        else if (CurrentUri.IndexOf("bootstrap4") > -1)
        {
            theme = Theme.Bootstrap4;
        }
        else if (CurrentUri.IndexOf("bootstrap") > -1)
        {
            if (CurrentUri.IndexOf("dark") > -1)
            {
                theme = Theme.BootstrapDark;
            }
            else
            {
                theme = Theme.Bootstrap;
            }
        }
        else if (CurrentUri.IndexOf("tailwind") > -1)
        {
            if (CurrentUri.IndexOf("dark") > -1)
            {
                theme = Theme.TailwindDark;
            }
            else
            {
                theme = Theme.Tailwind;
            }
        }
        else if (CurrentUri.IndexOf("fluent2") > -1)
        {
            // if (CurrentUri.IndexOf("highcontrast") > -1)
            // {
            //     theme = Theme.Fluent2HighContrast;
            // }
            if(CurrentUri.IndexOf("dark") > -1)
            {
                theme = Theme.Fluent2Dark;
            }
            else
            {
                theme = Theme.Fluent2;
            }
        }
        else if (CurrentUri.IndexOf("highcontrast") > -1)
        {
            theme = Theme.HighContrast;
        }
        else if (CurrentUri.IndexOf("fluent") > -1)
        {
            if (CurrentUri.IndexOf("dark") > -1)
            {
                theme = Theme.FluentDark;
            }
            else
            {
                theme = Theme.Fluent;
            }
        }
        else
        {
            theme = Theme.Bootstrap4;
        }
    }
}
