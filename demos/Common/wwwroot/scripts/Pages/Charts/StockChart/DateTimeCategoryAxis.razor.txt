@page "/stock-chart/date-time-category-axis"
@using Syncfusion.Blazor.Charts
@using Syncfusion.Blazor
@using ThemeHelper
@inject NavigationManager NavigationManager
@using System.Net.Http.Json
@inject HttpClient Http
@*Hidden:Lines*@
@inherits SampleBaseComponent;


@*End:Hidden*@

<SampleDescription>
    <p>This sample demonstrates the AAPL stock price using the <code>DateTimeCategory</code> axis type in the stock chart to display the minimum number of labels without any overlap on various business days.</p>
</SampleDescription>
<ActionDescription>
    <p>In this example, you can see how to render and configure a stock chart to visualize stock data using the <code>DateTimeCategory</code> axis type. To render a line series, use a <code>Line</code> series type.</p>
    <p>Meanwhile, crosshair is enabled in this example. Hover over the chart or tap it on touch-enabled devices to see the crosshair in action.</p>
    <p>More information about axis types can be found in this <a target='_blank' href='https://blazor.syncfusion.com/documentation/stock-chart/axis-types' aria-label="documentation section" >documentation section</a>.</p>
</ActionDescription>

@if (DataSource == null)
{
    <div class="stockchartloader"></div>
}
else
{
    <div class="@loadClass"></div>
    <div class="@loadDiv">
        <SfStockChart Title="AAPL Stock Price" Theme="@theme">
            <StockChartEvents OnLoaded="@ChartLoaded"></StockChartEvents>
            <StockChartPrimaryXAxis ValueType="@Syncfusion.Blazor.Charts.ValueType.DateTimeCategory">
                <StockChartAxisMajorGridLines Width="0"></StockChartAxisMajorGridLines>
                <StockChartAxisCrosshairTooltip Enable="true"></StockChartAxisCrosshairTooltip>
            </StockChartPrimaryXAxis>
            <StockChartPrimaryYAxis>
                <StockChartAxisLineStyle Width="0"></StockChartAxisLineStyle>
                <StockChartAxisMajorTickLines Width="0"></StockChartAxisMajorTickLines>
            </StockChartPrimaryYAxis>
            <StockChartTooltipSettings Enable="true" Header="AAPL Stock Price"></StockChartTooltipSettings>
            <StockChartCrosshairSettings Enable="true"></StockChartCrosshairSettings>
            <StockChartSeriesCollection>
                <StockChartSeries DataSource="@DataSource" Type="ChartSeriesType.Line"></StockChartSeries>
            </StockChartSeriesCollection>
            <StockChartChartArea>
                <StockChartChartAreaBorder Width="0"></StockChartChartAreaBorder>
            </StockChartChartArea>
        </SfStockChart>
    </div>
    <style>
        .stockchartloader {
            border: 6px solid #f3f3f3;
            border-top: 6px solid #7a0fff;
            width: 40px;
            height: 40px;
            position: absolute;
            top: 46%;
            left: 46%;
            border-radius: 50%;
            -webkit-animation: loader 2s linear infinite;
            animation: loader 2s linear infinite;
        }

        .stockchartdiv {
            visibility: hidden;
        }

        div[id*="_stockChart_rangeSelector_leftTooltip"], div[id*="_stockChart_rangeSelector_rightTooltip"] {
            top: 10px !important;
        }

        div[id*="_selector_Secondary_Element"] {
            transform: translate(0px, @translateY) !important;
        }

        .e-tbar-btn {
            border-color: transparent !important;
        }
    </style>
}

@code {
    public List<ChartSeriesType> nulldata = new List<ChartSeriesType>();
    private ChartData[] DataSource;
    string translateY = "-5px";
    

    protected override async Task OnInitializedAsync()
    {
        BeforeRender();
        DataSource = await Http.GetFromJsonAsync<ChartData[]>(NavigationManager.BaseUri + SampleService.WebAssetsPath + "data/stock-chart/financial-stock-chart-data.json");
        //Hidden:Lines
        if (theme == Theme.Material3 || theme == Theme.Material3Dark || theme == Theme.Bootstrap4 || theme == Theme.Material || theme == Theme.MaterialDark)
        {
            translateY = "-7px";
        }
        //End:Hidden
    }

    public class ChartData
    {
        public DateTime date { get; set; }
        public double open { get; set; }
        public double low { get; set; }
        public double close { get; set; }
        public double high { get; set; }
        public double volume { get; set; }
    }

    string loadClass = "stockchartloader";
    string loadDiv = "stockchartdiv";
    void ChartLoaded(StockChartEventArgs args)
    {
        loadClass = "";
        loadDiv = "";
        StateHasChanged();
    }

    Theme theme = Theme.Bootstrap4;
    void BeforeRender()
    {
        theme = ThemeHelper.GetCurrentTheme(NavigationManager.Uri);
    }
}