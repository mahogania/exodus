@page "/pdf-viewer-2/redaction"

@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.SfPdfViewer
@using Syncfusion.Blazor.SplitButtons
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Drawing
@using Syncfusion.Pdf
@using Syncfusion.Pdf.Graphics
@using Syncfusion.Pdf.Interactive
@using Syncfusion.Pdf.Parsing
@using Syncfusion.Pdf.Redaction
@using Syncfusion.Blazor.Popups
@using System.IO
@inject IJSRuntime JSRuntime
@*Hidden:Lines*@
@inherits SampleBaseComponent
@inject NavigationManager NavigationManager
@*End:Hidden*@
<SampleDescription>
    <p> The PDF viewer facilitates the permanent removal of sensitive or confidential data from PDF files. Simplifying the redaction process, Syncfusion’s <a target='_blank' href='https://www.syncfusion.com/document-processing/pdf-framework/net/pdf-library' aria-label="Navigate to the Redaction Documendation in PDF library">.NET PDF library</a> includes features for seamless implementation. </p>
</SampleDescription>
<ActionDescription>
   
   
   <p> This example showcases the implementation of redaction using rectangle annotation, leveraging the Redaction feature in <a target='_blank' href='https://help.syncfusion.com/file-formats/pdf/working-with-redaction' aria-label="Navigate to the Redaction Documendation by pdf viewer Library">File formats</a>.</p>
   <br />
   <p>
Various types of redactions are demonstrated: </p>
 <br />
   <ul>
        <li>Displaying text over the redacted area</li>
        <li>Adding an image to the redacted area</li>
        <li>Drawing patterns on the redacted area</li>
        <li>Blacking out the redacted area</li>
        <li>Whitening out the redacted area</li>
   </ul>
 <br />
<p> Upon selecting areas on a page or across different pages with different redaction options, users can click the `Redact button`. This action redacts the document and reloads it into the PDF Viewer. The redacted document can then be saved or downloaded. </p>

@*WASM:Block*@
@{ #if WASM }
    <p>More information about the SfPdfViewer can be found in this<a target='_blank' href='https://blazor.syncfusion.com/documentation/pdfviewer-2/annotation' aria-label="Navigate to the documentation for Text markup annotations in SfPdfViewer component" > documentation section</a>.</p>
@{ #endif }
@*End:WASM*@

@*Server:Block*@
@{ #if !(WASM) }
    <p>More information about the SfPdfViewer can be found in this<a target='_blank' href='https://blazor.syncfusion.com/documentation/pdfviewer-2/annotation' aria-label="Navigate to the documentation for Text markup annotations in SfPdfViewer component" > documentation section</a>.</p>
@{ #endif }
@*End:Server*@
</ActionDescription>

<div class="control-section" id="panel">
    @*Hidden:Lines*@
        <div style="display:none">
            <SfUploader @ref="@uploadFiles" ID="UploadFiles" ShowFileList="false" AllowedExtensions=".pdf">
                <UploaderEvents OnUploadStart="@FileUploadSelected" Created="@createdHandler"></UploaderEvents>
                <UploaderAsyncSettings SaveUrl="https://services.syncfusion.com/aspnet/production/api/FileUploader/Save" RemoveUrl="https://services.syncfusion.com/aspnet/production/api/FileUploader/Remove"></UploaderAsyncSettings>
            </SfUploader>
        </div>
    @*End:Hidden*@
    <SfAppBar ColorMode="AppBarColor.Primary">
        <span class="regular">Redaction</span>
        <AppBarSpacer></AppBarSpacer>
        <SfButton CssClass="e-inherit" IconCss="e-icons e-download" OnClick="@DownloadDocument">Download</SfButton>
    </SfAppBar>
    <div class="e-pv-primary-toolbar">
        <SfToolbar>
            <ToolbarEvents Clicked="@ToolbarClick"></ToolbarEvents>
           <ToolbarItems>
               <ToolbarItem TabIndex="1" PrefixIcon="e-icon e-folder" Text="Open"CssClass="e-pv-open-container" Id="pdfviewer_open"></ToolbarItem>
               <ToolbarItem Type="ItemType.Separator"></ToolbarItem>
                <ToolbarItem TabIndex="2" PrefixIcon="e-icon e-text-annotation" Text="Text" CssClass="e-pv-font-container"></ToolbarItem>
               <ToolbarItem TabIndex="3" PrefixIcon="e-icons e-image" Text="Image" CssClass="e-pv-image-container"></ToolbarItem>
                <ToolbarItem TabIndex="4" PrefixIcon="e-icons e-opacity" Text="Pattern" CssClass="e-pv-pattern-container"> </ToolbarItem>
                <ToolbarItem TabIndex="5" PrefixIcon="e-icons black-out" Text="Blackout" CssClass="e-pv-black-out-container"></ToolbarItem>
                <ToolbarItem TabIndex="6" PrefixIcon="e-icons white-out" Text="Whiteout" CssClass="e-pv-white-out-container"></ToolbarItem>
               <ToolbarItem Type="ItemType.Separator"></ToolbarItem>
                <ToolbarItem Disabled="@(RedactionCount <= 0)" TabIndex="7" PrefixIcon="e-icons e-redaction" Text="Redact" CssClass="e-pv-redaction-container"></ToolbarItem>
           </ToolbarItems>
        </SfToolbar>
    </div>
    <div class="e-pv-secondary-toolbar">
        <SfToolbar>
            <ToolbarEvents Clicked="@ToolbarClick"></ToolbarEvents>
            <ToolbarItems>
                <ToolbarItem TabIndex="8" PrefixIcon="e-icon e-chevron-left" Disabled="IsPreviousPageExist" CssClass="e-pv-previous-container"></ToolbarItem>
                <ToolbarItem><Template><span>@CurrentPageNumber &nbsp;/&nbsp; @TotalPageNumber</span></Template></ToolbarItem>
                <ToolbarItem TabIndex="9" PrefixIcon="e-icon e-chevron-right" Disabled="IsNextPageExist" CssClass="e-pv-next-container"></ToolbarItem>
                <ToolbarItem Type="ItemType.Separator"></ToolbarItem>
                <ToolbarItem TabIndex="10" Id="zoom-input"><Template><SfDropDownList TValue="string" TItem="string" DataSource="@ZoomValues" @bind-Value="@ZoomValue" Placeholder="@ZoomValue" PopupWidth="100px" ShowClearButton="false">
                   <DropDownListEvents TItem="string" TValue="string" ValueChange="@ZoomValueChange"/>
                   </SfDropDownList></Template></ToolbarItem>
                <ToolbarItem Type="ItemType.Separator"></ToolbarItem>
            </ToolbarItems>
        </SfToolbar>
    </div>
    @*Hidden:Lines*@
    @if (IsVisibleDialog)
    {
        <SfDialog ShowCloseIcon="false" CssClass="dialog-container" IsModal="true" Target="#panel"  Visible="@IsVisibleDialog" Width="477px">
            <DialogTemplates>
             <Content><span style="border:2px solid black"></span></Content>
             <Header>Upload Image <SfButton IconCss="e-icons e-close" CssClass="close-button" OnClick="ClosePopUp"></SfButton></Header>
             
             <Content>
                 <div class="drop-area-wrap">
                    <SfUploader AutoUpload="true" DropArea=".drop-area-wrap" SequentialUpload="false" AllowedExtensions=".png, .jpg, .jpeg" >
                       <UploaderEvents ValueChange="ImageChane" ></UploaderEvents>
                    </SfUploader>
                     <div class="upload-footer">(Only JPG and PNG images will be accepted)</div>
                     </div>
                     <div class="image-list">
                    @if(Images != null)
                    {
                        if(Images.Count > 0)
                        {
                             <div class="@(Images[0].ImageSelected ? "image-container image-container-selected" : "image-container")" >
                                <img class="image-source" src="@Images[0].ImageData" @onclick="()=>ImageSelected(0)"/>
                            </div>
                            if(Images.Count > 1)
                            {
                                <div class="@(Images[1].ImageSelected ? "image-container image-container-selected" : "image-container")" >
                                    <img class="image-source" src="@Images[1].ImageData" @onclick="()=>ImageSelected(1)"/>
                                </div>
                                if (Images.Count > 2)
                                {
                                    <div class="@(Images[2].ImageSelected ? "image-container image-container-selected" : "image-container")">
                                            <img class="image-source" src="@Images[2].ImageData" @onclick="()=>ImageSelected(2)"/>
                                    </div> 
                                }
                            }
                            
                        } 
                    }
                </div>
             </Content>
         </DialogTemplates>
         <DialogButtons>
            <DialogButton CssClass="e-flat" Content="OK" Disabled="IsImageSelected" OnClick="AddImage"></DialogButton>
            <DialogButton CssClass="e-flat" Content="Cancel" OnClick="CancelImage"></DialogButton>
        </DialogButtons>
    </SfDialog>
    }
   @*End:Hidden*@
   
     <SfPdfViewer2 @ref="Viewer" DocumentPath="@DocumentPath" EnableToolbar="false" ContextMenuSettings="@contextMenu" EnableAnnotationToolbar="false" EnableNavigationToolbar="false" EnableCommentPanel="false" Width="100%" Height="640px" DownloadFileName="Redact"
         RectangleSettings="@RectangleAnnoSettings" CustomStampSettings="@CustomStampSettings">
         <PdfViewerCustomStampSettings CustomStamps="@CustomStamps" Author="Image"></PdfViewerCustomStampSettings>
         <PdfViewerAnnotationSettings Author="Image"></PdfViewerAnnotationSettings>
         <PdfViewerEvents DocumentLoaded="@DocumentLoaded" PageChanged="@OnPageChanged" AnnotationAdded="@OnAddAnnotation" AnnotationSelected="OnAnnotationSelect" AnnotationRemoved="@OnRemoveAnnotation"></PdfViewerEvents>  
     </SfPdfViewer2>
</div>
@*Hidden:Lines*@
<style>
    .image-list {
        display: flex;
        justify-content: center;
        gap: 35px;
    }
    .image-container-selected {
        border: 1px solid #757575 !important;
    }
    .image-container:hover {
        border: 1px solid #757575;
    }
    .e-dialog .e-upload-files {
        border: none !important;
    }
    .e-pv-primary-toolbar .e-toolbar {
        border-left-width: 1px !important;
        border-right-width: 1px !important;
    }
    .e-bigger .e-icons {
        padding: 4px !important; 
    }
    .e-bigger .e-tbar-btn-text {
        padding: 6px 4px !important;
    }
    .e-bigger .e-pv-secondary-toolbar .e-toolbar .e-toolbar-item {
        min-width:auto !important;
    }
    .e-bigger .e-toolbar .e-toolbar-item.e-pv-black-out-container .e-tbar-btn.e-btn,
    .e-bigger .e-toolbar .e-toolbar-item.e-pv-white-out-container .e-tbar-btn.e-btn {
        padding-top : 5px !important;
    }
    .e-bigger .e-icons.e-close {
        width:100%;
    }
    
     .e-bigger .e-pv-black-out-container .e-tbar-btn .e-tbar-btn-text,
     .e-bigger .e-pv-white-out-container .e-tbar-btn .e-tbar-btn-text{
         padding: 2px 4px 7px 4px !important;
     }
     .e-pv-primary-toolbar .e-toolbar-item.e-template .e-dropdown-btn {
         font-size:14px;
     }
     .e-bigger .e-pv-primary-toolbar .e-toolbar-item.e-template .e-dropdown-btn {
         font-size:16px;
     }
    .e-icons.e-shapes,
    .e-icons.e-circle-add{
        position: relative;
        top: -5px;
    }
    .black-out {
        background-color: black;
        width: 18px !important;
        height: 18px !important;
        border: 1px solid white;
        border-radius: 3px;
        margin:4px !important;
    }
    .e-bigger .black-out,
    .e-bigger .white-out {
        position: relative;
        top: -4px;
    }
    .e-toolbar .e-toolbar-item .e-tbar-btn.e-tbtn-txt .e-icons.e-btn-icon {
        padding: 4px !important;
    }
    .e-dropdown-menu .e-item {
        align-items: center;
    }
    .white-out {
        background-color: white;
        width: 18px !important;
        height: 18px !important;
        border: 1px solid black;
        border-radius: 3px;
        margin:4px !important;
    }
    .e-pv-secondary-toolbar .e-toolbar {
        height: 47px !important;
        border-width: 1px !important;
        min-height: auto !important;
    }
    .e-pv-primary-toolbar .e-toolbar .e-toolbar-item.e-separator {
        height : 48px !important;
    }
    .e-template .e-control-container {
        border: none !important;
        background-color: inherit !important;        
    }
    .image-source {
        width: 70px;
        height: 70px;
    }
    .dialog-container .e-dlg-header {
        display: flex !important;
        justify-content: space-between;
    }
    .close-button{
        border: none;
        background-color: inherit;
        box-shadow:none;
    }
    .e-select-icon {
           background: #e1dfdd !important;
           border-radius: 8px;
           height: 38px !important;
    }
    .image-container {
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        border: 1px solid transparent;
        display: flex;
        flex-direction: column;
        align-items: center;
        padding: 4px;
        gap: 5px;
        border-radius:4px;
    }

    .e-upload-file-list {
        display: none;
    }
    .drop-area-wrap {
        display: flex;
        border: 1px dashed #c8c6c4;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        gap: 12px;
        padding: 16px;
        border-radius: 6px;
    }
    .e-file-select-wrap {
        display: flex;
        flex-direction: column;
        align-items: center;
    }
    .e-dlg-content .e-upload {
        border:none;
    }
    .control-section .e-appbar {
        height:36px;
        font-size: 14px !important;
    }
    .e-popup.e-popup-open.e-dialog .e-dlg-content{
        border-radius: 16px;
        display: flex;
        flex-direction: column;
        gap: 25px;
    }
    .e-pv-primary-toolbar .e-toolbar {
        height:72px !important;
        padding: 0 9px;
    }
    .e-pv-primary-toolbar .e-toolbar .e-dropdown-btn,
    .e-pv-secondary-toolbar .e-toolbar .e-dropdown-btn{
        font-weight: inherit;
        padding: 0px;
        background: inherit;
        border: none;
        box-shadow: none;
        color: inherit;
    }
    .e-dropdown-btn .e-shapes,
    .e-dropdown-btn .e-circle-add {
        padding-bottom: 7px !important;
    }
    .e-toolbar .e-toolbar-item .e-tbar-btn.e-btn .e-icons.e-btn-icon,
    .e-dropdown-btn .e-btn-icon, .e-dropdown-btn.e-btn .e-btn-icon {
        font-size: 18px;
    }
    .e-pv-primary-toolbar .e-toolbar .e-toolbar-item .e-tbar-btn {
         flex-direction: column;
         padding: 5px;
    }
    .e-pv-primary-toolbar .e-toolbar-items,
    .e-pv-secondary-toolbar .e-toolbar-items {
        gap: 5px;
    } 
    #zoom-input {
        width : 97px;
    }
    .e-pv-primary-toolbar .e-template{
        padding:5px !important;
    }
    .e-bigger .e-pv-primary-toolbar .e-template{
         padding: 0 8px !important;
    }
    .e-signature {
        background-color: transparent;
        border: 0px solid;
    }
    .e-control-wrapper.e-slider-container.e-horizontal .e-slider-track {
        background: #007bff;
        height: 3px;
    }
    .e-control-wrapper.e-slider-container .e-slider .e-handle {
        background-color: #f9920b;
        border-radius: 50%;
        border: 0;
    }
    .e-dropdown-btn .e-caret, .e-dropdown-btn.e-btn .e-caret {
        font-size:12px !important;
    }
    .e-pv-secondary-toolbar .e-btn .e-btn-icon.e-icon-left {
        margin-left: 0;
    }

</style>
@*End:Hidden*@
@code {
    PdfViewerContextMenuSettings contextMenu = new PdfViewerContextMenuSettings();

    SfPdfViewer2 Viewer;
    private string DocumentPath { get; set; } = "";
    protected override void OnInitialized()
    {

        string fileDataPath = NavigationManager.BaseUri + SampleService.WebAssetsPath;
        contextMenu.EnableContextMenu = false;

@*Server:Block*@
#if !(WASM || WEBAPP)
        //Sets the PDF document path for initial loading.
        DocumentPath = "wwwroot/data/pdfviewer2/programmatical-annotations.pdf";
#endif
@*End:Server*@

@*WebAssembly:Block*@
#if (WASM || WEBAPP)
        //Sets the PDF document path for initial loading.
        DocumentPath= fileDataPath + "data/pdfviewer2/programmatical-annotations.pdf";
#endif
        @*End:WebAssembly*@

    }
    @*Hidden:Lines*@
    SfUploader uploadFiles;
    private bool IsImageSelected = true;
    private bool IsPreviousPageExist { get; set; } = true;
    private bool IsNextPageExist { get; set; }
    private string[] ZoomValues = { "10%","25%","50%","75%","100%", "200%", "400%"};
    private string ZoomValue = "100%";
    private string RedactionText = "Redacted";
    private int RedactionCount = 0;
    private List<ImageDetails> Images = new List<ImageDetails>();
    @*End:Hidden*@
    private int TotalPageNumber { get; set; } = 1;
    private int CurrentPageNumber { get; set; } = 1; 
    private bool IsVisibleDialog = false;
    private PdfViewerRectangleSettings RectangleAnnoSettings = new PdfViewerRectangleSettings();
    private PdfViewerCustomStampSettings CustomStampSettings = new PdfViewerCustomStampSettings();
    List<PdfViewerCustomStamp> CustomStamps;
    Syncfusion.Blazor.SfPdfViewer.PdfAnnotation annotation = new Syncfusion.Blazor.SfPdfViewer.PdfAnnotation();
    private string CustomStampSource = "";

    //Method for handle the Toolbar items click events
    private async Task ToolbarClick(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item != null)
        {

            // Switch case based on the CSS class of the clicked item
            switch (args.Item.CssClass)
            {
                // Case when the 'Redact' tool is clicked
                case "e-pv-redaction-container":
                    RefreshButtons();
                    //Apply the Redaction for the selected rectangles
                    await ApplyRedaction();
                    break;
                // Case when the 'Text' tool is clicked
                case "e-pv-font-container":
                    RefreshButtons();
                    //Apply the rectangle for text redaction
                    await TextRedaction();
                    break;
                // Case when the 'Image' tool is clicked
                case "e-pv-image-container":
                    RefreshButtons();
                    IsVisibleDialog = true;
                    await ResetMode();
                    break; 
                // Case when the 'Pattern' tool is clicked
                case "e-pv-pattern-container":
                    RefreshButtons();
                    await AddPattern();
                    break;
                // Case when the 'White Out' tool is clicked
                case "e-pv-white-out-container":
                    RefreshButtons();
                    //Apply the rectangle for white out redaction
                    await AddWhiteOut();
                    break;
                // Case when the 'Black Out ' tool is clicked
                case "e-pv-black-out-container":
                    RefreshButtons();
                    //Apply the rectangle for black out redaction
                    await AddBlackOut();
                    break;
                // Case when the 'Previous' button is clicked
                case "e-pv-previous-container":
                    // Go to the previous page
                    await Viewer.GoToPreviousPageAsync();
                    break;
                // Case when the 'Next' button is clicked
                case "e-pv-next-container":
                    // Go to the next page
                    await Viewer.GoToNextPageAsync();
                    break;
            }
            StateHasChanged();
        }
    }

    //Method for applying redaction in the document 
    private async Task ApplyRedaction()
    {
        // Get the document from the viewer
        byte[] byteArray = await Viewer.GetDocumentAsync();
        PdfLoadedDocument loadedDocument = new PdfLoadedDocument(byteArray);
        // Iterate over each page in the document
        foreach (PdfLoadedPage loadedPage in loadedDocument.Pages)
        {
            List<PdfLoadedAnnotation> removeItems = new List<PdfLoadedAnnotation>();
            // Iterate over each annotation in the page
            foreach (PdfLoadedAnnotation annotation in loadedPage.Annotations)
            {
                // Check if the annotation is a rectangle and its author is "Redaction"
                if (annotation is PdfLoadedRectangleAnnotation )
                {
                    //Apply the white out and blackout redactions
                    if(annotation.Author == "Redaction")
                    {
                        // Add the annotation to the removeItems list
                        removeItems.Add(annotation);
                        // Create a new redaction with the annotation bounds and color
                        PdfRedaction redaction = new PdfRedaction(annotation.Bounds, annotation.Color);
                        // Add the redaction to the page
                        loadedPage.AddRedaction(redaction);
                        annotation.Flatten = true;
                    }
                    //Apply the text redaction
                    if(annotation.Author == "Text")
                    {
                        // Add the annotation to the removeItems list
                        removeItems.Add(annotation);
                        // Create a new redaction with the annotation bounds and color
                        PdfRedaction redaction = new PdfRedaction(annotation.Bounds);
                        //Set the font family and font size
                        PdfStandardFont font = new PdfStandardFont(PdfFontFamily.Courier, 8);
                        //Create the appearance like repeated text in the redaction area 
                        CreateRedactionAppearance(redaction.Appearance.Graphics, PdfTextAlignment.Left, true, new SizeF(annotation.Bounds.Width, annotation.Bounds.Height), RedactionText, font, PdfBrushes.Red);
                        // Add the redaction to the page
                        loadedPage.AddRedaction(redaction);
                        annotation.Flatten = true;
                    }
                    //Apply the pattern for the Redaction
                    if(annotation.Author == "Pattern")
                    {
                        // Add the annotation to the removeItems list
                        removeItems.Add(annotation);
                        // Create a new redaction with the annotation bounds and color
                        PdfRedaction redaction = new PdfRedaction(annotation.Bounds);
                        RectangleF rect = new RectangleF(0, 0, 8, 8); 
                        PdfTilingBrush tillingBrush = new PdfTilingBrush(rect); 
                        tillingBrush.Graphics.DrawRectangle(PdfBrushes.Gray, new RectangleF(0, 0, 2, 2)); 
                        tillingBrush.Graphics.DrawRectangle(PdfBrushes.White, new RectangleF(2, 0, 2, 2)); 
                        tillingBrush.Graphics.DrawRectangle(PdfBrushes.LightGray, new RectangleF(4, 0, 2, 2)); 
                        tillingBrush.Graphics.DrawRectangle(PdfBrushes.DarkGray, new RectangleF(6, 0, 2, 2)); 
                        tillingBrush.Graphics.DrawRectangle(PdfBrushes.White, new RectangleF(0, 2, 2, 2)); 
                        tillingBrush.Graphics.DrawRectangle(PdfBrushes.LightGray, new RectangleF(2, 2, 2, 2)); 
                        tillingBrush.Graphics.DrawRectangle(PdfBrushes.Black, new RectangleF(4, 2, 2, 2)); 
                        tillingBrush.Graphics.DrawRectangle(PdfBrushes.LightGray, new RectangleF(6, 2, 2, 2)); 
                        tillingBrush.Graphics.DrawRectangle(PdfBrushes.LightGray, new RectangleF(0, 4, 2, 2)); 
                        tillingBrush.Graphics.DrawRectangle(PdfBrushes.DarkGray, new RectangleF(2, 4, 2, 2)); 
                        tillingBrush.Graphics.DrawRectangle(PdfBrushes.LightGray, new RectangleF(4, 4, 2, 2)); 
                        tillingBrush.Graphics.DrawRectangle(PdfBrushes.White, new RectangleF(6, 4, 2, 2)); 
                        tillingBrush.Graphics.DrawRectangle(PdfBrushes.Black, new RectangleF(0, 6, 2, 2)); 
                        tillingBrush.Graphics.DrawRectangle(PdfBrushes.LightGray, new RectangleF(2, 6, 2, 2));
                        tillingBrush.Graphics.DrawRectangle(PdfBrushes.Black, new RectangleF(4, 6, 2, 2)); 
                        tillingBrush.Graphics.DrawRectangle(PdfBrushes.DarkGray, new RectangleF(6, 6, 2, 2));
                        rect = new RectangleF(0, 0, 16, 14); PdfTilingBrush tillingBrushNew = new PdfTilingBrush(rect); 
                        tillingBrushNew.Graphics.DrawRectangle(tillingBrush, rect); 
                        //Set the pattern for the redaction area
                        redaction.Appearance.Graphics.DrawRectangle(tillingBrushNew, new RectangleF(0, 0, annotation.Bounds.Width, annotation.Bounds.Height));
                        // Add the redaction to the page
                        loadedPage.AddRedaction(redaction);
                        annotation.Flatten = true;
                    }
                }
                else if (annotation is PdfLoadedRubberStampAnnotation) 
                {
                    //Get the Annotation details in the pdf viewer
                    Syncfusion.Blazor.SfPdfViewer.PdfAnnotation NewAnnotation = new Syncfusion.Blazor.SfPdfViewer.PdfAnnotation();
                    List<Syncfusion.Blazor.SfPdfViewer.PdfAnnotation> pdfAnnotationList = new List<Syncfusion.Blazor.SfPdfViewer.PdfAnnotation>();
                    pdfAnnotationList = await Viewer.GetAnnotationsAsync();
                    int selectedAnnotationIndex = pdfAnnotationList.FindIndex(item => item.Id == annotation.Name);
                    if(selectedAnnotationIndex != -1)
                    {
                        NewAnnotation = pdfAnnotationList[selectedAnnotationIndex];
                    }
                    //Apply the image in redaction area
                    if(NewAnnotation.Author == "Image")
                    {
                        //Add the annotation to the removeItems list
                        removeItems.Add(annotation);
                        // Create a new redaction with the annotation bounds and color
                        PdfRedaction redaction = new PdfRedaction(annotation.Bounds);
                        if(NewAnnotation.CustomStampSource != null)
                        {
                            //Convert the image As a stream
                            byte[] imageBytes = Convert.FromBase64String(NewAnnotation.CustomStampSource.Split("base64,")[1]);
                            PdfImage image;
                            using (MemoryStream ms = new MemoryStream(imageBytes))
                            {
                                image = new PdfBitmap(ms);
                            }
                            //Apply the image to redaction area
                            redaction.Appearance.Graphics.DrawImage(image, new RectangleF(0,0,annotation.Bounds.Width,annotation.Bounds.Height));
                            // Add the redaction to the page
                            loadedPage.AddRedaction(redaction);
                            annotation.Flatten = true; 
                        } 
                    }
                }

            }
            // Remove the annotations in the removeItems list from the page
            foreach (PdfLoadedAnnotation annotation in removeItems)
            {
                loadedPage.Annotations.Remove(annotation);
            }
        }
        // Apply the redactions to the document
        loadedDocument.Redact();
        MemoryStream stream = new MemoryStream();
        loadedDocument.Save(stream);
        stream.Position = 0;
        loadedDocument.Close(true);
        byteArray = stream.ToArray();
        var base64String = "data:application/pdf;base64," + Convert.ToBase64String(byteArray);
        // Load the document into the viewer
        await Viewer.LoadAsync(base64String);
        // Resetting the Redaction count
        RedactionCount = 0;
        // Refresh the buttons
        RefreshButtons();
    }
    //The Method used for apply the text in the full area of redaction rectangle
    private static void CreateRedactionAppearance(PdfGraphics graphics, PdfTextAlignment alignment, bool repeat, SizeF size, string overlayText, PdfFont font, PdfBrush textcolor)
    {
        float col = 0, row;
        if (font == null) font = new PdfStandardFont(PdfFontFamily.Helvetica, 10);
        int textAlignment = Convert.ToInt32(alignment);
        float y = 0, x = 0, diff = 0;
        RectangleF rect;
        SizeF textsize = font.MeasureString(overlayText);
        if (repeat)
        {
            col = size.Width / textsize.Width;
            row = (float)Math.Floor(size.Height / font.Size);
            diff = Math.Abs(size.Width - (float)(Math.Floor(col) * textsize.Width));
            if (textAlignment == 1)
                x = diff / 2;
            if (textAlignment == 2)
                x = diff;
            for (int i = 1; i < col; i++)
            {
                for (int j = 0; j < row; j++)
                {
                    rect = new RectangleF(x, y, 0, 0);
                    graphics.DrawString(overlayText, font, textcolor, rect);
                    y = y + font.Size;
                }
                x = x + textsize.Width;
                y = 0;
            }
        }
        else
        {
            diff = Math.Abs(size.Width - textsize.Width);
            if (textAlignment == 1)
            {
                x = diff / 2;
            }
            if (textAlignment == 2)
            {
                x = diff;
            }
            rect = new RectangleF(x, 0, 0, 0);
            graphics.DrawString(overlayText, font, textcolor, rect);
        } 
    }
    //Method for download the document 
    private async Task DownloadDocument()
    {
        await Viewer.DownloadAsync();
    }
    //Method for the Zoom the pdf viewer document
    private async Task ZoomValueChange(ChangeEventArgs<string, string> args)
    {
        if(args.Value != null || args.PreviousItem != null)
        {
            int zoom=Convert.ToInt32(args.Value.ToString().Replace("%", ""));
            await Viewer.ZoomAsync(zoom);
        }
    }

    //Method for add the rectangle for the text redaction
    private async Task TextRedaction()
    {
        RectangleAnnoSettings = new PdfViewerRectangleSettings()
        {
            FillColor = "#a3a2a0",
            StrokeColor = "#a3a2a0",
            Author = "Text"
        }; 
        StateHasChanged();
        await ResetMode();
        //Set the mode for the Redaction rectangle with white color annotation
        await Viewer.SetAnnotationModeAsync(AnnotationType.Rectangle);
    }

    //Method for the Add the Image redaction
    private async Task AddStamp()
    {
        CustomStamps = new List<PdfViewerCustomStamp>() { new PdfViewerCustomStamp { CustomStampImageSource = CustomStampSource  } };

        CustomStampSettings = new PdfViewerCustomStampSettings() 
        {
            Author = "Image"
        };


        StateHasChanged();
        await ResetMode();
        //Set the mode for the stamp annotation annotation
        await Viewer.SetAnnotationModeAsync(AnnotationType.Stamp);
    }
    //Method for the Add the pattern redaction
    private async Task AddPattern()
    {
        RectangleAnnoSettings = new PdfViewerRectangleSettings()
        {
            FillColor = "#dedfe0",
            StrokeColor = "#dedfe0",
            Author = "Pattern"
        }; 
        StateHasChanged();
        await ResetMode();
        //Set the mode for the redaction rectangle with black color annotation
        await Viewer.SetAnnotationModeAsync(AnnotationType.Rectangle);
    }
    //Method for the Add the Redaction rectangle with out the color Annotation
    private async Task AddBlackOut()
    {
        RectangleAnnoSettings = new PdfViewerRectangleSettings()
        {
            FillColor = "#000000",
            StrokeColor = "#000000",
            Author = "Redaction"
        }; 
        StateHasChanged();
        await ResetMode();
        //Set the mode for the redaction rectangle with black color annotation
        await Viewer.SetAnnotationModeAsync(AnnotationType.Rectangle);
    }
    //Method for the Add the redaction rectangle with color Annotation
    private async Task AddWhiteOut()
    {      
        RectangleAnnoSettings = new PdfViewerRectangleSettings()
        {
            FillColor = "#ffffff",
            StrokeColor = "#ffffff",
            Author = "Redaction"
        }; 
        StateHasChanged();
        await ResetMode();
        //Set the mode for the REdaction rectangle with white color annotation
        await Viewer.SetAnnotationModeAsync(AnnotationType.Rectangle);
    }
    //Method for reset the annotation mode
    private async Task ResetMode()
    {
        //Set the mode for the none
        await Viewer.SetAnnotationModeAsync(AnnotationType.None);
    }
    //Method for update the page number 
    private void DocumentLoaded(LoadEventArgs args)
    {
        TotalPageNumber = Viewer.PageCount;
        CurrentPageNumber = Viewer.CurrentPageNumber;
        ZoomValue = "100%";
        IsPreviousPageExist = true;
        IsNextPageExist = false;
    }
    //Method for Adding the redaction count
    private  async Task OnAddAnnotation(AnnotationAddEventArgs args)
    {

        List<Syncfusion.Blazor.SfPdfViewer.PdfAnnotation> pdfAnnotationList = new List<Syncfusion.Blazor.SfPdfViewer.PdfAnnotation>();
        pdfAnnotationList = await Viewer.GetAnnotationsAsync();
        int selectedAnnotationIndex = pdfAnnotationList.FindIndex(item => item.Id == args.AnnotationId);
        if(selectedAnnotationIndex != -1)
        {
            annotation = pdfAnnotationList[selectedAnnotationIndex];
        }
        if(annotation.Author == "Redaction" || annotation.Author == "Image" || annotation.Author == "Pattern" || annotation.Author == "Text")
        {
            RedactionCount = RedactionCount + 1;    
        }
    }
    //Method for remove the redaction count
    private void OnRemoveAnnotation(AnnotationRemoveEventArgs args)
    {
        if(annotation.Author == "Redaction" || annotation.Author == "Image" || annotation.Author == "Pattern" || annotation.Author == "Text")
        {
            RedactionCount = RedactionCount - 1;    
        }
    }
    //Method for decide the annotation After annotation select
    private async Task OnAnnotationSelect(AnnotationSelectEventArgs annotationSelectEventArgs)
    {
        List<Syncfusion.Blazor.SfPdfViewer.PdfAnnotation> pdfAnnotationList = new List<Syncfusion.Blazor.SfPdfViewer.PdfAnnotation>();
        //Get the details about the annotations in the pdf viewer
        pdfAnnotationList = await Viewer.GetAnnotationsAsync();
        int selectedAnnotationIndex = pdfAnnotationList.FindIndex(item => item.Id == annotationSelectEventArgs.AnnotationId);
        if (selectedAnnotationIndex != -1)
        {
            annotation = pdfAnnotationList[selectedAnnotationIndex];
        }
    }
    //Method for maintain the page number
    private void OnPageChanged(PageChangeEventArgs args)
    {
        CurrentPageNumber = (int)args.CurrentPageNumber;
        if(CurrentPageNumber == 1)
        {
            IsPreviousPageExist = true;
            IsNextPageExist = false;
        }
        else if(CurrentPageNumber == TotalPageNumber)
        {
            IsNextPageExist = true;
            IsPreviousPageExist = false;
        }
        else
        {
            IsPreviousPageExist = false;
            IsNextPageExist = false;
        }
    }
    @*Hidden:Lines*@
    //Method for the document load in the component
    private async Task FileUploadSelected(UploadingEventArgs args)
    {
        RedactionCount = 0;
        string docBase64 = args.FileData.RawFile.ToString();
        await Viewer.LoadAsync(docBase64, null);
        await uploadFiles.ClearAllAsync();
        byte[] byteArray = Convert.FromBase64String(docBase64.Replace("data:application/pdf;base64,", ""));
        PdfLoadedDocument loadedDocument = new PdfLoadedDocument(byteArray);
        foreach (PdfLoadedPage loadedPage in loadedDocument.Pages)
        {
            foreach (PdfLoadedAnnotation annotation in loadedPage.Annotations)
            {
                if((annotation.Author == "Redaction" && annotation is PdfLoadedRectangleAnnotation) || (annotation.Author == "Image" && annotation is PdfLoadedRubberStampAnnotation) || (annotation.Author == "Pattern" && annotation is PdfLoadedRectangleAnnotation) || (annotation.Author == "Text" && annotation is PdfLoadedRectangleAnnotation))
                {
                    RedactionCount = RedactionCount + 1;    
                }
            }
        }
        loadedDocument.Close(true);
    }
    //Method for handle the open the file uploader
    private async Task createdHandler()
    {
        await JSRuntime.InvokeVoidAsync("created");
    }

    @*End:Hidden*@
    //Method for refresh the buttons in the toolbar
    private void RefreshButtons()
    {
        ClosePopUp();
        IsVisibleDialog = false;
        CustomStampSettings = new PdfViewerCustomStampSettings();
        RectangleAnnoSettings = new PdfViewerRectangleSettings();
        StateHasChanged();
    } 
    @*Hidden:Lines*@
    //Method for close the dialog box
    private void ClosePopUp()
    {
        IsVisibleDialog = false;
        StateHasChanged();
    }
    //Method for selecting the custom image
    private void ImageSelected(int i)
    {
        CustomStampSource = Images[i].ImageData;
        RefreshImages();
        Images[i].ImageSelected = true;
    }
    //Method for cancel the popup
    private async Task CancelImage()
    {
        ClosePopUp();
        await ResetMode();
    }
    //Method for add the custom stamp
    private async Task AddImage()
    {
        foreach(ImageDetails image in Images)
        {
            if(image.ImageSelected)
            {
                CustomStampSource = image.ImageData;
                await AddStamp();
                break;
            }
        }
        ClosePopUp();
    }
    //Class for the custom stamp
    private class ImageDetails
    {
        public string ImageData { get; set; }
        public bool ImageSelected { get; set; }
    }
    //Method for unselect the images
    private void RefreshImages()
    {
        if (Images != null)
        {
            foreach(ImageDetails image in Images)
            {
                image.ImageSelected = false;
            } 
        }

    }
    //Method for load the custom image
    private async Task ImageChane(UploadChangeEventArgs action)
    {
        IsImageSelected = false;
        string base64 = action.Files[0].File.ToString();
        string type = action.Files[0].FileInfo.Type.ToLower(); 
        var fileStream = new MemoryStream();
        await action.Files[0].File.OpenReadStream(long.MaxValue).CopyToAsync(fileStream);
        string baseString = Convert.ToBase64String(fileStream.ToArray());
        string image = "data:image/jpeg;base64," + baseString;
        RefreshImages();
        if(Images.Count > 2)
        {
            Images.Remove(Images[0]);   
        }
        ImageDetails newImage = new ImageDetails()
        {
            ImageData = image,
            ImageSelected = true
        };
        Images.Add(newImage);
        CustomStampSource = Images[Images.Count - 1].ImageData;
        ClosePopUp();
        await AddStamp();
        fileStream.Close();
    }
    @*End:Hidden*@
}
