@page "/pivot-table/live-data"

@using Syncfusion.Blazor.PivotView
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor
@using BlazorDemos
@using ThemeHelper
@implements IDisposable
@*Hidden:Lines*@
@inherits SampleBaseComponent;
@inject NavigationManager NavigationManager


@*End:Hidden*@

<SampleDescription>
    <p> This sample demonstrates how frequently the pivot table and the pivot chart are updated with real-time data at a given time interval. </p>
</SampleDescription>
<ActionDescription>
    <p>
        Both the pivot table and the pivot chart are receiving real-time data and periodically updating themselves every 5000 milliseconds. Furthermore, in this demonstration,
    </p>
    <p>
        <ul>
            <li>
                The <strong>"Feed Delay"</strong> numeric text box can be used to change the time interval.
            </li>
            <li>
                The <strong>"Start Updating..."</strong> button causes the pivot table to automatically update at the interval specified in the <strong>"Feed Delay"</strong> numeric text box, which is measured in milliseconds.
            </li>
            <li>
                The pivot table's automatic updating can be stopped by selecting the <strong>"Stop Updating..."</strong> button.
            </li>
            <li>
                Displayed the <strong>"Change(%)"</strong> values in the pivot table as red for negative values and green for positive values using the cell template.
            </li>
        </ul>
    </p>
</ActionDescription>

<div class="control-section">
    <div class="content-wrapper">
        <div class="head">
            <strong style="font-size:14px">Feed Delay(ms) :</strong>
            <SfNumericTextBox @bind-Value=@feedDelayInput Width="150px" Min="5000" Step="1000" Format="N0" Enabled=@enableInput aria-label="feed delay(ms)"> </SfNumericTextBox>
            <SfButton OnClick="StartInterval" Disabled="@start"> Start Updating... </SfButton> <SfButton OnClick="StopInterval" Disabled="@stop"> Stop Updating... </SfButton>
        </div>

        <SfPivotView TValue="PivotLiveData" @ref=@pivotObj Width="100%" Height="350">
            <PivotViewTemplates>
                <CellTemplate>
                    @{
                        var data = (context as AxisSet);
                        if (data != null)
                        {
                            if (data.Axis == "value")
                            {
                                if (!data.IsGrandSum && data.ActualText.ToString() == "Change")
                                {
                                    pivotObj.PivotValues[data.RowIndex][data.ColIndex].CssClass = colorScheme[cellColour(data.Value)];
                                }
                                @data.FormattedText
                            }
                            else
                            {
                                @data.FormattedText
                            }
                        }
                    }
                </CellTemplate>
            </PivotViewTemplates>
            <PivotViewDataSourceSettings TValue="PivotLiveData" DataSource="@updatedData" EmptyCellsTextContent="Revising" ShowGrandTotals="false" ShowSubTotals="false" EnableSorting="true">
                <PivotViewColumns>
                    <PivotViewColumn Name="Type"></PivotViewColumn>
                </PivotViewColumns>
                <PivotViewRows>
                    <PivotViewRow Name="Country"></PivotViewRow>
                </PivotViewRows>
                <PivotViewValues>
                    <PivotViewValue Name="Volume"></PivotViewValue>
                    <PivotViewValue Name="Price" Caption="Price"></PivotViewValue>
                    <PivotViewValue Name="Change" Caption="Change(%)" Type="SummaryTypes.Avg"></PivotViewValue>
                </PivotViewValues>
                <PivotViewFormatSettings>
                    <PivotViewFormatSetting Name="Volume" Format="N0"></PivotViewFormatSetting>
                    <PivotViewFormatSetting Name="Price" Format="C2"></PivotViewFormatSetting>
                    <PivotViewFormatSetting Name="Change" Format="0.##'%'"></PivotViewFormatSetting>
                </PivotViewFormatSettings>  
                <PivotViewSortSettings>
                    <PivotViewSortSetting Name="Type" Order="Sorting.None"></PivotViewSortSetting>
                </PivotViewSortSettings>
            </PivotViewDataSourceSettings>
            <PivotViewGridSettings ColumnWidth="120"></PivotViewGridSettings>
            <PivotViewDisplayOption View=Syncfusion.Blazor.PivotView.View.Both></PivotViewDisplayOption>
            <PivotChartSettings Theme="Theme" Value="Price">
                <PivotChartSeries Type=Syncfusion.Blazor.PivotView.ChartSeriesType.Column></PivotChartSeries>
                <PivotChartZoomSettings ToolbarItems="@pivotChartToolbarItems" EnableScrollbar="false" EnablePan="false" EnableSelectionZooming="false"></PivotChartZoomSettings>
                <PivotChartLegendSettings Visible="false"></PivotChartLegendSettings>
            </PivotChartSettings>
            <PivotViewEvents TValue="PivotLiveData" DataBound="DataBound" Created="Created"></PivotViewEvents>
        </SfPivotView>
    </div>
</div>


<style>  
    .control_section {
        margin-bottom: 10px;
    }

    .e-pivotview .e-pivotchart {
        margin-top: 15px !important;
    }

    .e-valid-input, .e-btn {
        margin-left: 10px !important;
    }
    .head {        
        margin-bottom: 10px;
    }

    .bg-fade {
        background-color: #FFEBE9 !important;
        color: #FF3740 !important;
    }

    .bg-fade1 {
        background-color: #DFFFE2 !important;
        color: #00A653 !important;
    }

    .bg-fade2 {
        color: rgba(0, 0, 0, 0.87);
    }

    @@media only screen and (max-width: 380px) {
        .e-valid-input, .e-btn {
            margin-bottom: 10px !important;
        }

        .e-btn {
            margin-left: 0px !important;
        }
    }

</style>


@code {

    
    private SfPivotView<PivotLiveData> pivotObj;
    private List<PivotChartToolbarItems> pivotChartToolbarItems = new List<PivotChartToolbarItems>();
    private Theme Theme { get; set; }
    private int feedDelayInput = 5000;
    private string[] colorScheme = new string[] { "bg-fade", "bg-fade1", "bg-fade2", "bg-fade3", "bg-fade4", "bg-fade5" };
    private bool enableInput;
    private bool start;
    private bool stop = true;
    private List<PivotLiveData> dataSource;
    private List<PivotLiveData> updatedData;
    private System.Threading.Timer timer;
    private bool allowDataUpdate;
    private PivotChartZoomSettings pivotChartZoomSettings = new PivotChartZoomSettings() { ToolbarItems = new List<PivotChartToolbarItems>(), EnableSelectionZooming = false, EnableScrollbar = false };


    private void StartInterval()
    {
        double value = Convert.ToDouble((feedDelayInput / 1000));
        timer = new System.Threading.Timer(Callback, null, TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(value));
        start = true;
        stop = false;
        enableInput = false;
    }

    private void StopInterval()
    {
        timer.Dispose();
        stop = true;
        start = false;
        enableInput = true;
    }

    private void Callback(object state)
    {
        InvokeAsync(() =>
        {
            UpdateAsync().GetAwaiter();
        });
    }
    public async Task UpdateAsync()
    {
        void All()
        {
            if (allowDataUpdate)
            {
                allowDataUpdate = false;
                updatedData = GenerateData();
                StateHasChanged();
            }
        }
        await InvokeAsync(All);
    }
    private int cellColour(double? value)
    {
        int colorIndex = value < 0 ? 0 : value > 0 ? 1 : 2;
        return colorIndex;
    }
    protected override void OnInitialized()
    {
        Theme = ThemeHelper.GetCurrentTheme(NavigationManager.Uri);
        
        dataSource = PivotLiveData.GetPivotLiveData();
        updatedData = GenerateData();
    }
    private void DataBound()
    {
        allowDataUpdate = true;
    }

    private void Created()
    {
            StartInterval();
    }
    private List<PivotLiveData> GenerateData()
    {
        var count = 1000;
        List<PivotLiveData> data = new List<PivotLiveData>();
        int j = 0;
        int l = 0;
        bool startRandom = false;
        for (int i = 0; i < count; i++)
        {
            int rand = startRandom ? (int)Math.Floor(new Random().NextDouble() * Convert.ToDouble((Math.Floor((decimal)dataSource.Count)))) : 0;
            RegionData region = RegionData.Data[j];
            for (int k = 0; k < region.Country.Count; k++)
            {
                PivotLiveData dataObj = startRandom ? new PivotLiveData { Buy = dataSource[rand].Buy, Category = dataSource[rand].Category, Change = dataSource[rand].Change, Change_Percentage = dataSource[rand].Change_Percentage, Country = dataSource[rand].Country, OpenPrice = dataSource[rand].OpenPrice, Price = dataSource[rand].Price, Region = dataSource[rand].Region, Sell = dataSource[rand].Sell, Spread = dataSource[rand].Spread, Type = dataSource[rand].Type, Volume = dataSource[rand].Volume } : new PivotLiveData { Buy = dataSource[l].Buy, Category = dataSource[l].Category, Change = dataSource[l].Change, Change_Percentage = dataSource[l].Change_Percentage, Country = dataSource[l].Country, OpenPrice = dataSource[l].OpenPrice, Price = dataSource[l].Price, Region = dataSource[l].Region, Sell = dataSource[l].Sell, Spread = dataSource[l].Spread, Type = dataSource[l].Type, Volume = dataSource[l].Volume };
                dataObj.Region = region.Region;
                dataObj.Country = region.Country[k];
                randomizeObjectData(dataObj);
                data.Add(dataObj);
            }
            l++;
            startRandom = l > 5;
            j++;
            j = j > 5 ? 0 : j;
        }
        return data;
    }

    private void randomizeObjectData(PivotLiveData dataObj)
    {
        PivotLiveData res = generateNewPrice(dataObj.Price, dataObj.Volume);
        dataObj.Change = res.Price - dataObj.Price;
        dataObj.Price = res.Price;
        dataObj.Change_Percentage = res.Change_Percentage;
        dataObj.Volume = res.Volume;
    }
    private PivotLiveData generateNewPrice(double oldPrice, double oldVolume)
    {
        var rnd = new Random().NextDouble();
        var rn = Math.Round((decimal)rnd * 100) / 100;
        double volatility = 15;
        double newPrice = 0;
        double newVolume = 0;
        double changePercent = 2 * volatility * rnd;
        if (changePercent > volatility)
        {
            changePercent -= (2 * volatility);
        }
        double changeVolumnPercent = 2 * (volatility - 5) * rnd;
        if (changeVolumnPercent > (volatility - 5))
        {
            changeVolumnPercent -= (2 * (volatility - 5));
        }
        double changeAmount = oldPrice * (changePercent / 100);
        newPrice = oldPrice + changeAmount;
        double changeVolume = oldVolume * (changeVolumnPercent / 100);
        newVolume = oldVolume + changeVolume;
        newPrice = Math.Round(newPrice * 100) / 100;
        newVolume = Math.Round((newVolume * 100) / 100);
        PivotLiveData result = new PivotLiveData { Price = 0, Change_Percentage = 0, Volume = 0 };
        changePercent = Math.Round(changePercent * 100) / 100;
        result.Price = newPrice;
        result.Change_Percentage = changePercent;
        result.Volume = newVolume;
        return result;
    }

    public void Dispose() => StopInterval();
}
