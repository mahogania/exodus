@page "/chart-3d/column"

@using Syncfusion.Blazor
@using Syncfusion.Blazor.Chart3D
@using PointRender

@inject NavigationManager NavigationManager
@*Hidden:Lines*@
@inherits SampleBaseComponent


@*End:Hidden*@
<SampleDescription>
    <p>
        This demo showcases the top-selling electric car models in China using a 3D column chart. The visualization leverages the default column series to present sales data in an engaging three-dimensional format. Tapping or mouse over the data points reveals detailed tooltips, providing specific information about each data point.
    </p>
</SampleDescription>
<ActionDescription>
    <p>
        In this example, you can see how to render and configure a 3D column chart. The 3D column chart is used to compare the frequency, count, total, or average of data across different categories. <code>Tooltip</code> functionality is enabled, allowing you to see the tooltip in action by hovering over a point or tapping on a point on touch-enabled devices. 
        Additionally, the <code>PointRendering</code> event for the 3D chart is triggered to render each point in the series with a distinct fill color.
    </p>
</ActionDescription>

<div class="control-section" align="center">
    <SfChart3D WallColor="transparent" EnableRotation="true" RotationAngle="7" TiltAngle="10" Depth="100" Width="@Width" Height="@Height" Title="Top Selling Electric Cars in China" Theme="@Theme" PointRendering="Point3DRender" AxisLabelRendering="AxisLabelRender">
        <Chart3DPrimaryXAxis ValueType="Syncfusion.Blazor.Chart3D.ValueType.Category" LabelRotationAngle="-45" LabelPlacement="LabelPlacement.BetweenTicks"></Chart3DPrimaryXAxis>
        <Chart3DPrimaryYAxis Maximum="150000" Interval="30000"></Chart3DPrimaryYAxis>
        <Chart3DSeriesCollection>
            <Chart3DSeries DataSource="@Chart3DPoints" XName="X" YName="Y" ColumnSpacing="0.1" Type="Chart3DSeriesType.Column"></Chart3DSeries>
        </Chart3DSeriesCollection>
        <Chart3DTooltipSettings Enable="true" Header="${point.x}" Format="Sales Count : <b>${point.y}"></Chart3DTooltipSettings>
    </SfChart3D>
</div>

@code{
    private Theme Theme { get; set; }
    public string Width { get; set; }
    public string Height { get; set; } = "400";
    public List<ColumnChart3DData> Chart3DPoints { get; set; } = new List<ColumnChart3DData>
    {
         new ColumnChart3DData { X= "Tesla", Y= 137429 },
         new ColumnChart3DData { X= "Aion", Y= 80308 },
         new ColumnChart3DData { X= "Wuling", Y= 76418 },
         new ColumnChart3DData { X= "Changan", Y= 52849 },
         new ColumnChart3DData { X= "Geely", Y= 47234 },  
         new ColumnChart3DData { X= "Nio", Y= 31041 },
         new ColumnChart3DData { X= "Neta", Y= 22449 },
         new ColumnChart3DData { X= "BMW", Y= 18733 }
    };

    protected override void OnInitialized()
    {
        Set3DTheme(null);
        Width = SampleService.IsDevice ? "100%" : "75%";
    }

    public void AxisLabelRender(Chart3DAxisLabelRenderEventArgs args)
    {
        if (args.Axis.Name == "PrimaryYAxis")
        {
            double value = Convert.ToDouble(args.Text) / 1000;
            args.Text = !double.IsNaN(value) ? value.ToString() + "k" : args.Text;
        }
    }

    public void Point3DRender(Chart3DPointRenderEventArgs  args)
    {
        Set3DTheme(args);
    }

    private void Set3DTheme(Chart3DPointRenderEventArgs  args)
    {
        if (NavigationManager.Uri.IndexOf("material3") > -1)
        {
            if (NavigationManager.Uri.IndexOf("dark") > -1)
            {
                if (args == null)
                    Theme = Theme.Material3Dark;
                else
                    args.Fill = PointColor.Material3DarkColors[args.Point.Index % 10];
            }
            else
            {
                if (args == null)
                    Theme = Theme.Material3;
                else
                    args.Fill = PointColor.Material3Colors[args.Point.Index % 10];
            }
        }
        else if (NavigationManager.Uri.IndexOf("material") > -1)
        {
            if (NavigationManager.Uri.IndexOf("dark") > -1)
            {
                if (args == null)
                    Theme = Theme.MaterialDark;
                else
                    args.Fill = PointColor.MaterialDarkColors[args.Point.Index % 10];
            }
            else
            {
                if (args == null)
                    Theme = Theme.Material;
                else
                    args.Fill = PointColor.MaterialColors[args.Point.Index % 10];
            }
        }
        else if (NavigationManager.Uri.IndexOf("fabric") > -1)
        {
            if (NavigationManager.Uri.IndexOf("dark") > -1)
            {
                if (args == null)
                    Theme = Theme.FabricDark;
                else
                    args.Fill = PointColor.FabricColors[args.Point.Index % 10];
            }
            else
            {
                if (args == null)
                    Theme = Theme.Fabric;
                else
                    args.Fill = PointColor.FabricColors[args.Point.Index % 10];
            }
        }
        else if (NavigationManager.Uri.IndexOf("bootstrap5") > -1)
        {
            if (NavigationManager.Uri.IndexOf("dark") > -1)
            {
                if (args == null)
                    Theme = Theme.Bootstrap5Dark;
                else
                    args.Fill = PointColor.Bootstrap5DarkColors[args.Point.Index % 10];
            }
            else
            {
                if (args == null)
                    Theme = Theme.Bootstrap5;
                else
                    args.Fill = PointColor.Bootstrap5Colors[args.Point.Index % 10];
            }
        }
        else if (NavigationManager.Uri.IndexOf("fluent2") > -1)
        {
            // if (NavigationManager.Uri.IndexOf("highcontrast") > -1)
            // {
            //     if (args == null)
            //         Theme = Theme.Fluent2HighContrast;
            //     else
            //         args.Fill = PointColor.Fluent2HighContrastColors[args.Point.Index % 10];
            // }
            if (NavigationManager.Uri.IndexOf("dark") > -1)
            {
                if (args == null)
                    Theme = Theme.Fluent2Dark;
                else
                    args.Fill = PointColor.Fluent2DarkColors[args.Point.Index % 10];
            }
            else
            {
                if (args == null)
                    Theme = Theme.Fluent2;
                else
                    args.Fill = PointColor.Fluent2Colors[args.Point.Index % 10];
            }
        }
        else if (NavigationManager.Uri.IndexOf("fluent") > -1)
        {
            if (NavigationManager.Uri.IndexOf("dark") > -1)
            {
                if (args == null)
                    Theme = Theme.FluentDark;
                else
                    args.Fill = PointColor.FluentDarkColors[args.Point.Index % 10];
            }
            else
            {
                if (args == null)
                    Theme = Theme.Fluent;
                else
                    args.Fill = PointColor.FluentColors[args.Point.Index % 10];
            }
        }
        else if (NavigationManager.Uri.IndexOf("bootstrap4") > -1)
        {
            if (args == null)
                Theme = Theme.Bootstrap4;
            else
                args.Fill = PointColor.BootstrapColors[args.Point.Index % 10];
        }
        else if (NavigationManager.Uri.IndexOf("bootstrap") > -1)
        {
            if (NavigationManager.Uri.IndexOf("dark") > -1)
            {
                if (args == null)
                    Theme = Theme.BootstrapDark;
                else
                    args.Fill = PointColor.BootstrapColors[args.Point.Index % 10];
            }
            else
            {
                if (args == null)
                    Theme = Theme.Bootstrap;
                else
                    args.Fill = PointColor.BootstrapColors[args.Point.Index % 10];
            }
        }
        else if (NavigationManager.Uri.IndexOf("tailwind") > -1)
        {
            if (NavigationManager.Uri.IndexOf("dark") > -1)
            {
                if (args == null)
                    Theme = Theme.TailwindDark;
                else
                    args.Fill = PointColor.TailwindDarkColors[args.Point.Index % 10];
            }
            else
            {
                if (args == null)
                    Theme = Theme.Tailwind;
                else
                    args.Fill = PointColor.TailwindColors[args.Point.Index % 10];
            }
        }
        else if (NavigationManager.Uri.IndexOf("highcontrast") > -1)
        {
            if (args == null)
                Theme = Theme.HighContrast;
            else
                args.Fill = PointColor.HighContrastColors[args.Point.Index % 10];
        }
        else
        {
            if (args == null)
                Theme = Theme.Bootstrap4;
            else
                args.Fill = PointColor.BootstrapColors[args.Point.Index % 10];
        }
    }

    public class ColumnChart3DData
    {
        public string X { get; set; }
        public double Y { get; set; }
    }
}