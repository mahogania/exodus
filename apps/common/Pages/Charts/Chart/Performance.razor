@page "/chart/performance"

@using Syncfusion.Blazor.Charts
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Spinner
@using Syncfusion.Blazor
@using ThemeHelper

@inject NavigationManager NavigationManager
@implements IDisposable
@*Hidden:Lines*@
@inherits SampleBaseComponent;


@*End:Hidden*@

<SampleDescription>
    <p>  This sample demonstrates the performance of Blazor Charts rendering 100K data points. </p>
</SampleDescription>
<ActionDescription>
    <p>Charts includes several data-rendering optimizations to achieve the best possible performance when plotting large volumes of data and handling high-frequency, real-time data. In this demo, an area series is rendered with 100K points.</p>
</ActionDescription>

<div class="control-section" align="center">
    <SfChart ID="performance" @ref="chartInstance" Title="@chartTitle" Width="@Width" Theme="@theme">
        <ChartArea><ChartAreaBorder Width="0"></ChartAreaBorder></ChartArea>
        <ChartPrimaryXAxis IntervalType="@intervalType" ValueType="Syncfusion.Blazor.Charts.ValueType.DateTime" EdgeLabelPlacement="EdgeLabelPlacement.Shift" LabelIntersectAction="LabelIntersectAction.Trim">
            <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
        </ChartPrimaryXAxis>
        <ChartPrimaryYAxis Interval="@interval" Minimum="0" Maximum="@maxRange" Title="Values">
            <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
            <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
        </ChartPrimaryYAxis>
        <ChartLegendSettings Visible="false"></ChartLegendSettings>
        <ChartTooltipSettings Enable="true" Shared="true" Format="Data points : <b>${point.y}</b>"></ChartTooltipSettings>
        <ChartZoomSettings EnableSelectionZooming="true" Mode="ZoomMode.X"></ChartZoomSettings>
        <ChartSeriesCollection>
            <ChartSeries Name="Series" XName="@nameof(LineChartData.XValue)" YName="@nameof(LineChartData.YValue)" DataSource="@chartPoints" Type="ChartSeriesType.Area" Fill="@FillColor">
                <ChartSeriesBorder Width="2" Color="@BorderColor"></ChartSeriesBorder>
                <ChartSeriesAnimation Enable="false"></ChartSeriesAnimation>
            </ChartSeries>
        </ChartSeriesCollection>
    </SfChart>
</div>

@code {
    [Inject]
    protected IJSRuntime jsRuntime { get; set; }

    
    private DateTime start = DateTime.Now;
    string BorderColor;
    string FillColor;
    public string Width { get; set; } = "90%";
    string valueUrl = "url";
    private double value = 0;
    private double interval = 2000;
    private SfChart chartInstance { get; set; }
    private Random randomNum { get; set; } = new Random();
    private List<LineChartData> chartPoints { get; set; } = null;
    private Syncfusion.Blazor.Theme theme { get; set; }
    string CurrentUri;
    string chartTitle = "Chart with 100k points";
    IntervalType intervalType = IntervalType.Years;
    private double maxRange;
    protected override void OnInitialized()
    {
        
        LoadPoints();
        maxRange = (jsRuntime is IJSInProcessRuntime) ? 5000 : 12000;
        CurrentUri = NavigationManager.Uri;
        if (CurrentUri.IndexOf("material3") > -1)
        {
            if (CurrentUri.IndexOf("dark") > -1)
            {
                theme = Theme.Material3Dark;
                BorderColor = "#4EAAFF";
                FillColor = String.Concat(valueUrl, "(#material3-dark-gradient-chart)");
            }
            else
            {
                theme = Theme.Material3;
                BorderColor = "#6355C7";
                FillColor = String.Concat(valueUrl, "(#material3-gradient-chart)");
            }

        }
        else if (CurrentUri.IndexOf("material") > -1)
        {
            if (CurrentUri.IndexOf("dark") > -1)
            {
                theme = Theme.MaterialDark;
                BorderColor = "#9ECB08";
                FillColor = String.Concat(valueUrl, "(#materialdark-gradient-chart)");
            }
            else
            {
                theme = Theme.Material;
                BorderColor = "#00bdae";
                FillColor = String.Concat(valueUrl, "(#material-gradient-chart)");
            }
        }
        else if (CurrentUri.IndexOf("fabric") > -1)
        {
            if (CurrentUri.IndexOf("dark") > -1)
            {
                theme = Theme.FabricDark;
            }
            else
            {
                theme = Theme.Fabric;
            }
            BorderColor = "#4472c4";
            FillColor = String.Concat(valueUrl, "(#fabric-gradient-chart)");
        }
        else if (CurrentUri.IndexOf("bootstrap5") > -1)
        {
            if (CurrentUri.IndexOf("dark") > -1)
            {
                theme = Theme.Bootstrap5Dark;
                BorderColor = "#8F80F4";
                FillColor = String.Concat(valueUrl, "(#bootstrap5dark-gradient-chart)");
            }
            else
            {
                theme = Theme.Bootstrap5;
                BorderColor = "#6355C7";
                FillColor = String.Concat(valueUrl, "(#bootstrap5-gradient-chart)");
            }
        }
        else if (CurrentUri.IndexOf("fluent2") > -1)
        {
            // if (CurrentUri.IndexOf("highcontrast") > -1)
            // {
            //     theme = Theme.Fluent2HighContrast;
            //     BorderColor = "#9BB449;";
            //     FillColor = String.Concat(valueUrl, "(#fluent2highcontrast-gradient-chart)");
            // }
            if (CurrentUri.IndexOf("dark") > -1)
            {
                theme = Theme.Fluent2Dark;
                BorderColor = "#9BB449;";
                FillColor = String.Concat(valueUrl, "(#fluent2dark-gradient-chart)");
            }
            else
            {
                theme = Theme.Fluent2;
                BorderColor = "#6200EE";
                FillColor = String.Concat(valueUrl, "(#fluent2-gradient-chart)");
            }
        }
        else if (CurrentUri.IndexOf("fluent") > -1)
        {
            if (CurrentUri.IndexOf("dark") > -1)
            {
                theme = Theme.FluentDark;
                BorderColor = "#1AC9E6;";
                FillColor = String.Concat(valueUrl, "(#fluentdark-gradient-chart)");
            }
            else
            {
                theme = Theme.Fluent;
                BorderColor = "#1AC9E6";
                FillColor = String.Concat(valueUrl, "(#fluent-gradient-chart)");
            }
        }
        else if (CurrentUri.IndexOf("bootstrap4") > -1)
        {
            theme = Theme.Bootstrap4;
            BorderColor = "#a16ee5";
            FillColor = String.Concat(valueUrl, "(#bootstrap4-gradient-chart)");
        }
        else if (CurrentUri.IndexOf("bootstrap") > -1)
        {
            if (CurrentUri.IndexOf("dark") > -1)
            {
                theme = Theme.BootstrapDark;
            }
            else
            {
                theme = Theme.Bootstrap;
            }
            BorderColor = "#a16ee5";
            FillColor = String.Concat(valueUrl, "(#bootstrap-gradient-chart)");
        }
        else if (CurrentUri.IndexOf("highcontrast") > -1)
        {
            theme = Theme.HighContrast;
            BorderColor = "#79ECE4";
            FillColor = String.Concat(valueUrl, "(#highcontrast-gradient-chart)");
        }
        else if (CurrentUri.IndexOf("tailwind") > -1)
        {
            if (CurrentUri.IndexOf("dark") > -1)
            {
                theme = Theme.TailwindDark;
                BorderColor = "#8B5CF6";
                FillColor = String.Concat(valueUrl, "(#tailwinddark-gradient-chart)");
            }
            else
            {
                theme = Theme.Tailwind;
                BorderColor = "#5A61F6";
                FillColor = String.Concat(valueUrl, "(#tailwind-gradient-chart)");
            }
        }
        else
        {
            theme = Theme.Bootstrap4;
            BorderColor = "#a16ee5";
            FillColor = String.Concat(valueUrl, "(#bootstrap4-gradient-chart)");
        }
    }
    private void LoadPoints()
    {
        chartPoints = new List<LineChartData>();
        int count = (jsRuntime is IJSInProcessRuntime) ? 10000 : 100000;
        chartTitle = "Chart with " + (count / 1000).ToString() + "k points";
        intervalType = count > 10000 ? IntervalType.Years : IntervalType.Months;
        for (int pts = 0; pts < count; pts++)
        {
            if (pts % 3 == 0)
            {
                this.value -= (randomNum.Next(0, 100) / 3) * 4;
            }
            else if (pts % 2 == 0)
            {
                this.value += (randomNum.Next(0, 100) / 3) * 4;
            }
            if (this.value < 0)
            {
                this.value = this.value * -1;
            }
            if (this.value >= 12000)
            {
                this.value = randomNum.Next(1000, 11000);
            }
            chartPoints.Add(new LineChartData() { XValue = new DateTime(2005, 1, 1).AddHours(pts), YValue = this.value });
        }
    }

    public class LineChartData
    {
        public DateTime XValue { get; set; }
        public double YValue { get; set; }
    }

    public void Dispose()
    {
        chartInstance = null;
        chartPoints = null;
        randomNum = null;
    }
}
<style>
    #control-container {
        padding: 0px !important;
    }

    #material-gradient-chart stop {
        stop-color: #00bdae;
    }

    #materialdark-gradient-chart stop {
        stop-color: #9ECB08;
    }

    #fabric-gradient-chart stop {
        stop-color: #4472c4;
    }

    #bootstrap-gradient-chart stop {
        stop-color: #a16ee5;
    }

    #bootstrap4-gradient-chart stop {
        stop-color: #a16ee5;
    }

    #bootstrap5-gradient-chart stop {
        stop-color: #6355C7;
    }

    #bootstrap5dark-gradient-chart stop {
        stop-color: #8F80F4;
    }

    #fluent-gradient-chart stop {
        stop-color: #1AC9E6;
    }

    #fluentdark-gradient-chart stop {
        stop-color: #1AC9E6;
    }

    #highcontrast-gradient-chart stop {
        stop-color: #79ECE4;
    }

    #material3-gradient-chart stop {
        stop-color: #6355C7;
    }

    #material3-dark-gradient-chart stop {
        stop-color: #4EAAFF;
    }

    .chart-gradient stop[offset="0"] {
        stop-opacity: 0.9;
    }

    .chart-gradient stop[offset="1"] {
        stop-opacity: 0.3;
    }

    #tailwind-gradient-chart stop {
        stop-color: #5A61F6;
    }

    #tailwinddark-gradient-chart stop {
        stop-color: #8B5CF6;
    }

    #fluent2-gradient-chart stop {
        stop-color: #6200EE;
    }

    #fluent2dark-gradient-chart stop {
        stop-color: #9BB449;
    }

    /* #fluent2highcontrast-gradient-chart stop {
        stop-color: #9BB449;
    } */
</style>
<svg style="height: 0">
    <defs>
        <linearGradient id="material-gradient-chart" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
        <linearGradient id="materialdark-gradient-chart" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
        <linearGradient id="fabric-gradient-chart" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
        <linearGradient id="bootstrap-gradient-chart" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
        <linearGradient id="bootstrap4-gradient-chart" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
        <linearGradient id="bootstrap5-gradient-chart" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
        <linearGradient id="bootstrap5dark-gradient-chart" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
        <linearGradient id="fluent-gradient-chart" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
        <linearGradient id="fluentdark-gradient-chart" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
        <linearGradient id="highcontrast-gradient-chart" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
        <linearGradient id="tailwind-gradient-chart" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
        <linearGradient id="tailwinddark-gradient-chart" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
        <linearGradient id="material3-gradient-chart" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
        <linearGradient id="material3-dark-gradient-chart" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
        <linearGradient id="fluent2-gradient-chart" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
        <linearGradient id="fluent2dark-gradient-chart" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
        @* <linearGradient id="fluent2highcontrast-gradient-chart" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient> *@
    </defs>
</svg>