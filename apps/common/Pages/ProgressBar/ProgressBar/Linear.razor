@page "/progress-bar/linear"
@using Syncfusion.Blazor.ProgressBar
@using ThemeHelper
@inject NavigationManager Navigation
@using Syncfusion.Blazor
@*Hidden:Lines*@
@inherits SampleBaseComponent


@*End:Hidden*@

<SampleDescription>
    <p> This sample illustrates a linear progress bar with determinate and indeterminate states, segments, and buffer values. </p>
</SampleDescription>
<ActionDescription>
    <p>The Blazor ProgressBar indicates the progress of a task with customizable visuals. In this example, you can see how to render and configure the linear progress bar with multiple <a target='_blank' href='https://blazor.syncfusion.com/documentation/progress-bar/customization#segments' aria-label="segments">segments</a> and different states like <a target='_blank' href='https://blazor.syncfusion.com/documentation/progress-bar/states#determinate' aria-label="determinate">determinate</a>, <a target='_blank' href='https://blazor.syncfusion.com/documentation/progress-bar/states#indeterminate' aria-label="indeterminate">indeterminate</a>, and <a target='_blank' href='https://blazor.syncfusion.com/documentation/progress-bar/states#buffer' aria-label="buffer">buffer</a>. </p>
    <p>More information about the linear progress bar can be found in this <a target='_blank' href='https://blazor.syncfusion.com/documentation/progress-bar/types#linear' aria-label="documentation section" >documentation section</a>.</p>
</ActionDescription>

<div class="control-section">
    <div class="row linear-parent">
        <div>
            <div class="@labelClass" style="font-family: @FontFamily">Determinate</div>
            <SfProgressBar @ref="ProObj1" Type="ProgressType.Linear" Height="60"
                           Value="100" Minimum="0" Maximum="100"
                           Theme="@CurrentTheme">
                <ProgressBarAnimation Enable="true" Duration="2000" Delay="0" />
            </SfProgressBar>
        </div>
        <div>
            <div class="@labelClass" style="font-family: @FontFamily">Indeterminate</div>
            <SfProgressBar @ref="ProObj2" Type="ProgressType.Linear" Height="60"
                           IsIndeterminate="true" Value="20" Minimum="0" Maximum="100"
                           Theme="@CurrentTheme">
                <ProgressBarAnimation Enable="true" Duration="2000" Delay="0" />
            </SfProgressBar>
        </div>
        <div>
            <div class="@labelClass" style="font-family: @FontFamily">Segment</div>
            <SfProgressBar @ref="ProObj4" Type="ProgressType.Linear" Height="60"
                           SegmentCount="8" Value="100" Minimum="0" Maximum="100"
                           Theme="@CurrentTheme">
                <ProgressBarAnimation Enable="true" Duration="2000" Delay="0" />
            </SfProgressBar>
        </div>
        <div>
            <div class="@labelClass" style="font-family: @FontFamily">Buffer</div>
            <SfProgressBar @ref="ProObj3" Type="ProgressType.Linear" Height="60"
                           SecondaryProgress="60" SecondaryProgressColor=@color Value="40" Minimum="0" Maximum="100"
                           Theme="@CurrentTheme">
                <ProgressBarAnimation Enable="true" Duration="2000" Delay="0" />
            </SfProgressBar>
        </div>
        <div>
            <div class="@labelClass" style="font-family: @FontFamily">Active</div>
            <SfProgressBar @ref="ProObj5" Type="ProgressType.Linear" Height="60"
                           IsActive="true" Value="100" Minimum="0" Maximum="100"
                           Theme="@CurrentTheme">
                <ProgressBarAnimation Enable="true" Duration="2000" Delay="0" />
            </SfProgressBar>
        </div>
    </div>
    <div class="row linear-parent" style="font-family: @FontFamily">
        <button id="reLoad" @onclick="ProgressRefresh" class="e-control e-btn e-lib e-outline e-primary">Reload</button>
    </div>
</div>

@code{
    public SfProgressBar ProObj1, ProObj2, ProObj3, ProObj4, ProObj5;
    public Theme CurrentTheme { get; set; }
    private string labelClass = "col-lg-12 col-sm-12 progressbar-label";
    private string currentUri;
    private string color = "#98c5f5";
    public string FontFamily { get; set; }
    

    public async Task ProgressRefresh()
    {
        await ProObj1.RefreshAsync();
        await ProObj2.RefreshAsync();
        await ProObj3.RefreshAsync();
        await ProObj4.RefreshAsync();
        await ProObj5.RefreshAsync();
    }

    protected override void OnInitialized()
    {
        
        currentUri = Navigation.Uri;
        FontFamily = ThemeHelper.GetFontFamily(Navigation.Uri);
        if (currentUri.Contains("material3-dark"))
        {
            CurrentTheme = Theme.Material3Dark;
            labelClass = "col-lg-12 col-sm-12 progressbar-label-dark";
            color = "#D0BCFF";
        }
        else if (currentUri.Contains("material3"))
        {
            CurrentTheme = Theme.Material3;
            labelClass = "col-lg-12 col-sm-12 progressbar-label-material";
            color = "#6750A4";
        }
        else if (currentUri.Contains("fabric-dark"))
        {
            CurrentTheme = Theme.FabricDark;
            labelClass = "col-lg-12 col-sm-12 progressbar-label-dark";
            color = "rgba(154,154,154,.35)";
        }
        else if (currentUri.Contains("fabric"))
        {
            CurrentTheme = Theme.Fabric;
            labelClass = "col-lg-12 col-sm-12 progressbar-label-material";
            color = "#b0d0e9";
        }
        else if (currentUri.Contains("bootstrap5-dark"))
        {
            CurrentTheme = Theme.Bootstrap5Dark;
            labelClass = "col-lg-12 col-sm-12 progressbar-label-dark";
            color = "#2b5288";
        }
        else if (currentUri.Contains("bootstrap-dark"))
        {
            CurrentTheme = Theme.BootstrapDark;
            labelClass = "col-lg-12 col-sm-12 progressbar-label-dark";
            color = "#b8b8b8";
        }
        else if (currentUri.Contains("bootstrap5"))
        {
            CurrentTheme = Theme.Bootstrap5;
            labelClass = "col-lg-12 col-sm-12 progressbar-label-bootstrap";
            color = "#98c5f5";
        }
        // else if (currentUri.Contains("fluent2-highcontrast"))
        // {
        //     CurrentTheme = Theme.Fluent2HighContrast;
        //     labelClass = "col-lg-12 col-sm-12 progressbar-label-dark";
        //     color = "#2b5288";
        // }
        else if (currentUri.Contains("fluent2-dark"))
        {
            CurrentTheme = Theme.Fluent2Dark;
            labelClass = "col-lg-12 col-sm-12 progressbar-label-dark";
            color = "#2b5288";
        }
        else if (currentUri.Contains("fluent2"))
        {
            CurrentTheme = Theme.Fluent2;
            labelClass = "col-lg-12 col-sm-12 progressbar-label-bootstrap";
            color = "#98c5f5";
        }
        else if (currentUri.Contains("fluent-dark"))
        {
            CurrentTheme = Theme.FluentDark;
            labelClass = "col-lg-12 col-sm-12 progressbar-label-dark";
            color = "#2b5288";
        }
        else if (currentUri.Contains("fluent"))
        {
            CurrentTheme = Theme.Fluent;
            labelClass = "col-lg-12 col-sm-12 progressbar-label-bootstrap";
            color = "#98c5f5";
        }
        else if (currentUri.Contains("bootstrap4"))
        {
            CurrentTheme = Theme.Bootstrap4;
            labelClass = "col-lg-12 col-sm-12 progressbar-label-bootstrap";
            color = "#98c5f5";
        }
        else if (currentUri.Contains("bootstrap"))
        {
            CurrentTheme = Theme.Bootstrap;
            labelClass = "col-lg-12 col-sm-12 progressbar-label-bootstrap";
            color = "#acc6dc";
        }
        else if (currentUri.Contains("highcontrast"))
        {
            CurrentTheme = Theme.HighContrast;
            labelClass = "col-lg-12 col-sm-12 progressbar-label-dark";
            color = "#aca379";
        }
        else if (currentUri.Contains("tailwind-dark"))
        {
            CurrentTheme = Theme.TailwindDark;
            labelClass = "col-lg-12 col-sm-12 progressbar-label-dark";
            color = "#386e7f";
        }
        else if (currentUri.Contains("tailwind"))
        {
            CurrentTheme = Theme.Tailwind;
            labelClass = "col-lg-12 col-sm-12 progressbar-label-material";
            color = "#b1afe9";
        }
        else if (currentUri.Contains("material-dark"))
        {
            CurrentTheme = Theme.MaterialDark;
            labelClass = "col-lg-12 col-sm-12 progressbar-label-dark";
            color = "#b8b8b8";
        }
        else if (currentUri.Contains("material"))
        {
            CurrentTheme = Theme.Material;
            labelClass = "col-lg-12 col-sm-12 progressbar-label-material";
            color = "#f087ab";
        }
    }
}

<style>
    #control-container {
        padding: 0px !important;
    }

    .linear-parent {
        text-align: center;
        width: 80%;
        margin: auto;
    }

    .progressbar-label-material {
        text-align: left;
        font-family: Roboto-Regular;
        font-size: 14px;
        color: #3D3E3C;
        margin-left: 10px;
        padding: 0px;
        top: 20px;
    }

    .progressbar-label-bootstrap {
        text-align: left;
        font-family: Roboto-Regular;
        font-size: 14px;
        color: #3D3E3C;
        margin-left: 10px;
        padding: 0px;
    }

    .progressbar-label-dark {
        text-align: left;
        font-family: Roboto-Regular;
        font-size: 14px;
        color: white;
        margin-left: 10px;
        padding: 0px;
        top: 20px;
    }

    #reLoad {
        border-radius: 4px;
        text-transform: capitalize;
    }
</style>