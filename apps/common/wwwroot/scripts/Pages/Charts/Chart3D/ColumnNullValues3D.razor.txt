@page "/chart-3d/empty-point"

@using Syncfusion.Blazor
@using Syncfusion.Blazor.Chart3D
@using PointRender

@inject NavigationManager NavigationManager
@*Hidden:Lines*@
@inherits SampleBaseComponent


@*End:Hidden*@
<SampleDescription>
    <p>
        This example showcases a 3D column chart visualizing the medal count from the Tokyo Olympics using default column series points. The chart employs different colors to represent medal counts, including handling of null and zero value data within the 3D chart.
    </p>
</SampleDescription>
<ActionDescription>
    <p>
        This example demonstrates rendering and configuring a 3D column chart, adeptly handling null and zero values. Null points signify missing data, while zero is treated as a valid value within the 3D chart. 
        The <code>PointRendering</code> event for the 3D chart is utilized to render each point in the series with a distinct fill color.
        Furthermore, the <code>Chart3DTooltipSettings.Header</code> property has been employed to format the tooltip's header, while the <code>Chart3DTooltipSettings.Format</code> property can be utilized to format the tooltip's text in a 3D chart's tooltip.
    </p>
</ActionDescription>

<div class="control-section" align="center">
    <SfChart3D WallColor="transparent" EnableRotation="true" RotationAngle="7" TiltAngle="10" Depth="100" Width="@Width" Height="@Height" Title="Olympic Gold Medal Counts - Tokyo 2020" Theme="@Theme" PointRendering="Point3DRender">
        <Chart3DPrimaryXAxis ValueType="Syncfusion.Blazor.Chart3D.ValueType.Category" LabelRotationAngle="-45" Interval="1" LabelPlacement="LabelPlacement.BetweenTicks"></Chart3DPrimaryXAxis>
        <Chart3DPrimaryYAxis Maximum="20" Interval="4"></Chart3DPrimaryYAxis>
        <Chart3DSeriesCollection>
            <Chart3DSeries DataSource="@Chart3DPoints" XName="X" YName="Y" Name="Gold" ColumnSpacing="0.1" Type="Chart3DSeriesType.Column"></Chart3DSeries>
        </Chart3DSeriesCollection>
        <Chart3DTooltipSettings Enable="true" Header="${point.x}" Format="Gold Medal : <b>${point.y}"></Chart3DTooltipSettings>
        <Chart3DLegendSettings Visible="false"></Chart3DLegendSettings>
    </SfChart3D>
</div>

@code {
    private Theme Theme { get; set; }
    public string Width { get; set; }
    public string Height { get; set; } = "400";
    public List<ColumnChart3DData> Chart3DPoints { get; set; } = new List<ColumnChart3DData>
    {
         new ColumnChart3DData { X= "Italy", Y= 10 },
         new ColumnChart3DData { X= "Kenya", Y= 4 },
         new ColumnChart3DData { X= "France", Y= 10 },
         new ColumnChart3DData { X= "Hungary", Y= 0 },
         new ColumnChart3DData { X= "Australia", Y= 17 },
         new ColumnChart3DData { X= "Brazil", Y= 7 },
         new ColumnChart3DData { X= "Netherlands", Y= 10 },
         new ColumnChart3DData { X= "Unspecified", Y= double.NaN },
         new ColumnChart3DData { X= "Germany", Y= 10 },
         new ColumnChart3DData { X= "Serbia", Y= 3 }
    };

    protected override void OnInitialized()
    {
        Set3DTheme(null);
        Width = SampleService.IsDevice ? "100%" : "75%";
    }

    public void Point3DRender(Chart3DPointRenderEventArgs  args)
    {
        Set3DTheme(args);
    }

    private void Set3DTheme(Chart3DPointRenderEventArgs  args)
    {
        if (NavigationManager.Uri.IndexOf("material3") > -1)
        {
            if (NavigationManager.Uri.IndexOf("dark") > -1)
            {
                if (args == null)
                    Theme = Theme.Material3Dark;
                else
                    args.Fill = PointColor.Material3DarkColors[args.Point.Index % 10];
            }
            else
            {
                if (args == null)
                    Theme = Theme.Material3;
                else
                    args.Fill = PointColor.Material3Colors[args.Point.Index % 10];
            }
        }
        else if (NavigationManager.Uri.IndexOf("material") > -1)
        {
            if (NavigationManager.Uri.IndexOf("dark") > -1)
            {
                if (args == null)
                    Theme = Theme.MaterialDark;
                else
                    args.Fill = PointColor.MaterialDarkColors[args.Point.Index % 10];
            }
            else
            {
                if (args == null)
                    Theme = Theme.Material;
                else
                    args.Fill = PointColor.MaterialColors[args.Point.Index % 10];
            }
        }
        else if (NavigationManager.Uri.IndexOf("fabric") > -1)
        {
            if (NavigationManager.Uri.IndexOf("dark") > -1)
            {
                if (args == null)
                    Theme = Theme.FabricDark;
                else
                    args.Fill = PointColor.FabricColors[args.Point.Index % 10];
            }
            else
            {
                if (args == null)
                    Theme = Theme.Fabric;
                else
                    args.Fill = PointColor.FabricColors[args.Point.Index % 10];
            }
        }
        else if (NavigationManager.Uri.IndexOf("bootstrap5") > -1)
        {
            if (NavigationManager.Uri.IndexOf("dark") > -1)
            {
                if (args == null)
                    Theme = Theme.Bootstrap5Dark;
                else
                    args.Fill = PointColor.Bootstrap5DarkColors[args.Point.Index % 10];
            }
            else
            {
                if (args == null)
                    Theme = Theme.Bootstrap5;
                else
                    args.Fill = PointColor.Bootstrap5Colors[args.Point.Index % 10];
            }
        }
        else if (NavigationManager.Uri.IndexOf("fluent2") > -1)
        {
            // if (NavigationManager.Uri.IndexOf("highcontrast") > -1)
            // {
            //     if (args == null)
            //         Theme = Theme.Fluent2HighContrast;
            //     else
            //         args.Fill = PointColor.Fluent2HighContrastColors[args.Point.Index % 10];
            // }
            if (NavigationManager.Uri.IndexOf("dark") > -1)
            {
                if (args == null)
                    Theme = Theme.Fluent2Dark;
                else
                    args.Fill = PointColor.Fluent2DarkColors[args.Point.Index % 10];
            }
            else
            {
                if (args == null)
                    Theme = Theme.Fluent2;
                else
                    args.Fill = PointColor.Fluent2Colors[args.Point.Index % 10];
            }
        }
        else if (NavigationManager.Uri.IndexOf("fluent") > -1)
        {
            if (NavigationManager.Uri.IndexOf("dark") > -1)
            {
                if (args == null)
                    Theme = Theme.FluentDark;
                else
                    args.Fill = PointColor.FluentDarkColors[args.Point.Index % 10];
            }
            else
            {
                if (args == null)
                    Theme = Theme.Fluent;
                else
                    args.Fill = PointColor.FluentColors[args.Point.Index % 10];
            }
        }
        else if (NavigationManager.Uri.IndexOf("bootstrap4") > -1)
        {
            if (args == null)
                Theme = Theme.Bootstrap4;
            else
                args.Fill = PointColor.BootstrapColors[args.Point.Index % 10];
        }
        else if (NavigationManager.Uri.IndexOf("bootstrap") > -1)
        {
            if (NavigationManager.Uri.IndexOf("dark") > -1)
            {
                if (args == null)
                    Theme = Theme.BootstrapDark;
                else
                    args.Fill = PointColor.BootstrapColors[args.Point.Index % 10];
            }
            else
            {
                if (args == null)
                    Theme = Theme.Bootstrap;
                else
                    args.Fill = PointColor.BootstrapColors[args.Point.Index % 10];
            }
        }
        else if (NavigationManager.Uri.IndexOf("tailwind") > -1)
        {
            if (NavigationManager.Uri.IndexOf("dark") > -1)
            {
                if (args == null)
                    Theme = Theme.TailwindDark;
                else
                    args.Fill = PointColor.TailwindDarkColors[args.Point.Index % 10];
            }
            else
            {
                if (args == null)
                    Theme = Theme.Tailwind;
                else
                    args.Fill = PointColor.TailwindColors[args.Point.Index % 10];
            }
        }
        else if (NavigationManager.Uri.IndexOf("highcontrast") > -1)
        {
            if (args == null)
                Theme = Theme.HighContrast;
            else
                args.Fill = PointColor.HighContrastColors[args.Point.Index % 10];
        }
        else
        {
            if (args == null)
                Theme = Theme.Bootstrap4;
            else
                args.Fill = PointColor.BootstrapColors[args.Point.Index % 10];
        }
    }

    public class ColumnChart3DData
    {
        public string X { get; set; }
        public double Y { get; set; }
    }
}