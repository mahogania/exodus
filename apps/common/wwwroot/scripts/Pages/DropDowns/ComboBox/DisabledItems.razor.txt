@page "/ComboBox/DisabledItems"

@using Syncfusion.Blazor.DropDowns
@*Hidden:Lines*@
@inherits SampleBaseComponent
@inject NavigationManager NavigationManager


@*End:Hidden*@

<SampleDescription>
    <p>This example showcases the disabled items of ComboBox. When you type on the ComboBox the popup will open, and you will notice that the disabled items are greyed out and cannot be selected.</p>
</SampleDescription>
<ActionDescription>
   <p>The ComboBox provides options for individual items to be in either an enabled or disabled state for specific scenarios. Once an item is disabled, it cannot be selected as a value for the component. To configure the disabled item columns, use the <b>ComboBoxFieldSettings.Disabled</b> property.</p>
</ActionDescription>

<div class="col-lg-12 control-section">
    <div class="row">
        <div class="col-lg-6">
            <div class="control-wrapper">
                <label class="example-label">Status</label>
                <SfComboBox TItem="Status" TValue="string" Placeholder="Select Status" DataSource="@Data" AllowFiltering="true">
                    <ComboBoxFieldSettings Text="Text" Value="ID" Disabled="State" />
                </SfComboBox>
            </div>
        </div>
        <div class="col-lg-6">
            <div class="control-wrapper">
                <label class="example-label">Vegetable</label>
                <SfComboBox TValue="string" TItem="Vegetables" Placeholder="Select Vegetable" DataSource="@GroupData">
                    <ComboBoxFieldSettings GroupBy="Category" Text="Vegetable" Value="ID" Disabled="State" />
                </SfComboBox>
            </div>
        </div>
    </div>
</div>

<style>
    .control-wrapper {
        max-width: 250px;
        padding: 30px 0px 0px;
        margin: 0 auto;
    }

    .example-label {
        font-size: 14px;
        margin-bottom: 6px;
    }
</style>

@code {

    public class Status
    {
        public string ID { get; set; }
        public string Text { get; set; }
        public bool State { get; set; }
    }

    private List<Status> Data = new List<Status>()
    {
        new Status(){ ID = "State1", Text = "Open", State = false },
        new Status(){ ID = "State2", Text = "Waiting for Customer", State = false },
        new Status(){ ID = "State3", Text = "On Hold", State = true },
        new Status(){ ID = "State4", Text = "Follow-up", State = false },
        new Status(){ ID = "State5", Text = "Closed", State = true },
        new Status(){ ID = "State6", Text = "Solved", State = false },
        new Status(){ ID = "State7", Text = "Feature Request", State = false },

    };

    public class Vegetables
    {
        public string Vegetable { get; set; }
        public string Category { get; set; }
        public string ID { get; set; }
        public bool State { get; set; }
    }

    List<Vegetables> GroupData = new List<Vegetables>()
    {
        new Vegetables() { Vegetable = "Cabbage", Category = "Leafy and Salad", ID = "item1", State = true },
        new Vegetables() { Vegetable = "Pumpkins", Category = "Leafy and Salad", ID = "item2", State = false },
        new Vegetables() { Vegetable = "Chickpea", Category = "Beans", ID = "item3", State = true },
        new Vegetables() { Vegetable = "Garlic", Category = "Bulb and Stem", ID = "item4", State = false },
        new Vegetables() { Vegetable = "Green bean", Category = "Beans", ID = "item5", State = false },
        new Vegetables() { Vegetable = "Horse gram", Category = "Beans", ID = "item6", State = true },
        new Vegetables() { Vegetable = "Nopal", Category = "Bulb and Stem", ID = "item7", State = true },
        new Vegetables() { Vegetable = "Onion", Category = "Bulb and Stem", ID = "item8", State = false },     
        new Vegetables() { Vegetable = "Spinach", Category = "Leafy and Salad", ID = "item9", State = true },
        new Vegetables() { Vegetable = "Wheat grass", Category = "Leafy and Salad", ID = "item10", State = false },
        new Vegetables() { Vegetable = "Yarrow", Category = "Leafy and Salad", ID = "item11", State = false }
    };
}
