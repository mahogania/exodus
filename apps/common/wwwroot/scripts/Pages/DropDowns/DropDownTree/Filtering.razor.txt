@page "/DropDown-Tree/Filtering"

@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.SplitButtons
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Data

@*Hidden:Lines*@
@inherits SampleBaseComponent
@inject NavigationManager NavigationManager


@*End:Hidden*@

<SampleDescription>
    <p>This sample demonstrates the filtering functionalities of the Dropdown Tree. Click the Dropdown Tree element, and then type a character in the search box. It will display the filtered list items based on the typed characters.</p>
</SampleDescription>
<ActionDescription>
    <p>
        The Dropdown Tree component has built-in support to filter the data source when the <code>AllowFiltering</code> is enabled. It performs when the characters are typed in the search box.
    </p>
</ActionDescription>

<div class="col-lg-12">
    <div class="col-lg-8 control-section sb-property-border">
        <div class="col-lg-6">
            <div class="control-wrapper">
                <label class="example-label">List Data</label>
                <SfDropDownTree TItem="Listdata" TValue="string" ID="filter" Placeholder="Select a country" PopupHeight="230px" AllowFiltering="true" FilterBarPlaceholder="Search" FilterType="Type">
                    <DropDownTreeField TItem="Listdata" DataSource="@ListDataSource" ID="Id" ParentID="Pid" Text="Name" HasChildren="HasChild" Expanded="Expanded"></DropDownTreeField>
                </SfDropDownTree>
            </div>
        </div>
        <div class="col-lg-6">
            <div class="control-wrapper">
                <label for="multiselection" class="selection-label">Remote data</label>
                <SfDropDownTree TValue="int?" TItem="ProductCategory" ID="remote" PopupHeight="230px" Placeholder="Select a Category" AllowFiltering="true" FilterType="Type">
                    <DropDownTreeField TItem="ProductCategory" Query="@TreeQuery" ID="Id" ParentID="ParentId" Text="Name" HasChildren="HasChild" Expanded="Expanded">
                        <SfDataManager Url="https://blazor.syncfusion.com/services/production/api/treeview" CrossDomain="true" Adaptor="Syncfusion.Blazor.Adaptors.WebApiAdaptor"></SfDataManager>
                    </DropDownTreeField>
                </SfDropDownTree>
            </div>
        </div>
    </div>
    <div class="col-lg-4 property-section">
        <div class="property-panel-section">
            <div class="property-panel-header">Properties</div><div class="property-panel-content">
                <table id="property" class="property-panel-table">
                    <tbody>
                        <tr>
                            <td style="width: 30%;">
                                <div>Filter Type</div>
                            </td>
                            <td style="width: 70%;">
                                <div>
                                    <SfDropDownButton Content="@FilterTypeText" id="filter" CssClass="e-custom">
                                        <DropDownMenuItems>
                                            <DropDownMenuItem Text="Starts With"></DropDownMenuItem>
                                            <DropDownMenuItem Text="Ends With"></DropDownMenuItem>
                                            <DropDownMenuItem Text="Contains"></DropDownMenuItem>
                                        </DropDownMenuItems>
                                        <DropDownButtonEvents ItemSelected="ChangeType"></DropDownButtonEvents>
                                    </SfDropDownButton>
                                </div>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<style>
    .control-wrapper {
        max-width: 300px;
        margin: 0 auto;
        padding: 20px 0px 0px;
    }

    .e-dropdown-btn.e-custom {
        width: 150px;
    }

    .e-custom.e-dropdown-popup {
        width: 150px;
    }

</style>

@code {

    Syncfusion.Blazor.DropDowns.FilterType Type = Syncfusion.Blazor.DropDowns.FilterType.StartsWith;
    string FilterTypeText = "Starts With";
    List<string> EmployeeDetails { get; set; } = new List<string>() { "EmployeeID", "FirstName", "Title" };
    List<string> OrderDetails { get; set; } = new List<string>() { "OrderID", "EmployeeID", "ShipName" };
    Query TreeQuery;
    protected override void OnInitialized()
    {
        base.OnInitialized();
        TreeQuery = new Query();
    }
    List<Listdata> ListDataSource = new List<Listdata>
    {
        new Listdata { Id = "1", Name = "Australia", HasChild = true, Expanded = true },
        new Listdata { Id = "2", Pid = "1", Name = "New South Wales" },
        new Listdata { Id = "3", Pid = "1", Name = "Victoria" },
        new Listdata { Id = "4", Pid = "1", Name = "South Australia" },
        new Listdata { Id = "6", Pid = "1", Name = "Western Australia" },
        new Listdata { Id = "7", Name = "Brazil", HasChild = true },
        new Listdata { Id = "8", Pid = "7", Name = "Parana" },
        new Listdata { Id = "9", Pid = "7", Name = "Ceara" },
        new Listdata { Id = "10", Pid = "7", Name = "Acre" },
        new Listdata { Id = "11", Name = "China", HasChild = true },
        new Listdata { Id = "12", Pid = "11", Name = "Guangzhou" },
        new Listdata { Id = "13", Pid = "11", Name = "Shanghai" },
        new Listdata { Id = "14", Pid = "11", Name = "Beijing" },
        new Listdata { Id = "15", Pid = "11", Name = "Shantou" },
        new Listdata { Id = "16", Name = "France", HasChild = true },
        new Listdata { Id = "17", Pid = "16", Name = "Pays de la Loire" },
        new Listdata { Id = "18", Pid = "16", Name = "Aquitaine" },
        new Listdata { Id = "19", Pid = "16", Name = "Brittany" },
        new Listdata { Id = "20", Pid = "16", Name = "Lorraine" },
        new Listdata { Id = "21", Name = "India", HasChild = true },
        new Listdata { Id = "22", Pid = "21", Name = "Assam" },
        new Listdata { Id = "23", Pid = "21", Name = "Bihar" },
        new Listdata { Id = "24", Pid = "21", Name = "Tamil Nadu" }
    };

    void ChangeType(MenuEventArgs args)
    {
        switch (args.Item.Text)
        {
            case "Starts With":
                Type = Syncfusion.Blazor.DropDowns.FilterType.StartsWith;
                FilterTypeText = "Starts With";
                break;
            case "Ends With":
                Type = Syncfusion.Blazor.DropDowns.FilterType.EndsWith;
                FilterTypeText = "Ends With";
                break;
            case "Contains":
                Type = Syncfusion.Blazor.DropDowns.FilterType.Contains;
                FilterTypeText = "Contains";
                break;

        }
    }
    class ProductCategory
    {
        public int? Id { get; set; }
        public string Name { get; set; }
        public int? ParentId { get; set; }
        public bool HasChild { get; set; }
        public bool Expanded { get; set; }
    }
    class Listdata
    {
        public string Id { get; set; }
        public string Pid { get; set; }
        public string Name { get; set; }
        public bool HasChild { get; set; }
        public bool Expanded { get; set; }
    }
}
