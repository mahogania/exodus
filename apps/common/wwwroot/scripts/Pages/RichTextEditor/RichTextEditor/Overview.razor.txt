@page "/rich-text-editor/overview"
@using Syncfusion.Blazor.RichTextEditor
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.DropDowns
@inject IJSRuntime JS
@*Hidden:Lines*@
@inherits SampleBaseComponent
@inject NavigationManager NavigationManager


@*End:Hidden*@

<SampleDescription>
    <p>This sample demonstrates the full features of Rich Text Editor that includes all the tools and functionalities.</p>
</SampleDescription>
<ActionDescription>
    <p>This sample used <code>Code mirror</code> plugins helps to highlight the HTML content and when changes happens in code view, the same has been reflected in preview mode. </p>
    <p>This sample has <code>Mention</code> control integraed used to display a list of items that users can select or tag from the suggested list.</p>
    <p>The quick toolbar provides a convenient way to customize Image, Video, Audio, Table, and Link elements. Simply right-click on the desired element, utilizing the <code>showOnRightClick</code> property, and the quick toolbar will appear, providing an easy way for customization.</p>
    <p>The editor’s toolbar contains commands to format the content. The toolbar consists of:</p>
    <ul>
        <li><code>Lists</code> - NumberFormat list and BulletFormat list types.</li>
        <li><code>Links</code> - A hyperlink can be inserted into the editor for quick access to related information.</li>
        <li><code>Image</code> - Inserts and manages images.</li>
        <li><code>Table</code> - Inserts and manages Tables.</li>
        <li><code>Alignment</code> - Aligns the content with left, center, and right margins.</li>
        <li><code>Undo/Redo</code> - Allows undo/redo operations.</li>
        <li><code>Indent/ Outdent</code> - Increases/decreases the indent level of the content.</li>
        <li><code>Font</code> - Able to do styling on text like font family, size, fore color and background color.</li>
        <li><code>Lower / Upper case</code> – Changes the casing of the selected text.</li>
        <li><code>SubScript / SuperScript</code> - Makes the selected text as subscript (lower)/superscript(upper).</li>
        <li><code>FullScreen</code> - Stretches the editor to the maximum width and height of the browser window.</li>
        <li><code>Format</code> – Formats the sentence in different ways such as heading level, quotation, and code snippet</li>
        <li><code>Styles</code> – Allows you to apply inline styles to the selected content like bold, italic, and more.</li>
        <li><code>Insert Code</code> - Allows you to apply code format to the selected parent nodes. In the above sample, the style for the code format ('pre' tag) is applied by adding the background color.</li>
        <li><code>Audio</code> - Inserts and manages audios.</li>
        <li><code>Video</code> - Inserts and manages videos.</li>
    </ul>
    <p><b>Injecting Module</b></p>
    <p>The above features built as modules have to be included in your application. For example, to use image and link, inject the specific module using <code>RichTextEditor.Inject (Toolbar, Link, Image, Count, HtmlEditor, QuickToolbar, Table, FileManager, Audio, Video, PasteCleanup)</code>.</p>
</ActionDescription>

<div class="control-section">
    <div class="control-wrapper">
        <div class="">
            <SfMention TItem="PersonData" ID="RT_Editor_mention" Target="#RT_Editor .e-rte-content .e-content" DataSource="@EmailData" SortOrder="SortOrder.Ascending" AllowSpaces="true" PopupHeight="200px" PopupWidth="250px">
                <ItemTemplate>
                    <div class="editor-mention-item-template">
                        <div class="em-header">
                            <div class="em-avatar" style="background-color: @((context as PersonData).BgColor); color: @((context as PersonData).Color);">
                                <div class="em-initial">@((context as PersonData).Initial)</div>
                            </div>
                        </div>

                        <div class="em-content">
                            <div class="em-name">@((context as PersonData).Name)</div>
                            <div class="em-email">@((context as PersonData).Email)</div>
                        </div>
                    </div>
                </ItemTemplate>
                <DisplayTemplate>
                    <a href=mailto:@((context as PersonData).Email) title=@((context as PersonData).Email)> @((context as PersonData).Name)</a>
                </DisplayTemplate>
                <ChildContent>
                    <MentionFieldSettings Text="Name"></MentionFieldSettings>
                </ChildContent>
            </SfMention>
            <SfRichTextEditor @ref="EditorRef" ID="RT_Editor" ShowCharCount="true" AutoSaveOnIdle="true" EnableTabKey="true" EnableXhtml="true" Placeholder="@PlaceHolderText">
                <h1>Welcome to the Syncfusion Rich Text Editor</h1><p>The Rich Text Editor, a WYSIWYG (what you see is what you get) editor, is a user interface that allows you to create, edit, and format rich text content. You can try out a demo of this editor here.</p><h2>Do you know the key features of the editor?</h2><ul><li>Basic features include headings, block quotes, numbered lists, bullet lists, and support to insert images, tables, audio, and video.</li> <li>Inline styles include <b>bold</b>, <em>italic</em>, <span style="text-decoration: underline">underline</span>, <span style="text-decoration: line-through">strikethrough</span>, <a class="e-rte-anchor" href="https://blazor.syncfusion.com/demos/rich-text-editor/overview?theme=material3" title="https://blazor.syncfusion.com/demos/rich-text-editor/overview?theme=material3" aria-label="Open in new window">hyperlinks</a>, and more.</li> <li>The toolbar has multi-row, expandable, and scrollable modes. The Editor supports an inline toolbar, a floating toolbar, and custom toolbar items.</li> <li>Integration with Syncfusion Mention control lets users tag other users. To learn more, check out the <a class="e-rte-anchor" href="https://blazor.syncfusion.com/documentation/mention/getting-started-webapp" title="Mention Documentation" aria-label="Open in new window">documentation</a> and <a class="e-rte-anchor" href="https://blazor.syncfusion.com/demos/rich-text-editor/mention-integration?theme=material3" title="Mention Demos" aria-label="Open in new window">demos</a>.</li> <li><b>Paste from MS Word</b> - helps to reduce the effort while converting the Microsoft Word content to HTML format with format and styles. To learn more, check out the documentation <a class="e-rte-anchor" href="https://blazor.syncfusion.com/documentation/rich-text-editor/paste-cleanup" title="Paste from MS Word Documentation" aria-label="Open in new window">here</a>.</li> <li>Other features: placeholder text, character count, form validation, enter key configuration, resizable editor, IFrame rendering, tooltip, source code view, RTL mode, persistence, HTML Sanitizer, autosave, and <a class="e-rte-anchor" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.RichTextEditor.SfRichTextEditor.html" title="Rich Text Editor API" aria-label="Open in new window">more</a>.</li></ul><blockquote><p><em>Easily access Audio, Image, Link, Video, and Table operations through the quick toolbar by right-clicking on the corresponding element with your mouse.</em></p></blockquote><h2>Unlock the Power of Tables</h2><p>A table can be created in the editor using either a keyboard shortcut or the toolbar. With the quick toolbar, you can perform table cell insert, delete, split, and merge operations. You can style the table cells using background colours and borders.</p><table class="e-rte-table" style="width: 100%; min-width: 0px; height: 151px"><thead style="height: 16.5563%"><tr style="height: 16.5563%"><th style="width: 12.1813%"><span>S No</span><br/></th> <th style="width: 23.2295%"><span>Name</span><br/></th> <th style="width: 9.91501%"><span>Age</span><br/></th> <th style="width: 15.5807%"><span>Gender</span><br/></th> <th style="width: 17.9887%" class=""><span>Occupation</span><br/></th> </tr></thead> <tbody><tr style="height: 16.5563%"><td style="width: 12.1813%">1</td> <td style="width: 23.2295%">Selma Rose</td> <td style="width: 9.91501%">30</td> <td style="width: 15.5807%">Female</td> <td style="width: 17.9887%"><span>Engineer</span><br/></td> </tr> <tr style="height: 16.5563%"><td style="width: 12.1813%">2</td> <td style="width: 23.2295%"><span>Robert</span><br/></td> <td style="width: 9.91501%">28</td> <td style="width: 15.5807%">Male</td> <td style="width: 17.9887%"><span>Graphic Designer</span></td> </tr> <tr style="height: 16.5563%"><td style="width: 12.1813%">3</td> <td style="width: 23.2295%"><span>William</span><br/></td> <td style="width: 9.91501%">35</td> <td style="width: 15.5807%">Male</td> <td style="width: 17.9887%">Teacher</td> </tr> <tr style="height: 16.5563%"><td style="width: 12.1813%">4</td> <td style="width: 23.2295%"><span>Laura Grace</span><br/></td> <td style="width: 9.91501%">42</td> <td style="width: 15.5807%">Female</td> <td style="width: 17.9887%">Doctor</td> </tr> <tr style="height: 16.5563%"><td style="width: 12.1813%">5</td><td style="width: 23.2295%"><span>Andrew James</span><br/></td><td style="width: 9.91501%">45</td><td style="width: 15.5807%">Male</td><td style="width: 17.9887%">Lawyer</td></tr></tbody></table><h2>Elevating Your Content with Images</h2><p>Images can be added to the editor by pasting or dragging into the editing area, using the toolbar to insert one as a URL, or uploading directly from the File Browser. Easily manage your images on the server by configuring the <a class="e-rte-anchor" href="https://blazor.syncfusion.com/documentation/rich-text-editor/tools/insert-image" title="Insert Image Settings API" aria-label="Open in new window">insertImageSettings</a> to upload, save, or remove them. </p><p>The Editor can integrate with the Syncfusion Image Editor to crop, rotate, annotate, and apply filters to images. Check out the demos <a class="e-rte-anchor" href="https://ej2.syncfusion.com/demos/#/material/rich-text-editor/image-editor-integration.html" title="Image Editor Demo" aria-label="Open in new window">here</a>.</p><p><img alt="Sky with sun" src="https://cdn.syncfusion.com/ej2/richtexteditor-resources/RTE-Overview.png" style="width: 440px" class="e-rte-image e-imginline" /></p>
                <RichTextEditorToolbarSettings Items="@Tools">
                    <RichTextEditorEvents OnActionComplete="@OnActionCompleteHandler" />
                    <RichTextEditorCustomToolbarItems>
                        <RichTextEditorCustomToolbarItem Name="ImportFromWord">
                            <Template>
                                <button class="@buttonClass" tabindex="-1" id="custom_tbarbtn_1" style="width:100%"
                                    @onclick="importContentFromWord">
                                    <span class="e-icons e-rte-import-doc e-btn-icon"></span>
                                </button>
                            </Template>
                        </RichTextEditorCustomToolbarItem>
                        <RichTextEditorCustomToolbarItem Name="ExportToWord">
                            <Template>
                                <button class="@buttonClass" tabindex="-1" id="custom_tbarbtn_2" style="width:100%"
                                    @onclick="exportContentToWord">
                                    <span class="e-icons e-rte-export-doc e-btn-icon"></span>
                                </button>
                            </Template>
                        </RichTextEditorCustomToolbarItem>
                        <RichTextEditorCustomToolbarItem Name="ExportToPDF">
                            <Template>
                                <button class="@buttonClass" tabindex="-1" id="custom_tbarbtn_3" style="width:100%"
                                    @onclick="exportContentToPDF">
                                    <span class="e-icons e-rte-export-pdf e-btn-icon"></span>
                                </button>
                            </Template>
                        </RichTextEditorCustomToolbarItem>
                    </RichTextEditorCustomToolbarItems>
                </RichTextEditorToolbarSettings>                
                <RichTextEditorQuickToolbarSettings Table="@TableQuickToolbarItems" ShowOnRightClick="true" />
                <RichTextEditorImageSettings SaveUrl="@SaveURL" Path="@Path"></RichTextEditorImageSettings>
            </SfRichTextEditor>
            <div style="display:none;"> 
                <SfUploader  ID="rteCustomWordUpload" HtmlAttributes="@NameAttribute" AllowedExtensions=".docx,.doc,.rtf">
                    <UploaderAsyncSettings SaveUrl="https://blazor.syncfusion.com/services/production/api/RichTextEditor/ImportFromWord"></UploaderAsyncSettings>
                    <UploaderEvents Success="@Success"></UploaderEvents>
                </SfUploader>
            </div>
        </div>
    </div>
</div>

<style>
    .editor-mention-item-template {
        width: 100%;
        height: 100%;
        display: flex;
        flex-direction: row;
        align-items: center;
    }

    .em-content {
        display: flex;
        flex-direction: column;
        justify-content: center;
    }

    .em-avatar {
        width: 32px;
        height: 32px;
        text-align: center;
        border-radius: 50%;
        font-size: 12px;
        font-weight: 500;
        text-indent: 0px;
        line-height: 13px;
        color: #fff;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .em-name {
        color: rgb(16, 24, 40);
        font-size: 14px;
        font-weight: 400;
        line-height: 14px;
        margin-bottom: 5px;
    }

    .em-email {
        color: gray;
        font-size: 12px;
        font-weight: 400;
        line-height: 14px;
    }

    #RT_Editor_mention_options li {
        padding: 10px;
        height: 60px;
    }

    body[class*="-dark"] .em-name {
        color: #fff !important;
    }
    .e-code-mirror::before {
        content: '\e345';
    }

    .e-html-preview::before {
        content: '\e350';
    }

    .e-richtexteditor.e-rte-full-screen {
        top: 48px;
    }

    .CodeMirror-linenumber,
    .CodeMirror-gutters {
        display: none;
    }

    .sb-header {
        z-index: 100;
    }

    .fabric-dark .cm-s-default .cm-tag,
    .bootstrap5-dark .cm-s-default .cm-tag,
    .material-dark .cm-s-default .cm-tag,
    .tailwind-dark .cm-s-default .cm-tag,
    .highcontrast .cm-s-default .cm-tag {
        color: #00ff00;
    }

    .fabric-dark .cm-s-default .cm-string,
    .bootstrap5-dark .cm-s-default .cm-string,
    .material-dark .cm-s-default .cm-string,
    .tailwind-dark .cm-s-default .cm-string {
        color: blue;
    }

    .highcontrast .cm-s-default .cm-string {
        color: #ffd939;
    }

    .fabric-dark .cm-s-default .cm-attribute,
    .bootstrap5-dark .cm-s-default .cm-attribute,
    .material-dark .cm-s-default .cm-attribute,
    .tailwind-dark .cm-s-default .cm-attribute,
    .highcontrast .cm-s-default .cm-attribute {
        color: #f00;
    }

    .fabric-dark .CodeMirror,
    .bootstrap5-dark .CodeMirror,
    .material-dark .CodeMirror,
    .tailwind-dark .CodeMirror {
     background: #303030;
    }

    .highcontrast .CodeMirror {
        background: black;
    }

    .e-richtexteditor .e-rte-content .e-content pre {
        padding: 10px;
        background: #F4F5F7;
    }

    .fabric-dark .e-richtexteditor .e-rte-content .e-content pre,
    .bootstrap5-dark .e-richtexteditor .e-rte-content .e-content pre,
    .material-dark .e-richtexteditor .e-rte-content .e-content pre,
    .tailwind-dark .e-richtexteditor .e-rte-content .e-content pre,
    .highcontrast .e-richtexteditor .e-rte-content .e-content pre,
    .fluent-dark .e-richtexteditor .e-rte-content .e-content pre,
    .material3-dark .e-richtexteditor .e-rte-content .e-content pre,
    {
        padding: 10px;
        background: #303030;
    }

    @@media print {
        a, a:visited {
            color: blue !important;
            text-decoration: underline;
        }

            a[href^="javascript:"]:after, a[href^="#"]:after {
                content: "";
            }

            a[href]:after {
                content: "";
            }
    }

    .sb-content div#navigation-btn,
    .sb-content .sb-toolbar-splitter {
        z-index: 0
    }
</style>

@code {
    SfRichTextEditor EditorRef;
    private string SaveURL = "https://blazor.syncfusion.com/services/production/api/RichTextEditor/SaveFile";
    private string Path = "https://blazor.syncfusion.com/services/production/RichTextEditor/";
    private string PlaceHolderText = "Type something or use @ to tag a user...";
    Dictionary<string, object> NameAttribute = new Dictionary<string, object>()
    {
       { "name", "UploadFiles" }
    };
    string buttonClass = "e-tbar-btn e-control e-btn e-lib e-icon-btn";
    private void OnActionCompleteHandler(Syncfusion.Blazor.RichTextEditor.ActionCompleteEventArgs args)
    {
        if (args.RequestType == "SourceCode")
        {
            this.buttonClass = "e-tbar-btn e-control e-btn e-lib e-icon-btn e-overlay";
        }
        if (args.RequestType == "Preview")
        {
            this.buttonClass = "e-tbar-btn e-control e-btn e-lib e-icon-btn";
        }
    }
    private async Task importContentFromWord()
    {
        var result = await JS.InvokeAsync<string>("customJsFunctions.importContentFromWord");
    }
    private async Task exportContentToWord()
    {
        var HTMLContent = await EditorRef.GetXhtmlAsync();
        var result = await JS.InvokeAsync<string>("customJsFunctions.exportContentToWord", HTMLContent);
    }
    private async Task exportContentToPDF()
    {
        var HTMLContent = await EditorRef.GetXhtmlAsync();
        var result = await JS.InvokeAsync<string>("customJsFunctions.exportContentToPDF", HTMLContent);
    }
    private async Task Success(SuccessEventArgs args) {
        var InnerHTML = args.Response.ResponseText;
        await this.EditorRef.ExecuteCommandAsync(CommandName.InsertHTML, InnerHTML, new ExecuteCommandOption(){Undo=true});
    }
    
    private List<ToolbarItemModel> Tools = new List<ToolbarItemModel>()
    {
        new ToolbarItemModel() { Command = ToolbarCommand.Undo },
        new ToolbarItemModel() { Command = ToolbarCommand.Redo },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Name = "ImportFromWord", TooltipText = "ImportFromWord" },
        new ToolbarItemModel() { Name = "ExportToWord", TooltipText = "ExportToWord" },
        new ToolbarItemModel() { Name = "ExportToPDF", TooltipText = "ExportToPDF" },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.Bold },
        new ToolbarItemModel() { Command = ToolbarCommand.Italic },
        new ToolbarItemModel() { Command = ToolbarCommand.Underline },
        new ToolbarItemModel() { Command = ToolbarCommand.StrikeThrough },
        new ToolbarItemModel() { Command = ToolbarCommand.SuperScript },
        new ToolbarItemModel() { Command = ToolbarCommand.SubScript },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.FontName },
        new ToolbarItemModel() { Command = ToolbarCommand.FontSize },
        new ToolbarItemModel() { Command = ToolbarCommand.FontColor },
        new ToolbarItemModel() { Command = ToolbarCommand.BackgroundColor },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.LowerCase },
        new ToolbarItemModel() { Command = ToolbarCommand.UpperCase },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.Formats },
        new ToolbarItemModel() { Command = ToolbarCommand.Alignments },
        new ToolbarItemModel() { Command = ToolbarCommand.Blockquote },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.NumberFormatList },
        new ToolbarItemModel() { Command = ToolbarCommand.BulletFormatList },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.Outdent },
        new ToolbarItemModel() { Command = ToolbarCommand.Indent },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.CreateLink },
        new ToolbarItemModel() { Command = ToolbarCommand.Image },
        new ToolbarItemModel() { Command = ToolbarCommand.Video },
        new ToolbarItemModel() { Command = ToolbarCommand.Audio },
        new ToolbarItemModel() { Command = ToolbarCommand.CreateTable },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.ClearFormat },
        new ToolbarItemModel() { Command = ToolbarCommand.Print },
        new ToolbarItemModel() { Command = ToolbarCommand.SourceCode },
        new ToolbarItemModel() { Command = ToolbarCommand.FullScreen },
    };
    private List<TableToolbarItemModel> TableQuickToolbarItems = new List<TableToolbarItemModel>()
    {
        new TableToolbarItemModel() { Command = TableToolbarCommand.TableHeader },
        new TableToolbarItemModel() { Command = TableToolbarCommand.TableRows },
        new TableToolbarItemModel() { Command = TableToolbarCommand.TableColumns },
        new TableToolbarItemModel() { Command = TableToolbarCommand.TableCell },
        new TableToolbarItemModel() { Command = TableToolbarCommand.HorizontalSeparator },
        new TableToolbarItemModel() { Command = TableToolbarCommand.BackgroundColor },
        new TableToolbarItemModel() { Command = TableToolbarCommand.TableRemove },
        new TableToolbarItemModel() { Command = TableToolbarCommand.TableCellVerticalAlign },
        new TableToolbarItemModel() { Command = TableToolbarCommand.Styles }
    };

    public class PersonData
    {
        public string Name { get; set; }
        public string Initial { get; set; }
        public string Email { get; set; }
        public string Color { get; set; }
        public string BgColor { get; set; }
    }
    List<PersonData> EmailData = new List<PersonData> {
        new PersonData() { Name= "Selma Rose", Initial= "SR", Email= "selma@gmail.com", Color= "#FAFDFF", BgColor= "#01579B" },
        new PersonData() { Name= "Maria", Initial= "MA", Email= "maria@gmail.com", Color= "#004378", BgColor= "#ADDBFF" },
        new PersonData() { Name= "Russo Kay", Initial= "RK", Email= "russo@gmail.com", Color= "#F9DEDC", BgColor= "#8C1D18" },
        new PersonData() { Name= "Robert", Initial= "RO", Email= "robert@gmail.com", Color= "#FFD6F7", BgColor= "#37003A" },
        new PersonData() { Name= "Camden Kate", Initial= "CK", Email= "camden@gmail.com", Color= "#FFFFFF", BgColor= "#464ECF" },
        new PersonData() { Name= "Garth", Initial= "GA", Email= "garth@gmail.com", Color= "#FFFFFF", BgColor= "#008861" },
        new PersonData() { Name= "Andrew James", Initial= "AJ", Email= "james@gmail.com", Color= "#FFFFFF", BgColor= "#53CA17" },
        new PersonData() { Name= "Olivia", Initial= "OL", Email= "olivia@gmail.com", Color= "#FFFFFF", BgColor= "#8C1D18" },
        new PersonData() { Name= "Sophia", Initial= "SO", Email= "sophia@gmail.com", Color= "#000000", BgColor= "#D0BCFF" },
        new PersonData() { Name= "Margaret", Initial= "MA", Email= "margaret@gmail.com", Color= "#000000", BgColor= "#F2B8B5" },
        new PersonData() { Name= "Ursula Ann", Initial= "UA", Email= "ursula@gmail.com", Color= "#000000", BgColor= "#47ACFB" },
        new PersonData() { Name= "Laura Grace", Initial= "LG", Email= "laura@gmail.com", Color= "#000000", BgColor= "#FFE088" },
        new PersonData() { Name= "Albert", Initial= "AL", Email= "albert@gmail.com", Color= "#FFFFFF", BgColor= "#00335B" },
        new PersonData() { Name= "William", Initial= "WA", Email= "william@gmail.com", Color= "#FFFFFF", BgColor= "#163E02" }
    };
}

@*
Please refer to the below code snippet for customJsFunctions.js

window.customJsFunctions = {
    importContentFromWord: function () {
        window.sfBlazor.instances["rteCustomWordUpload"].element.click();
    },
    exportContentToPDF: function (rteHtmlData) {
        const hostUrl = 'https://blazor.syncfusion.com/services/production/';
        const html = `<html><head></head><body>${rteHtmlData}</body></html>`;
        fetch(hostUrl + 'api/RichTextEditor/ExportToPdf', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ html: html }) // Wrap HTML in a JSON object
        }).then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }
                return response.blob();
            }).then(blob => {
                const url = window.URL.createObjectURL(blob);       // Create a Blob URL from the response and initiate the download
                const a = document.createElement('a');   // Create an anchor element
                a.href = url;
                a.download = 'Sample.pdf';
                document.body.appendChild(a);             // Append the anchor element to the document
                a.click();                                // Trigger a click on the anchor element to initiate the download
                document.body.removeChild(a);             // Remove the anchor element from the document
                window.URL.revokeObjectURL(url);          // Revoke the object URL to free up resources
            })
            .catch(error => {
                console.error('Fetch error:', error);
            });
    },
    exportContentToWord: function (rteHtmlData) {
        const hostUrl = 'https://blazor.syncfusion.com/services/production/';
        const html = `<html><head></head><body>${rteHtmlData}</body></html>`;
        fetch(hostUrl + 'api/RichTextEditor/ExportToDocx', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ html: html }) // Wrap HTML in a JSON object
        })
        .then(response => {
            if (!response.ok) {
                throw new Error(`HTTP error! Status: ${response.status}`);
            }
            const filename = 'Result.docx';
            // Create a Blob from the response and initiate the download
            return response.blob().then(blob => ({ blob, filename }));
        })
        .then(({ blob, filename }) => {
            const url = window.URL.createObjectURL(blob);       // Create a Blob URL from the response and initiate the download    
            const a = document.createElement('a');              // Create an anchor element
            a.href = url;
            a.download = filename;
            document.body.appendChild(a);                       // Append the anchor element to the document
            a.click();                                          // Trigger a click on the anchor element to initiate the download
            document.body.removeChild(a);                       // Remove the anchor element from the document
            window.URL.revokeObjectURL(url);                    // Revoke the object URL to free up resources
        })
        .catch(error => {
            console.error('Fetch error:', error);
        });
    }
};*@
